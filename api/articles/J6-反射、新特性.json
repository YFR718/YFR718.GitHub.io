{"title":"反射、新特性","uid":"9a9e7d03fd63b8b9dd7648918fd31ad5","slug":"J6-反射、新特性","date":"2021-11-12T02:31:21.000Z","updated":"2021-11-12T08:13:39.364Z","comments":true,"path":"api/articles/J6-反射、新特性.json","keywords":null,"cover":"https://img-blog.csdnimg.cn/64f64be78a9b4ed28b7623027f591b4b.jpg?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBAWUZSNzE4,size_20,color_FFFFFF,t_70,g_se,x_16#pic_center","content":"<h1 id=\"1-Java反射机制\"><a href=\"#1-Java反射机制\" class=\"headerlink\" title=\"1. Java反射机制\"></a>1. Java反射机制</h1><h2 id=\"1-1-Java反射机制概述\"><a href=\"#1-1-Java反射机制概述\" class=\"headerlink\" title=\"1.1 Java反射机制概述\"></a>1.1 Java反射机制概述</h2><h2 id=\"1-2-理解Class类并获取Class实例\"><a href=\"#1-2-理解Class类并获取Class实例\" class=\"headerlink\" title=\"1.2 理解Class类并获取Class实例\"></a>1.2 理解Class类并获取Class实例</h2><h2 id=\"1-3-类的加载与ClassLoader的理解\"><a href=\"#1-3-类的加载与ClassLoader的理解\" class=\"headerlink\" title=\"1.3 类的加载与ClassLoader的理解\"></a>1.3 类的加载与ClassLoader的理解</h2><h2 id=\"1-4-创建运行时类的对象\"><a href=\"#1-4-创建运行时类的对象\" class=\"headerlink\" title=\"1.4 创建运行时类的对象\"></a>1.4 创建运行时类的对象</h2><h2 id=\"1-5-获取运行时类的完整结构\"><a href=\"#1-5-获取运行时类的完整结构\" class=\"headerlink\" title=\"1.5 获取运行时类的完整结构\"></a>1.5 获取运行时类的完整结构</h2><h2 id=\"1-6-调用运行时类的指定结构\"><a href=\"#1-6-调用运行时类的指定结构\" class=\"headerlink\" title=\"1.6 调用运行时类的指定结构\"></a>1.6 调用运行时类的指定结构</h2><h2 id=\"1-7-反射的应用：动态代理\"><a href=\"#1-7-反射的应用：动态代理\" class=\"headerlink\" title=\"1.7 反射的应用：动态代理\"></a>1.7 反射的应用：动态代理</h2><h1 id=\"2-Java8的其它新特性\"><a href=\"#2-Java8的其它新特性\" class=\"headerlink\" title=\"2. Java8的其它新特性\"></a>2. Java8的其它新特性</h1><h2 id=\"2-1-Lambda表达式\"><a href=\"#2-1-Lambda表达式\" class=\"headerlink\" title=\"2.1 Lambda表达式\"></a>2.1 Lambda表达式</h2><h2 id=\"2-2-函数式-Functional-接口\"><a href=\"#2-2-函数式-Functional-接口\" class=\"headerlink\" title=\"2.2 函数式(Functional)接口\"></a>2.2 函数式(Functional)接口</h2><h2 id=\"2-3-方法引用与构造器引用\"><a href=\"#2-3-方法引用与构造器引用\" class=\"headerlink\" title=\"2.3 方法引用与构造器引用\"></a>2.3 方法引用与构造器引用</h2><h2 id=\"2-4-强大的Stream-API\"><a href=\"#2-4-强大的Stream-API\" class=\"headerlink\" title=\"2.4 强大的Stream API\"></a>2.4 强大的Stream API</h2><h2 id=\"2-5-Optional类\"><a href=\"#2-5-Optional类\" class=\"headerlink\" title=\"2.5 Optional类\"></a>2.5 Optional类</h2><h1 id=\"Java9-amp-Java10-amp-Java11新特性\"><a href=\"#Java9-amp-Java10-amp-Java11新特性\" class=\"headerlink\" title=\"Java9&Java10& Java11新特性\"></a>Java9&amp;Java10&amp; Java11新特性</h1><h2 id=\"3-1-Java-9-的新特性\"><a href=\"#3-1-Java-9-的新特性\" class=\"headerlink\" title=\"3.1 Java 9 的新特性\"></a>3.1 Java 9 的新特性</h2><h2 id=\"3-2-Java-10-的新特性\"><a href=\"#3-2-Java-10-的新特性\" class=\"headerlink\" title=\"3.2 Java 10 的新特性\"></a>3.2 Java 10 的新特性</h2><h2 id=\"3-3-Java-11-的新特性\"><a href=\"#3-3-Java-11-的新特性\" class=\"headerlink\" title=\"3.3 Java 11 的新特性\"></a>3.3 Java 11 的新特性</h2>","text":"1. Java反射机制1.1 Java反射机制概述1.2 理解Class类并获取Class实例1.3 类的加载与ClassLoader的理解1.4 创建运行时类的对象1.5 获取运行时类的完整结构1.6 调用运行时类的指定结构1.7 反射的应用：动态代理2. Java8的其它新特...","link":"","photos":[],"count_time":{"symbolsCount":297,"symbolsTime":"1 mins."},"categories":[{"name":"JAVA","slug":"JAVA","count":6,"path":"api/categories/JAVA.json"}],"tags":[{"name":"java","slug":"java","count":6,"path":"api/tags/java.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#1-Java%E5%8F%8D%E5%B0%84%E6%9C%BA%E5%88%B6\"><span class=\"toc-text\">1. Java反射机制</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#1-1-Java%E5%8F%8D%E5%B0%84%E6%9C%BA%E5%88%B6%E6%A6%82%E8%BF%B0\"><span class=\"toc-text\">1.1 Java反射机制概述</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#1-2-%E7%90%86%E8%A7%A3Class%E7%B1%BB%E5%B9%B6%E8%8E%B7%E5%8F%96Class%E5%AE%9E%E4%BE%8B\"><span class=\"toc-text\">1.2 理解Class类并获取Class实例</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#1-3-%E7%B1%BB%E7%9A%84%E5%8A%A0%E8%BD%BD%E4%B8%8EClassLoader%E7%9A%84%E7%90%86%E8%A7%A3\"><span class=\"toc-text\">1.3 类的加载与ClassLoader的理解</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#1-4-%E5%88%9B%E5%BB%BA%E8%BF%90%E8%A1%8C%E6%97%B6%E7%B1%BB%E7%9A%84%E5%AF%B9%E8%B1%A1\"><span class=\"toc-text\">1.4 创建运行时类的对象</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#1-5-%E8%8E%B7%E5%8F%96%E8%BF%90%E8%A1%8C%E6%97%B6%E7%B1%BB%E7%9A%84%E5%AE%8C%E6%95%B4%E7%BB%93%E6%9E%84\"><span class=\"toc-text\">1.5 获取运行时类的完整结构</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#1-6-%E8%B0%83%E7%94%A8%E8%BF%90%E8%A1%8C%E6%97%B6%E7%B1%BB%E7%9A%84%E6%8C%87%E5%AE%9A%E7%BB%93%E6%9E%84\"><span class=\"toc-text\">1.6 调用运行时类的指定结构</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#1-7-%E5%8F%8D%E5%B0%84%E7%9A%84%E5%BA%94%E7%94%A8%EF%BC%9A%E5%8A%A8%E6%80%81%E4%BB%A3%E7%90%86\"><span class=\"toc-text\">1.7 反射的应用：动态代理</span></a></li></ol></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#2-Java8%E7%9A%84%E5%85%B6%E5%AE%83%E6%96%B0%E7%89%B9%E6%80%A7\"><span class=\"toc-text\">2. Java8的其它新特性</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#2-1-Lambda%E8%A1%A8%E8%BE%BE%E5%BC%8F\"><span class=\"toc-text\">2.1 Lambda表达式</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#2-2-%E5%87%BD%E6%95%B0%E5%BC%8F-Functional-%E6%8E%A5%E5%8F%A3\"><span class=\"toc-text\">2.2 函数式(Functional)接口</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#2-3-%E6%96%B9%E6%B3%95%E5%BC%95%E7%94%A8%E4%B8%8E%E6%9E%84%E9%80%A0%E5%99%A8%E5%BC%95%E7%94%A8\"><span class=\"toc-text\">2.3 方法引用与构造器引用</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#2-4-%E5%BC%BA%E5%A4%A7%E7%9A%84Stream-API\"><span class=\"toc-text\">2.4 强大的Stream API</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#2-5-Optional%E7%B1%BB\"><span class=\"toc-text\">2.5 Optional类</span></a></li></ol></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#Java9-amp-Java10-amp-Java11%E6%96%B0%E7%89%B9%E6%80%A7\"><span class=\"toc-text\">Java9&amp;Java10&amp; Java11新特性</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#3-1-Java-9-%E7%9A%84%E6%96%B0%E7%89%B9%E6%80%A7\"><span class=\"toc-text\">3.1 Java 9 的新特性</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#3-2-Java-10-%E7%9A%84%E6%96%B0%E7%89%B9%E6%80%A7\"><span class=\"toc-text\">3.2 Java 10 的新特性</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#3-3-Java-11-%E7%9A%84%E6%96%B0%E7%89%B9%E6%80%A7\"><span class=\"toc-text\">3.3 Java 11 的新特性</span></a></li></ol></li></ol>","author":{"name":"YFR718","slug":"blog-author","avatar":"https://avatars.githubusercontent.com/u/47553658?s=400&u=5e0a85700c66d7a2661c5664ec5f24d94e5ed01a&v=4","link":"/","description":"大数据萌新","socials":{"github":"https://github.com/YFR718","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"d","csdn":"","juejin":"","customs":{}}},"mapped":true,"prev_post":{"title":"Hadoop ing","uid":"7ca75cf71c3ba27225807c4b0387518a","slug":"B2-Hadoop","date":"2021-11-12T11:13:22.000Z","updated":"2021-11-16T09:02:17.809Z","comments":true,"path":"api/articles/B2-Hadoop.json","keywords":null,"cover":"https://img-blog.csdnimg.cn/0c9f61a46aa44eb396187322d87d7f20.jpg?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBAWUZSNzE4,size_20,color_FFFFFF,t_70,g_se,x_16#pic_center","text":"大数据概念大数据（Big Data）：指无法在一定时间范围内用常规软件工具进行捕捉、管理和处理的数据集合，是需要新处理模式才能具有更强的决策力、洞察发现力和流程优化能力的海量、高增长率和多样化的信息资产。大数据主要解决，海量数据的采集、存储和分析计算问题。 ⭐大数据特点（4V） ...","link":"","photos":[],"count_time":{"symbolsCount":"14k","symbolsTime":"13 mins."},"categories":[{"name":"大数据","slug":"大数据","count":4,"path":"api/categories/大数据.json"}],"tags":[{"name":"Hadoop","slug":"Hadoop","count":2,"path":"api/tags/Hadoop.json"}],"author":{"name":"YFR718","slug":"blog-author","avatar":"https://avatars.githubusercontent.com/u/47553658?s=400&u=5e0a85700c66d7a2661c5664ec5f24d94e5ed01a&v=4","link":"/","description":"大数据萌新","socials":{"github":"https://github.com/YFR718","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"d","csdn":"","juejin":"","customs":{}}}},"next_post":{"title":"IO、网络编程","uid":"8bbd211a4ba9676d95abee1aaae0937f","slug":"J5-IO、网络编程","date":"2021-11-12T02:31:03.000Z","updated":"2021-11-12T07:49:55.498Z","comments":true,"path":"api/articles/J5-IO、网络编程.json","keywords":null,"cover":"https://img-blog.csdnimg.cn/b0800299144a42068df6728fac896d25.jpg?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBAWUZSNzE4,size_20,color_FFFFFF,t_70,g_se,x_16#pic_center","text":"1. IO流1.1 File类的使用1.2 IO流原理及流的分类1.3 节点流(或文件流)1.4 缓冲流1.5 转换流1.6 标准输入、输出流1.7 打印流1.8 数据流1.9 对象流1.10 随机存取文件流1.11 NIO.2中Path、Paths、 Files类的使用2. 网...","link":"","photos":[],"count_time":{"symbolsCount":226,"symbolsTime":"1 mins."},"categories":[{"name":"JAVA","slug":"JAVA","count":6,"path":"api/categories/JAVA.json"}],"tags":[{"name":"java","slug":"java","count":6,"path":"api/tags/java.json"}],"author":{"name":"YFR718","slug":"blog-author","avatar":"https://avatars.githubusercontent.com/u/47553658?s=400&u=5e0a85700c66d7a2661c5664ec5f24d94e5ed01a&v=4","link":"/","description":"大数据萌新","socials":{"github":"https://github.com/YFR718","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"d","csdn":"","juejin":"","customs":{}}}}}