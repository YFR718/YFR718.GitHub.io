{"title":"B6.Hive基础","uid":"5703ea14901e0d80ea4ba70122c1bc16","slug":"B6-Hive基础","date":"2021-11-17T14:38:57.000Z","updated":"2021-12-12T08:32:35.993Z","comments":true,"path":"api/articles/B6-Hive基础.json","keywords":null,"cover":"https://img-blog.csdnimg.cn/b7c2e703b02b42d7a3510faec5b14a00.jpg?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBAWUZSNzE4,size_20,color_FFFFFF,t_70,g_se,x_16#pic_center","content":"<h1 id=\"1-Hive-基本概念\"><a href=\"#1-Hive-基本概念\" class=\"headerlink\" title=\"1. Hive 基本概念\"></a>1. Hive 基本概念</h1><h2 id=\"1-1-Hive概述\"><a href=\"#1-1-Hive概述\" class=\"headerlink\" title=\"1.1 Hive概述\"></a>1.1 Hive概述</h2><p>​        Hive：由 Facebook 开源用于解决海量结构化日志的数据统计工具。<br>​        Hive 是基于 Hadoop 的一个数据仓库工具，可以将结构化的数据文件映射为一张表，并提供类 SQL 查询功能。</p>\n<p><strong>Hive 本质：</strong>将 HQL 转化成 MapReduce 程序</p>\n<p><img src=\"https://img-blog.csdnimg.cn/89f8a48893a94587b62428ad5f99f357.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAWUZSNzE4,size_20,color_FFFFFF,t_70,g_se,x_16\" alt=\"\"></p>\n<p>（1）Hive 处理的数据存储在 HDFS<br>（2）Hive 分析数据底层的实现是 MapReduce<br>（3）执行程序运行在 Yarn 上</p>\n<p><strong>Hive优点：</strong></p>\n<ol>\n<li>操作接口采用类 SQL 语法，提供快速开发的能力（简单、容易上手）。</li>\n<li>避免了去写 MapReduce，减少开发人员的学习成本。 </li>\n<li>Hive 的执行延迟比较高，因此 Hive 常用于数据分析，对实时性要求不高的场合。 </li>\n<li>Hive 优势在于处理大数据，对于处理小数据没有优势，因为 Hive 的执行延迟比较高。</li>\n<li>Hive 支持用户自定义函数，用户可以根据自己的需求来实现自己的函数。</li>\n</ol>\n<p><strong>Hive缺点：</strong></p>\n<ol>\n<li>Hive 的 HQL 表达能力有限<ul>\n<li>迭代式算法无法表达</li>\n<li>数据挖掘方面不擅长，由于 MapReduce 数据处理流程的限制，效率更高的算法却无法实现。</li>\n</ul>\n</li>\n<li>Hive 的效率比较低<ul>\n<li>Hive 自动生成的 MapReduce 作业，通常情况下不够智能化</li>\n<li>Hive 调优比较困难，粒度较粗</li>\n</ul>\n</li>\n</ol>\n<h2 id=\"1-2-Hive架构原理\"><a href=\"#1-2-Hive架构原理\" class=\"headerlink\" title=\"1.2 Hive架构原理\"></a>1.2 Hive架构原理</h2><p><img src=\"https://img-blog.csdnimg.cn/c4da7aab55cb472ebd7addcbc03f0043.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAWUZSNzE4,size_20,color_FFFFFF,t_70,g_se,x_16\" alt=\"\"></p>\n<ol>\n<li><strong>用户接口：Client</strong><br>CLI（command-line interface）、JDBC/ODBC(jdbc 访问 hive)、WEBUI（浏览器访问 hive）</li>\n<li><strong>元数据：Metastore</strong><br>元数据包括：表名、表所属的数据库（默认是 default）、表的拥有者、列/分区字段、表的类型（是否是外部表）、表的数据所在目录等；默认存储在自带的 derby 数据库中，推荐使用 MySQL 存储 Metastore</li>\n<li><strong>Hadoop</strong><br>使用 HDFS 进行存储，使用 MapReduce 进行计算。</li>\n<li><strong>驱动器：Driver</strong><br>（1）解析器（SQL Parser）：将 SQL 字符串转换成抽象语法树 AST，这一步一般都用第三方工具库完成，比如 antlr；对 AST 进行语法分析，比如表是否存在、字段是否存在、SQL语义是否有误。<br>（2）编译器（Physical Plan）：将 AST 编译生成逻辑执行计划。<br>（3）优化器（Query Optimizer）：对逻辑执行计划进行优化。<br>（4）执行器（Execution）：把逻辑执行计划转换成可以运行的物理计划。对于 Hive 来说，就是 MR/Spark。</li>\n</ol>\n<p><img src=\"https://img-blog.csdnimg.cn/2326b16d9c414a4b8ee69d9b2560a259.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAWUZSNzE4,size_20,color_FFFFFF,t_70,g_se,x_16\" alt=\"\"></p>\n<p>​        Hive 通过给用户提供的一系列交互接口，接收到用户的指令(SQL)，使用自己的 Driver，结合元数据(MetaStore)，将这些指令翻译成 MapReduce，提交到 Hadoop 中执行，最后，将执行返回的结果输出到用户交互接口。</p>\n<h2 id=\"1-3-Hive-和数据库比较\"><a href=\"#1-3-Hive-和数据库比较\" class=\"headerlink\" title=\"1.3  Hive 和数据库比较\"></a>1.3  Hive 和数据库比较</h2><ol>\n<li><strong>查询语言</strong><br>由于 SQL 被广泛的应用在数据仓库中，因此，专门针对 Hive 的特性设计了类 SQL 的查询语言 HQL。熟悉 SQL 开发的开发者可以很方便的使用 Hive 进行开发。</li>\n<li><strong>数据更新</strong><br>由于 Hive 是针对数据仓库应用设计的，而数据仓库的内容是读多写少的。因此，Hive 中 不建议对数据的改写，所有的数据都是在加载的时候确定好的。而数据库中的数据通常是需要经常进行修改的，因此可以使用 INSERT INTO … VALUES 添加数据，使用 UPDATE … SET 修改数据。</li>\n<li><strong>执行延迟</strong><br>Hive 在查询数据的时候，由于没有索引，需要扫描整个表，因此延迟较高。另外一个导致 Hive 执行延迟高的因素是 MapReduce 框架。由于 MapReduce 本身具有较高的延迟，因此在利用 MapReduce 执行 Hive 查询时，也会有较高的延迟。相对的，数据库的执行延迟较低。当然，这个低是有条件的，即数据规模较小，当数据规模大到超过数据库的处理能力的时候，Hive 的并行计算显然能体现出优势。</li>\n<li><strong>数据规模</strong><br>由于 Hive 建立在集群上并可以利用 MapReduce 进行并行计算，因此可以支持很大规模的数据；对应的，数据库可以支持的数据规模较小。</li>\n</ol>\n<h1 id=\"2-Hive-安装\"><a href=\"#2-Hive-安装\" class=\"headerlink\" title=\"2. Hive 安装\"></a>2. Hive 安装</h1><h2 id=\"2-1-Hive-安装地址\"><a href=\"#2-1-Hive-安装地址\" class=\"headerlink\" title=\"2.1  Hive 安装地址\"></a>2.1  Hive 安装地址</h2><p>1）Hive 官网地址：<a href=\"http://hive.apache.org/\">http://hive.apache.org/</a><br>2）文档查看地址：<a href=\"https://cwiki.apache.org/confluence/display/Hive/GettingStarted\">https://cwiki.apache.org/confluence/display/Hive/GettingStarted</a><br>3）下载地址：<a href=\"http://archive.apache.org/dist/hive/\">http://archive.apache.org/dist/hive/</a><br>4）github 地址：<a href=\"https://github.com/apache/hive\">https://github.com/apache/hive</a></p>\n<h2 id=\"2-2-Hive-安装部署\"><a href=\"#2-2-Hive-安装部署\" class=\"headerlink\" title=\"2.2 Hive 安装部署\"></a>2.2 Hive 安装部署</h2><h3 id=\"安装-Hive\"><a href=\"#安装-Hive\" class=\"headerlink\" title=\"安装 Hive\"></a>安装 Hive</h3><p>1）把 apache-hive-3.1.2-bin.tar.gz 上传到 linux 的/opt/software 目录下<br>2）解压 apache-hive-3.1.2-bin.tar.gz 到/opt/module/目录下面</p>\n<pre class=\"line-numbers language-shell\" data-language=\"shell\"><code class=\"language-shell\">[atguigu@hadoop102 software]$ tar -zxvf /opt/software/apache-hive-3.1.2-bin.tar.gz -C /opt/module/<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>3）修改 apache-hive-3.1.2-bin.tar.gz 的名称为 hive</p>\n<pre class=\"line-numbers language-shell\" data-language=\"shell\"><code class=\"language-shell\">[atguigu@hadoop102 software]$ mv /opt/module/apache-hive-3.1.2-bin/ /opt/module/hive<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>4）修改/etc/profile.d/my_env.sh，添加环境变量</p>\n<pre class=\"line-numbers language-shell\" data-language=\"shell\"><code class=\"language-shell\">[atguigu@hadoop102 software]$ sudo vim /etc/profile.d/my_env.sh<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>5）添加内容</p>\n<pre class=\"line-numbers language-shell\" data-language=\"shell\"><code class=\"language-shell\">#HIVE_HOME\nexport HIVE_HOME=/opt/module/hive\nexport PATH=$PATH:$HIVE_HOME/bin<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n<p>6）解决日志 Jar 包冲突</p>\n<pre class=\"line-numbers language-shell\" data-language=\"shell\"><code class=\"language-shell\">[atguigu@hadoop102 software]$ mv $HIVE_HOME/lib/log4j-slf4j-impl-2.10.0.jar $HIVE_HOME/lib/log4j-slf4j-impl-2.10.0.bak<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>7）初始化元数据库</p>\n<pre class=\"line-numbers language-shell\" data-language=\"shell\"><code class=\"language-shell\">[atguigu@hadoop102 hive]$ bin/schematool -dbType derby -initSchema<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<h3 id=\"启动并使用-Hive\"><a href=\"#启动并使用-Hive\" class=\"headerlink\" title=\"启动并使用 Hive\"></a>启动并使用 Hive</h3><pre class=\"line-numbers language-SQL\" data-language=\"SQL\"><code class=\"language-SQL\"># 1）启动 Hive\n[atguigu@hadoop102 hive]$ bin/hive\n# 2）使用 Hive\nhive&gt; show databases;\nhive&gt; show tables;\nhive&gt; create table test(id int);\nhive&gt; insert into test values(1);\nhive&gt; select * from test; \n# 3）在 CRT 窗口中开启另一个窗口开启 Hive，在/tmp/atguigu 目录下监控 hive.log 文件\nCaused by: ERROR XSDB6: Another instance of Derby may have already booted \nthe database /opt/module/hive/metastore_db.\n at \norg.apache.derby.iapi.error.StandardException.newException(Unknown \nSource)\n at \norg.apache.derby.iapi.error.StandardException.newException(Unknown\n\nSource)\n at \norg.apache.derby.impl.store.raw.data.BaseDataFileFactory.privGetJBMSLockO\nnDB(Unknown Source)\n at \norg.apache.derby.impl.store.raw.data.BaseDataFileFactory.run(Unknown \nSource)\n...\n#原因在于 Hive 默认使用的元数据库为 derby，开启 Hive 之后就会占用元数据库，且不与其他客户端共享数据，所以我们需要将 Hive 的元数据地址改为 MySQL。<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h2 id=\"2-3-MySQL-安装\"><a href=\"#2-3-MySQL-安装\" class=\"headerlink\" title=\"2.3 MySQL 安装\"></a>2.3 MySQL 安装</h2><p>1）检查当前系统是否安装过 MySQL</p>\n<pre class=\"line-numbers language-shell\" data-language=\"shell\"><code class=\"language-shell\">[atguigu@hadoop102 ~]$ rpm -qa|grep mariadb\nmariadb-libs-5.5.56-2.el7.x86_64 \n//如果存在通过如下命令卸载\n[atguigu @hadoop102 ~]$ sudo rpm -e --nodeps mariadb-libs<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n<p>2）将 MySQL 安装包拷贝到/opt/software 目录下</p>\n<pre class=\"line-numbers language-shell\" data-language=\"shell\"><code class=\"language-shell\">[atguigu @hadoop102 software]# ll\n总用量 528384\n-rw-r--r--. 1 root root 609556480 3 月 21 15:41 mysql-5.7.28-1.el7.x86_64.rpm-bundle.tar<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n<p>3）解压 MySQL 安装包</p>\n<pre class=\"line-numbers language-shell\" data-language=\"shell\"><code class=\"language-shell\">[atguigu @hadoop102 software]# tar -xf mysql-5.7.28-1.el7.x86_64.rpm bundle.tar<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>4）在安装目录下执行 rpm 安装</p>\n<pre class=\"line-numbers language-shell\" data-language=\"shell\"><code class=\"language-shell\">[atguigu @hadoop102 software]$ \nsudo rpm -ivh mysql-community-common-5.7.28-1.el7.x86_64.rpm\nsudo rpm -ivh mysql-community-libs-5.7.28-1.el7.x86_64.rpm\nsudo rpm -ivh mysql-community-libs-compat-5.7.28-1.el7.x86_64.rpm\nsudo rpm -ivh mysql-community-client-5.7.28-1.el7.x86_64.rpm\nsudo rpm -ivh mysql-community-server-5.7.28-1.el7.x86_64.rpm<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p><strong>注意:按照顺序依次执行</strong><br>如果 Linux 是最小化安装的，在安装 mysql-community-server-5.7.28-1.el7.x86_64.rpm 时可能会出现如下错误</p>\n<pre class=\"line-numbers language-shell\" data-language=\"shell\"><code class=\"language-shell\">[atguigu@hadoop102 software]$ sudo rpm -ivh mysql-community-server-5.7.281.el7.x86_64.rpm\n警告：mysql-community-server-5.7.28-1.el7.x86_64.rpm: 头 V3 DSA/SHA1 Signature, 密钥 ID 5072e1f5: NOKEY\n错误：依赖检测失败：\n libaio.so.1()(64bit) 被 mysql-community-server-5.7.28-1.el7.x86_64 需要\n libaio.so.1(LIBAIO_0.1)(64bit) 被 mysql-community-server-5.7.28-1.el7.x86_64 需要\n libaio.so.1(LIBAIO_0.4)(64bit) 被 mysql-community-server-5.7.28-1.el7.x86_64 需要<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p><strong>通过 yum 安装缺少的依赖,然后重新安装 mysql-community-server-5.7.28-1.el7.x86_64 即可</strong></p>\n<pre class=\"line-numbers language-shell\" data-language=\"shell\"><code class=\"language-shell\">[atguigu@hadoop102 software] yum install -y libaio<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>5）删除/etc/my.cnf 文件中 datadir 指向的目录下的所有内容,如果有内容的情况下:<br> 查看 datadir 的值：</p>\n<pre class=\"line-numbers language-shell\" data-language=\"shell\"><code class=\"language-shell\">[mysqld]\ndatadir=/var/lib/mysql<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n<p> 删除/var/lib/mysql 目录下的所有内容: </p>\n<pre class=\"line-numbers language-shell\" data-language=\"shell\"><code class=\"language-shell\">[atguigu @hadoop102 mysql]# cd /var/lib/mysql\n[atguigu @hadoop102 mysql]# sudo rm -rf ./* //注意执行命令的位置<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n<p>6）初始化数据库</p>\n<pre class=\"line-numbers language-shell\" data-language=\"shell\"><code class=\"language-shell\">[atguigu @hadoop102 opt]$ sudo mysqld --initialize --user=mysql<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>7）查看临时生成的 root 用户的密码</p>\n<pre class=\"line-numbers language-shell\" data-language=\"shell\"><code class=\"language-shell\">[atguigu @hadoop102 opt]$ sudo cat /var/log/mysqld.log <span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>8）启动 MySQL 服务</p>\n<pre class=\"line-numbers language-shell\" data-language=\"shell\"><code class=\"language-shell\">[atguigu @hadoop102 opt]$ sudo systemctl start mysqld<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>9）登录 MySQL 数据库</p>\n<pre class=\"line-numbers language-shell\" data-language=\"shell\"><code class=\"language-shell\">[atguigu @hadoop102 opt]$​ mysql -uroot -p\nEnter password: 输入临时生成的密码\n 登录成功.<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n<p>10）必须先修改 root 用户的密码,否则执行其他的操作会报错</p>\n<pre class=\"line-numbers language-shell\" data-language=\"shell\"><code class=\"language-shell\">mysql&gt; set password = password(\"新密码\");<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>11）修改 mysql 库下的 user 表中的 root 用户允许任意 ip 连接</p>\n<pre class=\"line-numbers language-shell\" data-language=\"shell\"><code class=\"language-shell\">mysql&gt; update mysql.user set host='%' where user='root';\nmysql&gt; flush privileges;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n<h2 id=\"2-4-Hive-元数据配置到-MySQL\"><a href=\"#2-4-Hive-元数据配置到-MySQL\" class=\"headerlink\" title=\"2.4 Hive 元数据配置到 MySQL\"></a>2.4 Hive 元数据配置到 MySQL</h2><p><strong>拷贝驱动</strong><br>将 MySQL 的 JDBC 驱动拷贝到 Hive 的 lib 目录下</p>\n<pre class=\"line-numbers language-shell\" data-language=\"shell\"><code class=\"language-shell\">[atguigu@hadoop102 software]$ cp /opt/software/mysql-connector-java-5.1.37.jar $HIVE_HOME/lib<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p><strong>配置 Metastore 到 MySQL</strong><br>1）在HIVE_HOME/conf 目录下新建 hive-site.xml 文件</p>\n<pre class=\"line-numbers language-shell\" data-language=\"shell\"><code class=\"language-shell\">[atguigu@hadoop102 software]$ vim $HIVE_HOME/conf/hive-site.xml<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>添加如下内容</p>\n<pre class=\"line-numbers language-xml\" data-language=\"xml\"><code class=\"language-xml\"><span class=\"token prolog\">&lt;?xml version=\"1.0\"?&gt;</span>\n<span class=\"token prolog\">&lt;?xml-stylesheet type=\"text/xsl\" href=\"configuration.xsl\"?&gt;</span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>configuration</span><span class=\"token punctuation\">&gt;</span></span>\n <span class=\"token comment\">&lt;!-- jdbc 连接的 URL --&gt;</span>\n <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>property</span><span class=\"token punctuation\">&gt;</span></span>\n <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>name</span><span class=\"token punctuation\">&gt;</span></span>javax.jdo.option.ConnectionURL<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>name</span><span class=\"token punctuation\">&gt;</span></span>\n <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>value</span><span class=\"token punctuation\">&gt;</span></span>jdbc:mysql://hadoop102:3306/metastore?useSSL=false<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>value</span><span class=\"token punctuation\">&gt;</span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>property</span><span class=\"token punctuation\">&gt;</span></span>\n <span class=\"token comment\">&lt;!-- jdbc 连接的 Driver--&gt;</span>\n <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>property</span><span class=\"token punctuation\">&gt;</span></span>\n <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>name</span><span class=\"token punctuation\">&gt;</span></span>javax.jdo.option.ConnectionDriverName<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>name</span><span class=\"token punctuation\">&gt;</span></span>\n <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>value</span><span class=\"token punctuation\">&gt;</span></span>com.mysql.jdbc.Driver<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>value</span><span class=\"token punctuation\">&gt;</span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>property</span><span class=\"token punctuation\">&gt;</span></span>\n<span class=\"token comment\">&lt;!-- jdbc 连接的 username--&gt;</span>\n <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>property</span><span class=\"token punctuation\">&gt;</span></span>\n <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>name</span><span class=\"token punctuation\">&gt;</span></span>javax.jdo.option.ConnectionUserName<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>name</span><span class=\"token punctuation\">&gt;</span></span>\n <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>value</span><span class=\"token punctuation\">&gt;</span></span>root<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>value</span><span class=\"token punctuation\">&gt;</span></span>\n <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>property</span><span class=\"token punctuation\">&gt;</span></span>\n <span class=\"token comment\">&lt;!-- jdbc 连接的 password --&gt;</span>\n <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>property</span><span class=\"token punctuation\">&gt;</span></span>\n <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>name</span><span class=\"token punctuation\">&gt;</span></span>javax.jdo.option.ConnectionPassword<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>name</span><span class=\"token punctuation\">&gt;</span></span>\n <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>value</span><span class=\"token punctuation\">&gt;</span></span>000000<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>value</span><span class=\"token punctuation\">&gt;</span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>property</span><span class=\"token punctuation\">&gt;</span></span>\n <span class=\"token comment\">&lt;!-- Hive 元数据存储版本的验证 --&gt;</span>\n <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>property</span><span class=\"token punctuation\">&gt;</span></span>\n <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>name</span><span class=\"token punctuation\">&gt;</span></span>hive.metastore.schema.verification<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>name</span><span class=\"token punctuation\">&gt;</span></span>\n <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>value</span><span class=\"token punctuation\">&gt;</span></span>false<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>value</span><span class=\"token punctuation\">&gt;</span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>property</span><span class=\"token punctuation\">&gt;</span></span>\n <span class=\"token comment\">&lt;!--元数据存储授权--&gt;</span>\n <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>property</span><span class=\"token punctuation\">&gt;</span></span>\n <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>name</span><span class=\"token punctuation\">&gt;</span></span>hive.metastore.event.db.notification.api.auth<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>name</span><span class=\"token punctuation\">&gt;</span></span>\n <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>value</span><span class=\"token punctuation\">&gt;</span></span>false<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>value</span><span class=\"token punctuation\">&gt;</span></span>\n <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>property</span><span class=\"token punctuation\">&gt;</span></span>\n <span class=\"token comment\">&lt;!-- Hive 默认在 HDFS 的工作目录 --&gt;</span>\n <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>property</span><span class=\"token punctuation\">&gt;</span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>name</span><span class=\"token punctuation\">&gt;</span></span>hive.metastore.warehouse.dir<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>name</span><span class=\"token punctuation\">&gt;</span></span>\n <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>value</span><span class=\"token punctuation\">&gt;</span></span>/user/hive/warehouse<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>value</span><span class=\"token punctuation\">&gt;</span></span>\n <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>property</span><span class=\"token punctuation\">&gt;</span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>configuration</span><span class=\"token punctuation\">&gt;</span></span> <span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>2）登陆 MySQL</p>\n<pre class=\"line-numbers language-shell\" data-language=\"shell\"><code class=\"language-shell\">[atguigu@hadoop102 software]$ mysql -uroot -p000000<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>3）新建 Hive 元数据库</p>\n<pre class=\"line-numbers language-shell\" data-language=\"shell\"><code class=\"language-shell\">mysql&gt; create database metastore;\nmysql&gt; quit;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n<p>4） 初始化 Hive 元数据库</p>\n<pre class=\"line-numbers language-shell\" data-language=\"shell\"><code class=\"language-shell\">[atguigu@hadoop102 software]$ schematool -initSchema -dbType mysql -verbose<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p><strong>再次启动 Hive</strong><br>1）启动 Hive</p>\n<pre class=\"line-numbers language-shell\" data-language=\"shell\"><code class=\"language-shell\">[atguigu@hadoop102 hive]$ bin/hive<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>2）使用 Hive</p>\n<pre class=\"line-numbers language-shell\" data-language=\"shell\"><code class=\"language-shell\">hive&gt; show databases;\nhive&gt; show tables;\nhive&gt; create table test (id int);\nhive&gt; insert into test values(1);\nhive&gt; select * from test; 3）在 CRT 窗口中开启另一个窗口开启 Hive\nhive&gt; show databases;\nhive&gt; show tables;\nhive&gt; select * from aa;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h2 id=\"2-5-使用元数据服务的方式访问-Hive\"><a href=\"#2-5-使用元数据服务的方式访问-Hive\" class=\"headerlink\" title=\"2.5 使用元数据服务的方式访问 Hive\"></a>2.5 使用元数据服务的方式访问 Hive</h2><p>1）在 hive-site.xml 文件中添加如下配置信息</p>\n<pre class=\"line-numbers language-xml\" data-language=\"xml\"><code class=\"language-xml\"><span class=\"token comment\">&lt;!-- 指定存储元数据要连接的地址 --&gt;</span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>property</span><span class=\"token punctuation\">&gt;</span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>name</span><span class=\"token punctuation\">&gt;</span></span>hive.metastore.uris<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>name</span><span class=\"token punctuation\">&gt;</span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>value</span><span class=\"token punctuation\">&gt;</span></span>thrift://hadoop102:9083<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>value</span><span class=\"token punctuation\">&gt;</span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>property</span><span class=\"token punctuation\">&gt;</span></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>2）启动 metastore</p>\n<pre class=\"line-numbers language-shell\" data-language=\"shell\"><code class=\"language-shell\">[atguigu@hadoop202 hive]$ hive --service metastore\n2020-04-24 16:58:08: Starting Hive Metastore Server<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n<p>注意: 启动后窗口不能再操作，需打开一个新的 shell 窗口做别的操作<br>3）启动 hive</p>\n<pre class=\"line-numbers language-shell\" data-language=\"shell\"><code class=\"language-shell\">[atguigu@hadoop202 hive]$ bin/hive<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<h2 id=\"2-6-使用-JDBC-方式访问-Hive\"><a href=\"#2-6-使用-JDBC-方式访问-Hive\" class=\"headerlink\" title=\"2.6 使用 JDBC 方式访问 Hive\"></a>2.6 使用 JDBC 方式访问 Hive</h2><p>1）在 hive-site.xml 文件中添加如下配置信息</p>\n<pre class=\"line-numbers language-xml\" data-language=\"xml\"><code class=\"language-xml\"><span class=\"token comment\">&lt;!-- 指定 hiveserver2 连接的 host --&gt;</span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>property</span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>name</span><span class=\"token punctuation\">&gt;</span></span>hive.server2.thrift.bind.host<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>name</span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>value</span><span class=\"token punctuation\">&gt;</span></span>hadoop102<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>value</span><span class=\"token punctuation\">&gt;</span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>property</span><span class=\"token punctuation\">&gt;</span></span>\n<span class=\"token comment\">&lt;!-- 指定 hiveserver2 连接的端口号 --&gt;</span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>property</span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>name</span><span class=\"token punctuation\">&gt;</span></span>hive.server2.thrift.port<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>name</span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>value</span><span class=\"token punctuation\">&gt;</span></span>10000<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>value</span><span class=\"token punctuation\">&gt;</span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>property</span><span class=\"token punctuation\">&gt;</span></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>2）启动 hiveserver2</p>\n<pre class=\"line-numbers language-shell\" data-language=\"shell\"><code class=\"language-shell\">[atguigu@hadoop102 hive]$ bin/hive --service hiveserver2<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>3）启动 beeline 客户端（需要多等待一会）</p>\n<pre class=\"line-numbers language-shell\" data-language=\"shell\"><code class=\"language-shell\">[atguigu@hadoop102 hive]$ bin/beeline -u jdbc:hive2://hadoop102:10000 -n atguigu<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>4）看到如下界面</p>\n<pre class=\"line-numbers language-shell\" data-language=\"shell\"><code class=\"language-shell\">Connecting to jdbc:hive2://hadoop102:10000\nConnected to: Apache Hive (version 3.1.2)\nDriver: Hive JDBC (version 3.1.2)\nTransaction isolation: TRANSACTION_REPEATABLE_READ\nBeeline version 3.1.2 by Apache Hive\n0: jdbc:hive2://hadoop102:10000&gt;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>5）编写 hive 服务启动脚本（了解）</p>\n<ol>\n<li><p>前台启动的方式导致需要打开多个 shell 窗口，可以使用如下方式后台方式启动<br>nohup: 放在命令开头，表示不挂起,也就是关闭终端进程也继续保持运行状态<br>/dev/null：是 Linux 文件系统中的一个文件，被称为黑洞，所有写入改文件的内容都会被自动丢弃<br>2&gt;&amp;1 : 表示将错误重定向到标准输出上<br>&amp;: 放在命令结尾,表示后台运行<br>一般会组合使用: nohup [xxx 命令操作]&gt; file 2&gt;&amp;1 &amp;，表示将 xxx 命令运行的结果输出到 file 中，并保持命令启动的进程在后台运行。<br>如上命令不要求掌握。</p>\n<pre class=\"line-numbers language-shell\" data-language=\"shell\"><code class=\"language-shell\">[atguigu@hadoop202 hive]$ nohup hive --service metastore 2&gt;&amp;1 &amp;\n[atguigu@hadoop202 hive]$ nohup hive --service hiveserver2 2&gt;&amp;1 &amp;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n</li>\n<li><p>为了方便使用，可以直接编写脚本来管理服务的启动和关闭</p>\n<pre class=\"line-numbers language-shell\" data-language=\"shell\"><code class=\"language-shell\">[atguigu@hadoop102 hive]$ vim $HIVE_HOME/bin/hiveservices.sh<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>内容如下：此脚本的编写不要求掌握。直接拿来使用即可。</p>\n<pre class=\"line-numbers language-shell\" data-language=\"shell\"><code class=\"language-shell\">#!/bin/bash\nHIVE_LOG_DIR=$HIVE_HOME/logs\nif [ ! -d $HIVE_LOG_DIR ]\nthen\n\tmkdir -p $HIVE_LOG_DIR\nfi#检查进程是否运行正常，参数 1 为进程名，参数 2 为进程端口\nfunction check_process(){\n\tpid=$(ps -ef 2&gt;/dev/null | grep -v grep | grep -i $1 | awk '{print $2}')\n\tppid=$(netstat -nltp 2&gt;/dev/null | grep $2 | awk '{print $7}' | cut -d '/' -f 1)\n\techo $pid\n\t[[ \"$pid\" =~ \"$ppid\" ]] &amp;&amp; [ \"$ppid\" ] &amp;&amp; return 0 || return 1\n}\nfunction hive_start(){\n\tmetapid=$(check_process HiveMetastore 9083)\n\tcmd=\"nohup hive --service metastore &gt;$HIVE_LOG_DIR/metastore.log 2&gt;&amp;1 &amp;\"\n\t[ -z \"$metapid\" ] &amp;&amp; eval $cmd || echo \"Metastroe 服务已启动\"\n\tserver2pid=$(check_process HiveServer2 10000)\n\tcmd=\"nohup hiveserver2 &gt;$HIVE_LOG_DIR/hiveServer2.log 2&gt;&amp;1 &amp;\"\n\t[ -z \"$server2pid\" ] &amp;&amp; eval $cmd || echo \"HiveServer2 服务已启动\" \n}\n\nfunction hive_stop(){\n\tmetapid=$(check_process HiveMetastore 9083)\n\t[ \"$metapid\" ] &amp;&amp; kill $metapid || echo \"Metastore 服务未启动\"\n\tserver2pid=$(check_process HiveServer2 10000)\n\t[ \"$server2pid\" ] &amp;&amp; kill $server2pid || echo \"HiveServer2 服务未启动\" \n}\ncase $1 in\n\"start\")\n\thive_start\n\t;;\n\"stop\")\n\thive_stop\n\t;;\n\"restart\")\n\thive_stop\n\tsleep 2\n\thive_start\n\t;;\n\"status\")\n\tcheck_process HiveMetastore 9083 &gt;/dev/null &amp;&amp; echo \"Metastore 服务运行正常\" || echo \"Metastore 服务运行异常\"\n\tcheck_process HiveServer2 10000 &gt;/dev/null &amp;&amp; echo \"HiveServer2 服务运行正常\" || echo \"HiveServer2 服务运行异常\"\n\t;;\n*)\n\techo Invalid Args!\n\techo 'Usage: '$(basename $0)' start|stop|restart|status'\n\t;;\nesac<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>3）添加执行权限</p>\n<pre class=\"line-numbers language-shell\" data-language=\"shell\"><code class=\"language-shell\">[atguigu@hadoop102 hive]$ chmod +x $HIVE_HOME/bin/hiveservices.sh<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>4）启动 Hive 后台服务</p>\n<pre class=\"line-numbers language-shell\" data-language=\"shell\"><code class=\"language-shell\">[atguigu@hadoop102 hive]$ hiveservices.sh start<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n</li>\n</ol>\n<h2 id=\"2-7-Hive-常用交互命令\"><a href=\"#2-7-Hive-常用交互命令\" class=\"headerlink\" title=\"2.7 Hive 常用交互命令\"></a>2.7 Hive 常用交互命令</h2><pre class=\"line-numbers language-shell\" data-language=\"shell\"><code class=\"language-shell\">[atguigu@hadoop102 hive]$ bin/hive -help\nusage: hive\n-d,--define &lt;key=value&gt; Variable subsitution to apply to hive\n commands. e.g. -d A=B or --define A=B\n --database &lt;databasename&gt; Specify the database to use\n-e &lt;quoted-query-string&gt; SQL from command line\n-f &lt;filename&gt; SQL from files\n-H,--help Print help information\n --hiveconf &lt;property=value&gt; Use value for given property\n --hivevar &lt;key=value&gt; Variable subsitution to apply to hive\n commands. e.g. --hivevar A=B\n-i &lt;filename&gt; Initialization SQL file\n-S,--silent Silent mode in interactive shell\n-v,--verbose Verbose mode (echo executed SQL to the \nconsole)<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<ol>\n<li>“-e”不进入 hive 的交互窗口执行 sql 语句</li>\n</ol>\n<pre class=\"line-numbers language-shell\" data-language=\"shell\"><code class=\"language-shell\">[atguigu@hadoop102 hive]$ bin/hive -e \"select id from student;\"<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<ol>\n<li><p>“-f”执行脚本中 sql 语句<br>（1）在/opt/module/hive/下创建 datas 目录并在 datas 目录下创建 hivef.sql 文件</p>\n<pre class=\"line-numbers language-shell\" data-language=\"shell\"><code class=\"language-shell\">[atguigu@hadoop102 datas]$ touch hivef.sql<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>（2）文件中写入正确的 sql 语句</p>\n<pre class=\"line-numbers language-shell\" data-language=\"shell\"><code class=\"language-shell\">select *from student;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>（3）执行文件中的 sql 语句</p>\n<pre class=\"line-numbers language-shell\" data-language=\"shell\"><code class=\"language-shell\">[atguigu@hadoop102 hive]$ bin/hive -f /opt/module/hive/datas/hivef.sql<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>（4）执行文件中的 sql 语句并将结果写入文件中</p>\n<pre class=\"line-numbers language-shell\" data-language=\"shell\"><code class=\"language-shell\">[atguigu@hadoop102 hive]$ bin/hive -f /opt/module/hive/datas/hivef.sql &gt; /opt/module/datas/hive_result.txt<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n</li>\n</ol>\n<h2 id=\"2-8-Hive-其他命令操作\"><a href=\"#2-8-Hive-其他命令操作\" class=\"headerlink\" title=\"2.8 Hive 其他命令操作\"></a>2.8 Hive 其他命令操作</h2><p>1）退出 hive 窗口：</p>\n<pre class=\"line-numbers language-shell\" data-language=\"shell\"><code class=\"language-shell\">hive(default)&gt;exit;\nhive(default)&gt;quit;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n<p>2）在 hive cli 命令窗口中如何查看 hdfs 文件系统</p>\n<pre class=\"line-numbers language-shell\" data-language=\"shell\"><code class=\"language-shell\">hive(default)&gt;dfs -ls /;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>3）查看在 hive 中输入的所有历史命令<br>（1）进入到当前用户的根目录 /root 或/home/atguigu<br>（2）查看. hivehistory 文件</p>\n<pre class=\"line-numbers language-shell\" data-language=\"shell\"><code class=\"language-shell\">[atguig2u@hadoop102 ~]$ cat .hivehistory<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<h2 id=\"2-9-Hive-常见属性配置\"><a href=\"#2-9-Hive-常见属性配置\" class=\"headerlink\" title=\"2.9 Hive 常见属性配置\"></a>2.9 Hive 常见属性配置</h2><p><strong>Hive 运行日志信息配置</strong><br>1）Hive 的 log 默认存放在/tmp/atguigu/hive.log 目录下（当前用户名下）<br>2）修改 hive 的 log 存放日志到/opt/module/hive/logs<br>（1）修改/opt/module/hive/conf/hive-log4j2.properties.template 文件名称为<br>hive-log4j2.properties</p>\n<pre class=\"line-numbers language-shell\" data-language=\"shell\"><code class=\"language-shell\">[atguigu@hadoop102 conf]$ pwd\n/opt/module/hive/conf\n[atguigu@hadoop102 conf]$ mv hive-log4j2.properties.template hive log4j2.properties<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n<p>（2）在 hive-log4j2.properties 文件中修改 log 存放位置</p>\n<pre class=\"line-numbers language-shell\" data-language=\"shell\"><code class=\"language-shell\">hive.log.dir=/opt/module/hive/logs<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>2.9.2 打印 当前库 和 表头<br>在 hive-site.xml 中加入如下两个配置:</p>\n<pre class=\"line-numbers language-shell\" data-language=\"shell\"><code class=\"language-shell\">&lt;property&gt;\n&lt;name&gt;hive.cli.print.header&lt;/name&gt;\n&lt;value&gt;true&lt;/value&gt;\n&lt;/property&gt;\n&lt;property&gt;\n&lt;name&gt;hive.cli.print.current.db&lt;/name&gt;\n&lt;value&gt;true&lt;/value&gt;\n&lt;/property&gt;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>2.9.3 参数配置方式<br>1）查看当前所有的配置信息<br>hive&gt;set;<br>2）参数的配置三种方式<br>（1）配置文件方式<br>默认配置文件：hive-default.xml<br>用户自定义配置文件：hive-site.xml<br>注意：用户自定义配置会覆盖默认配置。另外，Hive 也会读入 Hadoop 的配置，因为 Hive<br>是作为 Hadoop 的客户端启动的，Hive 的配置会覆盖 Hadoop 的配置。配置文件的设定对本<br>机启动的所有 Hive 进程都有效。<br>（2）命令行参数方式<br>启动 Hive 时，可以在命令行添加-hiveconf param=value 来设定参数。</p>\n<pre class=\"line-numbers language-shell\" data-language=\"shell\"><code class=\"language-shell\">[atguigu@hadoop103 hive]$ bin/hive -hiveconf mapred.reduce.tasks=10;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>注意：仅对本次 hive 启动有效<br>查看参数设置：</p>\n<pre class=\"line-numbers language-shell\" data-language=\"shell\"><code class=\"language-shell\">hive (default)&gt; set mapred.reduce.tasks;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>（3）参数声明方式<br>可以在 HQL 中使用 SET 关键字设定参数</p>\n<pre class=\"line-numbers language-shell\" data-language=\"shell\"><code class=\"language-shell\">hive (default)&gt; set mapred.reduce.tasks=100;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>注意：仅对本次 hive 启动有效。<br>查看参数设置</p>\n<pre class=\"line-numbers language-shell\" data-language=\"shell\"><code class=\"language-shell\">hive (default)&gt; set mapred.reduce.tasks;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>​        上述三种设定方式的优先级依次递增。即配置文件&lt;命令行参数&lt;参数声明。注意某些系统级的参数，例如 log4j 相关的设定，必须用前两种方式设定，因为那些参数的读取在会话建立以前已经完成了。</p>\n<h1 id=\"3-Hive-数据类型\"><a href=\"#3-Hive-数据类型\" class=\"headerlink\" title=\"3. Hive 数据类型\"></a>3. Hive 数据类型</h1><h2 id=\"3-1-基本数据类型\"><a href=\"#3-1-基本数据类型\" class=\"headerlink\" title=\"3.1 基本数据类型\"></a>3.1 基本数据类型</h2><div class=\"table-container\">\n<table>\n<thead>\n<tr>\n<th>Hive数据类型</th>\n<th>Java数据类型</th>\n<th>长度</th>\n<th>例子</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>TINYINT</td>\n<td>byte</td>\n<td>1byte有符号整数</td>\n<td>20</td>\n</tr>\n<tr>\n<td>SMALINT</td>\n<td>short</td>\n<td>2byte有符号整数</td>\n<td>20</td>\n</tr>\n<tr>\n<td>INT</td>\n<td>int</td>\n<td>4byte有符号整数</td>\n<td>20</td>\n</tr>\n<tr>\n<td>BIG INT</td>\n<td>long</td>\n<td>8byte有符号整数</td>\n<td>20</td>\n</tr>\n<tr>\n<td>BOOL EAN</td>\n<td>boolean</td>\n<td>布尔类型，true或者false</td>\n<td>TRUE FALSE</td>\n</tr>\n<tr>\n<td>FLOAT</td>\n<td>float</td>\n<td>单精度浮点数</td>\n<td>3.14159</td>\n</tr>\n<tr>\n<td>DOUBLE</td>\n<td>double</td>\n<td>双精度浮点数</td>\n<td>3.14159</td>\n</tr>\n<tr>\n<td>STRING</td>\n<td>string</td>\n<td>字符系列。可以指定字符集。<br>可以使用单引号或者双引号。</td>\n<td></td>\n</tr>\n<tr>\n<td>TIMESTAMP</td>\n<td></td>\n<td>时间类型</td>\n<td></td>\n</tr>\n<tr>\n<td>BINARY</td>\n<td></td>\n<td>字节数组</td>\n</tr>\n</tbody>\n</table>\n</div>\n<p>​        对于 Hive 的 String 类型相当于数据库的 varchar 类型，该类型是一个可变的字符串，不过它不能声明其中最多能存储多少个字符，理论上它可以存储 2GB 的字符数。</p>\n<h2 id=\"3-2-集合数据类型\"><a href=\"#3-2-集合数据类型\" class=\"headerlink\" title=\"3.2 集合数据类型\"></a>3.2 集合数据类型</h2><div class=\"table-container\">\n<table>\n<thead>\n<tr>\n<th>数据类型</th>\n<th>描述</th>\n<th>语法示例</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>STRUCT</td>\n<td>和 c 语言中的 struct 类似，都可以通过“点”符号访问元素内容。例如，如果某个列的数据类型是 STRUCT{first STRING, last STRING},那么第 1 个元素可以通过字段.first 来引用。</td>\n<td>struct<street:string, city:string=\"\"></street:string,></td>\n</tr>\n<tr>\n<td>MAP</td>\n<td>MAP 是一组键-值对元组集合，使用数组表示法可以访问数据。例如，如果某个列的数据类型是 MAP，其中键-&gt;值对是’first’-&gt;’John’和’last’-&gt;’Doe’，那么可以通过字段名[‘last’]获取最后一个元素</td>\n<td>map<string, int=\"\"></string,></td>\n</tr>\n<tr>\n<td>ARRAY</td>\n<td>数组是一组具有相同类型和名称的变量的集合。这些变量称为数组的元素，每个数组元素都有一个编号，编号从零开始。例如，数组值为[‘John’, ‘Doe’]，那么第 2 个元素可以通过数组名[1]进行引用。</td>\n<td>array<string></string></td>\n</tr>\n</tbody>\n</table>\n</div>\n<p>​        Hive 有三种复杂数据类型 ARRAY、MAP 和 STRUCT。ARRAY 和 MAP 与 Java 中的 Array和 Map 类似，而 STRUCT 与 C 语言中的 Struct 类似，它封装了一个命名字段集合，复杂数据类型允许任意层次的嵌套。</p>\n<p><strong>案例实操</strong></p>\n<ol>\n<li><p>假设某表有如下一行，我们用 JSON 格式来表示其数据结构。在 Hive 下访问的格式为</p>\n<pre class=\"line-numbers language-json\" data-language=\"json\"><code class=\"language-json\"><span class=\"token punctuation\">{</span>\n    <span class=\"token property\">\"name\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"songsong\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"friends\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"bingbing\"</span> <span class=\"token punctuation\">,</span> <span class=\"token string\">\"lili\"</span><span class=\"token punctuation\">]</span> <span class=\"token punctuation\">,</span> <span class=\"token comment\">//列表 Array, </span>\n    <span class=\"token property\">\"children\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span> <span class=\"token comment\">//键值 Map,</span>\n        <span class=\"token property\">\"xiao song\"</span><span class=\"token operator\">:</span> <span class=\"token number\">18</span> <span class=\"token punctuation\">,</span>\n        <span class=\"token property\">\"xiaoxiao song\"</span><span class=\"token operator\">:</span> <span class=\"token number\">19</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token property\">\"address\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span> <span class=\"token comment\">//结构 Struct,</span>\n        <span class=\"token property\">\"street\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"hui long guan\"</span><span class=\"token punctuation\">,</span>\n        <span class=\"token property\">\"city\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"beijing\"</span>\n    <span class=\"token punctuation\">}</span> \n<span class=\"token punctuation\">}</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n</li>\n<li><p>基于上述数据结构，我们在 Hive 里创建对应的表，并导入数据。<br>创建本地测试文件 test.txt</p>\n<pre class=\"line-numbers language-shell\" data-language=\"shell\"><code class=\"language-shell\">songsong,bingbing_lili,xiao song:18_xiaoxiao song:19,hui long \nguan_beijing\nyangyang,caicai_susu,xiao yang:18_xiaoxiao yang:19,chao yang_beijing<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n<p>注意：MAP，STRUCT 和 ARRAY 里的元素间关系都可以用同一个字符表示，这里用“_”。 </p>\n</li>\n<li><p>Hive 上创建测试表 test</p>\n<pre class=\"line-numbers language-sql\" data-language=\"sql\"><code class=\"language-sql\"><span class=\"token keyword\">create</span> <span class=\"token keyword\">table</span> test<span class=\"token punctuation\">(</span>\n    name string<span class=\"token punctuation\">,</span>\n    friends array<span class=\"token operator\">&lt;</span>string<span class=\"token operator\">&gt;</span><span class=\"token punctuation\">,</span>\n    children map<span class=\"token operator\">&lt;</span>string<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span><span class=\"token operator\">&gt;</span><span class=\"token punctuation\">,</span>\n    address struct<span class=\"token operator\">&lt;</span>street:string<span class=\"token punctuation\">,</span> city:string<span class=\"token operator\">&gt;</span> \n<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">row</span> format delimited <span class=\"token keyword\">fields</span> <span class=\"token keyword\">terminated</span> <span class=\"token keyword\">by</span> <span class=\"token string\">','</span> <span class=\"token comment\">#列分隔符</span>\ncollection items <span class=\"token keyword\">terminated</span> <span class=\"token keyword\">by</span> <span class=\"token string\">'_'</span> <span class=\"token comment\">#MAP STRUCT 和 ARRAY 的分隔符(数据分割符号)</span>\nmap <span class=\"token keyword\">keys</span> <span class=\"token keyword\">terminated</span> <span class=\"token keyword\">by</span> <span class=\"token string\">':'</span> <span class=\"token comment\">#MAP 中的 key 与 value 的分隔符</span>\n<span class=\"token keyword\">lines</span> <span class=\"token keyword\">terminated</span> <span class=\"token keyword\">by</span> <span class=\"token string\">'\\n'</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">#行分隔符</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n</li>\n<li><p>导入文本数据到测试表<br>load data local inpath ‘/opt/module/hive/datas/test.txt’ into table test;</p>\n</li>\n<li><p>访问三种集合列里的数据，以下分别是 ARRAY，MAP，STRUCT 的访问方式</p>\n<pre class=\"line-numbers language-shell\" data-language=\"shell\"><code class=\"language-shell\">hive (default)&gt; select friends[1],children['xiao song'],address.city from \ntest\nwhere name=\"songsong\";\nOK\n_c0 _c1 city\nlili 18 beijing\nTime taken: 0.076 seconds, Fetched: 1 row(s)<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n</li>\n</ol>\n<h2 id=\"3-3-类型转化\"><a href=\"#3-3-类型转化\" class=\"headerlink\" title=\"3.3 类型转化\"></a>3.3 类型转化</h2><p>​        Hive 的原子数据类型是可以进行隐式转换的，类似于 Java 的类型转换，例如某表达式使用 INT 类型，TINYINT 会自动转换为 INT 类型，但是 Hive 不会进行反向转化，例如，某表达式使用 TINYINT 类型，INT 不会自动转换为 TINYINT 类型，它会返回错误，除非使用 CAST操作。<br><strong>隐式类型转换规则如下</strong></p>\n<ol>\n<li>任何整数类型都可以隐式地转换为一个范围更广的类型，如 TINYINT 可以转换成INT，INT 可以转换成 BIGINT。</li>\n<li>所有整数类型、FLOAT 和 STRING 类型都可以隐式地转换成 DOUBLE。</li>\n<li>TINYINT、SMALLINT、INT 都可以转换为 FLOAT。</li>\n<li>BOOLEAN 类型不可以转换为任何其它的类型。</li>\n</ol>\n<p><strong>可以使用 CAST 操作显示进行数据类型转换</strong><br>        例如 CAST(‘1’ AS INT)将把字符串’1’ 转换成整数 1；如果强制类型转换失败，如执行CAST(‘X’ AS INT)，表达式返回空值 NULL。</p>\n<pre class=\"line-numbers language-shell\" data-language=\"shell\"><code class=\"language-shell\">0: jdbc:hive2://hadoop102:10000&gt; select '1'+2, cast('1'as int) + 2;\n+------+------+--+\n| _c0 | _c1 |\n+------+------+--+\n| 3.0 | 3 |\n+------+------+--+<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h1 id=\"4-DDL-数据定义\"><a href=\"#4-DDL-数据定义\" class=\"headerlink\" title=\"4. DDL 数据定义\"></a>4. DDL 数据定义</h1><h2 id=\"4-1-创建数据库\"><a href=\"#4-1-创建数据库\" class=\"headerlink\" title=\"4.1 创建数据库\"></a>4.1 创建数据库</h2><pre class=\"line-numbers language-mysql\" data-language=\"mysql\"><code class=\"language-mysql\">CREATE DATABASE [IF NOT EXISTS] database_name\n[COMMENT database_comment]\n[LOCATION hdfs_path]\n[WITH DBPROPERTIES (property_name=property_value, ...)];<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n<p>1）创建一个数据库，数据库在 HDFS 上的默认存储路径是/user/hive/warehouse/*.db。</p>\n<pre class=\"line-numbers language-mysql\" data-language=\"mysql\"><code class=\"language-mysql\">hive (default)&gt; create database db_hive;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>2）避免要创建的数据库已经存在错误，增加 if not exists 判断。（标准写法）</p>\n<pre class=\"line-numbers language-mysql\" data-language=\"mysql\"><code class=\"language-mysql\">hive (default)&gt; create database db_hive;\nFAILED: Execution Error, return code 1 from \norg.apache.hadoop.hive.ql.exec.DDLTask. Database db_hive already exists\nhive (default)&gt; create database if not exists db_hive;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n<p>3）创建一个数据库，指定数据库在 HDFS 上存放的位置</p>\n<pre class=\"line-numbers language-mysql\" data-language=\"mysql\"><code class=\"language-mysql\">hive (default)&gt; create database db_hive2 location '/db_hive2.db';<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<h2 id=\"4-2-查询数据库\"><a href=\"#4-2-查询数据库\" class=\"headerlink\" title=\"4.2 查询数据库\"></a>4.2 查询数据库</h2><p><strong>显示数据库</strong><br>1）显示数据库</p>\n<pre class=\"line-numbers language-mysql\" data-language=\"mysql\"><code class=\"language-mysql\">hive&gt; show databases;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>2）过滤显示查询的数据库</p>\n<pre class=\"line-numbers language-mysql\" data-language=\"mysql\"><code class=\"language-mysql\">hive&gt; show databases like 'db_hive*';\nOK\ndb_hive\ndb_hive_1<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n<p> <strong>查看数据库详情</strong><br>1）显示数据库信息</p>\n<pre class=\"line-numbers language-mysql\" data-language=\"mysql\"><code class=\"language-mysql\">hive&gt; desc database db_hive;\nOK\ndb_hive hdfs://hadoop102:9820/user/hive/warehouse/db_hive.db\natguiguUSER<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n<p>2）显示数据库详细信息，extended</p>\n<pre class=\"line-numbers language-mysql\" data-language=\"mysql\"><code class=\"language-mysql\">hive&gt; desc database extended db_hive;\nOK\ndb_hive hdfs://hadoop102:9820/user/hive/warehouse/db_hive.db\natguiguUSER<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n<p>4.2.3 切换当前数据库</p>\n<pre class=\"line-numbers language-mysql\" data-language=\"mysql\"><code class=\"language-mysql\">hive (default)&gt; use db_hive;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<h2 id=\"4-3-修改数据库\"><a href=\"#4-3-修改数据库\" class=\"headerlink\" title=\"4.3 修改数据库\"></a>4.3 修改数据库</h2><p>​        用户可以使用 ALTER DATABASE 命令为某个数据库的 DBPROPERTIES 设置键-值对属性值，来描述这个数据库的属性信息。</p>\n<pre class=\"line-numbers language-mysql\" data-language=\"mysql\"><code class=\"language-mysql\">hive (default)&gt; alter database db_hive \nset dbproperties('createtime'='20170830');<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n<p>​        在 hive 中查看修改结果</p>\n<pre class=\"line-numbers language-mysql\" data-language=\"mysql\"><code class=\"language-mysql\">hive&gt; desc database extended db_hive;\ndb_name comment location owner_name owner_type parameters\ndb_hive hdfs://hadoop102:9820/user/hive/warehouse/db_hive.db \natguigu USER {createtime=20170830}<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n<h2 id=\"4-4-删除数据库\"><a href=\"#4-4-删除数据库\" class=\"headerlink\" title=\"4.4 删除数据库\"></a>4.4 删除数据库</h2><p>1）删除空数据库</p>\n<pre class=\"line-numbers language-mysql\" data-language=\"mysql\"><code class=\"language-mysql\">hive&gt;drop database db_hive2;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>2）如果删除的数据库不存在，最好采用 if exists 判断数据库是否存在</p>\n<pre class=\"line-numbers language-mysql\" data-language=\"mysql\"><code class=\"language-mysql\">hive&gt; drop database db_hive;\nFAILED: SemanticException [Error 10072]: Database does not exist: db_hive\nhive&gt; drop database if exists db_hive2;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n<p>3）如果数据库不为空，可以采用 cascade 命令，强制删除</p>\n<pre class=\"line-numbers language-mysql\" data-language=\"mysql\"><code class=\"language-mysql\">hive&gt; drop database db_hive;\nFAILED: Execution Error, return code 1 from \norg.apache.hadoop.hive.ql.exec.DDLTask. \nInvalidOperationException(message:Database db_hive is not empty. One or \nmore tables exist.)\nhive&gt; drop database db_hive cascade;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h2 id=\"4-5-创建表\"><a href=\"#4-5-创建表\" class=\"headerlink\" title=\"4.5 创建表\"></a>4.5 创建表</h2><p>1）建表语法</p>\n<pre class=\"line-numbers language-mysql\" data-language=\"mysql\"><code class=\"language-mysql\">CREATE [EXTERNAL] TABLE [IF NOT EXISTS] table_name\n[(col_name data_type [COMMENT col_comment], ...)]\n[COMMENT table_comment]\n[PARTITIONED BY (col_name data_type [COMMENT col_comment], ...)]\n[CLUSTERED BY (col_name, col_name, ...)\n[SORTED BY (col_name [ASC|DESC], ...)] INTO num_buckets BUCKETS]\n[ROW FORMAT row_format]\n[STORED AS file_format]\n[LOCATION hdfs_path]\n[TBLPROPERTIES (property_name=property_value, ...)]\n[AS select_statement]<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>2）字段解释说明</p>\n<ol>\n<li><p>CREATE TABLE 创建一个指定名字的表。如果相同名字的表已经存在，则抛出异常；用户可以用 IF NOT EXISTS 选项来忽略这个异常。</p>\n</li>\n<li><p>EXTERNAL 关键字可以让用户创建一个外部表，在建表的同时可以指定一个指向实际数据的路径（LOCATION），在删除表的时候，内部表的元数据和数据会被一起删除，而外部表只删除元数据，不删除数据。 </p>\n</li>\n<li><p>COMMENT：为表和列添加注释。</p>\n</li>\n<li><p>PARTITIONED BY 创建分区表</p>\n</li>\n<li><p>CLUSTERED BY 创建分桶表</p>\n</li>\n<li><p>SORTED BY 不常用，对桶中的一个或多个列另外排序</p>\n</li>\n<li><p>ROW FORMAT </p>\n<pre class=\"line-numbers language-mysql\" data-language=\"mysql\"><code class=\"language-mysql\">DELIMITED [FIELDS TERMINATED BY char] [COLLECTION ITEMS TERMINATED BY char]\n [MAP KEYS TERMINATED BY char] [LINES TERMINATED BY char]\n | SERDE serde_name [WITH SERDEPROPERTIES (property_name=property_value, \nproperty_name=property_value, ...)]<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n</li>\n</ol>\n<p>​        用户在建表的时候可以自定义 SerDe 或者使用自带的 SerDe。如果没有指定 ROW FORMAT 或者 ROW FORMAT DELIMITED，将会使用自带的 SerDe。在建表的时候，用户还需要为表指定列，用户在指定表的列的同时也会指定自定义的 SerDe，Hive 通过 SerDe 确定表的具体的列的数据。<br>​        SerDe 是 Serialize/Deserilize 的简称， hive 使用 Serde 进行行对象的序列与反序列化。</p>\n<ol>\n<li>STORED AS 指定存储文件类型<pre><code>常用的存储文件类型：SEQUENCEFILE（二进制序列文件）、TEXTFILE（文本）、RCFILE（列式存储格式文件）\n      如果文件数据是纯文本，可以使用STORED AS TEXTFILE。如果数据需要压缩，使用 STORED \n</code></pre>AS SEQUENCEFILE。</li>\n<li>LOCATION ：指定表在 HDFS 上的存储位置。</li>\n<li>AS：后跟查询语句，根据查询结果创建表。 </li>\n<li>LIKE 允许用户复制现有的表结构，但是不复制数据。</li>\n</ol>\n<h3 id=\"管理表\"><a href=\"#管理表\" class=\"headerlink\" title=\"管理表\"></a>管理表</h3><p>1）理论<br>        默认创建的表都是所谓的管理表，有时也被称为内部表。因为这种表，Hive 会（或多或少地）控制着数据的生命周期。Hive 默认情况下会将这些表的数据存储在由配置项hive.metastore.warehouse.dir (如，/user/hive/warehouse)所定义的目录的子目录下。当我们删除一个管理表时，Hive 也会删除这个表中数据。管理表不适合和其他工具共享数据。<br>2）案例实操<br>（0）原始数据</p>\n<pre class=\"line-numbers language-mysql\" data-language=\"mysql\"><code class=\"language-mysql\">1001 ss1\n1002 ss2\n1003 ss3\n1004 ss4\n1005 ss5\n1006 ss6\n1007 ss7\n1008 ss8\n1009 ss9\n1010 ss10\n1011 ss11\n1012 ss12\n1013 ss13\n1014 ss14\n1015 ss15\n1016 ss16<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>（1）普通创建表</p>\n<pre class=\"line-numbers language-mysql\" data-language=\"mysql\"><code class=\"language-mysql\">create table if not exists student(\nid int, name string\n)\nrow format delimited fields terminated by '\\t'\nstored as textfile\nlocation '/user/hive/warehouse/student';<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>（2）根据查询结果创建表（查询的结果会添加到新创建的表中）</p>\n<pre class=\"line-numbers language-mysql\" data-language=\"mysql\"><code class=\"language-mysql\">create table if not exists student2 as select id, name from student;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>（3）根据已经存在的表结构创建表</p>\n<pre class=\"line-numbers language-mysql\" data-language=\"mysql\"><code class=\"language-mysql\">create table if not exists student3 like student;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>（4）查询表的类型</p>\n<pre class=\"line-numbers language-mysql\" data-language=\"mysql\"><code class=\"language-mysql\">hive (default)&gt; desc formatted student2;\nTable Type: MANAGED_TABLE<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n<h3 id=\"外部表\"><a href=\"#外部表\" class=\"headerlink\" title=\"外部表\"></a>外部表</h3><p>1）理论<br>        因为表是外部表，所以 Hive 并非认为其完全拥有这份数据。删除该表并不会删除掉这份数据，不过描述表的元数据信息会被删除掉。<br>2）管理表和外部表的使用场景<br>        每天将收集到的网站日志定期流入 HDFS 文本文件。在外部表（原始日志表）的基础上做大量的统计分析，用到的中间表、结果表使用内部表存储，数据通过 SELECT+INSERT 进入内部表。<br>3）案例实操<br>        分别创建部门和员工外部表，并向表中导入数据。<br>（0）原始数据<br>dept:</p>\n<pre class=\"line-numbers language-mysql\" data-language=\"mysql\"><code class=\"language-mysql\">10 ACCOUNTING 1700\n20 RESEARCH 1800\n30 SALES 1900\n40 OPERATIONS 1700<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n<p>emp：</p>\n<pre class=\"line-numbers language-mysql\" data-language=\"mysql\"><code class=\"language-mysql\">7369 SMITH CLERK 7902 1980-12-17 800.00 20\n7499 ALLEN SALESMAN 7698 1981-2-20 1600.00 300.00 30\n7521 WARD SALESMAN 7698 1981-2-22 1250.00 500.00 30\n7566 JONES MANAGER 7839 1981-4-2 2975.00 20\n7654 MARTIN SALESMAN 7698 1981-9-28 1250.00 1400.00 30\n7698 BLAKE MANAGER 7839 1981-5-1 2850.00 30\n7782 CLARK MANAGER 7839 1981-6-9 2450.00 10\n7788 SCOTT ANALYST 7566 1987-4-19 3000.00 20\n7839 KING PRESIDENT 1981-11-17 5000.00 10\n7844 TURNER SALESMAN 7698 1981-9-8 1500.00 0.00 30\n7876 ADAMS CLERK 7788 1987-5-23 1100.00 20\n7900 JAMES CLERK 7698 1981-12-3 950.00 30\n7902 FORD ANALYST 7566 1981-12-3 3000.00 20\n7934 MILLER CLERK 7782 1982-1-23 1300.00 10<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>（1）上传数据到 HDFS</p>\n<pre class=\"line-numbers language-mysql\" data-language=\"mysql\"><code class=\"language-mysql\">hive (default)&gt; dfs -mkdir /student;\nhive (default)&gt; dfs -put /opt/module/datas/student.txt /student;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n<p>（2）建表语句，创建外部表<br>创建部门表</p>\n<pre class=\"line-numbers language-mysql\" data-language=\"mysql\"><code class=\"language-mysql\">create external table if not exists dept(\ndeptno int,\ndname string,\nloc int\n)\nrow format delimited fields terminated by '\\t';<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>创建员工表</p>\n<pre class=\"line-numbers language-mysql\" data-language=\"mysql\"><code class=\"language-mysql\">create external table if not exists emp(\nempno int,\nename string,\njob string,\nmgr int,\nhiredate string,\nsal double,\ncomm double,\ndeptno int)\nrow format delimited fields terminated by '\\t';<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>（3）查看创建的表</p>\n<pre class=\"line-numbers language-mysql\" data-language=\"mysql\"><code class=\"language-mysql\">hive (default)&gt;show tables;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>（4）查看表格式化数据</p>\n<pre class=\"line-numbers language-mysql\" data-language=\"mysql\"><code class=\"language-mysql\">hive (default)&gt; desc formatted dept;\nTable Type: EXTERNAL_TABLE<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n<p>（5）删除外部表</p>\n<pre class=\"line-numbers language-mysql\" data-language=\"mysql\"><code class=\"language-mysql\">hive (default)&gt; drop table dept;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>外部表删除后，hdfs 中的数据还在，但是 metadata 中 dept 的元数据已被删除</p>\n<h3 id=\"管理表与外部表的互相转换\"><a href=\"#管理表与外部表的互相转换\" class=\"headerlink\" title=\"管理表与外部表的互相转换\"></a>管理表与外部表的互相转换</h3><p>（1）查询表的类型</p>\n<pre class=\"line-numbers language-mysql\" data-language=\"mysql\"><code class=\"language-mysql\">hive (default)&gt; desc formatted student2;\nTable Type: MANAGED_TABLE<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n<p>（2）修改内部表 student2 为外部表</p>\n<pre class=\"line-numbers language-mysql\" data-language=\"mysql\"><code class=\"language-mysql\">alter table student2 set tblproperties('EXTERNAL'='TRUE');<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>（3）查询表的类型</p>\n<pre class=\"line-numbers language-mysql\" data-language=\"mysql\"><code class=\"language-mysql\">hive (default)&gt; desc formatted student2;\nTable Type: EXTERNAL_TABLE<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n<p>（4）修改外部表 student2 为内部表</p>\n<pre class=\"line-numbers language-mysql\" data-language=\"mysql\"><code class=\"language-mysql\">alter table student2 set tblproperties('EXTERNAL'='FALSE');<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>（5）查询表的类型</p>\n<pre class=\"line-numbers language-mysql\" data-language=\"mysql\"><code class=\"language-mysql\">hive (default)&gt; desc formatted student2;\nTable Type: MANAGED_TABLE<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n<p>注意：(‘EXTERNAL’=’TRUE’)和(‘EXTERNAL’=’FALSE’)为固定写法，区分大小写！ </p>\n<h2 id=\"4-6-修改表\"><a href=\"#4-6-修改表\" class=\"headerlink\" title=\"4.6 修改表\"></a>4.6 修改表</h2><h3 id=\"重命名表\"><a href=\"#重命名表\" class=\"headerlink\" title=\"重命名表\"></a>重命名表</h3><p>1）语法</p>\n<pre class=\"line-numbers language-mysql\" data-language=\"mysql\"><code class=\"language-mysql\">ALTER TABLE table_name RENAME TO new_table_name<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>2）实操案例</p>\n<pre class=\"line-numbers language-mysql\" data-language=\"mysql\"><code class=\"language-mysql\">hive (default)&gt; alter table dept_partition2 rename to dept_partition3;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<h3 id=\"增加、修改和删除表分区\"><a href=\"#增加、修改和删除表分区\" class=\"headerlink\" title=\"增加、修改和删除表分区\"></a>增加、修改和删除表分区</h3><p>详见 7.1 章分区表基本操作。</p>\n<h3 id=\"增加-修改-替换列信息\"><a href=\"#增加-修改-替换列信息\" class=\"headerlink\" title=\"增加/修改/替换列信息\"></a>增加/修改/替换列信息</h3><p>1）语法<br>（1）更新列</p>\n<pre class=\"line-numbers language-mysql\" data-language=\"mysql\"><code class=\"language-mysql\">ALTER TABLE table_name CHANGE [COLUMN] col_old_name col_new_name \ncolumn_type [COMMENT col_comment] [FIRST|AFTER column_name]<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n<p>（2）增加和替换列</p>\n<pre class=\"line-numbers language-mysql\" data-language=\"mysql\"><code class=\"language-mysql\">ALTER TABLE table_name ADD|REPLACE COLUMNS (col_name data_type [COMMENT \ncol_comment], ...) <span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n<p>注：ADD 是代表新增一字段，字段位置在所有列后面(partition 列前)，<br>REPLACE 则是表示替换表中所有字段。<br>2）实操案例<br>（1）查询表结构</p>\n<pre class=\"line-numbers language-mysql\" data-language=\"mysql\"><code class=\"language-mysql\">hive&gt; desc dept;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>（2）添加列</p>\n<pre class=\"line-numbers language-mysql\" data-language=\"mysql\"><code class=\"language-mysql\">hive (default)&gt; alter table dept add columns(deptdesc string);<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>（3）查询表结构</p>\n<pre class=\"line-numbers language-mysql\" data-language=\"mysql\"><code class=\"language-mysql\">hive&gt; desc dept;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>（4）更新列</p>\n<pre class=\"line-numbers language-mysql\" data-language=\"mysql\"><code class=\"language-mysql\">hive (default)&gt; alter table dept change column deptdesc desc string; <span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>（5）查询表结构</p>\n<pre class=\"line-numbers language-mysql\" data-language=\"mysql\"><code class=\"language-mysql\">hive&gt; desc dept;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>（6）替换列</p>\n<pre class=\"line-numbers language-mysql\" data-language=\"mysql\"><code class=\"language-mysql\">hive (default)&gt; alter table dept replace columns(deptno string, dname\nstring, loc string);<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n<p>（7）查询表结构</p>\n<pre class=\"line-numbers language-mysql\" data-language=\"mysql\"><code class=\"language-mysql\">hive&gt; desc dept;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>4.7 删除表</p>\n<pre class=\"line-numbers language-mysql\" data-language=\"mysql\"><code class=\"language-mysql\">hive (default)&gt; drop table dept;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<h1 id=\"5-DML-数据操作\"><a href=\"#5-DML-数据操作\" class=\"headerlink\" title=\"5. DML 数据操作\"></a>5. DML 数据操作</h1><h2 id=\"5-1-数据导入\"><a href=\"#5-1-数据导入\" class=\"headerlink\" title=\"5.1 数据导入\"></a>5.1 数据导入</h2><h3 id=\"向表中装载数据（Load）\"><a href=\"#向表中装载数据（Load）\" class=\"headerlink\" title=\"向表中装载数据（Load）\"></a>向表中装载数据（Load）</h3><p> 1）语法</p>\n<pre class=\"line-numbers language-mysql\" data-language=\"mysql\"><code class=\"language-mysql\">hive&gt; load data [local] inpath '数据的 path' [overwrite] into table \nstudent [partition (partcol1=val1,…)];<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n<p>（1）load data:表示加载数据<br>（2）local:表示从本地加载数据到 hive 表；否则从 HDFS<br>（3）inpath:表示加载数据的路径<br>（4）overwrite:表示覆盖表中已有数据，否则表示追加<br>（5）into table:表示加载到哪张表<br>（6）student:表示具体的表<br>（7）partition:表示上传到指定分区<br>2）实操案例<br>（0）创建一张表</p>\n<pre class=\"line-numbers language-mysql\" data-language=\"mysql\"><code class=\"language-mysql\">hive (default)&gt; create table student(id string, name string) row format \ndelimited fields terminated by '\\t';<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n<p>（1）加载本地文件到 hive</p>\n<pre class=\"line-numbers language-mysql\" data-language=\"mysql\"><code class=\"language-mysql\">hive (default)&gt; load data local inpath \n'/opt/module/hive/datas/student.txt' into table default.student;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n<p>（2）加载 HDFS 文件到 hive 中<br>上传文件到 HDFS</p>\n<pre class=\"line-numbers language-mysql\" data-language=\"mysql\"><code class=\"language-mysql\">hive (default)&gt; dfs -put /opt/module/hive/data/student.txt \n/user/atguigu/hive;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n<p>加载 HDFS 上数据</p>\n<pre class=\"line-numbers language-mysql\" data-language=\"mysql\"><code class=\"language-mysql\">hive (default)&gt; load data inpath '/user/atguigu/hive/student.txt' into \ntable default.student;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n<p>（3）加载数据覆盖表中已有的数据<br>上传文件到 HDFS</p>\n<pre class=\"line-numbers language-mysql\" data-language=\"mysql\"><code class=\"language-mysql\">hive (default)&gt; dfs -put /opt/module/data/student.txt /user/atguigu/hive;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>加载数据覆盖表中已有的数据</p>\n<pre class=\"line-numbers language-mysql\" data-language=\"mysql\"><code class=\"language-mysql\">hive (default)&gt; load data inpath '/user/atguigu/hive/student.txt' \noverwrite into table default.student;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n<h3 id=\"通过查询语句向表中插入数据（Insert）\"><a href=\"#通过查询语句向表中插入数据（Insert）\" class=\"headerlink\" title=\"通过查询语句向表中插入数据（Insert）\"></a>通过查询语句向表中插入数据（Insert）</h3><p>1）创建一张表</p>\n<pre class=\"line-numbers language-mysql\" data-language=\"mysql\"><code class=\"language-mysql\">hive (default)&gt; create table student_par(id int, name string) row format \ndelimited fields terminated by '\\t';<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n<p>2）基本插入数据</p>\n<pre class=\"line-numbers language-mysql\" data-language=\"mysql\"><code class=\"language-mysql\">hive (default)&gt; insert into table student_par \nvalues(1,'wangwu'),(2,'zhaoliu'); 3）基本模式插入（根据单张表查询结果）\nhive (default)&gt; insert overwrite table student_par\n select id, name from student where month='201709';\ninsert into：以追加数据的方式插入到表或分区，原有数据不会删除\ninsert overwrite：会覆盖表中已存在的数据<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>注意：insert 不支持插入部分字段<br>4）多表（多分区）插入模式（根据多张表查询结果）</p>\n<pre class=\"line-numbers language-mysql\" data-language=\"mysql\"><code class=\"language-mysql\">hive (default)&gt; from student\ninsert overwrite table student partition(month='201707')\nselect id, name where month='201709'\ninsert overwrite table student partition(month='201706')\nselect id, name where month='201709';<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h3 id=\"查询语句中创建表并加载数据（As-Select）\"><a href=\"#查询语句中创建表并加载数据（As-Select）\" class=\"headerlink\" title=\"查询语句中创建表并加载数据（As Select）\"></a>查询语句中创建表并加载数据（As Select）</h3><p>详见 4.5.1 章创建表。<br>根据查询结果创建表（查询的结果会添加到新创建的表中）</p>\n<pre class=\"line-numbers language-mysql\" data-language=\"mysql\"><code class=\"language-mysql\">create table if not exists student3\nas select id, name from student;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n<h3 id=\"创建表时通过-Location-指定加载数据路径\"><a href=\"#创建表时通过-Location-指定加载数据路径\" class=\"headerlink\" title=\"创建表时通过 Location 指定加载数据路径\"></a>创建表时通过 Location 指定加载数据路径</h3><p>1）上传数据到 hdfs 上</p>\n<pre class=\"line-numbers language-mysql\" data-language=\"mysql\"><code class=\"language-mysql\">hive (default)&gt; dfs -mkdir /student;\nhive (default)&gt; dfs -put /opt/module/datas/student.txt /student; 2）创建表，并指定在 hdfs 上的位置\nhive (default)&gt; create external table if not exists student5(\n id int, name string\n )\n row format delimited fields terminated by '\\t'\n location '/student; 3）查询数据\nhive (default)&gt; select * from student5;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h3 id=\"Import-数据到指定-Hive-表中\"><a href=\"#Import-数据到指定-Hive-表中\" class=\"headerlink\" title=\"Import 数据到指定 Hive 表中\"></a>Import 数据到指定 Hive 表中</h3><p>注意：先用 export 导出后，再将数据导入。</p>\n<pre class=\"line-numbers language-mysql\" data-language=\"mysql\"><code class=\"language-mysql\">hive (default)&gt; import table student2\nfrom '/user/hive/warehouse/export/student';<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n<h2 id=\"5-2-数据导出\"><a href=\"#5-2-数据导出\" class=\"headerlink\" title=\"5.2 数据导出\"></a>5.2 数据导出</h2><h3 id=\"Insert-导出\"><a href=\"#Insert-导出\" class=\"headerlink\" title=\"Insert 导出\"></a>Insert 导出</h3><p>1）将查询的结果导出到本地</p>\n<pre class=\"line-numbers language-mysql\" data-language=\"mysql\"><code class=\"language-mysql\">hive (default)&gt; insert overwrite local directory \n'/opt/module/hive/data/export/student'\nselect * from student;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n<p>2）将查询的结果格式化导出到本地</p>\n<pre class=\"line-numbers language-mysql\" data-language=\"mysql\"><code class=\"language-mysql\">hive(default)&gt;insert overwrite local directory \n'/opt/module/hive/data/export/student1'\nROW FORMAT DELIMITED FIELDS TERMINATED BY '\\t'\nselect * from student;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n<p>3）将查询的结果导出到 HDFS 上(没有 local)</p>\n<pre class=\"line-numbers language-mysql\" data-language=\"mysql\"><code class=\"language-mysql\">hive (default)&gt; insert overwrite directory '/user/atguigu/student2'\n ROW FORMAT DELIMITED FIELDS TERMINATED BY '\\t' \n select * from student;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n<h3 id=\"Hadoop-命令导出到本地\"><a href=\"#Hadoop-命令导出到本地\" class=\"headerlink\" title=\"Hadoop 命令导出到本地\"></a>Hadoop 命令导出到本地</h3><pre class=\"line-numbers language-mysql\" data-language=\"mysql\"><code class=\"language-mysql\">hive (default)&gt; dfs -get /user/hive/warehouse/student/student.txt\n/opt/module/data/export/student3.txt;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n<h3 id=\"Hive-Shell-命令导出\"><a href=\"#Hive-Shell-命令导出\" class=\"headerlink\" title=\"Hive Shell 命令导出\"></a>Hive Shell 命令导出</h3><p>基本语法：（hive -f/-e 执行语句或者脚本 &gt; file）</p>\n<pre class=\"line-numbers language-mysql\" data-language=\"mysql\"><code class=\"language-mysql\">[atguigu@hadoop102 hive]$ bin/hive -e 'select * from default.student;' &gt;\n/opt/module/hive/data/export/student4.txt;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n<h3 id=\"Export-导出到-HDFS-上\"><a href=\"#Export-导出到-HDFS-上\" class=\"headerlink\" title=\"Export 导出到 HDFS 上\"></a>Export 导出到 HDFS 上</h3><pre class=\"line-numbers language-mysql\" data-language=\"mysql\"><code class=\"language-mysql\">(defahiveult)&gt; export table default.student \nto '/user/hive/warehouse/export/student';<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n<p>export 和 import 主要用于两个 Hadoop 平台集群之间 Hive 表迁移。</p>\n<h3 id=\"5-2-5-Sqoop-导出\"><a href=\"#5-2-5-Sqoop-导出\" class=\"headerlink\" title=\"5.2.5 Sqoop 导出\"></a>5.2.5 Sqoop 导出</h3><p>后续课程专门讲。</p>\n<h3 id=\"5-2-6-清除表中数据（Truncate）\"><a href=\"#5-2-6-清除表中数据（Truncate）\" class=\"headerlink\" title=\"5.2.6 清除表中数据（Truncate）\"></a>5.2.6 清除表中数据（Truncate）</h3><p>注意：Truncate 只能删除管理表，不能删除外部表中数据<br>hive (default)&gt; truncate table student;</p>\n<h1 id=\"6-查询\"><a href=\"#6-查询\" class=\"headerlink\" title=\"6.  查询\"></a>6.  查询</h1><p><a href=\"https://cwiki.apache.org/confluence/display/Hive/LanguageManual+Select\">https://cwiki.apache.org/confluence/display/Hive/LanguageManual+Select</a><br>查询语句语法：</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">SELECT [ALL | DISTINCT] select_expr, select_expr, ...\nFROM table_reference\n[WHERE where_condition]\n[GROUP BY col_list]\n[ORDER BY col_list]\n[CLUSTER BY col_list\n| [DISTRIBUTE BY col_list] [SORT BY col_list]\n]\n[LIMIT number]<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h2 id=\"6-1-基本查询（Select…From）\"><a href=\"#6-1-基本查询（Select…From）\" class=\"headerlink\" title=\"6.1 基本查询（Select…From）\"></a>6.1 基本查询（Select…From）</h2><p><strong>全表和特定列查询</strong><br>（0）原始数据</p>\n<pre class=\"line-numbers language-mysql\" data-language=\"mysql\"><code class=\"language-mysql\">dept:\n10 ACCOUNTING 1700\n20 RESEARCH 1800\n30 SALES 1900\n40 OPERATIONS 1700<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<pre class=\"line-numbers language-mysql\" data-language=\"mysql\"><code class=\"language-mysql\">emp：\n7369 SMITH CLERK 7902 1980-12-17 800.00 20\n7499 ALLEN SALESMAN 7698 1981-2-20 1600.00 300.00 30\n7521 WARD SALESMAN 7698 1981-2-22 1250.00 500.00 30\n7566 JONES MANAGER 7839 1981-4-2 2975.00 20\n7654 MARTIN SALESMAN 7698 1981-9-28 1250.00 1400.00 30\n7698 BLAKE MANAGER 7839 1981-5-1 2850.00 30\n7782 CLARK MANAGER 7839 1981-6-9 2450.00 10\n7788 SCOTT ANALYST 7566 1987-4-19 3000.00 20\n7839 KING PRESIDENT 1981-11-17 5000.00 10\n7844 TURNER SALESMAN 7698 1981-9-8 1500.00 0.00 30\n7876 ADAMS CLERK 7788 1987-5-23 1100.00 20\n7900 JAMES CLERK 7698 1981-12-3 950.00 30\n7902 FORD ANALYST 7566 1981-12-3 3000.00 20\n7934 MILLER CLERK 7782 1982-1-23 1300.00 10<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>（1）创建部门表</p>\n<pre class=\"line-numbers language-mysql\" data-language=\"mysql\"><code class=\"language-mysql\">create table if not exists dept(\ndeptno int,\ndname string,\nloc int\n)\nrow format delimited fields terminated by '\\t';<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>（2）创建员工表</p>\n<pre class=\"line-numbers language-mysql\" data-language=\"mysql\"><code class=\"language-mysql\">create table if not exists emp(\nempno int,\nename string,\njob string,\nmgr int,\nhiredate string, \nsal double, \ncomm double,\ndeptno int)\nrow format delimited fields terminated by '\\t';<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>（3）导入数据</p>\n<pre class=\"line-numbers language-mysql\" data-language=\"mysql\"><code class=\"language-mysql\">load data local inpath '/opt/module/datas/dept.txt' into table dept;\nload data local inpath '/opt/module/datas/emp.txt' into table emp;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n<p>1）全表查询</p>\n<pre class=\"line-numbers language-mysql\" data-language=\"mysql\"><code class=\"language-mysql\">hive (default)&gt; select * from emp;\nhive (default)&gt; select empno,ename,job,mgr,hiredate,sal,comm,deptno from \nemp ;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n<p>2）选择特定列查询</p>\n<pre class=\"line-numbers language-mysql\" data-language=\"mysql\"><code class=\"language-mysql\">hive (default)&gt; select empno, ename from emp;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>注意：</p>\n<ol>\n<li>SQL 语言大小写不敏感。</li>\n<li>SQL 可以写在一行或者多行</li>\n<li>关键字不能被缩写也不能分行</li>\n<li>各子句一般要分行写。</li>\n<li>使用缩进提高语句的可读性。</li>\n</ol>\n<p><strong>列别名</strong></p>\n<p>1）重命名一个列<br>2）便于计算<br>3）紧跟列名，也可以在列名和别名之间加入关键字‘AS’ </p>\n<p>4）案例实操</p>\n<pre class=\"line-numbers language-mysql\" data-language=\"mysql\"><code class=\"language-mysql\">hive (default)&gt; select ename AS name, deptno dn from emp;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p><strong>算术运算符：+、-、*、/、%、&amp;、|、^、~</strong><br><strong>常用函数</strong></p>\n<pre class=\"line-numbers language-mysql\" data-language=\"mysql\"><code class=\"language-mysql\">#求总行数（count）\nhive (default)&gt; select count(*) cnt from emp;\n#求工资的最大值（max）\nhive (default)&gt; select max(sal) max_sal from emp;\n#求工资的最小值（min）\nhive (default)&gt; select min(sal) min_sal from emp;\n#求工资的总和（sum）\nhive (default)&gt; select sum(sal) sum_sal from emp; \n#求工资的平均值（avg）\nhive (default)&gt; select avg(sal) avg_sal from emp;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p><strong>Limit 语句</strong><br>典型的查询会返回多行数据。LIMIT 子句用于限制返回的行数。</p>\n<pre class=\"line-numbers language-mysql\" data-language=\"mysql\"><code class=\"language-mysql\">hive (default)&gt; select * from emp limit 5;\nhive (default)&gt; select * from emp limit 2;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n<p><strong>Where 语句</strong><br>1）使用 WHERE 子句，将不满足条件的行过滤掉<br>2）WHERE 子句紧随 FROM 子句<br>3）案例实操<br>查询出薪水大于 1000 的所有员工</p>\n<pre class=\"line-numbers language-mysql\" data-language=\"mysql\"><code class=\"language-mysql\">hive (default)&gt; select * from emp where sal &gt;1000;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>注意：where 子句中不能使用字段别名。<br><strong>比较运算符（Between/In/ Is Null）</strong> </p>\n<p>1）下面表中描述了谓词操作符，这些操作符同样可以用于 JOIN…ON 和 HAVING 语句中。</p>\n<div class=\"table-container\">\n<table>\n<thead>\n<tr>\n<th>=、&lt;=&gt;、&lt;&gt;、!=、&lt;=、&gt;、&gt;=、between and 、is null 、is not null 、in 、not like 、rlike 、regexp</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td></td>\n</tr>\n</tbody>\n</table>\n</div>\n<p>2）案例实操</p>\n<pre class=\"line-numbers language-mysql\" data-language=\"mysql\"><code class=\"language-mysql\">#查询出薪水等于 5000 的所有员工\nhive (default)&gt; select * from emp where sal =5000;\n#查询工资在 500 到 1000 的员工信息\nhive (default)&gt; select * from emp where sal between 500 and 1000;\n#查询 comm 为空的所有员工信息\nhive (default)&gt; select * from emp where comm is null;\n#查询工资是 1500 或 5000 的员工信息\nhive (default)&gt; select * from emp where sal IN (1500, 5000);<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p><strong>Like 和 RLike</strong><br>1）使用 LIKE 运算选择类似的值<br>2）选择条件可以包含字符或数字:</p>\n<ul>\n<li>% 代表零个或多个字符(任意个字符)。</li>\n<li>_ 代表一个字符。</li>\n</ul>\n<p>3）RLIKE 子句<br>RLIKE 子句是 Hive 中这个功能的一个扩展，其可以通过 <strong>Java 的正则表达式</strong>这个更强大的语言来指定匹配条件。<br>4）案例实操</p>\n<pre class=\"line-numbers language-mysql\" data-language=\"mysql\"><code class=\"language-mysql\">#查找名字以 A 开头的员工信息\nhive (default)&gt; select * from emp where ename LIKE 'A%';\n#查找名字中第二个字母为 A 的员工信息\nhive (default)&gt; select * from emp where ename LIKE '_A%';\n#查找名字中带有 A 的员工信息\nhive (default)&gt; select * from emp where ename RLIKE '[A]';<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p><strong>逻辑运算符（And/Or/Not）</strong><br>1）案例实操</p>\n<pre class=\"line-numbers language-mysql\" data-language=\"mysql\"><code class=\"language-mysql\">#查询薪水大于 1000，部门是 30\nhive (default)&gt; select * from emp where sal&gt;1000 and deptno=30;\n#查询薪水大于 1000，或者部门是 30\nhive (default)&gt; select * from emp where sal&gt;1000 or deptno=30;\n#查询除了 20 部门和 30 部门以外的员工信息\nhive (default)&gt; select * from emp where deptno not IN(30, 20);<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h2 id=\"6-2-分组\"><a href=\"#6-2-分组\" class=\"headerlink\" title=\"6.2 分组\"></a>6.2 分组</h2><p><strong>Group By 语句</strong><br>GROUP BY 语句通常会和聚合函数一起使用，按照一个或者多个列队结果进行分组，然后对每个组执行聚合操作。<br>1）案例实操：</p>\n<pre class=\"line-numbers language-mysql\" data-language=\"mysql\"><code class=\"language-mysql\">#计算 emp 表每个部门的平均工资\nhive (default)&gt; select t.deptno, avg(t.sal) avg_sal from emp t group by t.deptno;\n#计算 emp 每个部门中每个岗位的最高薪水\nhive (default)&gt; select t.deptno, t.job, max(t.sal) max_sal from emp t \ngroup by t.deptno, t.job;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p><strong>Having 语句</strong><br>1）having 与 where 不同点<br>（1）where 后面不能写分组函数，而 having 后面可以使用分组函数。<br>（2）having 只用于 group by 分组统计语句。<br>2）案例实操</p>\n<pre class=\"line-numbers language-mysql\" data-language=\"mysql\"><code class=\"language-mysql\">#求每个部门的平均工资\nhive (default)&gt; select deptno, avg(sal) from emp group by deptno;\n#求每个部门的平均薪水大于 2000 的部门\nhive (default)&gt; select deptno, avg(sal) avg_sal from emp group by deptno \nhaving avg_sal &gt; 2000;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h2 id=\"6-3-Join-语句\"><a href=\"#6-3-Join-语句\" class=\"headerlink\" title=\"6.3 Join 语句\"></a>6.3 Join 语句</h2><p>Hive 支持通常的 SQL JOIN 语句。 </p>\n<p><strong>等值 Join</strong></p>\n<p>1）案例实操</p>\n<pre class=\"line-numbers language-mysql\" data-language=\"mysql\"><code class=\"language-mysql\">（1）根据员工表和部门表中的部门编号相等，查询员工编号、员工名称和部门名称；\nhive (default)&gt; select e.empno, e.ename, d.deptno, d.dname from emp e\njoin dept d on e.deptno = d.deptno;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n<p><strong>表的别名</strong><br>1）好处<br>（1）使用别名可以简化查询。<br>（2）使用表名前缀可以提高执行效率。<br>2）案例实操</p>\n<pre class=\"line-numbers language-mysql\" data-language=\"mysql\"><code class=\"language-mysql\"># 合并员工表和部门表\nhive (default)&gt; select e.empno, e.ename, d.deptno from emp e join dept d \non e.deptno = d.deptno;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n<p><strong>内连接</strong></p>\n<pre class=\"line-numbers language-mysql\" data-language=\"mysql\"><code class=\"language-mysql\">内连接：只有进行连接的两个表中都存在与连接条件相匹配的数据才会被保留下来。\nhive (default)&gt; select e.empno, e.ename, d.deptno from emp e join dept d \non e.deptno = d.deptno;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n<p><strong>左外连接</strong></p>\n<pre class=\"line-numbers language-mysql\" data-language=\"mysql\"><code class=\"language-mysql\"># 左外连接：JOIN 操作符左边表中符合 WHERE 子句的所有记录将会被返回。\nhive (default)&gt; select e.empno, e.ename, d.deptno from emp e left join \ndept d on e.deptno = d.deptno;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n<p><strong>右外连接</strong></p>\n<pre class=\"line-numbers language-mysql\" data-language=\"mysql\"><code class=\"language-mysql\">#右外连接：JOIN 操作符右边表中符合 WHERE 子句的所有记录将会被返回。\nhive (default)&gt; select e.empno, e.ename, d.deptno from emp e right join \ndept d on e.deptno = d.deptno;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n<p><strong>满外连接</strong><br>满外连接：将会返回所有表中符合 WHERE 语句条件的所有记录。如果任一表的指定字段没有符合条件的值的话，那么就使用 NULL 值替代。</p>\n<pre class=\"line-numbers language-mysql\" data-language=\"mysql\"><code class=\"language-mysql\">hive (default)&gt; select e.empno, e.ename, d.deptno from emp e full join \ndept d on e.deptno = d.deptno;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n<p><strong>多表连接</strong><br>注意：连接 n 个表，至少需要 n-1 个连接条件。例如：连接三个表，至少需要两个连接条件。<br>数据准备<br>1700 Beijing<br>1800 London<br>1900 Tokyo<br>1）创建位置表</p>\n<pre class=\"line-numbers language-mysql\" data-language=\"mysql\"><code class=\"language-mysql\">create table if not exists location(\nloc int,\nloc_name string\n)\nrow format delimited fields terminated by '\\t';<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>2）导入数据</p>\n<pre class=\"line-numbers language-mysql\" data-language=\"mysql\"><code class=\"language-mysql\">hive (default)&gt; load data local inpath '/opt/module/datas/location.txt' \ninto table location;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n<p>3）多表连接查询</p>\n<pre class=\"line-numbers language-mysql\" data-language=\"mysql\"><code class=\"language-mysql\">hive (default)&gt;SELECT e.ename, d.dname, l.loc_name\nFROM emp e \nJOIN dept d\nON d.deptno = e.deptno \nJOIN location l\nON d.loc = l.loc;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>​        大多数情况下，Hive 会对每对 JOIN 连接对象启动一个 MapReduce 任务。本例中会首先启动一个 MapReduce job 对表 e 和表 d 进行连接操作，然后会再启动一个 MapReduce job 将第一个 MapReduce job 的输出和表 l;进行连接操作。<br><strong>注意：</strong>为什么不是表 d 和表 l 先进行连接操作呢？这是因为 Hive 总是按照从左到右的顺序执行的。<br><strong>优化：</strong>当对 3 个或者更多表进行 join 连接时，如果每个 on 子句都使用相同的连接键的话，那么只会产生一个 MapReduce job。 </p>\n<p><strong>笛卡尔积</strong><br>1）笛卡尔集会在下面条件下产生<br>（1）省略连接条件<br>（2）连接条件无效<br>（3）所有表中的所有行互相连接<br>2）案例实操</p>\n<pre class=\"line-numbers language-mysql\" data-language=\"mysql\"><code class=\"language-mysql\">hive (default)&gt; select empno, dname from emp, dept;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<h2 id=\"6-4-排序\"><a href=\"#6-4-排序\" class=\"headerlink\" title=\"6.4 排序\"></a>6.4 排序</h2><p><strong>全局排序（Order By）</strong><br>Order By：全局排序，只有一个 Reducer </p>\n<p>1）使用 ORDER BY 子句排序<br>ASC（ascend）: 升序（默认）<br>DESC（descend）: 降序</p>\n<p>2）ORDER BY 子句在 SELECT 语句的结尾<br>3）案例实操</p>\n<pre class=\"line-numbers language-mysql\" data-language=\"mysql\"><code class=\"language-mysql\">#查询员工信息按工资升序排列\nhive (default)&gt; select * from emp order by sal;\n#查询员工信息按工资降序排列\nhive (default)&gt; select * from emp order by sal desc;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n<p><strong>按照别名排序</strong></p>\n<pre class=\"line-numbers language-mysql\" data-language=\"mysql\"><code class=\"language-mysql\">#按照员工薪水的 2 倍排序\nhive (default)&gt; select ename, sal*2 twosal from emp order by twosal;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n<p><strong>多个列排序</strong></p>\n<pre class=\"line-numbers language-mysql\" data-language=\"mysql\"><code class=\"language-mysql\">#按照部门和工资升序排序\nhive (default)&gt; select ename, deptno, sal from emp order by deptno, sal;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n<p><strong>每个 Reduce 内部排序（Sort By）</strong><br>Sort By：对于大规模的数据集 order by 的效率非常低。在很多情况下，并不需要全局排序，此时可以使用 sort by。<br>Sort by 为每个 reducer 产生一个排序文件。每个 Reducer 内部进行排序，对全局结果集来说不是排序。</p>\n<pre class=\"line-numbers language-mysql\" data-language=\"mysql\"><code class=\"language-mysql\">#设置 reduce 个数\nhive (default)&gt; set mapreduce.job.reduces=3;\n#查看设置 reduce 个数\nhive (default)&gt; set mapreduce.job.reduces;\n#根据部门编号降序查看员工信息\nhive (default)&gt; select * from emp sort by deptno desc;\n#将查询结果导入到文件中（按照部门编号降序排序）\nhive (default)&gt; insert overwrite local directory \n'/opt/module/data/sortby-result'\nselect * from emp sort by deptno desc;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p><strong>分区（Distribute By）</strong><br>Distribute By： 在有些情况下，我们需要控制某个特定行应该到哪个 reducer，通常是为了进行后续的聚集操作。distribute by 子句可以做这件事。distribute by 类似 MR 中 partition（自定义分区），进行分区，结合 sort by 使用。<br>对于 distribute by 进行测试，一定要分配多 reduce 进行处理，否则无法看到 distribute by 的效果。</p>\n<p>1）案例实操：</p>\n<pre class=\"line-numbers language-mysql\" data-language=\"mysql\"><code class=\"language-mysql\">#先按照部门编号分区，再按照员工编号降序排序。\nhive (default)&gt; set mapreduce.job.reduces=3;\nhive (default)&gt; insert overwrite local directory \n'/opt/module/data/distribute-result' select * from emp distribute by \ndeptno sort by empno desc;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p><strong>注意：</strong><br>➢ distribute by 的分区规则是根据分区字段的 hash 码与 reduce 的个数进行模除后，余数相同的分到一个区。 </p>\n<p>➢ Hive 要求 DISTRIBUTE BY 语句要写在 SORT BY 语句之前。<br><strong>Cluster By</strong><br>        当 distribute by 和 sorts by 字段相同时，可以使用 cluster by 方式。cluster by 除了具有 distribute by 的功能外还兼具 sort by 的功能。但是排序只能是升序排序，不能指定排序规则为 ASC 或者 DESC。 </p>\n<p>（1）以下两种写法等价</p>\n<pre class=\"line-numbers language-mysql\" data-language=\"mysql\"><code class=\"language-mysql\">hive (default)&gt; select * from emp cluster by deptno;\nhive (default)&gt; select * from emp distribute by deptno sort by deptno;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n<p>注意：按照部门编号分区，不一定就是固定死的数值，可以是 20 号和 30 号部门分到一个分区里面去。</p>\n<h1 id=\"7-分区表和分桶表\"><a href=\"#7-分区表和分桶表\" class=\"headerlink\" title=\"7. 分区表和分桶表\"></a>7. 分区表和分桶表</h1><h2 id=\"7-1-分区表\"><a href=\"#7-1-分区表\" class=\"headerlink\" title=\"7.1 分区表\"></a>7.1 分区表</h2><p>​        分区表实际上就是对应一个 HDFS 文件系统上的独立的文件夹，该文件夹下是该分区所有的数据文件。Hive 中的分区就是分目录，把一个大的数据集根据业务需要分割成小的数据集。在查询时通过 WHERE 子句中的表达式选择查询所需要的指定的分区，这样的查询效率会提高很多。<br><strong>分区表基本操作</strong><br>1）引入分区表（需要根据日期对日志进行管理, 通过部门信息模拟）</p>\n<pre class=\"line-numbers language-mysql\" data-language=\"mysql\"><code class=\"language-mysql\">dept_20200401.log\ndept_20200402.log\ndept_20200403.log<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n<p>2）创建分区表语法</p>\n<pre class=\"line-numbers language-mysql\" data-language=\"mysql\"><code class=\"language-mysql\">hive (default)&gt; create table dept_partition(\ndeptno int, dname string, loc string\n)\npartitioned by (day string)\nrow format delimited fields terminated by '\\t';<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>注意：分区字段不能是表中已经存在的数据，可以将分区字段看作表的伪列。<br>3）加载数据到分区表中<br>（1） 数据准备</p>\n<pre class=\"line-numbers language-mysql\" data-language=\"mysql\"><code class=\"language-mysql\">dept_20200401.log\n10 ACCOUNTING 1700\n20 RESEARCH 1800\n\ndept_20200402.log\n30 SALES 1900\n40 OPERATIONS 1700\n\ndept_20200403.log\n50 TEST 2000\n60 DEV 1900<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>（2） 加载数据</p>\n<pre class=\"line-numbers language-mysql\" data-language=\"mysql\"><code class=\"language-mysql\">hive (default)&gt; load data local inpath \n'/opt/module/hive/datas/dept_20200401.log' into table dept_partition\npartition(day='20200401');\n\nhive (default)&gt; load data local inpath \n'/opt/module/hive/datas/dept_20200402.log' into table dept_partition \npartition(day='20200402');\n\nhive (default)&gt; load data local inpath \n'/opt/module/hive/datas/dept_20200403.log' into table dept_partition \npartition(day='20200403');<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>注意：分区表加载数据时，必须指定分区<br>4）查询分区表中数据</p>\n<pre class=\"line-numbers language-mysql\" data-language=\"mysql\"><code class=\"language-mysql\">#单分区查询\nhive (default)&gt; select * from dept_partition where day='20200401';\n#多分区联合查询\nhive (default)&gt; select * from dept_partition where day='20200401'\n union\n select * from dept_partition where day='20200402'\n union\n select * from dept_partition where day='20200403';\nhive (default)&gt; select * from dept_partition where day='20200401' or\nday='20200402' or day='20200403';<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p> 5）增加分区</p>\n<pre class=\"line-numbers language-mysql\" data-language=\"mysql\"><code class=\"language-mysql\">#创建单个分区\nhive (default)&gt; alter table dept_partition add partition(day='20200404');\n#同时创建多个分区\nhive (default)&gt; alter table dept_partition add partition(day='20200405') \npartition(day='20200406');<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>6）删除分区</p>\n<pre class=\"line-numbers language-mysql\" data-language=\"mysql\"><code class=\"language-mysql\">#删除单个分区\nhive (default)&gt; alter table dept_partition drop partition (day='20200406');\n#同时删除多个分区\nhive (default)&gt; alter table dept_partition drop partition (day='20200404'), partition(day='20200405');<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n<p>7）查看分区表有多少分区</p>\n<pre class=\"line-numbers language-mysql\" data-language=\"mysql\"><code class=\"language-mysql\">hive&gt; show partitions dept_partition;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>8）查看分区表结构</p>\n<pre class=\"line-numbers language-mysql\" data-language=\"mysql\"><code class=\"language-mysql\">hive&gt; desc formatted dept_partition;\n# Partition Information \n# col_name data_type comment \nmonth string<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n<p><strong>二级分区</strong><br>思考: 如何一天的日志数据量也很大，如何再将数据拆分? </p>\n<p>1）创建二级分区表</p>\n<pre class=\"line-numbers language-mysql\" data-language=\"mysql\"><code class=\"language-mysql\">hive (default)&gt; create table dept_partition2(\n deptno int, dname string, loc string\n )\n partitioned by (day string, hour string)\n row format delimited fields terminated by '\\t';<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>2）正常的加载数据</p>\n<pre class=\"line-numbers language-mysql\" data-language=\"mysql\"><code class=\"language-mysql\"># 加载数据到二级分区表中\nhive (default)&gt; load data local inpath \n'/opt/module/hive/datas/dept_20200401.log' into table\ndept_partition2 partition(day='20200401', hour='12');\n# 查询分区数据\nhive (default)&gt; select * from dept_partition2 where day='20200401' and hour='12';<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>3）把数据直接上传到分区目录上，让分区表和数据产生关联的三种方式<br>（1）方式一：上传数据后修复</p>\n<pre class=\"line-numbers language-mysql\" data-language=\"mysql\"><code class=\"language-mysql\">#上传数据\nhive (default)&gt; dfs -mkdir -p\n/user/hive/warehouse/mydb.db/dept_partition2/day=20200401/hour=13;\nhive (default)&gt; dfs -put /opt/module/datas/dept_20200401.log \n/user/hive/warehouse/mydb.db/dept_partition2/day=20200401/hour=13;\n#查询数据（查询不到刚上传的数据）\nhive (default)&gt; select * from dept_partition2 where day='20200401' and hour='13';\n#执行修复命令\nhive&gt; msck repair table dept_partition2;\n#再次查询数据\nhive (default)&gt; select * from dept_partition2 where day='20200401' and hour='13';<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>（2）方式二：上传数据后添加分区</p>\n<pre class=\"line-numbers language-mysql\" data-language=\"mysql\"><code class=\"language-mysql\">#上传数据\nhive (default)&gt; dfs -mkdir -p\n/user/hive/warehouse/mydb.db/dept_partition2/day=20200401/hour=14;\nhive (default)&gt; dfs -put /opt/module/hive/datas/dept_20200401.log \n/user/hive/warehouse/mydb.db/dept_partition2/day=20200401/hour=14;\n#执行添加分区\nhive (default)&gt; alter table dept_partition2 add partition(day='201709',hour='14');\n#查询数据\nhive (default)&gt; select * from dept_partition2 where day='20200401' and hour='14';<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>（3）方式三：创建文件夹后 load 数据到分区</p>\n<pre class=\"line-numbers language-mysql\" data-language=\"mysql\"><code class=\"language-mysql\">创建目录\nhive (default)&gt; dfs -mkdir -p\n/user/hive/warehouse/mydb.db/dept_partition2/day=20200401/hour=15;\n上传数据\nhive (default)&gt; load data local inpath \n'/opt/module/hive/datas/dept_20200401.log' into table\ndept_partition2 partition(day='20200401',hour='15');\n查询数据\nhive (default)&gt; select * from dept_partition2 where day='20200401' and \nhour='15';<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p><strong>动态分区调整</strong><br>        关系型数据库中，对分区表 Insert 数据时候，数据库自动会根据分区字段的值，将数据插入到相应的分区中，Hive 中也提供了类似的机制，即动态分区(Dynamic Partition)，只不过，使用 Hive 的动态分区，需要进行相应的配置。<br>1）开启动态分区参数设置<br>（1）开启动态分区功能（默认 true，开启）</p>\n<pre class=\"line-numbers language-mysql\" data-language=\"mysql\"><code class=\"language-mysql\">hive.exec.dynamic.partition=true<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>（2）设置为非严格模式（动态分区的模式，默认 strict，表示必须指定至少一个分区为静态分区，nonstrict 模式表示允许所有的分区字段都可以使用动态分区。）</p>\n<pre class=\"line-numbers language-mysql\" data-language=\"mysql\"><code class=\"language-mysql\">hive.exec.dynamic.partition.mode=nonstrict<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>（3）在所有执行 MR 的节点上，最大一共可以创建多少个动态分区。默认 1000</p>\n<pre class=\"line-numbers language-mysql\" data-language=\"mysql\"><code class=\"language-mysql\">hive.exec.max.dynamic.partitions=1000<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>（4）在每个执行 MR 的节点上，最大可以创建多少个动态分区。该参数需要根据实际的数据来设定。比如：源数据中包含了一年的数据，即 day 字段有 365 个值，那么该参数就需要设置成大于 365，如果使用默认值 100，则会报错。</p>\n<pre class=\"line-numbers language-mysql\" data-language=\"mysql\"><code class=\"language-mysql\">hive.exec.max.dynamic.partitions.pernode=100<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>（5）整个 MR Job 中，最大可以创建多少个 HDFS 文件。默认 100000</p>\n<pre class=\"line-numbers language-mysql\" data-language=\"mysql\"><code class=\"language-mysql\">hive.exec.max.created.files=100000<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>（6）当有空分区生成时，是否抛出异常。一般不需要设置。默认 false</p>\n<pre class=\"line-numbers language-mysql\" data-language=\"mysql\"><code class=\"language-mysql\">hive.error.on.empty.partition=false<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>2）案例实操<br>需求：将 dept 表中的数据按照地区（loc 字段），插入到目标表 dept_partition 的相应分区中。</p>\n<pre class=\"line-numbers language-mysql\" data-language=\"mysql\"><code class=\"language-mysql\">#创建目标分区表\nhive (default)&gt; create table dept_partition_dy(id int, name string) \npartitioned by (loc int) row format delimited fields terminated by '\\t';\n#设置动态分区\nset hive.exec.dynamic.partition.mode = nonstrict;\nhive (default)&gt; insert into table dept_partition_dy partition(loc) select \ndeptno, dname, loc from dept;\n#查看目标分区表的分区情况\nhive (default)&gt; show partitions dept_partition;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>思考：目标分区表是如何匹配到分区字段的？</p>\n<h2 id=\"7-2-分桶表\"><a href=\"#7-2-分桶表\" class=\"headerlink\" title=\"7.2 分桶表\"></a>7.2 分桶表</h2><p>​        分区提供一个隔离数据和优化查询的便利方式。不过，并非所有的数据集都可形成合理的分区。对于一张表或者分区，Hive 可以进一步组织成桶，也就是更为细粒度的数据范围划分。<br>​        分桶是将数据集分解成更容易管理的若干部分的另一个技术。<br>​        分区针对的是数据的存储路径；分桶针对的是数据文件。<br>1）先创建分桶表<br>（1）数据准备</p>\n<pre class=\"line-numbers language-mysql\" data-language=\"mysql\"><code class=\"language-mysql\">1001 ss1\n1002 ss2\n1003 ss3\n1004 ss4\n1005 ss5\n1006 ss6\n1007 ss7\n1008 ss8\n1009 ss9\n1010 ss10\n1011 ss11\n1012 ss12\n1013 ss13\n1014 ss14\n1015 ss15\n1016 ss16<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>（2）创建分桶表</p>\n<pre class=\"line-numbers language-mysql\" data-language=\"mysql\"><code class=\"language-mysql\">create table stu_buck(id int, name string)\nclustered by(id) \ninto 4 buckets\nrow format delimited fields terminated by '\\t';<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n<p>（3）查看表结构</p>\n<pre class=\"line-numbers language-mysql\" data-language=\"mysql\"><code class=\"language-mysql\">hive (default)&gt; desc formatted stu_buck;\nNum Buckets: 4 <span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n<p>（4）导入数据到分桶表中，load 的方式</p>\n<pre class=\"line-numbers language-mysql\" data-language=\"mysql\"><code class=\"language-mysql\">hive (default)&gt; load data inpath '/student.txt' into table stu_buck;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>（5）查看创建的分桶表中是否分成 4 个桶<br>（6）查询分桶的数据</p>\n<pre class=\"line-numbers language-mysql\" data-language=\"mysql\"><code class=\"language-mysql\">hive(default)&gt; select * from stu_buck;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>（7）分桶规则：<br>        根据结果可知：Hive 的分桶采用对分桶字段的值进行哈希，然后除以桶的个数求余的方式决定该条记录存放在哪个桶当中<br>2）分桶表操作需要注意的事项: </p>\n<p>（1）reduce 的个数设置为-1,让 Job 自行决定需要用多少个 reduce 或者将 reduce 的个数设置为大于等于分桶表的桶数<br>（2）从 hdfs 中 load 数据到分桶表中，避免本地文件找不到问题</p>\n<p>（3）不要使用本地模式<br>3）insert 方式将数据导入分桶表</p>\n<pre class=\"line-numbers language-mysql\" data-language=\"mysql\"><code class=\"language-mysql\">hive(default)&gt;insert into table stu_buck select * from student_insert;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<h2 id=\"7-3-抽样查询\"><a href=\"#7-3-抽样查询\" class=\"headerlink\" title=\"7.3 抽样查询\"></a>7.3 抽样查询</h2><p>​        对于非常大的数据集，有时用户需要使用的是一个具有代表性的查询结果而不是全部结果。Hive 可以通过对表进行抽样来满足这个需求。<br>语法: TABLESAMPLE(BUCKET x OUT OF y)<br>查询表 stu_buck 中的数据。</p>\n<pre class=\"line-numbers language-mysql\" data-language=\"mysql\"><code class=\"language-mysql\">hive (default)&gt; select * from stu_buck tablesample(bucket 1 out of 4 on id);\n# 注意：x 的值必须小于等于 y 的值，否则\nFAILED: SemanticException [Error 10061]: Numerator should not be bigger \nthan denominator in sample clause for table stu_buck<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n<h1 id=\"第-8-章-函数\"><a href=\"#第-8-章-函数\" class=\"headerlink\" title=\"第 8 章 函数\"></a>第 8 章 函数</h1><h2 id=\"8-1-系统内置函数\"><a href=\"#8-1-系统内置函数\" class=\"headerlink\" title=\"8.1 系统内置函数\"></a>8.1 系统内置函数</h2><pre class=\"line-numbers language-mysql\" data-language=\"mysql\"><code class=\"language-mysql\"># 查看系统自带的函数\nhive&gt; show functions;\n# 显示自带的函数的用法\nhive&gt; desc function upper;\n# 详细显示自带的函数的用法\nhive&gt; desc function extended upper;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h2 id=\"8-2-常用内置函数\"><a href=\"#8-2-常用内置函数\" class=\"headerlink\" title=\"8.2 常用内置函数\"></a>8.2 常用内置函数</h2><p><strong>空字段赋值</strong><br>1）函数说明<br>        NVL：给值为 NULL 的数据赋值，它的格式是 NVL( value，default_value)。它的功能是如果 value 为 NULL，则 NVL 函数返回 default_value 的值，否则返回 value 的值，如果两个参数都为 NULL ，则返回 NULL。 2）数据准备：采用员工表<br>3）查询：如果员工的 comm 为 NULL，则用-1 代替</p>\n<pre class=\"line-numbers language-mysql\" data-language=\"mysql\"><code class=\"language-mysql\">hive (default)&gt; select comm,nvl(comm, -1) from emp;\nOK\ncomm _c1\n\nNULL -1.0\n300.0 300.0\n500.0 500.0\nNULL -1.0\n1400.0 1400.0\nNULL -1.0\nNULL -1.0\nNULL -1.0\nNULL -1.0\n0.0 0.0\nNULL -1.0\nNULL -1.0\nNULL -1.0\nNULL -1.0<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>4）查询：如果员工的 comm 为 NULL，则用领导 id 代替</p>\n<pre class=\"line-numbers language-mysql\" data-language=\"mysql\"><code class=\"language-mysql\">hive (default)&gt; select comm, nvl(comm,mgr) from emp;\nOK\ncomm _c1\nNULL 7902.0\n300.0 300.0\n500.0 500.0\nNULL 7839.0\n1400.0 1400.0\nNULL 7839.0\nNULL 7839.0\nNULL 7566.0\nNULL NULL\n0.0 0.0\nNULL 7788.0\nNULL 7698.0\nNULL 7566.0\nNULL 7782.0<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p><strong>CASE WHEN THEN ELSE END</strong><br>1）数据准备</p>\n<p>2）需求<br>求出不同部门男女各多少人。结果如下：</p>\n<pre class=\"line-numbers language-mysql\" data-language=\"mysql\"><code class=\"language-mysql\">dept_Id 男 女\nA 2 1\nB 1 2<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n<p>3）创建本地 emp_sex.txt，导入数据</p>\n<pre class=\"line-numbers language-mysql\" data-language=\"mysql\"><code class=\"language-mysql\">[atguigu@hadoop102 datas]$ vi emp_sex.txt\n悟空 A 男\n大海 A 男\n宋宋 B 男\n凤姐 A 女\n婷姐 B 女\n婷婷 B 女 <span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>4）创建 hive 表并导入数据</p>\n<pre class=\"line-numbers language-mysql\" data-language=\"mysql\"><code class=\"language-mysql\">create table emp_sex(\nname string, \ndept_id string, \nsex string) \nrow format delimited fields terminated by \"\\t\";\nload data local inpath '/opt/module/hive/data/emp_sex.txt' into table \nemp_sex;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>5）按需求查询数据</p>\n<pre class=\"line-numbers language-mysql\" data-language=\"mysql\"><code class=\"language-mysql\">select\n dept_id,\n sum(case sex when '男' then 1 else 0 end) male_count,\n sum(case sex when '女' then 1 else 0 end) female_count\nfrom emp_sex\ngroup by dept_id;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p><strong>行转列</strong><br>1）相关函数说明<br>        CONCAT(string A/col, string B/col…)：返回输入字符串连接后的结果，支持任意个输入字符串;<br>        CONCAT_WS(separator, str1, str2,…)：它是一个特殊形式的 CONCAT()。第一个参数剩余参数间的分隔符。分隔符可以是与剩余参数一样的字符串。如果分隔符是 NULL，返回值也将为 NULL。这个函数会跳过分隔符参数后的任何 NULL 和空字符串。分隔符将被加到被连接的字符串之间;<br>        注意: CONCAT_WS must be “string or array<string><br>        COLLECT_SET(col)：函数只接受基本数据类型，它的主要作用是将某字段的值进行去重汇总，产生 Array 类型字段。<br>2）数据准备</string></p>\n<p>3）需求</p>\n<pre class=\"line-numbers language-mysql\" data-language=\"mysql\"><code class=\"language-mysql\"># 把星座和血型一样的人归类到一起。结果如下：\n射手座,A 大海|凤姐\n白羊座,A 孙悟空|猪八戒\n白羊座,B 宋宋|苍老师<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n<p>4）创建本地 constellation.txt，导入数据</p>\n<pre class=\"line-numbers language-mysql\" data-language=\"mysql\"><code class=\"language-mysql\">[atguigu@hadoop102 datas]$ vim person_info.txt\n孙悟空 白羊座 A\n大海 射手座 A\n宋宋 白羊座 B\n猪八戒 白羊座 A\n凤姐 射手座 A\n苍老师 白羊座 B<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p> 5）创建 hive 表并导入数据</p>\n<pre class=\"line-numbers language-mysql\" data-language=\"mysql\"><code class=\"language-mysql\">create table person_info(\nname string, \nconstellation string, \nblood_type string) \nrow format delimited fields terminated by \"\\t\";\nload data local inpath \"/opt/module/hive/data/person_info.txt\" into table \nperson_info;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>6）按需求查询数据</p>\n<pre class=\"line-numbers language-mysql\" data-language=\"mysql\"><code class=\"language-mysql\">SELECT\nt1.c_b,\nCONCAT_WS(\"|\",collect_set(t1.name))\nFROM (\nSELECT\nNAME,\nCONCAT_WS(',',constellation,blood_type) c_b\nFROM person_info\n)t1\nGROUP BY t1.c_b<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p><strong>列转行</strong><br>1）函数说明<br>        EXPLODE(col)：将 hive 一列中复杂的 Array 或者 Map 结构拆分成多行。<br>        LATERAL VIEW<br><strong>用法：</strong>LATERAL VIEW udtf(expression) tableAlias AS columnAlias<br><strong>解释：</strong>用于和 split, explode 等 UDTF 一起使用，它能够将一列数据拆成多行数据，在此基础上可以对拆分后的数据进行聚合。</p>\n<p>2）数据准备</p>\n<pre class=\"line-numbers language-mysql\" data-language=\"mysql\"><code class=\"language-mysql\">movie category\n《疑犯追踪》 悬疑,动作,科幻,剧情\n《Lie to me》 悬疑,警匪,动作,心理,剧情\n《战狼 2》 战争,动作,灾难<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n<p>3）需求</p>\n<p>将电影分类中的数组数据展开。结果如下：</p>\n<pre class=\"line-numbers language-mysql\" data-language=\"mysql\"><code class=\"language-mysql\">《疑犯追踪》 悬疑\n《疑犯追踪》 动作\n《疑犯追踪》 科幻\n《疑犯追踪》 剧情\n《Lie to me》 悬疑\n《Lie to me》 警匪\n《Lie to me》 动作\n《Lie to me》 心理\n《Lie to me》 剧情\n《战狼 2》 战争\n《战狼 2》 动作\n《战狼 2》 灾难<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>4）创建本地 movie.txt，导入数据</p>\n<pre class=\"line-numbers language-mysql\" data-language=\"mysql\"><code class=\"language-mysql\">[atguigu@hadoop102 datas]$ vi movie_info.txt\n《疑犯追踪》 悬疑,动作,科幻,剧情\n《Lie to me》悬疑,警匪,动作,心理,剧情\n《战狼 2》 战争,动作,灾难<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n<p>5）创建 hive 表并导入数据</p>\n<pre class=\"line-numbers language-mysql\" data-language=\"mysql\"><code class=\"language-mysql\">create table movie_info(\n movie string,\n category string)\nrow format delimited fields terminated by \"\\t\";\nload data local inpath \"/opt/module/data/movie.txt\" into table \nmovie_info;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>6）按需求查询数据</p>\n<pre class=\"line-numbers language-mysql\" data-language=\"mysql\"><code class=\"language-mysql\">SELECT\nmovie,\ncategory_name\nFROM\nmovie_info\nlateral VIEW\nexplode(split(category,\",\")) movie_info_tmp AS category_name;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p><strong>窗口函数（开窗函数）</strong><br>1）相关函数说明<br><strong>OVER()：</strong>指定分析函数工作的数据窗口大小，这个数据窗口大小可能会随着行的变而变化。<br><strong>CURRENT ROW：</strong>当前行<br><strong>n PRECEDING：</strong>往前 n 行数据<br><strong>n FOLLOWING：</strong>往后 n 行数据<br><strong>UNBOUNDED：</strong>起点，<br>        <strong>UNBOUNDED PRECEDING</strong> 表示从前面的起点，<br>        <strong>UNBOUNDED FOLLOWING</strong> 表示到后面的终点<br><strong>LAG(col,n,default_val)：</strong>往前第 n 行数据<br><strong>LEAD(col,n, default_val)：</strong>往后第 n 行数据<br><strong>NTILE(n)：</strong>把有序窗口的行分发到指定数据的组中，各个组有编号，编号从 1 开始，对于每一行，NTILE 返回此行所属的组的编号。注意：n 必须为 int 类型。<br>2）数据准备：name，orderdate，cost</p>\n<pre class=\"line-numbers language-mysql\" data-language=\"mysql\"><code class=\"language-mysql\">jack,2017-01-01,10\ntony,2017-01-02,15\njack,2017-02-03,23\ntony,2017-01-04,29\njack,2017-01-05,46\njack,2017-04-06,42\ntony,2017-01-07,50\njack,2017-01-08,55\nmart,2017-04-08,62\nmart,2017-04-09,68\nneil,2017-05-10,12\nmart,2017-04-11,75\nneil,2017-06-12,80\nmart,2017-04-13,94<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>3）需求<br>（1）查询在 2017 年 4 月份购买过的顾客及总人数<br>（2）查询顾客的购买明细及月购买总额<br>（3）上述的场景, 将每个顾客的 cost 按照日期进行累加<br>（4）查询每个顾客上次的购买时间<br>（5）查询前 20%时间的订单信息<br>4）创建本地 business.txt，导入数据</p>\n<pre class=\"line-numbers language-mysql\" data-language=\"mysql\"><code class=\"language-mysql\">[atguigu@hadoop102 datas]$ vi business.txt<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>5）创建 hive 表并导入数据</p>\n<pre class=\"line-numbers language-mysql\" data-language=\"mysql\"><code class=\"language-mysql\">create table business(\nname string,\norderdate string,\ncost int\n) ROW FORMAT DELIMITED FIELDS TERMINATED BY ',';\nload data local inpath \"/opt/module/data/business.txt\" into table \nbusiness;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>6）按需求查询数据<br>（1） 查询在 2017 年 4 月份购买过的顾客及总人数</p>\n<pre class=\"line-numbers language-mysql\" data-language=\"mysql\"><code class=\"language-mysql\">select name,count(*) over () \nfrom business\nwhere substring(orderdate,1,7) = '2017-04'\ngroup by name; <span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n<p>（2） 查询顾客的购买明细及月购买总额</p>\n<pre class=\"line-numbers language-mysql\" data-language=\"mysql\"><code class=\"language-mysql\">select name,orderdate,cost,sum(cost) over(partition by month(orderdate)) \nfrom business;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n<p>（3） 将每个顾客的 cost 按照日期进行累加</p>\n<pre class=\"line-numbers language-mysql\" data-language=\"mysql\"><code class=\"language-mysql\">select name,orderdate,cost,\nsum(cost) over() as sample1,#所有行相加\nsum(cost) over(partition by name) as sample2,#按 name 分组，组内数据相加\nsum(cost) over(partition by name order by orderdate) as sample3,#按 name分组，组内数据累加\nsum(cost) over(partition by name order by orderdate rows between \nUNBOUNDED PRECEDING and current row ) as sample4 ,#和 sample3 一样,由起点到当前行的聚合\nsum(cost) over(partition by name order by orderdate rows between 1 \nPRECEDING and current row) as sample5, #当前行和前面一行做聚合\nsum(cost) over(partition by name order by orderdate rows between 1 \nPRECEDING AND 1 FOLLOWING ) as sample6,#当前行和前边一行及后面一行\nsum(cost) over(partition by name order by orderdate rows between current \nrow and UNBOUNDED FOLLOWING ) as sample7 #当前行及后面所有行\nfrom business; \n#rows 必须跟在 order by 子句之后，对排序的结果进行限制，使用固定的行数来限制分区中的数据行数量<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>（4） 查看顾客上次的购买时间</p>\n<pre class=\"line-numbers language-mysql\" data-language=\"mysql\"><code class=\"language-mysql\">select name,orderdate,cost,\nlag(orderdate,1,'1900-01-01') over(partition by name order by orderdate ) \nas time1, lag(orderdate,2) over (partition by name order by orderdate) as \ntime2 \nfrom business; <span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>（5） 查询前 20%时间的订单信息</p>\n<pre class=\"line-numbers language-mysql\" data-language=\"mysql\"><code class=\"language-mysql\">select * from (\n select name,orderdate,cost, ntile(5) over(order by orderdate) sorted\n from business\n) t\nwhere sorted = 1;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p><strong>Rank</strong><br>1）函数说明</p>\n<p><strong>RANK()</strong> 排序相同时会重复，总数不会变<br><strong>DENSE_RANK()</strong> 排序相同时会重复，总数会减少<br><strong>ROW_NUMBER()</strong> 会根据顺序计算</p>\n<p>2）数据准备</p>\n<p>3）需求<br>计算每门学科成绩排名。<br>4）创建本地 score.txt，导入数据</p>\n<pre class=\"line-numbers language-mysql\" data-language=\"mysql\"><code class=\"language-mysql\">[atguigu@hadoop102 datas]$ vi score.txt<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>5）创建 hive 表并导入数据</p>\n<pre class=\"line-numbers language-mysql\" data-language=\"mysql\"><code class=\"language-mysql\">create table score(\nname string,\nsubject string, \nscore int) \nrow format delimited fields terminated by \"\\t\";\nload data local inpath '/opt/module/data/score.txt' into table score;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>6）按需求查询数据</p>\n<pre class=\"line-numbers language-mysql\" data-language=\"mysql\"><code class=\"language-mysql\">select name,\nsubject,\nscore,\nrank() over(partition by subject order by score desc) rp,\ndense_rank() over(partition by subject order by score desc) drp,\nrow_number() over(partition by subject order by score desc) rmp\nfrom score;\n\nname subject score rp drp rmp\n孙悟空 数学 95 1 1 1\n宋宋 数学 86 2 2 2\n婷婷 数学 85 3 3 3\n大海 数学 56 4 4 4\n宋宋 英语 84 1 1 1\n大海 英语 84 1 1 2\n婷婷 英语 78 3 2 3\n孙悟空 英语 68 4 3 4\n大海 语文 94 1 1 1\n孙悟空 语文 87 2 2 2\n婷婷 语文 65 3 3 3\n宋宋 语文 64 4 4 4<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>​        扩展：求出每门学科前三名的学生？</p>\n<h2 id=\"8-3-自定义函数\"><a href=\"#8-3-自定义函数\" class=\"headerlink\" title=\"8.3 自定义函数\"></a>8.3 自定义函数</h2><p>1）Hive 自带了一些函数，比如：max/min 等，但是数量有限，自己可以通过自定义 UDF 来方便的扩展。<br>2）当 Hive 提供的内置函数无法满足你的业务处理需要时，此时就可以考虑使用用户自定义函数（UDF：user-defined function）。 </p>\n<p>3）根据用户自定义函数类别分为以下三种：<br>（1）UDF（User-Defined-Function）<br>            一进一出<br>（2）UDAF（User-Defined Aggregation Function）<br>            聚集函数，多进一出<br>            类似于：count/max/min<br>（3）UDTF（User-Defined Table-Generating Functions）<br>            一进多出<br>            如 lateral view explode()<br>4）官方文档地址<br><a href=\"https://cwiki.apache.org/confluence/display/Hive/HivePlugins\">https://cwiki.apache.org/confluence/display/Hive/HivePlugins</a><br>5）编程步骤： </p>\n<p>（1）继承 Hive 提供的类</p>\n<pre class=\"line-numbers language-mysql\" data-language=\"mysql\"><code class=\"language-mysql\">org.apache.hadoop.hive.ql.udf.generic.GenericUDF\norg.apache.hadoop.hive.ql.udf.generic.GenericUDTF;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n<p>（2）实现类中的抽象方法</p>\n<p>（3）在 hive 的命令行窗口创建函数</p>\n<pre class=\"line-numbers language-mysql\" data-language=\"mysql\"><code class=\"language-mysql\">#添加 jar\nadd jar linux_jar_path\n#创建 function\ncreate [temporary] function [dbname.]function_name AS class_name;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n<p>（4）在 hive 的命令行窗口删除函数</p>\n<pre class=\"line-numbers language-mysql\" data-language=\"mysql\"><code class=\"language-mysql\">drop [temporary] function [if exists] [dbname.]function_name;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<h2 id=\"8-4-自定义-UDF-函数\"><a href=\"#8-4-自定义-UDF-函数\" class=\"headerlink\" title=\"8.4 自定义 UDF 函数\"></a>8.4 自定义 UDF 函数</h2><p>0）需求:<br>自定义一个 UDF 实现计算给定字符串的长度，例如：</p>\n<pre class=\"line-numbers language-mysql\" data-language=\"mysql\"><code class=\"language-mysql\">hive(default)&gt; select my_len(\"abcd\"); \n4 <span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n<p>1）创建一个 Maven 工程 Hive</p>\n<p>2）导入依赖</p>\n<pre class=\"line-numbers language-mysql\" data-language=\"mysql\"><code class=\"language-mysql\">&lt;dependencies&gt;\n    &lt;dependency&gt;\n        &lt;groupId&gt;org.apache.hive&lt;/groupId&gt;\n        &lt;artifactId&gt;hive-exec&lt;/artifactId&gt;\n        &lt;version&gt;3.1.2&lt;/version&gt;\n    &lt;/dependency&gt;\n&lt;/dependencies&gt;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>3）创建一个类</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">package</span> <span class=\"token namespace\">com<span class=\"token punctuation\">.</span>atguigu<span class=\"token punctuation\">.</span>hive</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>apache<span class=\"token punctuation\">.</span>hadoop<span class=\"token punctuation\">.</span>hive<span class=\"token punctuation\">.</span>ql<span class=\"token punctuation\">.</span>exec<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">UDFArgumentException</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>apache<span class=\"token punctuation\">.</span>hadoop<span class=\"token punctuation\">.</span>hive<span class=\"token punctuation\">.</span>ql<span class=\"token punctuation\">.</span>exec<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">UDFArgumentLengthException</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>apache<span class=\"token punctuation\">.</span>hadoop<span class=\"token punctuation\">.</span>hive<span class=\"token punctuation\">.</span>ql<span class=\"token punctuation\">.</span>exec<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">UDFArgumentTypeException</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>apache<span class=\"token punctuation\">.</span>hadoop<span class=\"token punctuation\">.</span>hive<span class=\"token punctuation\">.</span>ql<span class=\"token punctuation\">.</span>metadata<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">HiveException</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>apache<span class=\"token punctuation\">.</span>hadoop<span class=\"token punctuation\">.</span>hive<span class=\"token punctuation\">.</span>ql<span class=\"token punctuation\">.</span>udf<span class=\"token punctuation\">.</span>generic<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">GenericUDF</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>apache<span class=\"token punctuation\">.</span>hadoop<span class=\"token punctuation\">.</span>hive<span class=\"token punctuation\">.</span>serde2<span class=\"token punctuation\">.</span>objectinspector<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">ObjectInspector</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> \n    <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>apache<span class=\"token punctuation\">.</span>hadoop<span class=\"token punctuation\">.</span>hive<span class=\"token punctuation\">.</span>serde2<span class=\"token punctuation\">.</span>objectinspector<span class=\"token punctuation\">.</span>primitive<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">PrimitiveObjectIn</span>\n    spectorFactory<span class=\"token punctuation\">;</span>\n<span class=\"token comment\">/**\n\n* 自定义 UDF 函数，需要继承 GenericUDF 类\n* 需求: 计算指定字符串的长度\n  */</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">MyStringLength</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">GenericUDF</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">/**\n   *\n * @param arguments 输入参数类型的鉴别器对象\n * @return 返回值类型的鉴别器对象\n * @throws UDFArgumentException\n   */</span>\n    <span class=\"token annotation punctuation\">@Override</span>\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">ObjectInspector</span> <span class=\"token function\">initialize</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ObjectInspector</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> arguments<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">UDFArgumentException</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">// 判断输入参数的个数</span>\n        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>arguments<span class=\"token punctuation\">.</span>length <span class=\"token operator\">!=</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">UDFArgumentLengthException</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Input Args Length Error!!!\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token comment\">// 判断输入参数的类型</span>\n        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>arguments<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">getCategory</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">equals</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ObjectInspector<span class=\"token punctuation\">.</span>Category</span><span class=\"token punctuation\">.</span>PRIMITIVE<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">UDFArgumentTypeException</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"Input Args Type Error!!!\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token comment\">//函数本身返回值为 int，需要返回 int 类型的鉴别器对象</span>\n        <span class=\"token keyword\">return</span> <span class=\"token class-name\">PrimitiveObjectInspectorFactory</span><span class=\"token punctuation\">.</span>javaIntObjectInspector<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token comment\">/**\n\n * 函数的逻辑处理\n * @param arguments 输入的参数\n * @return 返回值\n * @throws HiveException\n   */</span>\n    <span class=\"token annotation punctuation\">@Override</span>\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">Object</span> <span class=\"token function\">evaluate</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">DeferredObject</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> arguments<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">HiveException</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>arguments<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">return</span> arguments<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">length</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token annotation punctuation\">@Override</span>\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> <span class=\"token function\">getDisplayString</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> children<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span> \n<span class=\"token punctuation\">}</span> <span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>4）打成 jar 包上传到服务器/opt/module/data/myudf.jar<br>5）将 jar 包添加到 hive 的 classpath</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">hive (default)&gt; add jar /opt/module/data/myudf.jar;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>6）创建临时函数与开发好的 java class 关联</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">hive (default)&gt; create temporary function my_len as \"com.atguigu.hive.\nMyStringLength\";<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n<p>7）即可在 hql 中使用自定义的函数</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">hive (default)&gt; select ename,my_len(ename) ename_len from emp;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<h2 id=\"8-5-自定义-UDTF-函数\"><a href=\"#8-5-自定义-UDTF-函数\" class=\"headerlink\" title=\"8.5 自定义 UDTF 函数\"></a>8.5 自定义 UDTF 函数</h2><p>0）需求<br>        自定义一个 UDTF 实现将一个任意分割符的字符串切割成独立的单词，例如：</p>\n<pre class=\"line-numbers language-shell\" data-language=\"shell\"><code class=\"language-shell\">hive(default)&gt; select myudtf(\"hello,world,hadoop,hive\", \",\");\nhello\nworld\nhadoop\nhive<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>1）代码实现</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token operator\">*</span> <span class=\"token keyword\">package</span> <span class=\"token namespace\">com<span class=\"token punctuation\">.</span>atguigu<span class=\"token punctuation\">.</span>udtf</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>apache<span class=\"token punctuation\">.</span>hadoop<span class=\"token punctuation\">.</span>hive<span class=\"token punctuation\">.</span>ql<span class=\"token punctuation\">.</span>exec<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">UDFArgumentException</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>apache<span class=\"token punctuation\">.</span>hadoop<span class=\"token punctuation\">.</span>hive<span class=\"token punctuation\">.</span>ql<span class=\"token punctuation\">.</span>metadata<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">HiveException</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>apache<span class=\"token punctuation\">.</span>hadoop<span class=\"token punctuation\">.</span>hive<span class=\"token punctuation\">.</span>ql<span class=\"token punctuation\">.</span>udf<span class=\"token punctuation\">.</span>generic<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">GenericUDTF</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>apache<span class=\"token punctuation\">.</span>hadoop<span class=\"token punctuation\">.</span>hive<span class=\"token punctuation\">.</span>serde2<span class=\"token punctuation\">.</span>objectinspector<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">ObjectInspector</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> \n    <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>apache<span class=\"token punctuation\">.</span>hadoop<span class=\"token punctuation\">.</span>hive<span class=\"token punctuation\">.</span>serde2<span class=\"token punctuation\">.</span>objectinspector<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">ObjectInspectorFactory</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> \n    <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>apache<span class=\"token punctuation\">.</span>hadoop<span class=\"token punctuation\">.</span>hive<span class=\"token punctuation\">.</span>serde2<span class=\"token punctuation\">.</span>objectinspector<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">StructObjectInspector</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> \n    <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>apache<span class=\"token punctuation\">.</span>hadoop<span class=\"token punctuation\">.</span>hive<span class=\"token punctuation\">.</span>serde2<span class=\"token punctuation\">.</span>objectinspector<span class=\"token punctuation\">.</span>primitive<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">PrimitiveObjectIn</span>\n    spectorFactory<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">ArrayList</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">List</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">MyUDTF</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">GenericUDTF</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">ArrayList</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">&gt;</span></span> outList <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ArrayList</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token annotation punctuation\">@Override</span>\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">StructObjectInspector</span> <span class=\"token function\">initialize</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">StructObjectInspector</span> argOIs<span class=\"token punctuation\">)</span> \n        <span class=\"token keyword\">throws</span> <span class=\"token class-name\">UDFArgumentException</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">//1.定义输出数据的列名和类型</span>\n        <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">&gt;</span></span> fieldNames <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ArrayList</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">ObjectInspector</span><span class=\"token punctuation\">&gt;</span></span> fieldOIs <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ArrayList</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">//2.添加输出数据的列名和类型</span>\n        fieldNames<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"lineToWord\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        fieldOIs<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">PrimitiveObjectInspectorFactory</span><span class=\"token punctuation\">.</span>javaStringObjectInspector<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> \n            <span class=\"token class-name\">ObjectInspectorFactory</span><span class=\"token punctuation\">.</span><span class=\"token function\">getStandardStructObjectInspector</span><span class=\"token punctuation\">(</span>fieldNames<span class=\"token punctuation\">,</span> fieldOIs<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token annotation punctuation\">@Override</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">process</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Object</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">HiveException</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">//1.获取原始数据</span>\n        <span class=\"token class-name\">String</span> arg <span class=\"token operator\">=</span> args<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">//2.获取数据传入的第二个参数，此处为分隔符</span>\n        <span class=\"token class-name\">String</span> splitKey <span class=\"token operator\">=</span> args<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">//3.将原始数据按照传入的分隔符进行切分</span>\n        <span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> fields <span class=\"token operator\">=</span> arg<span class=\"token punctuation\">.</span><span class=\"token function\">split</span><span class=\"token punctuation\">(</span>splitKey<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">//4.遍历切分后的结果，并写出</span>\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> field <span class=\"token operator\">:</span> fields<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token comment\">//集合为复用的，首先清空集合</span>\n            outList<span class=\"token punctuation\">.</span><span class=\"token function\">clear</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token comment\">//将每一个单词添加至集合</span>\n            outList<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>field<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token comment\">//将集合内容写出</span>\n            <span class=\"token function\">forward</span><span class=\"token punctuation\">(</span>outList<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token annotation punctuation\">@Override</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">HiveException</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token punctuation\">}</span> \n<span class=\"token punctuation\">}</span> <span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>2）打成 jar 包上传到服务器/opt/module/hive/data/myudtf.jar<br>3）将 jar 包添加到 hive 的 classpath 下</p>\n<pre class=\"line-numbers language-mysql\" data-language=\"mysql\"><code class=\"language-mysql\">hive (default)&gt; add jar /opt/module/hive/data/myudtf.jar;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>4）创建临时函数与开发好的 java class 关联</p>\n<pre class=\"line-numbers language-mysql\" data-language=\"mysql\"><code class=\"language-mysql\">hive (default)&gt; create temporary function myudtf as \n\"com.atguigu.hive.MyUDTF\";<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n<p>5）使用自定义的函数</p>\n<pre class=\"line-numbers language-mysql\" data-language=\"mysql\"><code class=\"language-mysql\">hive (default)&gt; select myudtf(\"hello,world,hadoop,hive\",\",\"); <span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<h1 id=\"第-9-章-压缩和存储\"><a href=\"#第-9-章-压缩和存储\" class=\"headerlink\" title=\"第 9 章 压缩和存储\"></a>第 9 章 压缩和存储</h1><h2 id=\"9-1-Hadoop-压缩配置\"><a href=\"#9-1-Hadoop-压缩配置\" class=\"headerlink\" title=\"9.1 Hadoop 压缩配置\"></a>9.1 Hadoop 压缩配置</h2><p><strong>MR 支持的压缩编码</strong></p>\n<p><img src=\"https://img-blog.csdnimg.cn/90825a79e30546f4829674edddb24e9d.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAWUZSNzE4,size_20,color_FFFFFF,t_70,g_se,x_16\" alt=\"\"></p>\n<p><img src=\"https://img-blog.csdnimg.cn/c4be9f0fed3941969108ff43d0878faf.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAWUZSNzE4,size_20,color_FFFFFF,t_70,g_se,x_16\" alt=\"\"></p>\n<p>​        <a href=\"http://google.github.io/snappy/\">http://google.github.io/snappy/</a><br>​        On a single core of a Core i7 processor in 64-bit mode, Snappy compresses at about 250<br>MB/sec or more and decompresses at about 500 MB/sec or more.<br><strong>压缩参数配置</strong><br>​        要在 Hadoop 中启用压缩，可以配置如下参数（mapred-site.xml 文件中）：</p>\n<p><strong>压缩参数配置</strong><br>        要在 Hadoop 中启用压缩，可以配置如下参数（mapred-site.xml 文件中）：</p>\n<p><img src=\"https://img-blog.csdnimg.cn/ff47e682ae2d4cb0ad7e57ad707562ee.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAWUZSNzE4,size_20,color_FFFFFF,t_70,g_se,x_16\" alt=\"\"></p>\n<h2 id=\"9-2-开启-Map-输出阶段压缩（MR-引擎）\"><a href=\"#9-2-开启-Map-输出阶段压缩（MR-引擎）\" class=\"headerlink\" title=\"9.2 开启 Map 输出阶段压缩（MR 引擎）\"></a>9.2 开启 Map 输出阶段压缩（MR 引擎）</h2><p>开启 map 输出阶段压缩可以减少 job 中 map 和 Reduce task 间数据传输量。具体配置如下：<br>1）案例实操：</p>\n<pre class=\"line-numbers language-mysql\" data-language=\"mysql\"><code class=\"language-mysql\"># 开启 hive 中间传输数据压缩功能\nhive (default)&gt;set hive.exec.compress.intermediate=true;\n# 开启 mapreduce 中 map 输出压缩功能\nhive (default)&gt;set mapreduce.map.output.compress=true;\n# 设置 mapreduce 中 map 输出数据的压缩方式\nhive (default)&gt;set mapreduce.map.output.compress.codec=org.apache.hadoop.io.compress.SnappyCodec;\n# 执行查询语句\nhive (default)&gt; select count(ename) name from emp;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h2 id=\"9-3-开启-Reduce-输出阶段压缩\"><a href=\"#9-3-开启-Reduce-输出阶段压缩\" class=\"headerlink\" title=\"9.3 开启 Reduce 输出阶段压缩\"></a>9.3 开启 Reduce 输出阶段压缩</h2><p>​        当 Hive 将 输 出 写 入 到 表 中 时 ， 输出内容同样可以进行压缩。属性hive.exec.compress.output控制着这个功能。用户可能需要保持默认设置文件中的默认值false，这样默认的输出就是非压缩的纯文本文件了。用户可以通过在查询语句或执行脚本中设置这个值为 true，来开启输出结果压缩功能。<br>1）案例实操：</p>\n<pre class=\"line-numbers language-mysql\" data-language=\"mysql\"><code class=\"language-mysql\"># 开启 hive 最终输出数据压缩功能\nhive (default)&gt;set hive.exec.compress.output=true;\n# 开启 mapreduce 最终输出数据压缩\nhive (default)&gt;set mapreduce.output.fileoutputformat.compress=true;\n# 设置 mapreduce 最终数据输出压缩方式\nhive (default)&gt; set mapreduce.output.fileoutputformat.compress.codec =\norg.apache.hadoop.io.compress.SnappyCodec;\n# 设置 mapreduce 最终数据输出压缩为块压缩\nhive (default)&gt; set \nmapreduce.output.fileoutputformat.compress.type=BLOCK;\n# 测试一下输出结果是否是压缩文件\nhive (default)&gt; insert overwrite local directory\n'/opt/module/data/distribute-result' select * from emp distribute by \ndeptno sort by empno desc;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h2 id=\"9-4-文件存储格式\"><a href=\"#9-4-文件存储格式\" class=\"headerlink\" title=\"9.4 文件存储格式\"></a>9.4 文件存储格式</h2><p>​        Hive 支持的存储数据的格式主要有：TEXTFILE 、SEQUENCEFILE、ORC、PARQUET。</p>\n<p><img src=\"https://img-blog.csdnimg.cn/a69801f47d674eefaad9852f21e22075.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAWUZSNzE4,size_20,color_FFFFFF,t_70,g_se,x_16\" alt=\"\"></p>\n<p><strong>列式存储和行式存储</strong><br>如图所示左边为逻辑表，右边第一个为行式存储，第二个为列式存储。<br>1）行存储的特点<br>        查询满足条件的一整行数据的时候，列存储则需要去每个聚集的字段找到对应的每个列的值，行存储只需要找到其中一个值，其余的值都在相邻地方，所以此时行存储查询的速度更快。<br>2）列存储的特点<br>        因为每个字段的数据聚集存储，在查询只需要少数几个字段的时候，能大大减少读取的数据量；每个字段的数据类型一定是相同的，列式存储可以针对性的设计更好的设计压缩算法。<br>        TEXTFILE 和 SEQUENCEFILE 的存储格式都是基于行存储的；<br>        ORC 和 PARQUET 是基于列式存储的。<br><strong>TextFile 格式</strong><br>        默认格式，数据不做压缩，磁盘开销大，数据解析开销大。可结合 Gzip、Bzip2 使用，但使用 Gzip 这种方式，hive 不会对数据进行切分，从而无法对数据进行并行操作。<br><strong>Orc 格式</strong><br>        Orc (Optimized Row Columnar)是 Hive 0.11 版里引入的新的存储格式。<br>        如下图所示可以看到每个 Orc 文件由 1 个或多个 stripe 组成，每个 stripe 一般为 HDFS的块大小，每一个 stripe 包含多条记录，这些记录按照列进行独立存储，对应到 Parquet中的 row group 的概念。每个 Stripe 里有三部分组成，分别是 Index Data，Row Data，Stripe Footer：</p>\n<p><img src=\"https://img-blog.csdnimg.cn/96d0bc9d46334762bb4d172ca53c270a.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAWUZSNzE4,size_20,color_FFFFFF,t_70,g_se,x_16\" alt=\"\"></p>\n<p>1）Index Data：一个轻量级的 index，默认是每隔 1W 行做一个索引。这里做的索引应该只是记录某行的各字段在 Row Data 中的 offset。 </p>\n<p>2）Row Data：存的是具体的数据，先取部分行，然后对这些行按列进行存储。对每个列进行了编码，分成多个 Stream 来存储。 </p>\n<p>3）Stripe Footer：存的是各个 Stream 的类型，长度等信息。</p>\n<p>​        每个文件有一个 File Footer，这里面存的是每个 Stripe 的行数，每个 Column 的数据类型信息等；每个文件的尾部是一个 PostScript，这里面记录了整个文件的压缩类型以及FileFooter 的长度信息等。在读取文件时，会 seek 到文件尾部读 PostScript，从里面解析到File Footer 长度，再读 FileFooter，从里面解析到各个 Stripe 信息，再读各个 Stripe，即从后往前读。</p>\n<p><strong>Parquet 格式</strong><br>        Parquet 文件是以二进制方式存储的，所以是不可以直接读取的，文件中包括该文件的数据和元数据，因此 Parquet 格式文件是自解析的。<br>（1）行组(Row Group)：每一个行组包含一定的行数，在一个 HDFS 文件中至少存储一个行组，类似于 orc 的 stripe 的概念。<br>（2）列块(Column Chunk)：在一个行组中每一列保存在一个列块中，行组中的所有列连续的存储在这个行组文件中。一个列块中的值都是相同类型的，不同的列块可能使用不同的算法进行压缩。<br>（3）页(Page)：每一个列块划分为多个页，一个页是最小的编码的单位，在同一个列块的不同页可能使用不同的编码方式。<br>        通常情况下，在存储 Parquet 数据的时候会按照 Block 大小设置行组的大小，由于一般情况下每一个 Mapper 任务处理数据的最小单位是一个 Block，这样可以把每一个行组由一个 Mapper 任务处理，增大任务执行并行度。Parquet 文件的格式。<br><img src=\"https://img-blog.csdnimg.cn/99650fa02b8a441b8ed5a86849a0c8ef.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAWUZSNzE4,size_20,color_FFFFFF,t_70,g_se,x_16\" alt=\"2\"><br>        上图展示了一个 Parquet 文件的内容，一个文件中可以存储多个行组，文件的首位都是该文件的 Magic Code，用于校验它是否是一个 Parquet 文件，Footer length 记录了文件元数据的大小，通过该值和文件长度可以计算出元数据的偏移量，文件的元数据中包括每一个行组的元数据信息和该文件存储数据的 Schema 信息。除了文件中每一个行组的元数据，每一页的开始都会存储该页的元数据，在 Parquet 中，有三种类型的页：数据页、字典页和索引页。数据页用于存储当前行组中该列的值，字典页存储该列值的编码字典，每一个列块中最多包含一个字典页，索引页用来存储当前行组下该列的索引，目前 Parquet 中还不支持索引页。<br><strong>主流文件存储格式对比实验</strong><br>        从存储文件的压缩比和查询速度两个角度对比。<br>        存储文件的压缩比测试：<br>1）测试数据<br>2）TextFile<br>（1)创建表，存储数据格式为 TEXTFILE</p>\n<pre class=\"line-numbers language-mysql\" data-language=\"mysql\"><code class=\"language-mysql\">create table log_text (\n    track_time string,\n    url string,\n    session_id string,\n    referer string,\n    ip string,\n    end_user_id string,\n    city_id string\n)\nrow format delimited fields terminated by '\\t'\nstored as textfile;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>（2）向表中加载数据</p>\n<pre class=\"line-numbers language-mysql\" data-language=\"mysql\"><code class=\"language-mysql\">hive (default)&gt; load data local inpath '/opt/module/hive/datas/log.data' \ninto table log_text ;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n<p>（3）查看表中数据大小</p>\n<pre class=\"line-numbers language-mysql\" data-language=\"mysql\"><code class=\"language-mysql\">hive (default)&gt; dfs -du -h /user/hive/warehouse/log_text;\n18.13 M /user/hive/warehouse/log_text/log.data<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n<p>3）ORC<br>（1）创建表，存储数据格式为 ORC</p>\n<pre class=\"line-numbers language-mysql\" data-language=\"mysql\"><code class=\"language-mysql\">create table log_orc(\n    track_time string,\n    url string,\n    session_id string,\n    referer string,\n    ip string,\n    end_user_id string,\n    city_id string\n)\nrow format delimited fields terminated by '\\t'\nstored as orc\ntblproperties(\"orc.compress\"=\"NONE\"); -- 设置 orc 存储不使用压缩<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>（2）向表中加载数据</p>\n<pre class=\"line-numbers language-mysql\" data-language=\"mysql\"><code class=\"language-mysql\">hive (default)&gt; insert into table log_orc select * from log_text;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>（3）查看表中数据大小</p>\n<pre class=\"line-numbers language-mysql\" data-language=\"mysql\"><code class=\"language-mysql\">hive (default)&gt; dfs -du -h /user/hive/warehouse/log_orc/ ;\n7.7 M /user/hive/warehouse/log_orc/000000_0<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n<p>4）Parquet<br>（1）创建表，存储数据格式为 parquet</p>\n<pre class=\"line-numbers language-mysql\" data-language=\"mysql\"><code class=\"language-mysql\">create table log_parquet(\n    track_time string,\n    url string,\n    session_id string,\n    referer string,\n    ip string,\n    end_user_id string,\n    city_id string\n)\nrow format delimited fields terminated by '\\t'\nstored as parquet;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>（2）向表中加载数据</p>\n<pre class=\"line-numbers language-mysql\" data-language=\"mysql\"><code class=\"language-mysql\">hive (default)&gt; insert into table log_parquet select * from log_text;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>（3）查看表中数据大小</p>\n<pre class=\"line-numbers language-mysql\" data-language=\"mysql\"><code class=\"language-mysql\">hive (default)&gt; dfs -du -h /user/hive/warehouse/log_parquet/;\n13.1 M /user/hive/warehouse/log_parquet/000000_0<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n<p><strong>存储文件的对比总结：</strong><br>ORC &gt; Parquet &gt; textFile<br>存储文件的查询速度测试： </p>\n<pre class=\"line-numbers language-mysql\" data-language=\"mysql\"><code class=\"language-mysql\"># TextFile\nhive (default)&gt; insert overwrite local directory \n'/opt/module/data/log_text' select substring(url,1,4) from log_text;\n# ORC\nhive (default)&gt; insert overwrite local directory \n'/opt/module/data/log_orc' select substring(url,1,4) from log_orc;\n# Parquet\nhive (default)&gt; insert overwrite local directory \n'/opt/module/data/log_parquet' select substring(url,1,4) from \nlog_parquet;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>存储文件的查询速度总结：查询速度相近。</p>\n<h2 id=\"9-5-存储和压缩结合\"><a href=\"#9-5-存储和压缩结合\" class=\"headerlink\" title=\"9.5 存储和压缩结合\"></a>9.5 存储和压缩结合</h2><p><strong>测试存储和压缩</strong><br>官网：<a href=\"https://cwiki.apache.org/confluence/display/Hive/LanguageManual+ORC\">https://cwiki.apache.org/confluence/display/Hive/LanguageManual+ORC</a><br>ORC 存储方式的压缩：</p>\n<p><img src=\"https://img-blog.csdnimg.cn/5d86aaf97f77478b9560c4eb6c4dfb14.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAWUZSNzE4,size_20,color_FFFFFF,t_70,g_se,x_16\" alt=\"\"></p>\n<p>注意：所有关于 ORCFile 的参数都是在 HQL 语句的 TBLPROPERTIES 字段里面出现<br>1）创建一个 ZLIB 压缩的 ORC 存储方式<br>（1）建表语句</p>\n<pre class=\"line-numbers language-mysql\" data-language=\"mysql\"><code class=\"language-mysql\">create table log_orc_zlib(\n    track_time string,\n    url string,\n    session_id string,\n    referer string,\n    ip string,\n    end_user_id string,\n    city_id string\n)\nrow format delimited fields terminated by '\\t'\nstored as orc\ntblproperties(\"orc.compress\"=\"ZLIB\");<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>（2）插入数据</p>\n<pre class=\"line-numbers language-mysql\" data-language=\"mysql\"><code class=\"language-mysql\">insert into log_orc_zlib select * from log_text;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>（3）查看插入后数据</p>\n<pre class=\"line-numbers language-mysql\" data-language=\"mysql\"><code class=\"language-mysql\">hive (default)&gt; dfs -du -h /user/hive/warehouse/log_orc_zlib/ ;\n2.78 M /user/hive/warehouse/log_orc_none/000000_0<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n<p>2）创建一个 SNAPPY 压缩的 ORC 存储方式<br>（1）建表语句</p>\n<pre class=\"line-numbers language-mysql\" data-language=\"mysql\"><code class=\"language-mysql\">create table log_orc_snappy(\n    track_time string,\n    url string,\n    session_id string,\n    referer string,\n    ip string,\n    end_user_id string,\n    city_id string\n)\nrow format delimited fields terminated by '\\t'\nstored as orc\ntblproperties(\"orc.compress\"=\"SNAPPY\");<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>（2）插入数据</p>\n<pre class=\"line-numbers language-mysql\" data-language=\"mysql\"><code class=\"language-mysql\">insert into log_orc_snappy select * from log_text;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>（3）查看插入后数据</p>\n<pre class=\"line-numbers language-mysql\" data-language=\"mysql\"><code class=\"language-mysql\">hive (default)&gt; dfs -du -h /user/hive/warehouse/log_orc_snappy/;\n3.75 M /user/hive/warehouse/log_orc_snappy/000000_0<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n<p>ZLIB 比 Snappy 压缩的还小。原因是 ZLIB 采用的是 deflate 压缩算法。比 snappy 压缩的压缩率高。<br>3）创建一个 SNAPPY 压缩的 parquet 存储方式<br>（1）建表语句</p>\n<pre class=\"line-numbers language-mysql\" data-language=\"mysql\"><code class=\"language-mysql\">create table log_parquet_snappy(\n    track_time string,\n    url string,\n    session_id string,\n    referer string,\n    ip string,\n    end_user_id string,\n    city_id string\n)\nrow format delimited fields terminated by '\\t'\nstored as parquet\ntblproperties(\"parquet.compression\"=\"SNAPPY\");<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>（2）插入数据</p>\n<pre class=\"line-numbers language-mysql\" data-language=\"mysql\"><code class=\"language-mysql\">insert into log_parquet_snappy select * from log_text;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>（3）查看插入后数据</p>\n<pre class=\"line-numbers language-mysql\" data-language=\"mysql\"><code class=\"language-mysql\">hive (default)&gt; dfs -du -h /user/hive/warehouse/log_parquet_snappy/;\n6.39 MB /user/hive/warehouse/ log_parquet_snappy /000000_0<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n<p>4）存储方式和压缩总结<br>在实际的项目开发当中，hive 表的数据存储格式一般选择：orc 或 parquet。压缩方式一般选择 snappy，lzo。 </p>\n<h1 id=\"第-10-章-企业级调优\"><a href=\"#第-10-章-企业级调优\" class=\"headerlink\" title=\"第 10 章 企业级调优\"></a>第 10 章 企业级调优</h1><h2 id=\"10-1-执行计划（Explain）\"><a href=\"#10-1-执行计划（Explain）\" class=\"headerlink\" title=\"10.1 执行计划（Explain）\"></a>10.1 执行计划（Explain）</h2><p> 1）基本语法</p>\n<pre class=\"line-numbers language-mysql\" data-language=\"mysql\"><code class=\"language-mysql\">EXPLAIN [EXTENDED | DEPENDENCY | AUTHORIZATION] query<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>2）案例实操<br>（1）查看下面这条语句的执行计划<br>没有生成 MR 任务的</p>\n<pre class=\"line-numbers language-mysql\" data-language=\"mysql\"><code class=\"language-mysql\">hive (default)&gt; explain select * from emp;\nExplain\nSTAGE DEPENDENCIES:\n Stage-0 is a root stage\nSTAGE PLANS:\n Stage: Stage-0\n Fetch Operator\n limit: -1\n Processor Tree:\n TableScan\n alias: emp\n Statistics: Num rows: 1 Data size: 7020 Basic stats: COMPLETE \nColumn stats: NONE\n Select Operator\n expressions: empno (type: int), ename (type: string), job \n(type: string), mgr (type: int), hiredate (type: string), sal (type: \n                                                               double), comm (type: double), deptno (type: int)\n outputColumnNames: _col0, _col1, _col2, _col3, _col4, _col5, \n_col6, _col7\n Statistics: Num rows: 1 Data size: 7020 Basic stats: COMPLETE \nColumn stats: NONE\n ListSink<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>有生成 MR 任务的</p>\n<pre class=\"line-numbers language-mysql\" data-language=\"mysql\"><code class=\"language-mysql\">hive (default)&gt; explain select deptno, avg(sal) avg_sal from emp group by \ndeptno;\nExplain\nSTAGE DEPENDENCIES:\n Stage-1 is a root stage\n Stage-0 depends on stages: Stage-1\nSTAGE PLANS:\n Stage: Stage-1\n Map Reduce\n Map Operator Tree:\n TableScan\n alias: emp\n Statistics: Num rows: 1 Data size: 7020 Basic stats: COMPLETE \nColumn stats: NONE\n Select Operator\n expressions: sal (type: double), deptno (type: int)\n outputColumnNames: sal, deptno\n Statistics: Num rows: 1 Data size: 7020 Basic stats: COMPLETE \nColumn stats: NONE\n Group By Operator\n aggregations: sum(sal), count(sal)\n keys: deptno (type: int)\n mode: hash\n outputColumnNames: _col0, _col1, _col2\n Statistics: Num rows: 1 Data size: 7020 Basic stats:\n\nCOMPLETE Column stats: NONE\n Reduce Output Operator\n key expressions: _col0 (type: int)\n sort order: +\n Map-reduce partition columns: _col0 (type: int)\n Statistics: Num rows: 1 Data size: 7020 Basic stats: \nCOMPLETE Column stats: NONE\n value expressions: _col1 (type: double), _col2 (type: \nbigint)\n Execution mode: vectorized\n Reduce Operator Tree:\n Group By Operator\n aggregations: sum(VALUE._col0), count(VALUE._col1)\n keys: KEY._col0 (type: int)\n mode: mergepartial\n outputColumnNames: _col0, _col1, _col2\n Statistics: Num rows: 1 Data size: 7020 Basic stats: COMPLETE \nColumn stats: NONE\n Select Operator\n expressions: _col0 (type: int), (_col1 / _col2) (type: double)\n outputColumnNames: _col0, _col1\n Statistics: Num rows: 1 Data size: 7020 Basic stats: COMPLETE \nColumn stats: NONE\n File Output Operator\n compressed: false\n Statistics: Num rows: 1 Data size: 7020 Basic stats: COMPLETE \nColumn stats: NONE\n table:\n input format: \norg.apache.hadoop.mapred.SequenceFileInputFormat\n output format: \norg.apache.hadoop.hive.ql.io.HiveSequenceFileOutputFormat\n serde: org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe\n Stage: Stage-0\n Fetch Operator\n limit: -1\n Processor Tree:\n ListSink<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>（2）查看详细执行计划</p>\n<pre class=\"line-numbers language-mysql\" data-language=\"mysql\"><code class=\"language-mysql\">hive (default)&gt; explain extended select * from emp;\nhive (default)&gt; explain extended select deptno, avg(sal) avg_sal from emp \ngroup by deptno;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n<h2 id=\"10-2-Fetch-抓取\"><a href=\"#10-2-Fetch-抓取\" class=\"headerlink\" title=\"10.2 Fetch 抓取\"></a>10.2 Fetch 抓取</h2><p>​        Fetch 抓取是指，Hive 中对某些情况的查询可以不必使用 MapReduce 计算。例如：SELECT * FROM employees;在这种情况下，Hive 可以简单地读取 employee 对应的存储目录下的文件，然后输出查询结果到控制台。<br>​        在 hive-default.xml.template 文件中 hive.fetch.task.conversion 默认是 more，老版本 hive默认是 minimal，该属性修改为 more 以后，在全局查找、字段查找、limit 查找等都不走mapreduce。</p>\n<pre class=\"line-numbers language-xml\" data-language=\"xml\"><code class=\"language-xml\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>property</span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>name</span><span class=\"token punctuation\">&gt;</span></span>hive.fetch.task.conversion<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>name</span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>value</span><span class=\"token punctuation\">&gt;</span></span>more<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>value</span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>description</span><span class=\"token punctuation\">&gt;</span></span>\n        Expects one of [none, minimal, more].\n        Some select queries can be converted to single FETCH task minimizing latency.\n        Currently the query should be single sourced not having any subquery \n        and should not have any aggregations or distincts (which incurs RS), \n        lateral views and joins.\n        0. none : disable hive.fetch.task.conversion\n        1. minimal : SELECT STAR, FILTER on partition columns, LIMIT only\n        2. more : SELECT, FILTER, LIMIT only (support TABLESAMPLE and virtual columns)\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>description</span><span class=\"token punctuation\">&gt;</span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>property</span><span class=\"token punctuation\">&gt;</span></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>1）案例实操：<br>（1）把 hive.fetch.task.conversion 设置成 none，然后执行查询语句，都会执行 mapreduce<br>程序。</p>\n<pre class=\"line-numbers language-mysql\" data-language=\"mysql\"><code class=\"language-mysql\">hive (default)&gt; set hive.fetch.task.conversion=none;\nhive (default)&gt; select * from emp;\nhive (default)&gt; select ename from emp;\nhive (default)&gt; select ename from emp limit 3;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n<p>（2）把 hive.fetch.task.conversion 设置成 more，然后执行查询语句，如下查询方式都不<br>会执行 mapreduce 程序。</p>\n<pre class=\"line-numbers language-mysql\" data-language=\"mysql\"><code class=\"language-mysql\">hive (default)&gt; set hive.fetch.task.conversion=more;\nhive (default)&gt; select * from emp;\nhive (default)&gt; select ename from emp;\nhive (default)&gt; select ename from emp limit 3;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n<h2 id=\"10-3-本地模式\"><a href=\"#10-3-本地模式\" class=\"headerlink\" title=\"10.3 本地模式\"></a>10.3 本地模式</h2><p>​        大多数的 Hadoop Job 是需要 Hadoop 提供的完整的可扩展性来处理大数据集的。不过，有时 Hive 的输入数据量是非常小的。在这种情况下，为查询触发执行任务消耗的时间可能会比实际 job 的执行时间要多的多。对于大多数这种情况，Hive 可以通过本地模式在单台机器上处理所有的任务。对于小数据集，执行时间可以明显被缩短。<br>​        用户可以通过设置 hive.exec.mode.local.auto 的值为 true，来让 Hive 在适当的时候自动启动这个优化。</p>\n<pre class=\"line-numbers language-mysql\" data-language=\"mysql\"><code class=\"language-mysql\">set hive.exec.mode.local.auto=true; #开启本地 mr\n#设置 local mr 的最大输入数据量，当输入数据量小于这个值时采用 local mr 的方式，默认为 134217728，即 128M\nset hive.exec.mode.local.auto.inputbytes.max=50000000;\n#设置 local mr 的最大输入文件个数，当输入文件个数小于这个值时采用 local mr 的方式，默认为 4\nset hive.exec.mode.local.auto.input.files.max=10;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>1）案例实操：<br>（2）关闭本地模式（默认是关闭的），并执行查询语句</p>\n<pre class=\"line-numbers language-mysql\" data-language=\"mysql\"><code class=\"language-mysql\">hive (default)&gt; select count(*) from emp group by deptno;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>（1）开启本地模式，并执行查询语句</p>\n<pre class=\"line-numbers language-mysql\" data-language=\"mysql\"><code class=\"language-mysql\">hive (default)&gt; set hive.exec.mode.local.auto=true;\nhive (default)&gt; select count(*) from emp group by deptno;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n<h2 id=\"10-4-表的优化\"><a href=\"#10-4-表的优化\" class=\"headerlink\" title=\"10.4 表的优化\"></a>10.4 表的优化</h2><p><strong>小表大表 Join（MapJOIN）</strong> </p>\n<p>​        将 key 相对分散，并且数据量小的表放在 join 的左边，可以使用 map join 让小的维度表先进内存。在 map 端完成 join。<br>​        实际测试发现：新版的 hive 已经对小表 JOIN 大表和大表 JOIN 小表进行了优化。小表放在左边和右边已经没有区别。<br><strong>案例实操</strong><br>1）需求介绍<br>测试大表 JOIN 小表和小表 JOIN 大表的效率<br>2）开启 MapJoin 参数设置</p>\n<pre class=\"line-numbers language-mysql\" data-language=\"mysql\"><code class=\"language-mysql\">（1）设置自动选择 Mapjoin\nset hive.auto.convert.join = true; 默认为 true\n（2）大表小表的阈值设置（默认 25M 以下认为是小表）：\nset hive.mapjoin.smalltable.filesize = 25000000;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n<p>3）MapJoin 工作机制</p>\n<p><img src=\"https://img-blog.csdnimg.cn/725d428e43a94c5494934d1502f40aca.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAWUZSNzE4,size_20,color_FFFFFF,t_70,g_se,x_16\" alt=\"\"></p>\n<p>4）建大表、小表和 JOIN 后表的语句</p>\n<pre class=\"line-numbers language-mysql\" data-language=\"mysql\"><code class=\"language-mysql\"># 创建大表\ncreate table bigtable(id bigint, t bigint, uid string, keyword string, \nurl_rank int, click_num int, click_url string) row format delimited \nfields terminated by '\\t';\n# 创建小表\ncreate table smalltable(id bigint, t bigint, uid string, keyword string, \nurl_rank int, click_num int, click_url string) row format delimited \nfields terminated by '\\t';\n# 创建 join 后表的语句\ncreate table jointable(id bigint, t bigint, uid string, keyword string, \nurl_rank int, click_num int, click_url string) row format delimited \nfields terminated by '\\t';<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>5）分别向大表和小表中导入数据</p>\n<pre class=\"line-numbers language-mysql\" data-language=\"mysql\"><code class=\"language-mysql\">hive (default)&gt; load data local inpath '/opt/module/data/bigtable' into \ntable bigtable;\nhive (default)&gt;load data local inpath '/opt/module/data/smalltable' into \ntable smalltable;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n<p>6）小表 JOIN 大表语句</p>\n<pre class=\"line-numbers language-mysql\" data-language=\"mysql\"><code class=\"language-mysql\">insert overwrite table jointable\nselect b.id, b.t, b.uid, b.keyword, b.url_rank, b.click_num, b.click_url\nfrom smalltable s\njoin bigtable b\non b.id = s.id;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>7）大表 JOIN 小表语句</p>\n<pre class=\"line-numbers language-mysql\" data-language=\"mysql\"><code class=\"language-mysql\">insert overwrite table jointable\nselect b.id, b.t, b.uid, b.keyword, b.url_rank, b.click_num, b.click_url\nfrom bigtable b\njoin smalltable s\non s.id = b.id;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p><strong>大表 Join 大表</strong><br>1）空 KEY 过滤<br>        有时 join 超时是因为某些 key 对应的数据太多，而相同 key 对应的数据都会发送到相同的 reducer 上，从而导致内存不够。此时我们应该仔细分析这些异常的 key，很多情况下，这些 key 对应的数据是异常数据，我们需要在 SQL 语句中进行过滤。例如 key 对应的字段为空，操作如下：<br><strong>案例实操</strong><br>（1）配置历史服务器<br>配置 mapred-site.xml</p>\n<pre class=\"line-numbers language-xml\" data-language=\"xml\"><code class=\"language-xml\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>property</span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>name</span><span class=\"token punctuation\">&gt;</span></span>mapreduce.jobhistory.address<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>name</span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>value</span><span class=\"token punctuation\">&gt;</span></span>hadoop102:10020<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>value</span><span class=\"token punctuation\">&gt;</span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>property</span><span class=\"token punctuation\">&gt;</span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>property</span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>name</span><span class=\"token punctuation\">&gt;</span></span>mapreduce.jobhistory.webapp.address<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>name</span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>value</span><span class=\"token punctuation\">&gt;</span></span>hadoop102:19888<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>value</span><span class=\"token punctuation\">&gt;</span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>property</span><span class=\"token punctuation\">&gt;</span></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<pre class=\"line-numbers language-mysql\" data-language=\"mysql\"><code class=\"language-mysql\"># 启动历史服务器\nsbin/mr-jobhistory-daemon.sh start historyserver\n# 查看 jobhistory\nhttp://hadoop102:19888/jobhistory<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n<p>（2）创建原始数据空 id 表</p>\n<pre class=\"line-numbers language-mysql\" data-language=\"mysql\"><code class=\"language-mysql\"># 创建空 id 表\ncreate table nullidtable(id bigint, t bigint, uid string, keyword string, \nurl_rank int, click_num int, click_url string) row format delimited \nfields terminated by '\\t';<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n<p>（3）分别加载原始数据和空 id 数据到对应表中</p>\n<pre class=\"line-numbers language-mysql\" data-language=\"mysql\"><code class=\"language-mysql\">hive (default)&gt; load data local inpath '/opt/module/data/nullid' into \ntable nullidtable;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n<p>（4）测试不过滤空 id</p>\n<pre class=\"line-numbers language-mysql\" data-language=\"mysql\"><code class=\"language-mysql\">hive (default)&gt; insert overwrite table jointable select n.* from \nnullidtable n left join bigtable o on n.id = o.id;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n<p>（5）测试过滤空 id</p>\n<pre class=\"line-numbers language-mysql\" data-language=\"mysql\"><code class=\"language-mysql\">hive (default)&gt; insert overwrite table jointable select n.* from (select \nfrom nullidtable where id is not null) n left join bigtable o on n.id = o.id;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n<p>2）空 key 转换<br>        有时虽然某个 key 为空对应的数据很多，但是相应的数据不是异常数据，必须要包含在join 的结果中，此时我们可以表 a 中 key 为空的字段赋一个随机的值，使得数据随机均匀地分不到不同的 reducer 上。例如：<br><strong>案例实操：</strong><br>不随机分布空 null 值：<br>（1）设置 5 个 reduce 个数</p>\n<pre class=\"line-numbers language-mysql\" data-language=\"mysql\"><code class=\"language-mysql\">set mapreduce.job.reduces = 5;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>（2）JOIN 两张表</p>\n<pre class=\"line-numbers language-mysql\" data-language=\"mysql\"><code class=\"language-mysql\">insert overwrite table jointable\nselect n.* from nullidtable n left join bigtable b on n.id = b.id;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n<p>结果：如下图所示，可以看出来，出现了数据倾斜，某些 reducer 的资源消耗远大于其他 reducer。</p>\n<p><img src=\"https://img-blog.csdnimg.cn/4bc86cf38936475980b6e80355e8923d.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAWUZSNzE4,size_20,color_FFFFFF,t_70,g_se,x_16\" alt=\"\"></p>\n<p>随机分布空 null 值 （1）设置 5 个 reduce 个数</p>\n<pre class=\"line-numbers language-mysql\" data-language=\"mysql\"><code class=\"language-mysql\">set mapreduce.job.reduces = 5;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>（2）JOIN 两张表</p>\n<pre class=\"line-numbers language-mysql\" data-language=\"mysql\"><code class=\"language-mysql\">insert overwrite table jointable\nselect n.* from nullidtable n full join bigtable o on \nnvl(n.id,rand()) = o.id;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n<p>结果：如下图所示，可以看出来，消除了数据倾斜，负载均衡 reducer 的资源消耗</p>\n<p><img src=\"https://img-blog.csdnimg.cn/eb04902b093b4e74b06a3fe2dcbbeed0.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAWUZSNzE4,size_20,color_FFFFFF,t_70,g_se,x_16\" alt=\"\"></p>\n<p>3）SMB(Sort Merge Bucket join)<br>（1）创建第二张大表</p>\n<pre class=\"line-numbers language-mysql\" data-language=\"mysql\"><code class=\"language-mysql\">create table bigtable2(\n    id bigint,\n    t bigint,\n    uid string,\n    keyword string,\n    url_rank int,\n    click_num int,\n    click_url string)\nrow format delimited fields terminated by '\\t';\nload data local inpath '/opt/module/data/bigtable' into table bigtable2;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>测试大表直接 JOIN</p>\n<pre class=\"line-numbers language-mysql\" data-language=\"mysql\"><code class=\"language-mysql\">insert overwrite table jointable\nselect b.id, b.t, b.uid, b.keyword, b.url_rank, b.click_num, b.click_url\nfrom bigtable s\njoin bigtable2 b\non b.id = s.id;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>（2）创建分通表 1,桶的个数不要超过可用 CPU 的核数</p>\n<pre class=\"line-numbers language-mysql\" data-language=\"mysql\"><code class=\"language-mysql\">create table bigtable_buck1(\n    id bigint,\n    t bigint,\n    uid string,\n    keyword string,\n    url_rank int,\n    click_num int,\n    click_url string)\nclustered by(id) \nsorted by(id)\ninto 6 buckets\nrow format delimited fields terminated by '\\t';\nload data local inpath '/opt/module/data/bigtable' into table \nbigtable_buck1;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>（3）创建分通表 2,桶的个数不要超过可用 CPU 的核数</p>\n<pre class=\"line-numbers language-mysql\" data-language=\"mysql\"><code class=\"language-mysql\">create table bigtable_buck2(\n    id bigint,\n    t bigint,\n    uid string,\n    keyword string,\n    url_rank int,\n    click_num int,\n    click_url string)\nclustered by(id)\nsorted by(id) \ninto 6 buckets\nrow format delimited fields terminated by '\\t';\nload data local inpath '/opt/module/data/bigtable' into table \nbigtable_buck2;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>（4）设置参数</p>\n<pre class=\"line-numbers language-mysql\" data-language=\"mysql\"><code class=\"language-mysql\">set hive.optimize.bucketmapjoin = true;\nset hive.optimize.bucketmapjoin.sortedmerge = true;\nset \nhive.input.format=org.apache.hadoop.hive.ql.io.BucketizedHiveInputFormat;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n<p>（5）测试</p>\n<pre class=\"line-numbers language-mysql\" data-language=\"mysql\"><code class=\"language-mysql\">insert overwrite table jointable\nselect b.id, b.t, b.uid, b.keyword, b.url_rank, b.click_num, b.click_url\nfrom bigtable_buck1 s\njoin bigtable_buck2 b\non b.id = s.id;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p><strong>Group By</strong><br>        默认情况下，Map 阶段同一 Key 数据分发给一个 reduce，当一个 key 数据过大时就倾斜了。</p>\n<p><img src=\"https://img-blog.csdnimg.cn/65a6441a2c1b41cb9a143fd3599912ef.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAWUZSNzE4,size_20,color_FFFFFF,t_70,g_se,x_16\" alt=\"\"></p>\n<p>​        并不是所有的聚合操作都需要在 Reduce 端完成，很多聚合操作都可以先在 Map 端进行部分聚合，最后在 Reduce 端得出最终结果。<br>1）开启 Map 端聚合参数设置</p>\n<pre class=\"line-numbers language-mysql\" data-language=\"mysql\"><code class=\"language-mysql\"># 是否在 Map 端进行聚合，默认为 True\nset hive.map.aggr = true\n# 在 Map 端进行聚合操作的条目数目\nset hive.groupby.mapaggr.checkinterval = 100000\n# 有数据倾斜的时候进行负载均衡（默认是 false）\nset hive.groupby.skewindata = true<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>​        当选项设定为 true，生成的查询计划会有两个 MR Job。第一个 MR Job 中，Map 的输出结果会随机分布到 Reduce 中，每个 Reduce 做部分聚合操作，并输出结果，这样处理的结果是相同的 Group By Key 有可能被分发到不同的 Reduce 中，从而达到负载均衡的目的；第二个 MR Job 再根据预处理的数据结果按照 Group By Key 分布到 Reduce 中（这个过程可以保证相同的 Group By Key 被分布到同一个 Reduce 中），最后完成最终的聚合操作。</p>\n<pre class=\"line-numbers language-mysql\" data-language=\"mysql\"><code class=\"language-mysql\">hive (default)&gt; select deptno from emp group by deptno;\nStage-Stage-1: Map: 1 Reduce: 5 Cumulative CPU: 23.68 sec HDFS Read: \n19987 HDFS Write: 9 SUCCESS\nTotal MapReduce CPU Time Spent: 23 seconds 680 msec\nOK\ndeptno\n10\n20\n30<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>优化以后</p>\n<pre class=\"line-numbers language-mysql\" data-language=\"mysql\"><code class=\"language-mysql\">hive (default)&gt; set hive.groupby.skewindata = true;\nhive (default)&gt; select deptno from emp group by deptno;\nStage-Stage-1: Map: 1 Reduce: 5 Cumulative CPU: 28.53 sec HDFS Read: \n18209 HDFS Write: 534 SUCCESS\nStage-Stage-2: Map: 1 Reduce: 5 Cumulative CPU: 38.32 sec HDFS Read: \n15014 HDFS Write: 9 SUCCESS\nTotal MapReduce CPU Time Spent: 1 minutes 6 seconds 850 msec\nOK\ndeptno\n10\n20\n30<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p><strong>Count(Distinct) 去重统计</strong><br>        数据量小的时候无所谓，数据量大的情况下，由于 COUNT DISTINCT 操作需要用一个Reduce Task 来完成，这一个 Reduce 需要处理的数据量太大，就会导致整个 Job 很难完成，一般 COUNT DISTINCT 使用先 GROUP BY 再 COUNT 的方式替换,但是需要注意 group by 造成的数据倾斜问题. </p>\n<p>1）案例实操<br>（1）创建一张大表</p>\n<pre class=\"line-numbers language-mysql\" data-language=\"mysql\"><code class=\"language-mysql\">hive (default)&gt; create table bigtable(id bigint, time bigint, uid string, \nkeyword\nstring, url_rank int, click_num int, click_url string) row format \ndelimited\nfields terminated by '\\t';<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>（2）加载数据</p>\n<pre class=\"line-numbers language-mysql\" data-language=\"mysql\"><code class=\"language-mysql\">hive (default)&gt; load data local inpath '/opt/module/data/bigtable' into \ntable bigtable;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n<p>（3）设置 5 个 reduce 个数</p>\n<pre class=\"line-numbers language-mysql\" data-language=\"mysql\"><code class=\"language-mysql\">set mapreduce.job.reduces = 5;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>（4）执行去重 id 查询</p>\n<pre class=\"line-numbers language-mysql\" data-language=\"mysql\"><code class=\"language-mysql\">hive (default)&gt; select count(distinct id) from bigtable;\nStage-Stage-1: Map: 1 Reduce: 1 Cumulative CPU: 7.12 sec HDFS Read: \n120741990 HDFS Write: 7 SUCCESS\nTotal MapReduce CPU Time Spent: 7 seconds 120 msec\nOK\nc0\n100001\nTime taken: 23.607 seconds, Fetched: 1 row(s)<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>（5）采用 GROUP by 去重 id</p>\n<pre class=\"line-numbers language-mysql\" data-language=\"mysql\"><code class=\"language-mysql\">hive (default)&gt; select count(id) from (select id from bigtable group by \nid) a;\nStage-Stage-1: Map: 1 Reduce: 5 Cumulative CPU: 17.53 sec HDFS Read: \n120752703 HDFS Write: 580 SUCCESS\nStage-Stage-2: Map: 1 Reduce: 1 Cumulative CPU: 4.29 sec2 HDFS Read: \n9409 HDFS Write: 7 SUCCESS\nTotal MapReduce CPU Time Spent: 21 seconds 820 msec\nOK\n_c0\n100001\nTime taken: 50.795 seconds, Fetched: 1 row(s)<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>虽然会多用一个 Job 来完成，但在数据量大的情况下，这个绝对是值得的。<br><strong>笛卡尔积</strong><br>        尽量避免笛卡尔积，join 的时候不加 on 条件，或者无效的 on 条件，Hive 只能使用 1 个reducer 来完成笛卡尔积。</p>\n<p><strong>行列过滤</strong><br>列处理：在 SELECT 中，只拿需要的列，如果有分区，尽量使用分区过滤，少用 SELECT *。<br>行处理：在分区剪裁中，当使用外关联时，如果将副表的过滤条件写在 Where 后面，<br>那么就会先全表关联，之后再过滤，比如：<br>案例实操：<br>1）测试先关联两张表，再用 where 条件过滤</p>\n<pre class=\"line-numbers language-mysql\" data-language=\"mysql\"><code class=\"language-mysql\">hive (default)&gt; select o.id from bigtable b\njoin bigtable o on o.id = b.id\nwhere o.id &lt;= 10;\nTime taken: 34.406 seconds, Fetched: 100 row(s)<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n<p>2）通过子查询后，再关联表</p>\n<pre class=\"line-numbers language-mysql\" data-language=\"mysql\"><code class=\"language-mysql\">hive (default)&gt; select b.id from bigtable b\njoin (select id from bigtable where id &lt;= 10) o on b.id = o.id;\nTime taken: 30.058 seconds, Fetched: 100 row(s)<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n<p><strong>分区</strong><br>详见 7.1 章。<br><strong>分桶</strong><br>详见 7.2 章。 </p>\n<h2 id=\"10-5-合理设置-Map-及-Reduce-数\"><a href=\"#10-5-合理设置-Map-及-Reduce-数\" class=\"headerlink\" title=\"10.5 合理设置 Map 及 Reduce 数\"></a>10.5 合理设置 Map 及 Reduce 数</h2><p>1）通常情况下，作业会通过 input 的目录产生一个或者多个 map 任务。<br>        主要的决定因素有：input 的文件总个数，input 的文件大小，集群设置的文件块大小。<br>2）是不是 map 数越多越好？<br>        答案是否定的。如果一个任务有很多小文件（远远小于块大小 128m），则每个小文件也会被当做一个块，用一个 map 任务来完成，而一个 map 任务启动和初始化的时间远远大于逻辑处理的时间，就会造成很大的资源浪费。而且，同时可执行的 map 数是受限的。<br>3）是不是保证每个 map 处理接近 128m 的文件块，就高枕无忧了？<br>        答案也是不一定。比如有一个 127m 的文件，正常会用一个 map 去完成，但这个文件只有一个或者两个小字段，却有几千万的记录，如果 map 处理的逻辑比较复杂，用一个 map任务去做，肯定也比较耗时。</p>\n<p>​        针对上面的问题 2 和 3，我们需要采取两种方式来解决：即减少 map 数和增加 map 数；<br><strong>复杂文件增加 Map 数</strong> </p>\n<p>​        当 input 的文件都很大，任务逻辑复杂，map 执行非常慢的时候，可以考虑增加 Map 数，来使得每个 map 处理的数据量减少，从而提高任务的执行效率。<br>​        增加 map 的方法为：根据<br>​        computeSliteSize(Math.max(minSize,Math.min(maxSize,blocksize)))=blocksize=128M 公式，调整 maxSize 最大值。让 maxSize 最大值低于 blocksize 就可以增加 map 的个数。<br>案例实操：</p>\n<pre class=\"line-numbers language-mysql\" data-language=\"mysql\"><code class=\"language-mysql\"># 执行查询\nhive (default)&gt; select count(*) from emp;\nHadoop job information for Stage-1: number of mappers: 1; number of \nreducers: 1\n# 设置最大切片值为 100 个字节\nhive (default)&gt; set mapreduce.input.fileinputformat.split.maxsize=100;\nhive (default)&gt; select count(*) from emp;\nHadoop job information for Stage-1: number of mappers: 6; number of \nreducers: 1<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p><strong>小文件进行合并</strong><br>1）在 map 执行前合并小文件，减少 map 数：CombineHiveInputFormat 具有对小文件进行合并的功能（系统默认的格式）。HiveInputFormat 没有对小文件合并功能。</p>\n<pre class=\"line-numbers language-mysql\" data-language=\"mysql\"><code class=\"language-mysql\">set hive.input.format= \norg.apache.hadoop.hive.ql.io.CombineHiveInputFormat;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n<p>2）在 Map-Reduce 的任务结束时合并小文件的设置： </p>\n<p>​        在 map-only 任务结束时合并小文件，默认 true</p>\n<pre class=\"line-numbers language-mysql\" data-language=\"mysql\"><code class=\"language-mysql\">SET hive.merge.mapfiles = true;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>​        在 map-reduce 任务结束时合并小文件，默认 false</p>\n<pre class=\"line-numbers language-mysql\" data-language=\"mysql\"><code class=\"language-mysql\">SET hive.merge.mapredfiles = true;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>​        合并文件的大小，默认 256M</p>\n<pre class=\"line-numbers language-mysql\" data-language=\"mysql\"><code class=\"language-mysql\">SET hive.merge.size.per.task = 268435456;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>​        当输出文件的平均大小小于该值时，启动一个独立的 map-reduce 任务进行文件 merge</p>\n<pre class=\"line-numbers language-mysql\" data-language=\"mysql\"><code class=\"language-mysql\">SET hive.merge.smallfiles.avgsize = 16777216;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p><strong>合理设置 Reduce 数</strong> </p>\n<p>1）调整 reduce 个数方法一<br>（1）每个 Reduce 处理的数据量默认是 256MB</p>\n<pre class=\"line-numbers language-mysql\" data-language=\"mysql\"><code class=\"language-mysql\">hive.exec.reducers.bytes.per.reducer=256000000<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>（2）每个任务最大的 reduce 数，默认为 1009</p>\n<pre class=\"line-numbers language-mysql\" data-language=\"mysql\"><code class=\"language-mysql\">hive.exec.reducers.max=1009<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>（3）计算 reducer 数的公式</p>\n<pre class=\"line-numbers language-mysql\" data-language=\"mysql\"><code class=\"language-mysql\">N=min(参数 2，总输入数据量/参数 1)<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>2）调整 reduce 个数方法二<br>        在 hadoop 的 mapred-default.xml 文件中修改<br>        设置每个 job 的 Reduce 个数</p>\n<pre class=\"line-numbers language-mysql\" data-language=\"mysql\"><code class=\"language-mysql\">set mapreduce.job.reduces = 15;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>3）reduce 个数并不是越多越好<br>（1）过多的启动和初始化 reduce 也会消耗时间和资源；<br>（2）另外，有多少个 reduce，就会有多少个输出文件，如果生成了很多个小文件，那么如果这些小文件作为下一个任务的输入，则也会出现小文件过多的问题；<br>        在设置 reduce 个数的时候也需要考虑这两个原则：处理大数据量利用合适的 reduce 数；使单个 reduce 任务处理数据量大小要合适；</p>\n<h2 id=\"10-6-并行执行\"><a href=\"#10-6-并行执行\" class=\"headerlink\" title=\"10.6 并行执行\"></a>10.6 并行执行</h2><p>​        Hive 会将一个查询转化成一个或者多个阶段。这样的阶段可以是 MapReduce 阶段、抽样阶段、合并阶段、limit 阶段。或者 Hive 执行过程中可能需要的其他阶段。默认情况下，Hive 一次只会执行一个阶段。不过，某个特定的 job 可能包含众多的阶段，而这些阶段可能并非完全互相依赖的，也就是说有些阶段是可以并行执行的，这样可能使得整个 job 的执行时间缩短。不过，如果有更多的阶段可以并行执行，那么 job 可能就越快完成。通过设置参数 hive.exec.parallel 值为 true，就可以开启并发执行。不过，在共享集群中，需要注意下，如果 job 中并行阶段增多，那么集群利用率就会增加。</p>\n<pre class=\"line-numbers language-mysql\" data-language=\"mysql\"><code class=\"language-mysql\">set hive.exec.parallel=true; //打开任务并行执行\nset hive.exec.parallel.thread.number=16; //同一个 sql 允许最大并行度，默认为8。<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n<p>​        当然，得是在系统资源比较空闲的时候才有优势，否则，没资源，并行也起不来。</p>\n<h2 id=\"10-7-严格模式\"><a href=\"#10-7-严格模式\" class=\"headerlink\" title=\"10.7 严格模式\"></a>10.7 严格模式</h2><p>Hive 可以通过设置防止一些危险操作：<br>1）分区表不使用分区过滤<br>         将 hive.strict.checks.no.partition.filter 设置为 true 时，对于分区表，除非 where 语句中含有分区字段过滤条件来限制范围，否则不允许执行。换句话说，就是用户不允许扫描所有分区。进行这个限制的原因是，通常分区表都拥有非常大的数据集，而且数据增加迅速。没有进行分区限制的查询可能会消耗令人不可接受的巨大资源来处理这个表。<br>2）使用 order by 没有 limit 过滤<br>        将 hive.strict.checks.orderby.no.limit 设置为 true 时，对于使用了 order by 语句的查询，要求必须使用 limit 语句。因为 order by 为了执行排序过程会将所有的结果数据分发到同一个Reducer 中进行处理，强制要求用户增加这个 LIMIT 语句可以防止 Reducer 额外执行很长一段时间。<br>3）笛卡尔积<br>        将 hive.strict.checks.cartesian.product 设置为 true 时，会限制笛卡尔积的查询。对关系型数据库非常了解的用户可能期望在 执行 JOIN 查询的时候不使用 ON 语句而是使用 where 语句，这样关系数据库的执行优化器就可以高效地将 WHERE 语句转化成那个 ON 语句。不幸的是，Hive 并不会执行这种优化，因此，如果表足够大，那么这个查询就会出现不可控的情况。</p>\n<h2 id=\"10-8-JVM-重用\"><a href=\"#10-8-JVM-重用\" class=\"headerlink\" title=\"10.8 JVM 重用\"></a>10.8 JVM 重用</h2><p>详见 hadoop 优化文档中 jvm 重用</p>\n<h2 id=\"10-9-压缩\"><a href=\"#10-9-压缩\" class=\"headerlink\" title=\"10.9 压缩\"></a>10.9 压缩</h2><p>详见第 9 章。</p>\n<h1 id=\"第-11-章-Hive-实战\"><a href=\"#第-11-章-Hive-实战\" class=\"headerlink\" title=\"第 11 章 Hive 实战\"></a>第 11 章 Hive 实战</h1><h2 id=\"11-1-需求描述\"><a href=\"#11-1-需求描述\" class=\"headerlink\" title=\"11.1 需求描述\"></a>11.1 需求描述</h2><p>统计硅谷影音视频网站的常规指标，各种 TopN 指标：<br>— 统计视频观看数 Top10<br>— 统计视频类别热度 Top10<br>— 统计出视频观看数最高的 20 个视频的所属类别以及类别包含 Top20 视频的个数<br>— 统计视频观看数 Top50 所关联视频的所属类别排序<br>— 统计每个类别中的视频热度 Top10,以 Music 为例<br>— 统计每个类别视频观看数 Top10 — 统计上传视频最多的用户 Top10 以及他们上传的视频观看次数在前 20 的视频</p>\n<h2 id=\"11-2-数据结构\"><a href=\"#11-2-数据结构\" class=\"headerlink\" title=\"11.2 数据结构\"></a>11.2 数据结构</h2><p>1）视频表<br><img src=\"https://img-blog.csdnimg.cn/8b03ab4d2727415e81efabdafdba8d23.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAWUZSNzE4,size_20,color_FFFFFF,t_70,g_se,x_16\" alt=\"视频表\"><br>用户表<br><img src=\"https://img-blog.csdnimg.cn/f81d117a3bd44bcebff30920bc7dd2cb.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAWUZSNzE4,size_20,color_FFFFFF,t_70,g_se,x_16\" alt=\"\"></p>\n<h2 id=\"11-3-准备工作\"><a href=\"#11-3-准备工作\" class=\"headerlink\" title=\"11.3 准备工作\"></a>11.3 准备工作</h2><p><strong>准备表</strong><br>1）需要准备的表<br>        创建原始数据表：gulivideo_ori，gulivideo_user_ori，<br>        创建最终表：gulivideo_orc，gulivideo_user_orc 2）创建原始数据表：<br> （1)gulivideo_ori</p>\n<pre class=\"line-numbers language-mysql\" data-language=\"mysql\"><code class=\"language-mysql\">create table gulivideo_ori(\n    videoId string, \n    uploader string, \n    age int, \n    category array&lt;string&gt;, \n    length int, \n    views int, \n    rate float, \n    ratings int, \n    comments int,\n    relatedId array&lt;string&gt;)\nrow format delimited fields terminated by \"\\t\"\ncollection items terminated by \"&amp;\"\nstored as textfile;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>（2）创建原始数据表: gulivideo_user_ori</p>\n<pre class=\"line-numbers language-mysql\" data-language=\"mysql\"><code class=\"language-mysql\">create table gulivideo_user_ori(\n    uploader string,\n    videos int,\n    friends int)\nrow format delimited \nfields terminated by \"\\t\" \nstored as textfile;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>2）创建 orc 存储格式带 snappy 压缩的表：<br>（1）gulivideo_orc</p>\n<pre class=\"line-numbers language-mysql\" data-language=\"mysql\"><code class=\"language-mysql\">create table gulivideo_orc(\n    videoId string, \n    uploader string, \n    age int, \n    category array&lt;string&gt;, \n    length int, \n    views int, \n    rate float, \n    ratings int, \n    comments int,\n    relatedId array&lt;string&gt;)\nstored as orc\ntblproperties(\"orc.compress\"=\"SNAPPY\");<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>（2）gulivideo_user_orc</p>\n<pre class=\"line-numbers language-mysql\" data-language=\"mysql\"><code class=\"language-mysql\">create table gulivideo_user_orc(\n    uploader string,\n    videos int,\n    friends int)\nrow format delimited \nfields terminated by \"\\t\" \nstored as orc\ntblproperties(\"orc.compress\"=\"SNAPPY\");<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>（3）向 ori 表插入数据</p>\n<pre class=\"line-numbers language-mysql\" data-language=\"mysql\"><code class=\"language-mysql\">load data local inpath \"/opt/module/data/video\" into table gulivideo_ori;\nload data local inpath \"/opt/module/user\" into table gulivideo_user_ori; <span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n<p>（4）向 orc 表插入数据</p>\n<pre class=\"line-numbers language-mysql\" data-language=\"mysql\"><code class=\"language-mysql\">insert into table gulivideo_orc select * from gulivideo_ori;\ninsert into table gulivideo_user_orc select * from gulivideo_user_ori;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n<p><strong>安装 Tez 引擎（了解）</strong><br>Tez 是一个 Hive 的运行引擎，性能优于 MR。为什么优于 MR 呢？看下。</p>\n<p><img src=\"https://img-blog.csdnimg.cn/7e9f4e92a100416095c7b01672ebb1a6.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAWUZSNzE4,size_20,color_FFFFFF,t_70,g_se,x_16\" alt=\"\"></p>\n<p>​        用 Hive 直接编写 MR 程序，假设有四个有依赖关系的 MR 作业，上图中，绿色是 ReduceTask，云状表示写屏蔽，需要将中间结果持久化写到 HDFS。<br>​        Tez 可以将多个有依赖的作业转换为一个作业，这样只需写一次 HDFS，且中间节点较少，从而大大提升作业的计算性能。 </p>\n<p>1）将 tez 安装包拷贝到集群，并解压 tar 包</p>\n<pre class=\"line-numbers language-mysql\" data-language=\"mysql\"><code class=\"language-mysql\">[atguigu@hadoop102 software]$ mkdir /opt/module/tez\n[atguigu@hadoop102 software]$ tar -zxvf /opt/software/tez-0.10.1-\nSNAPSHOT-minimal.tar.gz -C /opt/module/tez<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n<p>2）上传 tez 依赖到 HDFS</p>\n<pre class=\"line-numbers language-mysql\" data-language=\"mysql\"><code class=\"language-mysql\">[atguigu@hadoop102 software]$ hadoop fs -mkdir /tez\n[atguigu@hadoop102 software]$ hadoop fs -put /opt/software/tez-0.10.1-\nSNAPSHOT.tar.gz /tez<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n<p>3）新建 tez-site.xml<br>[atguigu@hadoop102 software]<mjx-container class=\"MathJax\" jax=\"SVG\"><svg style=\"vertical-align: -0.025ex\" xmlns=\"http://www.w3.org/2000/svg\" width=\"3.864ex\" height=\"1.52ex\" role=\"img\" focusable=\"false\" viewBox=\"0 -661 1708 672\"><g stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"scale(1,-1)\"><g data-mml-node=\"math\"><g data-mml-node=\"mi\"><path data-c=\"1D463\" d=\"M173 380Q173 405 154 405Q130 405 104 376T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Q21 294 29 316T53 368T97 419T160 441Q202 441 225 417T249 361Q249 344 246 335Q246 329 231 291T200 202T182 113Q182 86 187 69Q200 26 250 26Q287 26 319 60T369 139T398 222T409 277Q409 300 401 317T383 343T365 361T357 383Q357 405 376 424T417 443Q436 443 451 425T467 367Q467 340 455 284T418 159T347 40T241 -11Q177 -11 139 22Q102 54 102 117Q102 148 110 181T151 298Q173 362 173 380Z\"></path></g><g data-mml-node=\"mi\" transform=\"translate(485,0)\"><path data-c=\"1D456\" d=\"M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z\"></path></g><g data-mml-node=\"mi\" transform=\"translate(830,0)\"><path data-c=\"1D45A\" d=\"M21 287Q22 293 24 303T36 341T56 388T88 425T132 442T175 435T205 417T221 395T229 376L231 369Q231 367 232 367L243 378Q303 442 384 442Q401 442 415 440T441 433T460 423T475 411T485 398T493 385T497 373T500 364T502 357L510 367Q573 442 659 442Q713 442 746 415T780 336Q780 285 742 178T704 50Q705 36 709 31T724 26Q752 26 776 56T815 138Q818 149 821 151T837 153Q857 153 857 145Q857 144 853 130Q845 101 831 73T785 17T716 -10Q669 -10 648 17T627 73Q627 92 663 193T700 345Q700 404 656 404H651Q565 404 506 303L499 291L466 157Q433 26 428 16Q415 -11 385 -11Q372 -11 364 -4T353 8T350 18Q350 29 384 161L420 307Q423 322 423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 181Q151 335 151 342Q154 357 154 369Q154 405 129 405Q107 405 92 377T69 316T57 280Q55 278 41 278H27Q21 284 21 287Z\"></path></g></g></g></svg></mjx-container>HADOOP_HOME/etc/hadoop/tez-site.xml<br>添加如下内容：</p>\n<pre class=\"line-numbers language-xml\" data-language=\"xml\"><code class=\"language-xml\"><span class=\"token prolog\">&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;</span>\n<span class=\"token prolog\">&lt;?xml-stylesheet type=\"text/xsl\" href=\"configuration.xsl\"?&gt;</span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>configuration</span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>property</span><span class=\"token punctuation\">&gt;</span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>name</span><span class=\"token punctuation\">&gt;</span></span>tez.lib.uris<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>name</span><span class=\"token punctuation\">&gt;</span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>value</span><span class=\"token punctuation\">&gt;</span></span>${fs.defaultFS}/tez/tez-0.10.1-SNAPSHOT.tar.gz<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>value</span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>property</span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>property</span><span class=\"token punctuation\">&gt;</span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>name</span><span class=\"token punctuation\">&gt;</span></span>tez.use.cluster.hadoop-libs<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>name</span><span class=\"token punctuation\">&gt;</span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>value</span><span class=\"token punctuation\">&gt;</span></span>true<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>value</span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>property</span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>property</span><span class=\"token punctuation\">&gt;</span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>name</span><span class=\"token punctuation\">&gt;</span></span>tez.am.resource.memory.mb<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>name</span><span class=\"token punctuation\">&gt;</span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>value</span><span class=\"token punctuation\">&gt;</span></span>1024<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>value</span><span class=\"token punctuation\">&gt;</span></span>\n\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>property</span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>property</span><span class=\"token punctuation\">&gt;</span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>name</span><span class=\"token punctuation\">&gt;</span></span>tez.am.resource.cpu.vcores<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>name</span><span class=\"token punctuation\">&gt;</span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>value</span><span class=\"token punctuation\">&gt;</span></span>1<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>value</span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>property</span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>property</span><span class=\"token punctuation\">&gt;</span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>name</span><span class=\"token punctuation\">&gt;</span></span>tez.container.max.java.heap.fraction<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>name</span><span class=\"token punctuation\">&gt;</span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>value</span><span class=\"token punctuation\">&gt;</span></span>0.4<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>value</span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>property</span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>property</span><span class=\"token punctuation\">&gt;</span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>name</span><span class=\"token punctuation\">&gt;</span></span>tez.task.resource.memory.mb<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>name</span><span class=\"token punctuation\">&gt;</span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>value</span><span class=\"token punctuation\">&gt;</span></span>1024<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>value</span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>property</span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>property</span><span class=\"token punctuation\">&gt;</span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>name</span><span class=\"token punctuation\">&gt;</span></span>tez.task.resource.cpu.vcores<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>name</span><span class=\"token punctuation\">&gt;</span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>value</span><span class=\"token punctuation\">&gt;</span></span>1<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>value</span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>property</span><span class=\"token punctuation\">&gt;</span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>configuration</span><span class=\"token punctuation\">&gt;</span></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>4）修改 Hadoop 环境变量</p>\n<pre class=\"line-numbers language-mysql\" data-language=\"mysql\"><code class=\"language-mysql\">[atguigu@hadoop102 software]$ vim\n$HADOOP_HOME/etc/hadoop/shellprofile.d/tez.sh<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n<p>​        添加 Tez 的 Jar 包相关信息</p>\n<pre class=\"line-numbers language-mysql\" data-language=\"mysql\"><code class=\"language-mysql\">hadoop_add_profile tez\nfunction _tez_hadoop_classpath\n{\n hadoop_add_classpath \"$HADOOP_HOME/etc/hadoop\" after\n hadoop_add_classpath \"/opt/module/tez/*\" after\n hadoop_add_classpath \"/opt/module/tez/lib/*\" after\n} \n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>5）修改 Hive 的计算引擎</p>\n<pre class=\"line-numbers language-mysql\" data-language=\"mysql\"><code class=\"language-mysql\">[atguigu@hadoop102 software]$ vim $HIVE_HOME/conf/hive-site.xml\n添加\n&lt;property&gt;\n &lt;name&gt;hive.execution.engine&lt;/name&gt;\n &lt;value&gt;tez&lt;/value&gt;\n&lt;/property&gt;\n&lt;property&gt;\n &lt;name&gt;hive.tez.container.size&lt;/name&gt;\n &lt;value&gt;1024&lt;/value&gt;\n&lt;/property&gt;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>6）解决日志 Jar 包冲突</p>\n<pre class=\"line-numbers language-mysql\" data-language=\"mysql\"><code class=\"language-mysql\">[atguigu@hadoop102 software]$ rm /opt/module/tez/lib/slf4j-log4j12-\n1.7.10.jar<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n<h2 id=\"11-4-业务分析\"><a href=\"#11-4-业务分析\" class=\"headerlink\" title=\"11.4 业务分析\"></a>11.4 业务分析</h2><p><strong>统计视频观看数 Top10</strong><br>思路：使用 order by 按照 views 字段做一个全局排序即可，同时我们设置只显示前 10条。<br>最终代码：</p>\n<pre class=\"line-numbers language-mysql\" data-language=\"mysql\"><code class=\"language-mysql\">SELECT \n videoId,\n views\nFROM \n gulivideo_orc\nORDER BY \n views DESC\nLIMIT 10;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p><strong>统计视频类别热度 Top10</strong><br>思路： </p>\n<p>（1）即统计每个类别有多少个视频，显示出包含视频最多的前 10 个类别。<br>（2）我们需要按照类别 group by 聚合，然后 count 组内的 videoId 个数即可。<br>（3）因为当前表结构为：一个视频对应一个或多个类别。所以如果要 group by 类别，需要先将类别进行列转行(展开)，然后再进行 count 即可。<br>（4）最后按照热度排序，显示前 10 条。</p>\n<pre class=\"line-numbers language-mysql\" data-language=\"mysql\"><code class=\"language-mysql\"># 最终代码：\nSELECT \n t1.category_name , \n COUNT(t1.videoId) hot\nFROM \n(\n    SELECT \n    videoId, \n    category_name \n    FROM \n    gulivideo_orc \n    lateral VIEW explode(category) gulivideo_orc_tmp AS category_name\n) t1\nGROUP BY \n t1.category_name \nORDER BY\n hot \nDESC \nLIMIT 10<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p><strong>统计出视频观看数最高的 20 个视频的所属类别以及类别包含Top20 视频的个数</strong><br>思路：<br>（1）先找到观看数最高的 20 个视频所属条目的所有信息，降序排列<br>（2）把这 20 条信息中的 category 分裂出来(列转行) （3）最后查询视频分类名称和该分类下有多少个 Top20 的视频<br>最终代码：</p>\n<pre class=\"line-numbers language-mysql\" data-language=\"mysql\"><code class=\"language-mysql\">SELECT \n t2.category_name,\n COUNT(t2.videoId) video_sum\nFROM \n(\n    SELECT\n    t1.videoId,\n    category_name\n    FROM \n    (\n        SELECT \n        videoId, \n        views ,\n        category \n        FROM \n        gulivideo_orc\n        ORDER BY \n        views \n        DESC \n        LIMIT 20 \n    ) t1\n    lateral VIEW explode(t1.category) t1_tmp AS category_name\n) t2\nGROUP BY t2.category_name<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p><strong>统计视频观看数 Top50 所关联视频的所属类别排序</strong><br>代码：</p>\n<pre class=\"line-numbers language-mysql\" data-language=\"mysql\"><code class=\"language-mysql\">SELECT\n t6.category_name,\n t6.video_sum,\n rank() over(ORDER BY t6.video_sum DESC ) rk\nFROM\n(\n    SELECT\n    t5.category_name,\n    COUNT(t5.relatedid_id) video_sum\n    FROM\n    (\n        SELECT\n        t4.relatedid_id,\n        category_name\n        FROM\n        (\n            SELECT \n            t2.relatedid_id ,\n            t3.category \n            FROM \n            (\n                SELECT \n                relatedid_id\n                FROM \n                (\n                    SELECT \n                    videoId, \n                    views,\n                    relatedid \n                    FROM \n                    gulivideo_orc\n                    ORDER BY\n                    views \n                    DESC \n                    LIMIT 50\n                )t1\n                lateral VIEW explode(t1.relatedid) t1_tmp AS relatedid_id\n            )t2 \n            JOIN \n            gulivideo_orc t3 \n            ON \n            t2.relatedid_id = t3.videoId \n        ) t4 \n        lateral VIEW explode(t4.category) t4_tmp AS category_name\n    ) t5\n    GROUP BY\n    t5.category_name\n    ORDER BY \n    video_sum\n    DESC \n) t6<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p><strong>统计每个类别中的视频热度 Top10，以 Music 为例</strong><br>思路： </p>\n<p>（1）要想统计 Music 类别中的视频热度 Top10，需要先找到 Music 类别，那么就需要将category 展开，所以可以创建一张表用于存放 categoryId 展开的数据。<br>（2）向 category 展开的表中插入数据。<br>（3）统计对应类别（Music）中的视频热度。<br>统计 Music 类别的 Top10（也可以统计其他）</p>\n<pre class=\"line-numbers language-mysql\" data-language=\"mysql\"><code class=\"language-mysql\">SELECT \n t1.videoId, \n t1.views,\n t1.category_name\nFROM \n(\n    SELECT\n    videoId,\n    views,\n    category_name\n    FROM gulivideo_orc\n    lateral VIEW explode(category) gulivideo_orc_tmp AS category_name\n)t1 \nWHERE \n t1.category_name = \"Music\" \nORDER BY \n t1.views \nDESC \nLIMIT 10<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p><strong>统计每个类别视频观看数 Top10</strong><br>最终代码：</p>\n<pre class=\"line-numbers language-mysql\" data-language=\"mysql\"><code class=\"language-mysql\">SELECT \n t2.videoId,\n t2.views,\n t2.category_name,\n t2.rk\nFROM \n(\n    SELECT \n    t1.videoId,\n    t1.views,\n    t1.category_name,\n    rank() over(PARTITION BY t1.category_name ORDER BY t1.views DESC ) rk\n    FROM \n    (\n        SELECT\n        videoId,\n        views,\n        category_name\n        FROM gulivideo_orc\n        lateral VIEW explode(category) gulivideo_orc_tmp AS category_name\n    )t1\n)t2\nWHERE t2.rk &lt;=10<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p><strong>统计上传视频最多的用户 Top10以及他们上传的视频</strong><br>观看次数在前 20 的视频<br>思路： </p>\n<p>（1）求出上传视频最多的 10 个用户<br>（2）关联 gulivideo_orc 表，求出这 10 个用户上传的所有的视频，按照观看数取前 20<br>最终代码:</p>\n<pre class=\"line-numbers language-mysql\" data-language=\"mysql\"><code class=\"language-mysql\">SELECT \n t2.videoId,\n t2.views,\n t2.uploader\nFROM\n(\n    SELECT \n    uploader,\n    videos\n    FROM gulivideo_user_orc \n    ORDER BY \n    videos\n    DESC\n    LIMIT 10 \n) t1\nJOIN gulivideo_orc t2 \nON t1.uploader = t2.uploader\nORDER BY \n t2.views \nDESC\nLIMIT 20<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h1 id=\"附录：常见错误及解决方案\"><a href=\"#附录：常见错误及解决方案\" class=\"headerlink\" title=\"附录：常见错误及解决方案\"></a>附录：常见错误及解决方案</h1><p><strong>0）如果更换 Tez 引擎后，执行任务卡住，可以尝试调节容量调度器的资源调度策略</strong><br>将$HADOOP_HOME/etc/hadoop/capacity-scheduler.xml 文件中的</p>\n<pre class=\"line-numbers language-xml\" data-language=\"xml\"><code class=\"language-xml\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>property</span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>name</span><span class=\"token punctuation\">&gt;</span></span>yarn.scheduler.capacity.maximum-am-resource-percent<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>name</span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>value</span><span class=\"token punctuation\">&gt;</span></span>0.1<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>value</span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>description</span><span class=\"token punctuation\">&gt;</span></span>\n        Maximum percent of resources in the cluster which can be used to run \n        application masters i.e. controls number of concurrent running\n        applications.\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>description</span><span class=\"token punctuation\">&gt;</span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>property</span><span class=\"token punctuation\">&gt;</span></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>改成</p>\n<pre class=\"line-numbers language-xml\" data-language=\"xml\"><code class=\"language-xml\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>property</span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>name</span><span class=\"token punctuation\">&gt;</span></span>yarn.scheduler.capacity.maximum-am-resource-percent<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>name</span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>value</span><span class=\"token punctuation\">&gt;</span></span>1<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>value</span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>description</span><span class=\"token punctuation\">&gt;</span></span>\n        Maximum percent of resources in the cluster which can be used to run \n        application masters i.e. controls number of concurrent running\n        applications.\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>description</span><span class=\"token punctuation\">&gt;</span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>property</span><span class=\"token punctuation\">&gt;</span></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>1）连接不上 mysql 数据库<br>（1）导错驱动包，应该把 mysql-connector-java-5.1.27-bin.jar 导入/opt/module/hive/lib 的不是这个包。错把 mysql-connector-java-5.1.27.tar.gz 导入 hive/lib 包下。<br>（2）修改 user 表中的主机名称没有都修改为%，而是修改为 localhost<br>2）hive 默认的输入格式处理是 CombineHiveInputFormat，会对小文件进行合并。</p>\n<pre class=\"line-numbers language-mysql\" data-language=\"mysql\"><code class=\"language-mysql\">hive (default)&gt; set hive.input.format;\nhive.input.format=org.apache.hadoop.hive.ql.io.CombineHiveInputFormat\n# 可以采用 HiveInputFormat 就会根据分区数输出相应的文件。\nhive (default)&gt; set \nhive.input.format=org.apache.hadoop.hive.ql.io.HiveInputFormat;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>3）不能执行 mapreduce 程序<br>可能是 hadoop 的 yarn 没开启。<br>4）启动 mysql 服务时，报 MySQL server PID file could not be found! 异常。 在/var/lock/subsys/mysql 路径下创建 hadoop102.pid，并在文件中添加内容：4396<br>5）报 service mysql status MySQL is not running, but lock file (/var/lock/subsys/mysql[失败])异 常。<br>解决方案：在/var/lib/mysql 目录下创建： -rw-rw——. 1 mysql mysql 5 12 月 22 16:41 hadoop102.pid 文件，并修改权限为 777。</p>\n<p> 6）JVM 堆内存溢出<br>描述：java.lang.OutOfMemoryError: Java heap space<br>解决：在 yarn-site.xml 中加入如下代码</p>\n<pre class=\"line-numbers language-xml\" data-language=\"xml\"><code class=\"language-xml\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>property</span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>name</span><span class=\"token punctuation\">&gt;</span></span>yarn.scheduler.maximum-allocation-mb<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>name</span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>value</span><span class=\"token punctuation\">&gt;</span></span>2048<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>value</span><span class=\"token punctuation\">&gt;</span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>property</span><span class=\"token punctuation\">&gt;</span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>property</span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>name</span><span class=\"token punctuation\">&gt;</span></span>yarn.scheduler.minimum-allocation-mb<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>name</span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>value</span><span class=\"token punctuation\">&gt;</span></span>2048<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>value</span><span class=\"token punctuation\">&gt;</span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>property</span><span class=\"token punctuation\">&gt;</span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>property</span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>name</span><span class=\"token punctuation\">&gt;</span></span>yarn.nodemanager.vmem-pmem-ratio<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>name</span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>value</span><span class=\"token punctuation\">&gt;</span></span>2.1<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>value</span><span class=\"token punctuation\">&gt;</span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>property</span><span class=\"token punctuation\">&gt;</span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>property</span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>name</span><span class=\"token punctuation\">&gt;</span></span>mapred.child.java.opts<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>name</span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>value</span><span class=\"token punctuation\">&gt;</span></span>-Xmx1024m<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>value</span><span class=\"token punctuation\">&gt;</span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>property</span><span class=\"token punctuation\">&gt;</span></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>7）虚拟内存限制<br>在 yarn-site.xml 中添加如下配置:</p>\n<pre class=\"line-numbers language-xml\" data-language=\"xml\"><code class=\"language-xml\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>property</span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>name</span><span class=\"token punctuation\">&gt;</span></span>yarn.nodemanager.vmem-check-enabled<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>name</span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>value</span><span class=\"token punctuation\">&gt;</span></span>false<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>value</span><span class=\"token punctuation\">&gt;</span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>property</span><span class=\"token punctuation\">&gt;</span></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n","text":"1. Hive 基本概念1.1 Hive概述​ Hive：由 Facebook 开源用于解决海量结构化日志的数据统计工具。​ Hive 是基于 Hadoop 的一个数据仓库工具，可以将结构化的数据文件映射为一张表，并提供类 SQL 查询功能。 Hive 本质：将 HQL 转化成 ...","link":"","photos":[],"count_time":{"symbolsCount":"89k","symbolsTime":"1:21"},"categories":[{"name":"数据库","slug":"数据库","count":4,"path":"api/categories/数据库.json"}],"tags":[{"name":"Hive","slug":"Hive","count":2,"path":"api/tags/Hive.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#1-Hive-%E5%9F%BA%E6%9C%AC%E6%A6%82%E5%BF%B5\"><span class=\"toc-text\">1. Hive 基本概念</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#1-1-Hive%E6%A6%82%E8%BF%B0\"><span class=\"toc-text\">1.1 Hive概述</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#1-2-Hive%E6%9E%B6%E6%9E%84%E5%8E%9F%E7%90%86\"><span class=\"toc-text\">1.2 Hive架构原理</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#1-3-Hive-%E5%92%8C%E6%95%B0%E6%8D%AE%E5%BA%93%E6%AF%94%E8%BE%83\"><span class=\"toc-text\">1.3  Hive 和数据库比较</span></a></li></ol></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#2-Hive-%E5%AE%89%E8%A3%85\"><span class=\"toc-text\">2. Hive 安装</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#2-1-Hive-%E5%AE%89%E8%A3%85%E5%9C%B0%E5%9D%80\"><span class=\"toc-text\">2.1  Hive 安装地址</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#2-2-Hive-%E5%AE%89%E8%A3%85%E9%83%A8%E7%BD%B2\"><span class=\"toc-text\">2.2 Hive 安装部署</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%AE%89%E8%A3%85-Hive\"><span class=\"toc-text\">安装 Hive</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%90%AF%E5%8A%A8%E5%B9%B6%E4%BD%BF%E7%94%A8-Hive\"><span class=\"toc-text\">启动并使用 Hive</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#2-3-MySQL-%E5%AE%89%E8%A3%85\"><span class=\"toc-text\">2.3 MySQL 安装</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#2-4-Hive-%E5%85%83%E6%95%B0%E6%8D%AE%E9%85%8D%E7%BD%AE%E5%88%B0-MySQL\"><span class=\"toc-text\">2.4 Hive 元数据配置到 MySQL</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#2-5-%E4%BD%BF%E7%94%A8%E5%85%83%E6%95%B0%E6%8D%AE%E6%9C%8D%E5%8A%A1%E7%9A%84%E6%96%B9%E5%BC%8F%E8%AE%BF%E9%97%AE-Hive\"><span class=\"toc-text\">2.5 使用元数据服务的方式访问 Hive</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#2-6-%E4%BD%BF%E7%94%A8-JDBC-%E6%96%B9%E5%BC%8F%E8%AE%BF%E9%97%AE-Hive\"><span class=\"toc-text\">2.6 使用 JDBC 方式访问 Hive</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#2-7-Hive-%E5%B8%B8%E7%94%A8%E4%BA%A4%E4%BA%92%E5%91%BD%E4%BB%A4\"><span class=\"toc-text\">2.7 Hive 常用交互命令</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#2-8-Hive-%E5%85%B6%E4%BB%96%E5%91%BD%E4%BB%A4%E6%93%8D%E4%BD%9C\"><span class=\"toc-text\">2.8 Hive 其他命令操作</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#2-9-Hive-%E5%B8%B8%E8%A7%81%E5%B1%9E%E6%80%A7%E9%85%8D%E7%BD%AE\"><span class=\"toc-text\">2.9 Hive 常见属性配置</span></a></li></ol></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#3-Hive-%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B\"><span class=\"toc-text\">3. Hive 数据类型</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#3-1-%E5%9F%BA%E6%9C%AC%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B\"><span class=\"toc-text\">3.1 基本数据类型</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#3-2-%E9%9B%86%E5%90%88%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B\"><span class=\"toc-text\">3.2 集合数据类型</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#3-3-%E7%B1%BB%E5%9E%8B%E8%BD%AC%E5%8C%96\"><span class=\"toc-text\">3.3 类型转化</span></a></li></ol></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#4-DDL-%E6%95%B0%E6%8D%AE%E5%AE%9A%E4%B9%89\"><span class=\"toc-text\">4. DDL 数据定义</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#4-1-%E5%88%9B%E5%BB%BA%E6%95%B0%E6%8D%AE%E5%BA%93\"><span class=\"toc-text\">4.1 创建数据库</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#4-2-%E6%9F%A5%E8%AF%A2%E6%95%B0%E6%8D%AE%E5%BA%93\"><span class=\"toc-text\">4.2 查询数据库</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#4-3-%E4%BF%AE%E6%94%B9%E6%95%B0%E6%8D%AE%E5%BA%93\"><span class=\"toc-text\">4.3 修改数据库</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#4-4-%E5%88%A0%E9%99%A4%E6%95%B0%E6%8D%AE%E5%BA%93\"><span class=\"toc-text\">4.4 删除数据库</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#4-5-%E5%88%9B%E5%BB%BA%E8%A1%A8\"><span class=\"toc-text\">4.5 创建表</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E7%AE%A1%E7%90%86%E8%A1%A8\"><span class=\"toc-text\">管理表</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%A4%96%E9%83%A8%E8%A1%A8\"><span class=\"toc-text\">外部表</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E7%AE%A1%E7%90%86%E8%A1%A8%E4%B8%8E%E5%A4%96%E9%83%A8%E8%A1%A8%E7%9A%84%E4%BA%92%E7%9B%B8%E8%BD%AC%E6%8D%A2\"><span class=\"toc-text\">管理表与外部表的互相转换</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#4-6-%E4%BF%AE%E6%94%B9%E8%A1%A8\"><span class=\"toc-text\">4.6 修改表</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E9%87%8D%E5%91%BD%E5%90%8D%E8%A1%A8\"><span class=\"toc-text\">重命名表</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%A2%9E%E5%8A%A0%E3%80%81%E4%BF%AE%E6%94%B9%E5%92%8C%E5%88%A0%E9%99%A4%E8%A1%A8%E5%88%86%E5%8C%BA\"><span class=\"toc-text\">增加、修改和删除表分区</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%A2%9E%E5%8A%A0-%E4%BF%AE%E6%94%B9-%E6%9B%BF%E6%8D%A2%E5%88%97%E4%BF%A1%E6%81%AF\"><span class=\"toc-text\">增加&#x2F;修改&#x2F;替换列信息</span></a></li></ol></li></ol></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#5-DML-%E6%95%B0%E6%8D%AE%E6%93%8D%E4%BD%9C\"><span class=\"toc-text\">5. DML 数据操作</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#5-1-%E6%95%B0%E6%8D%AE%E5%AF%BC%E5%85%A5\"><span class=\"toc-text\">5.1 数据导入</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%90%91%E8%A1%A8%E4%B8%AD%E8%A3%85%E8%BD%BD%E6%95%B0%E6%8D%AE%EF%BC%88Load%EF%BC%89\"><span class=\"toc-text\">向表中装载数据（Load）</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E9%80%9A%E8%BF%87%E6%9F%A5%E8%AF%A2%E8%AF%AD%E5%8F%A5%E5%90%91%E8%A1%A8%E4%B8%AD%E6%8F%92%E5%85%A5%E6%95%B0%E6%8D%AE%EF%BC%88Insert%EF%BC%89\"><span class=\"toc-text\">通过查询语句向表中插入数据（Insert）</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E6%9F%A5%E8%AF%A2%E8%AF%AD%E5%8F%A5%E4%B8%AD%E5%88%9B%E5%BB%BA%E8%A1%A8%E5%B9%B6%E5%8A%A0%E8%BD%BD%E6%95%B0%E6%8D%AE%EF%BC%88As-Select%EF%BC%89\"><span class=\"toc-text\">查询语句中创建表并加载数据（As Select）</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%88%9B%E5%BB%BA%E8%A1%A8%E6%97%B6%E9%80%9A%E8%BF%87-Location-%E6%8C%87%E5%AE%9A%E5%8A%A0%E8%BD%BD%E6%95%B0%E6%8D%AE%E8%B7%AF%E5%BE%84\"><span class=\"toc-text\">创建表时通过 Location 指定加载数据路径</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#Import-%E6%95%B0%E6%8D%AE%E5%88%B0%E6%8C%87%E5%AE%9A-Hive-%E8%A1%A8%E4%B8%AD\"><span class=\"toc-text\">Import 数据到指定 Hive 表中</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#5-2-%E6%95%B0%E6%8D%AE%E5%AF%BC%E5%87%BA\"><span class=\"toc-text\">5.2 数据导出</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#Insert-%E5%AF%BC%E5%87%BA\"><span class=\"toc-text\">Insert 导出</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#Hadoop-%E5%91%BD%E4%BB%A4%E5%AF%BC%E5%87%BA%E5%88%B0%E6%9C%AC%E5%9C%B0\"><span class=\"toc-text\">Hadoop 命令导出到本地</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#Hive-Shell-%E5%91%BD%E4%BB%A4%E5%AF%BC%E5%87%BA\"><span class=\"toc-text\">Hive Shell 命令导出</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#Export-%E5%AF%BC%E5%87%BA%E5%88%B0-HDFS-%E4%B8%8A\"><span class=\"toc-text\">Export 导出到 HDFS 上</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#5-2-5-Sqoop-%E5%AF%BC%E5%87%BA\"><span class=\"toc-text\">5.2.5 Sqoop 导出</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#5-2-6-%E6%B8%85%E9%99%A4%E8%A1%A8%E4%B8%AD%E6%95%B0%E6%8D%AE%EF%BC%88Truncate%EF%BC%89\"><span class=\"toc-text\">5.2.6 清除表中数据（Truncate）</span></a></li></ol></li></ol></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#6-%E6%9F%A5%E8%AF%A2\"><span class=\"toc-text\">6.  查询</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#6-1-%E5%9F%BA%E6%9C%AC%E6%9F%A5%E8%AF%A2%EF%BC%88Select%E2%80%A6From%EF%BC%89\"><span class=\"toc-text\">6.1 基本查询（Select…From）</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#6-2-%E5%88%86%E7%BB%84\"><span class=\"toc-text\">6.2 分组</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#6-3-Join-%E8%AF%AD%E5%8F%A5\"><span class=\"toc-text\">6.3 Join 语句</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#6-4-%E6%8E%92%E5%BA%8F\"><span class=\"toc-text\">6.4 排序</span></a></li></ol></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#7-%E5%88%86%E5%8C%BA%E8%A1%A8%E5%92%8C%E5%88%86%E6%A1%B6%E8%A1%A8\"><span class=\"toc-text\">7. 分区表和分桶表</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#7-1-%E5%88%86%E5%8C%BA%E8%A1%A8\"><span class=\"toc-text\">7.1 分区表</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#7-2-%E5%88%86%E6%A1%B6%E8%A1%A8\"><span class=\"toc-text\">7.2 分桶表</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#7-3-%E6%8A%BD%E6%A0%B7%E6%9F%A5%E8%AF%A2\"><span class=\"toc-text\">7.3 抽样查询</span></a></li></ol></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E7%AC%AC-8-%E7%AB%A0-%E5%87%BD%E6%95%B0\"><span class=\"toc-text\">第 8 章 函数</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#8-1-%E7%B3%BB%E7%BB%9F%E5%86%85%E7%BD%AE%E5%87%BD%E6%95%B0\"><span class=\"toc-text\">8.1 系统内置函数</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#8-2-%E5%B8%B8%E7%94%A8%E5%86%85%E7%BD%AE%E5%87%BD%E6%95%B0\"><span class=\"toc-text\">8.2 常用内置函数</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#8-3-%E8%87%AA%E5%AE%9A%E4%B9%89%E5%87%BD%E6%95%B0\"><span class=\"toc-text\">8.3 自定义函数</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#8-4-%E8%87%AA%E5%AE%9A%E4%B9%89-UDF-%E5%87%BD%E6%95%B0\"><span class=\"toc-text\">8.4 自定义 UDF 函数</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#8-5-%E8%87%AA%E5%AE%9A%E4%B9%89-UDTF-%E5%87%BD%E6%95%B0\"><span class=\"toc-text\">8.5 自定义 UDTF 函数</span></a></li></ol></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E7%AC%AC-9-%E7%AB%A0-%E5%8E%8B%E7%BC%A9%E5%92%8C%E5%AD%98%E5%82%A8\"><span class=\"toc-text\">第 9 章 压缩和存储</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#9-1-Hadoop-%E5%8E%8B%E7%BC%A9%E9%85%8D%E7%BD%AE\"><span class=\"toc-text\">9.1 Hadoop 压缩配置</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#9-2-%E5%BC%80%E5%90%AF-Map-%E8%BE%93%E5%87%BA%E9%98%B6%E6%AE%B5%E5%8E%8B%E7%BC%A9%EF%BC%88MR-%E5%BC%95%E6%93%8E%EF%BC%89\"><span class=\"toc-text\">9.2 开启 Map 输出阶段压缩（MR 引擎）</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#9-3-%E5%BC%80%E5%90%AF-Reduce-%E8%BE%93%E5%87%BA%E9%98%B6%E6%AE%B5%E5%8E%8B%E7%BC%A9\"><span class=\"toc-text\">9.3 开启 Reduce 输出阶段压缩</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#9-4-%E6%96%87%E4%BB%B6%E5%AD%98%E5%82%A8%E6%A0%BC%E5%BC%8F\"><span class=\"toc-text\">9.4 文件存储格式</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#9-5-%E5%AD%98%E5%82%A8%E5%92%8C%E5%8E%8B%E7%BC%A9%E7%BB%93%E5%90%88\"><span class=\"toc-text\">9.5 存储和压缩结合</span></a></li></ol></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E7%AC%AC-10-%E7%AB%A0-%E4%BC%81%E4%B8%9A%E7%BA%A7%E8%B0%83%E4%BC%98\"><span class=\"toc-text\">第 10 章 企业级调优</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#10-1-%E6%89%A7%E8%A1%8C%E8%AE%A1%E5%88%92%EF%BC%88Explain%EF%BC%89\"><span class=\"toc-text\">10.1 执行计划（Explain）</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#10-2-Fetch-%E6%8A%93%E5%8F%96\"><span class=\"toc-text\">10.2 Fetch 抓取</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#10-3-%E6%9C%AC%E5%9C%B0%E6%A8%A1%E5%BC%8F\"><span class=\"toc-text\">10.3 本地模式</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#10-4-%E8%A1%A8%E7%9A%84%E4%BC%98%E5%8C%96\"><span class=\"toc-text\">10.4 表的优化</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#10-5-%E5%90%88%E7%90%86%E8%AE%BE%E7%BD%AE-Map-%E5%8F%8A-Reduce-%E6%95%B0\"><span class=\"toc-text\">10.5 合理设置 Map 及 Reduce 数</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#10-6-%E5%B9%B6%E8%A1%8C%E6%89%A7%E8%A1%8C\"><span class=\"toc-text\">10.6 并行执行</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#10-7-%E4%B8%A5%E6%A0%BC%E6%A8%A1%E5%BC%8F\"><span class=\"toc-text\">10.7 严格模式</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#10-8-JVM-%E9%87%8D%E7%94%A8\"><span class=\"toc-text\">10.8 JVM 重用</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#10-9-%E5%8E%8B%E7%BC%A9\"><span class=\"toc-text\">10.9 压缩</span></a></li></ol></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E7%AC%AC-11-%E7%AB%A0-Hive-%E5%AE%9E%E6%88%98\"><span class=\"toc-text\">第 11 章 Hive 实战</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#11-1-%E9%9C%80%E6%B1%82%E6%8F%8F%E8%BF%B0\"><span class=\"toc-text\">11.1 需求描述</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#11-2-%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84\"><span class=\"toc-text\">11.2 数据结构</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#11-3-%E5%87%86%E5%A4%87%E5%B7%A5%E4%BD%9C\"><span class=\"toc-text\">11.3 准备工作</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#11-4-%E4%B8%9A%E5%8A%A1%E5%88%86%E6%9E%90\"><span class=\"toc-text\">11.4 业务分析</span></a></li></ol></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E9%99%84%E5%BD%95%EF%BC%9A%E5%B8%B8%E8%A7%81%E9%94%99%E8%AF%AF%E5%8F%8A%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88\"><span class=\"toc-text\">附录：常见错误及解决方案</span></a></li></ol>","author":{"name":"YFR718","slug":"blog-author","avatar":"https://avatars.githubusercontent.com/u/47553658?s=400&u=5e0a85700c66d7a2661c5664ec5f24d94e5ed01a&v=4","link":"/","description":"大数据萌新","socials":{"github":"https://github.com/YFR718","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"d","csdn":"","juejin":"","customs":{}}},"mapped":true,"prev_post":{"title":"编程错误锦集","uid":"82053cc328c59fdc49cec929f76fa81d","slug":"J7-编程错误锦集","date":"2021-11-18T08:55:03.000Z","updated":"2021-12-09T03:25:08.493Z","comments":true,"path":"api/articles/J7-编程错误锦集.json","keywords":null,"cover":"https://static.leetcode-cn.com/cn-mono-assets/production/assets/leetcode-logo.5d9d9fa9.svg","text":"1111111111111111111111 注意 特别注意 HashMap方法的错误 if(ha.containKey(target-nums[i])){ return new int[]{ha.get(target-nums[i]),i}; } containsKey() 方...","link":"","photos":[],"count_time":{"symbolsCount":896,"symbolsTime":"1 mins."},"categories":[{"name":"JAVA","slug":"JAVA","count":10,"path":"api/categories/JAVA.json"}],"tags":[],"author":{"name":"YFR718","slug":"blog-author","avatar":"https://avatars.githubusercontent.com/u/47553658?s=400&u=5e0a85700c66d7a2661c5664ec5f24d94e5ed01a&v=4","link":"/","description":"大数据萌新","socials":{"github":"https://github.com/YFR718","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"d","csdn":"","juejin":"","customs":{}}}},"next_post":{"title":"B5.Hadoop案例","uid":"60afbd6afe5dbba07afaea373a4f245b","slug":"B5-MapReduce案例","date":"2021-11-17T11:17:27.000Z","updated":"2021-11-17T14:24:02.810Z","comments":true,"path":"api/articles/B5-MapReduce案例.json","keywords":null,"cover":"https://img-blog.csdnimg.cn/5376921c8a724ba49052ab7b5f218d54.jpg?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBAWUZSNzE4,size_20,color_FFFFFF,t_70,g_se,x_16#pic_center","text":"MapReduceWordCount案例实操 创建maven工程，MapReduceDemo 在pom.xml文件中添加如下依赖 &lt;dependencies&gt; &lt;dependency&gt; &lt;groupId&gt;org.apache.hadoop&lt...","link":"","photos":[],"count_time":{"symbolsCount":"62k","symbolsTime":"56 mins."},"categories":[{"name":"大数据","slug":"大数据","count":8,"path":"api/categories/大数据.json"}],"tags":[{"name":"Hadoop","slug":"Hadoop","count":3,"path":"api/tags/Hadoop.json"}],"author":{"name":"YFR718","slug":"blog-author","avatar":"https://avatars.githubusercontent.com/u/47553658?s=400&u=5e0a85700c66d7a2661c5664ec5f24d94e5ed01a&v=4","link":"/","description":"大数据萌新","socials":{"github":"https://github.com/YFR718","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"d","csdn":"","juejin":"","customs":{}}}}}