{"title":"shell编程ing","uid":"35292c50fe93e1c9375839d3cf5431cb","slug":"B3-shell编程","date":"2021-11-16T08:46:40.000Z","updated":"2021-11-26T06:22:37.737Z","comments":true,"path":"api/articles/B3-shell编程.json","keywords":null,"cover":"https://img-blog.csdnimg.cn/072c6dbbbb4f421490a43bbba385f4d1.jpg?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBAWUZSNzE4,size_20,color_FFFFFF,t_70,g_se,x_16#pic_center","content":"<p>shell编程</p>\n<h1 id=\"shell基础\"><a href=\"#shell基础\" class=\"headerlink\" title=\"shell基础\"></a>shell基础</h1><p>Shell是一个命令行解释器，它接收应用程序/用户命令,然后调用操作系统内核。</p>\n<h2 id=\"Shel解析器\"><a href=\"#Shel解析器\" class=\"headerlink\" title=\"Shel解析器\"></a><strong>Shel解析器</strong></h2><p>（1）Linux提供的Shell解析器有：</p>\n<pre class=\"line-numbers language-shell\" data-language=\"shell\"><code class=\"language-shell\">[atguigu@hadoop101 ~]$ cat /etc/shells \n/bin/sh\n/bin/bash\n/sbin/nologin\n/bin/dash\n/bin/tcsh\n/bin/csh<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>（2）bash和sh的关系</p>\n<pre class=\"line-numbers language-shell\" data-language=\"shell\"><code class=\"language-shell\">[atguigu@hadoop101 bin]$ ll | grep bash\n-rwxr-xr-x. 1 root root 941880 5月  11 2016 bash\nlrwxrwxrwx. 1 root root      4 5月  27 2017 sh -&gt; bash<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n<p>（3）Centos默认的解析器是bash</p>\n<pre class=\"line-numbers language-shell\" data-language=\"shell\"><code class=\"language-shell\">[atguigu@hadoop102 bin]$ echo $SHELL\n/bin/bash<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n<h2 id=\"Shell脚本入门\"><a href=\"#Shell脚本入门\" class=\"headerlink\" title=\"Shell脚本入门\"></a>Shell脚本入门</h2><p>1．脚本格式<br>脚本以==#!/bin/bash==开头（指定解析器）<br>2．第一个Shell脚本：helloworld</p>\n<pre class=\"line-numbers language-shell\" data-language=\"shell\"><code class=\"language-shell\">[atguigu@hadoop101 datas]$ touch helloworld.sh\n[atguigu@hadoop101 datas]$ vi helloworld.sh\n在helloworld.sh中输入如下内容\n#!/bin/bash\necho \"helloworld\"<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p><strong>脚本的常用执行方式</strong><br>第一种：采用bash或sh+脚本的相对路径或绝对路径（不用赋予脚本+x权限）</p>\n<pre class=\"line-numbers language-shell\" data-language=\"shell\"><code class=\"language-shell\">#\tsh+脚本的相对路径\n[atguigu@hadoop101 datas]$ sh helloworld.sh \nHelloworld\n#\tsh+脚本的绝对路径\n[atguigu@hadoop101 datas]$ sh /home/atguigu/datas/helloworld.sh \nhelloworld\n#\tbash+脚本的相对路径\n[atguigu@hadoop101 datas]$ bash helloworld.sh \nHelloworld\n#\tbash+脚本的绝对路径\n[atguigu@hadoop101 datas]$ bash /home/atguigu/datas/helloworld.sh \nHelloworld<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>第二种：采用输入脚本的绝对路径或相对路径执行脚本（必须具有可执行权限+x）</p>\n<pre class=\"line-numbers language-shell\" data-language=\"shell\"><code class=\"language-shell\">#首先要赋予helloworld.sh 脚本的+x权限\n[atguigu@hadoop101 datas]$ chmod 777 helloworld.sh\n#执行脚本\n相对路径\n[atguigu@hadoop101 datas]$ ./helloworld.sh \nHelloworld\n#绝对路径\n[atguigu@hadoop101 datas]$ /home/atguigu/datas/helloworld.sh \nHelloworld\n注意：第一种执行方法，本质是bash解析器帮你执行脚本，所以脚本本身不需要执行权限。第二种执行方法，本质是脚本需要自己执行，所以需要执行权限。<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h2 id=\"Shell中变量\"><a href=\"#Shell中变量\" class=\"headerlink\" title=\"Shell中变量\"></a>Shell中变量</h2><div class=\"table-container\">\n<table>\n<thead>\n<tr>\n<th>常用系统变量</th>\n<th></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>$HOME</td>\n<td></td>\n</tr>\n<tr>\n<td>$PWD</td>\n<td></td>\n</tr>\n<tr>\n<td>$SHELL</td>\n<td></td>\n</tr>\n<tr>\n<td>$USER</td>\n</tr>\n</tbody>\n</table>\n</div>\n<p>显示当前Shell中所有变量：set</p>\n<h2 id=\"自定义变量\"><a href=\"#自定义变量\" class=\"headerlink\" title=\"自定义变量\"></a>自定义变量</h2><pre class=\"line-numbers language-shell\" data-language=\"shell\"><code class=\"language-shell\">#定义变量：\n变量=值 \n#撤销变量：\nunset 变量\n#声明静态变量：\nreadonly变量，注意：不能unset\n#可把变量提升为全局环境变量，可供其他Shell程序使用\nexport 变量名\n[atguigu@hadoop101 datas]$ vim helloworld.sh \n\n# 在helloworld.sh文件中增加echo $B\n#!/bin/bash\necho \"helloworld\"\necho $B\n[atguigu@hadoop101 datas]$ ./helloworld.sh \nHelloworld\n发现并没有打印输出变量B的值。\n[atguigu@hadoop101 datas]$ export B\n[atguigu@hadoop101 datas]$ ./helloworld.sh \nhelloworld\n2<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p><strong>变量定义规则</strong><br>    （1）变量名称可以由字母、数字和下划线组成，但是不能以数字开头，环境变量名建议大写。<br>    （2）等号两侧不能有空格<br>    （3）在bash中，变量默认类型都是字符串类型，无法直接进行数值运算。<br>    （4）变量的值如果有空格，需要使用双引号或单引号括起来。</p>\n<h2 id=\"特殊变量\"><a href=\"#特殊变量\" class=\"headerlink\" title=\"特殊变量\"></a>特殊变量</h2><div class=\"table-container\">\n<table>\n<thead>\n<tr>\n<th>特殊变量</th>\n<th></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>$n</td>\n<td>n为数字，<mjx-container class=\"MathJax\" jax=\"SVG\"><svg style=\"vertical-align: -0.452ex\" xmlns=\"http://www.w3.org/2000/svg\" width=\"17.421ex\" height=\"2.149ex\" role=\"img\" focusable=\"false\" viewBox=\"0 -750 7700 950\"><g stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"scale(1,-1)\"><g data-mml-node=\"math\"><g data-mml-node=\"mn\"><path data-c=\"30\" d=\"M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z\"></path></g><g data-mml-node=\"mi\" transform=\"translate(500,0)\"><text data-variant=\"italic\" transform=\"scale(1,-1)\" font-size=\"884px\" font-family=\"serif\" font-style=\"italic\">代</text></g><g data-mml-node=\"mi\" transform=\"translate(1400,0)\"><text data-variant=\"italic\" transform=\"scale(1,-1)\" font-size=\"884px\" font-family=\"serif\" font-style=\"italic\">表</text></g><g data-mml-node=\"mi\" transform=\"translate(2300,0)\"><text data-variant=\"italic\" transform=\"scale(1,-1)\" font-size=\"884px\" font-family=\"serif\" font-style=\"italic\">该</text></g><g data-mml-node=\"mi\" transform=\"translate(3200,0)\"><text data-variant=\"italic\" transform=\"scale(1,-1)\" font-size=\"884px\" font-family=\"serif\" font-style=\"italic\">脚</text></g><g data-mml-node=\"mi\" transform=\"translate(4100,0)\"><text data-variant=\"italic\" transform=\"scale(1,-1)\" font-size=\"884px\" font-family=\"serif\" font-style=\"italic\">本</text></g><g data-mml-node=\"mi\" transform=\"translate(5000,0)\"><text data-variant=\"italic\" transform=\"scale(1,-1)\" font-size=\"884px\" font-family=\"serif\" font-style=\"italic\">名</text></g><g data-mml-node=\"mi\" transform=\"translate(5900,0)\"><text data-variant=\"italic\" transform=\"scale(1,-1)\" font-size=\"884px\" font-family=\"serif\" font-style=\"italic\">称</text></g><g data-mml-node=\"mi\" transform=\"translate(6800,0)\"><text data-variant=\"italic\" transform=\"scale(1,-1)\" font-size=\"884px\" font-family=\"serif\" font-style=\"italic\">，</text></g></g></g></svg></mjx-container>1-<mjx-container class=\"MathJax\" jax=\"SVG\"><svg style=\"vertical-align: -0.452ex\" xmlns=\"http://www.w3.org/2000/svg\" width=\"70.362ex\" height=\"2.149ex\" role=\"img\" focusable=\"false\" viewBox=\"0 -750 31100 950\"><g stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"scale(1,-1)\"><g data-mml-node=\"math\"><g data-mml-node=\"mn\"><path data-c=\"39\" d=\"M352 287Q304 211 232 211Q154 211 104 270T44 396Q42 412 42 436V444Q42 537 111 606Q171 666 243 666Q245 666 249 666T257 665H261Q273 665 286 663T323 651T370 619T413 560Q456 472 456 334Q456 194 396 97Q361 41 312 10T208 -22Q147 -22 108 7T68 93T121 149Q143 149 158 135T173 96Q173 78 164 65T148 49T135 44L131 43Q131 41 138 37T164 27T206 22H212Q272 22 313 86Q352 142 352 280V287ZM244 248Q292 248 321 297T351 430Q351 508 343 542Q341 552 337 562T323 588T293 615T246 625Q208 625 181 598Q160 576 154 546T147 441Q147 358 152 329T172 282Q197 248 244 248Z\"></path></g><g data-mml-node=\"mi\" transform=\"translate(500,0)\"><text data-variant=\"italic\" transform=\"scale(1,-1)\" font-size=\"884px\" font-family=\"serif\" font-style=\"italic\">代</text></g><g data-mml-node=\"mi\" transform=\"translate(1400,0)\"><text data-variant=\"italic\" transform=\"scale(1,-1)\" font-size=\"884px\" font-family=\"serif\" font-style=\"italic\">表</text></g><g data-mml-node=\"mi\" transform=\"translate(2300,0)\"><text data-variant=\"italic\" transform=\"scale(1,-1)\" font-size=\"884px\" font-family=\"serif\" font-style=\"italic\">第</text></g><g data-mml-node=\"mi\" transform=\"translate(3200,0)\"><text data-variant=\"italic\" transform=\"scale(1,-1)\" font-size=\"884px\" font-family=\"serif\" font-style=\"italic\">一</text></g><g data-mml-node=\"mi\" transform=\"translate(4100,0)\"><text data-variant=\"italic\" transform=\"scale(1,-1)\" font-size=\"884px\" font-family=\"serif\" font-style=\"italic\">到</text></g><g data-mml-node=\"mi\" transform=\"translate(5000,0)\"><text data-variant=\"italic\" transform=\"scale(1,-1)\" font-size=\"884px\" font-family=\"serif\" font-style=\"italic\">第</text></g><g data-mml-node=\"mi\" transform=\"translate(5900,0)\"><text data-variant=\"italic\" transform=\"scale(1,-1)\" font-size=\"884px\" font-family=\"serif\" font-style=\"italic\">九</text></g><g data-mml-node=\"mi\" transform=\"translate(6800,0)\"><text data-variant=\"italic\" transform=\"scale(1,-1)\" font-size=\"884px\" font-family=\"serif\" font-style=\"italic\">个</text></g><g data-mml-node=\"mi\" transform=\"translate(7700,0)\"><text data-variant=\"italic\" transform=\"scale(1,-1)\" font-size=\"884px\" font-family=\"serif\" font-style=\"italic\">参</text></g><g data-mml-node=\"mi\" transform=\"translate(8600,0)\"><text data-variant=\"italic\" transform=\"scale(1,-1)\" font-size=\"884px\" font-family=\"serif\" font-style=\"italic\">数</text></g><g data-mml-node=\"mi\" transform=\"translate(9500,0)\"><text data-variant=\"italic\" transform=\"scale(1,-1)\" font-size=\"884px\" font-family=\"serif\" font-style=\"italic\">，</text></g><g data-mml-node=\"mi\" transform=\"translate(10400,0)\"><text data-variant=\"italic\" transform=\"scale(1,-1)\" font-size=\"884px\" font-family=\"serif\" font-style=\"italic\">十</text></g><g data-mml-node=\"mi\" transform=\"translate(11300,0)\"><text data-variant=\"italic\" transform=\"scale(1,-1)\" font-size=\"884px\" font-family=\"serif\" font-style=\"italic\">以</text></g><g data-mml-node=\"mi\" transform=\"translate(12200,0)\"><text data-variant=\"italic\" transform=\"scale(1,-1)\" font-size=\"884px\" font-family=\"serif\" font-style=\"italic\">上</text></g><g data-mml-node=\"mi\" transform=\"translate(13100,0)\"><text data-variant=\"italic\" transform=\"scale(1,-1)\" font-size=\"884px\" font-family=\"serif\" font-style=\"italic\">的</text></g><g data-mml-node=\"mi\" transform=\"translate(14000,0)\"><text data-variant=\"italic\" transform=\"scale(1,-1)\" font-size=\"884px\" font-family=\"serif\" font-style=\"italic\">参</text></g><g data-mml-node=\"mi\" transform=\"translate(14900,0)\"><text data-variant=\"italic\" transform=\"scale(1,-1)\" font-size=\"884px\" font-family=\"serif\" font-style=\"italic\">数</text></g><g data-mml-node=\"mi\" transform=\"translate(15800,0)\"><text data-variant=\"italic\" transform=\"scale(1,-1)\" font-size=\"884px\" font-family=\"serif\" font-style=\"italic\">，</text></g><g data-mml-node=\"mi\" transform=\"translate(16700,0)\"><text data-variant=\"italic\" transform=\"scale(1,-1)\" font-size=\"884px\" font-family=\"serif\" font-style=\"italic\">十</text></g><g data-mml-node=\"mi\" transform=\"translate(17600,0)\"><text data-variant=\"italic\" transform=\"scale(1,-1)\" font-size=\"884px\" font-family=\"serif\" font-style=\"italic\">以</text></g><g data-mml-node=\"mi\" transform=\"translate(18500,0)\"><text data-variant=\"italic\" transform=\"scale(1,-1)\" font-size=\"884px\" font-family=\"serif\" font-style=\"italic\">上</text></g><g data-mml-node=\"mi\" transform=\"translate(19400,0)\"><text data-variant=\"italic\" transform=\"scale(1,-1)\" font-size=\"884px\" font-family=\"serif\" font-style=\"italic\">的</text></g><g data-mml-node=\"mi\" transform=\"translate(20300,0)\"><text data-variant=\"italic\" transform=\"scale(1,-1)\" font-size=\"884px\" font-family=\"serif\" font-style=\"italic\">参</text></g><g data-mml-node=\"mi\" transform=\"translate(21200,0)\"><text data-variant=\"italic\" transform=\"scale(1,-1)\" font-size=\"884px\" font-family=\"serif\" font-style=\"italic\">数</text></g><g data-mml-node=\"mi\" transform=\"translate(22100,0)\"><text data-variant=\"italic\" transform=\"scale(1,-1)\" font-size=\"884px\" font-family=\"serif\" font-style=\"italic\">需</text></g><g data-mml-node=\"mi\" transform=\"translate(23000,0)\"><text data-variant=\"italic\" transform=\"scale(1,-1)\" font-size=\"884px\" font-family=\"serif\" font-style=\"italic\">要</text></g><g data-mml-node=\"mi\" transform=\"translate(23900,0)\"><text data-variant=\"italic\" transform=\"scale(1,-1)\" font-size=\"884px\" font-family=\"serif\" font-style=\"italic\">用</text></g><g data-mml-node=\"mi\" transform=\"translate(24800,0)\"><text data-variant=\"italic\" transform=\"scale(1,-1)\" font-size=\"884px\" font-family=\"serif\" font-style=\"italic\">大</text></g><g data-mml-node=\"mi\" transform=\"translate(25700,0)\"><text data-variant=\"italic\" transform=\"scale(1,-1)\" font-size=\"884px\" font-family=\"serif\" font-style=\"italic\">括</text></g><g data-mml-node=\"mi\" transform=\"translate(26600,0)\"><text data-variant=\"italic\" transform=\"scale(1,-1)\" font-size=\"884px\" font-family=\"serif\" font-style=\"italic\">号</text></g><g data-mml-node=\"mi\" transform=\"translate(27500,0)\"><text data-variant=\"italic\" transform=\"scale(1,-1)\" font-size=\"884px\" font-family=\"serif\" font-style=\"italic\">包</text></g><g data-mml-node=\"mi\" transform=\"translate(28400,0)\"><text data-variant=\"italic\" transform=\"scale(1,-1)\" font-size=\"884px\" font-family=\"serif\" font-style=\"italic\">含</text></g><g data-mml-node=\"mi\" transform=\"translate(29300,0)\"><text data-variant=\"italic\" transform=\"scale(1,-1)\" font-size=\"884px\" font-family=\"serif\" font-style=\"italic\">，</text></g><g data-mml-node=\"mi\" transform=\"translate(30200,0)\"><text data-variant=\"italic\" transform=\"scale(1,-1)\" font-size=\"884px\" font-family=\"serif\" font-style=\"italic\">如</text></g></g></g></svg></mjx-container>{10}</td>\n</tr>\n<tr>\n<td>$#</td>\n<td>获取所有输入参数==个数==，常用于循环</td>\n</tr>\n<tr>\n<td>$*</td>\n<td>这个变量代表命令行中所有的参数，$*把所有的参数看成一个整体</td>\n</tr>\n<tr>\n<td>$@</td>\n<td>这个变量也代表命令行中所有的参数，不过$@把每个参数区分对待</td>\n</tr>\n<tr>\n<td>$？</td>\n<td>最后一次执行的命令的返回状态。如果这个变量的值为0，证明上一个命令正确执行；如果这个变量的值为非0（具体是哪个数，由命令自己来决定），则证明上一个命令执行不正确了。</td>\n</tr>\n<tr>\n<td></td>\n</tr>\n</tbody>\n</table>\n</div>\n<pre class=\"line-numbers language-shell\" data-language=\"shell\"><code class=\"language-shell\"># $0 $# $* $@用法\n[atguigu@hadoop101 datas]$ vim parameter.sh\n#!/bin/bash\necho \"$0  $1   $2\"\necho $#\necho $*\necho $@\n[atguigu@hadoop101 datas]$ bash parameter.sh 1 2 3\nparameter.sh  1   2\n3\n1 2 3\n1 2 3\n# $？ 用法\n[atguigu@hadoop101 datas]$ ./helloworld.sh \nhello world\t\n[atguigu@hadoop101 datas]$ echo $?\n0<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h2 id=\"运算符\"><a href=\"#运算符\" class=\"headerlink\" title=\"运算符\"></a>运算符</h2><div class=\"table-container\">\n<table>\n<thead>\n<tr>\n<th>运算符</th>\n<th></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>$((运算式))</td>\n<td></td>\n</tr>\n<tr>\n<td>$[运算式]</td>\n<td>S=$[(2+3)*4]</td>\n<td></td>\n</tr>\n<tr>\n<td>expr  + , - , *, /, %</td>\n<td>expr `expr 2 + 3` * 4</td>\n</tr>\n</tbody>\n</table>\n</div>\n<h2 id=\"条件判断\"><a href=\"#条件判断\" class=\"headerlink\" title=\"条件判断\"></a>条件判断</h2><div class=\"table-container\">\n<table>\n<thead>\n<tr>\n<th>[ condition ]</th>\n<th>（注意condition前后要有空格）</th>\n<th></th>\n<th></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>两个整数之间比较</td>\n<td></td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>=</td>\n<td>字符串比较</td>\n<td>-lt</td>\n<td>小于（less than）</td>\n</tr>\n<tr>\n<td>-le</td>\n<td>小于等于（less equal）</td>\n<td>-eq</td>\n<td>等于（equal）</td>\n</tr>\n<tr>\n<td>-gt</td>\n<td>大于（greater than）</td>\n<td>-ge</td>\n<td>大于等于（greater equal）</td>\n</tr>\n<tr>\n<td>-ne</td>\n<td>不等于（Not equal）</td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>按照文件权限进行判断</td>\n<td></td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>-r</td>\n<td>读的权限（read）</td>\n<td>-w</td>\n<td>有写的权限（write）</td>\n</tr>\n<tr>\n<td>-x</td>\n<td>有执行的权限（execute）</td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>按照文件类型进行判断</td>\n<td></td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>-f</td>\n<td>文件存在并且是一个常规的文件（file）</td>\n<td>-e</td>\n<td>文件存在（existence）</td>\n</tr>\n<tr>\n<td>-d</td>\n<td>文件存在并是一个目录（directory）</td>\n<td></td>\n</tr>\n</tbody>\n</table>\n</div>\n<pre class=\"line-numbers language-shell\" data-language=\"shell\"><code class=\"language-shell\"># 23是否大于等于22\n[atguigu@hadoop101 datas]$ [ 23 -ge 22 ]\n[atguigu@hadoop101 datas]$ echo $?\n0\n# helloworld.sh是否具有写权限\n[atguigu@hadoop101 datas]$ [ -w helloworld.sh ]\n[atguigu@hadoop101 datas]$ echo $?\n0\n# /home/atguigu/cls.txt目录中的文件是否存在\n[atguigu@hadoop101 datas]$ [ -e /home/atguigu/cls.txt ]\n[atguigu@hadoop101 datas]$ echo $?\n1\n# 多条件判断（&amp;&amp; 表示前一条命令执行成功时，才执行后一条命令，|| 表示上一条命令执行失败后，才执行下一条命令）\n[atguigu@hadoop101 ~]$ [ condition ] &amp;&amp; echo OK || echo notok\nOK\n[atguigu@hadoop101 datas]$ [ condition ] &amp;&amp; [ ] || echo notok\nnotok\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h2 id=\"流程控制if-case-for-while\"><a href=\"#流程控制if-case-for-while\" class=\"headerlink\" title=\"流程控制if. case. for. while\"></a>流程控制if. case. for. while</h2><pre class=\"line-numbers language-shell\" data-language=\"shell\"><code class=\"language-shell\">if [ 条件判断式 ];then \n  程序 \nfi \n# [ 条件判断式 ]，中括号和条件判断式之间必须有空格\n# if后要有空格\n\nif [ 条件判断式 ] \n  then \n    程序 \nfi\n# 列\nif [ $1 -eq \"1\" ]\nthen\n        echo \"banzhang zhen shuai\"\nelif [ $1 -eq \"2\" ]\nthen\n        echo \"cls zhen mei\"\nfi\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<pre class=\"line-numbers language-shell\" data-language=\"shell\"><code class=\"language-shell\">case $变量名 in \n  \"值1\"） \n    如果变量的值等于值1，则执行程序1 \n    ;; \n  \"值2\"） \n    如果变量的值等于值2，则执行程序2 \n    ;; \n  …省略其他分支… \n  *） \n    如果变量的值都不是以上的值，则执行此程序 \n    ;; \nesac\n#注意事项：\n#1)\tcase行尾必须为单词“in”，每一个模式匹配必须以右括号“）”结束。\n#2)\t双分号“;;”表示命令序列结束，相当于java中的break。\n#3)\t最后的“*）”表示默认模式，相当于java中的default。\n#\ncase $1 in\n\"1\")\n        echo \"banzhang\"\n;;\n\n\"2\")\n        echo \"cls\"\n;;\n*)\n        echo \"renyao\"\n;;\nesac\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<pre class=\"line-numbers language-shell\" data-language=\"shell\"><code class=\"language-shell\">for (( 初始值;循环控制条件;变量变化 )) \n  do \n    程序 \n  done\n# 列\ns=0\nfor((i=0;i&lt;=100;i++))\ndo\n        s=$[$s+$i]\ndone\n\n\nfor 变量 in 值1 值2 值3… \n  do \n    程序 \n  done\n \n# 列\nfor i in $*\n    do\n      echo \"ban zhang love $i \"\n    done<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<pre class=\"line-numbers language-shell\" data-language=\"shell\"><code class=\"language-shell\">while [ 条件判断式 ] \n  do \n    程序\n  done\n\n# 列\ns=0\ni=1\nwhile [ $i -le 100 ]\ndo\n        s=$[$s+$i]\n        i=$[$i+1]\ndone\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h2 id=\"read读取控制台输入\"><a href=\"#read读取控制台输入\" class=\"headerlink\" title=\"read读取控制台输入\"></a>read读取控制台输入</h2><pre class=\"line-numbers language-shell\" data-language=\"shell\"><code class=\"language-shell\">read(选项)(参数)\n选项：\n-p：指定读取值时的提示符；\n-t：指定读取值时等待的时间（秒）。\n参数：变量，指定读取值的变量名\nread -t 7 -p \"Enter your name in 7 seconds \" NAME\necho $NAME\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h1 id=\"shell高级\"><a href=\"#shell高级\" class=\"headerlink\" title=\"shell高级\"></a>shell高级</h1><h2 id=\"系统函数\"><a href=\"#系统函数\" class=\"headerlink\" title=\"系统函数\"></a>系统函数</h2><p><strong>basename基本语法</strong></p>\n<pre class=\"line-numbers language-shell\" data-language=\"shell\"><code class=\"language-shell\">basename [string / pathname] [suffix] <span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>功能描述：basename命令会删掉所有的前缀包括最后一个（‘/’）字符，然后将字符串显示出来。</p>\n<p>选项：</p>\n<p>suffix为后缀，如果suffix被指定了，basename会将pathname或string中的suffix去掉。</p>\n<pre class=\"line-numbers language-shell\" data-language=\"shell\"><code class=\"language-shell\"># 截取该/home/atguigu/banzhang.txt路径的文件名称\n[atguigu@hadoop101 datas]$ basename /home/atguigu/banzhang.txt \nbanzhang.txt\n[atguigu@hadoop101 datas]$ basename /home/atguigu/banzhang.txt .txt\nbanzhang<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p><strong>dirname基本语法</strong></p>\n<p>dirname 文件绝对路径    </p>\n<p>功能描述：从给定的包含绝对路径的文件名中去除文件名（非目录的部分），然后返回剩下的路径（目录的部分）</p>\n<pre class=\"line-numbers language-shell\" data-language=\"shell\"><code class=\"language-shell\"># 获取banzhang.txt文件的路径\n[atguigu@hadoop101 ~]$ dirname /home/atguigu/banzhang.txt \n/home/atguigu<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n<h2 id=\"自定义函数\"><a href=\"#自定义函数\" class=\"headerlink\" title=\"自定义函数\"></a>自定义函数</h2><p><strong>基本语法</strong></p>\n<pre class=\"line-numbers language-shell\" data-language=\"shell\"><code class=\"language-shell\">[ function ] funname[()]\n{\n\tAction;\n\t[return int;]\n}\nfunname<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>经验技巧</p>\n<p>​    （1）必须在调用函数地方之前，先声明函数，shell脚本是逐行运行。不会像其它语言一样先编译。</p>\n<p>​    （2）函数返回值，只能通过$?系统变量获得，可以显示加：return返回，如果不加，将以最后一条命令运行结果，作为返回值。return后跟数值n(0-255)</p>\n<p><strong>计算两个输入参数的和</strong></p>\n<pre class=\"line-numbers language-shell\" data-language=\"shell\"><code class=\"language-shell\">[atguigu@hadoop101 datas]$ touch fun.sh\n[atguigu@hadoop101 datas]$ vim fun.sh\n\n#!/bin/bash\nfunction sum()\n{\n    s=0\n    s=$[ $1 + $2 ]\n    echo \"$s\"\n}\n\nread -p \"Please input the number1: \" n1;\nread -p \"Please input the number2: \" n2;\nsum $n1 $n2;\n\n[atguigu@hadoop101 datas]$ chmod 777 fun.sh\n[atguigu@hadoop101 datas]$ ./fun.sh \nPlease input the number1: 2\nPlease input the number2: 5\n7<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h2 id=\"Shell工具\"><a href=\"#Shell工具\" class=\"headerlink\" title=\"Shell工具\"></a>Shell工具</h2><h3 id=\"cut\"><a href=\"#cut\" class=\"headerlink\" title=\"cut\"></a>cut</h3><p>cut的工作就是“剪”，具体的说就是在文件中负责剪切数据用的。cut 命令从文件的每一行剪切字节、字符和字段并将这些字节、字符和字段输出。</p>\n<p><strong>基本用法</strong></p>\n<p>cut [选项参数]  filename</p>\n<p>说明：默认分隔符是制表符</p>\n<div class=\"table-container\">\n<table>\n<thead>\n<tr>\n<th>选项参数</th>\n<th>功能</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>-f</td>\n<td>列号，提取第几列</td>\n</tr>\n<tr>\n<td>-d</td>\n<td>分隔符，按照指定分隔符分割列</td>\n</tr>\n</tbody>\n</table>\n</div>\n<p><strong>案例实操</strong></p>\n<pre class=\"line-numbers language-shell\" data-language=\"shell\"><code class=\"language-shell\">#（0）数据准备\n[atguigu@hadoop101 datas]$ touch cut.txt\n[atguigu@hadoop101 datas]$ vim cut.txt\ndong shen\nguan zhen\nwo  wo\nlai  lai\nle  le\n#（1）切割cut.txt第一列\n[atguigu@hadoop101 datas]$ cut -d \" \" -f 1 cut.txt \ndong\nguan\nwo\nlai\nle\n#（2）切割cut.txt第二、三列\n[atguigu@hadoop101 datas]$ cut -d \" \" -f 2,3 cut.txt \nshen\nzhen\n wo\n lai\n le\n#（3）在cut.txt文件中切割出guan\n[atguigu@hadoop101 datas]$ cat cut.txt | grep \"guan\" | cut -d \" \" -f 1\nguan\n#（4）选取系统PATH变量值，第2个“：”开始后的所有路径：\n[atguigu@hadoop101 datas]$ echo $PATH\n/usr/lib64/qt-3.3/bin:/usr/local/bin:/bin:/usr/bin:/usr/local/sbin:/usr/sbin:/sbin:/home/atguigu/bin\n\n[atguigu@hadoop102 datas]$ echo $PATH | cut -d: -f 2-\n/usr/local/bin:/bin:/usr/bin:/usr/local/sbin:/usr/sbin:/sbin:/home/atguigu/bin\n#（5）切割ifconfig 后打印的IP地址\n[atguigu@hadoop101 datas]$ ifconfig eth0 | grep \"inet addr\" | cut -d: -f 2 | cut -d\" \" -f1\n192.168.1.102<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h3 id=\"sed\"><a href=\"#sed\" class=\"headerlink\" title=\"sed\"></a>sed</h3><p>​        sed是一种流编辑器，它一次处理一行内容。处理时，把当前处理的行存储在临时缓冲区中，称为“模式空间”，接着用sed命令处理缓冲区中的内容，处理完成后，把缓冲区的内容送往屏幕。接着处理下一行，这样不断重复，直到文件末尾。文件内容并没有改变，除非你使用重定向存储输出。</p>\n<p><strong>基本用法</strong><br>sed [选项参数]  ‘command’  filename</p>\n<div class=\"table-container\">\n<table>\n<thead>\n<tr>\n<th>选项参数</th>\n<th>功能</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>-e</td>\n<td>直接在指令列模式上进行sed的动作编辑。</td>\n</tr>\n</tbody>\n</table>\n</div>\n<div class=\"table-container\">\n<table>\n<thead>\n<tr>\n<th>命令</th>\n<th>功能描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><em>a</em></td>\n<td>新增，a的后面可以接字串，在下一行出现</td>\n</tr>\n<tr>\n<td>d</td>\n<td>删除</td>\n</tr>\n<tr>\n<td>s</td>\n<td>查找并替换</td>\n</tr>\n</tbody>\n</table>\n</div>\n<p><strong>案例实操</strong></p>\n<pre class=\"line-numbers language-shell\" data-language=\"shell\"><code class=\"language-shell\">#（0）数据准备\n[atguigu@hadoop102 datas]$ touch sed.txt\n[atguigu@hadoop102 datas]$ vim sed.txt\ndong shen\nguan zhen\nwo  wo\nlai  lai\nle  le\n#（1）将“mei nv”这个单词插入到sed.txt第二行下，打印。\n[atguigu@hadoop102 datas]$ sed '2a mei nv' sed.txt \ndong shen\nguan zhen\nmei nv\nwo  wo\nlai  lai\nle  le\n[atguigu@hadoop102 datas]$ cat sed.txt \ndong shen\nguan zhen\nwo  wo\nlai  lai\nle  le\n#注意：文件并没有改变\n#（2）删除sed.txt文件所有包含wo的行\n[atguigu@hadoop102 datas]$ sed '/wo/d' sed.txt\ndong shen\nguan zhen\nlai  lai\nle  le\n#（3）将sed.txt文件中wo替换为ni\n[atguigu@hadoop102 datas]$ sed 's/wo/ni/g' sed.txt \ndong shen\nguan zhen\nni  ni\nlai  lai\nle  le\n#注意：‘g’表示global，全部替换\n#（4）将sed.txt文件中的第二行删除并将wo替换为ni\n[atguigu@hadoop102 datas]$ sed -e '2d' -e 's/wo/ni/g' sed.txt \ndong shen\nni  ni\nlai  lai\nle  le<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h3 id=\"awrk\"><a href=\"#awrk\" class=\"headerlink\" title=\"awrk\"></a>awrk</h3><p>一个强大的文本分析工具，把文件逐行的读入，以空格为默认分隔符将每行切片，切开的部分再进行分析处理。</p>\n<p><strong>基本用法</strong></p>\n<p>awk [选项参数] ‘pattern1{action1} pattern2{action2}…’ filename</p>\n<p>pattern：表示AWK在数据中查找的内容，就是匹配模式</p>\n<p>action：在找到匹配内容时所执行的一系列命令</p>\n<div class=\"table-container\">\n<table>\n<thead>\n<tr>\n<th>选项参数</th>\n<th>功能</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>-F</td>\n<td>指定输入文件折分隔符</td>\n</tr>\n<tr>\n<td>-v</td>\n<td>赋值一个用户定义变量</td>\n</tr>\n</tbody>\n</table>\n</div>\n<pre class=\"line-numbers language-shell\" data-language=\"shell\"><code class=\"language-shell\">#（0）数据准备\n[atguigu@hadoop102 datas]$ sudo cp /etc/passwd ./\n#（1）搜索passwd文件以root关键字开头的所有行，并输出该行的第7列。\n[atguigu@hadoop102 datas]$ awk -F: '/^root/{print $7}' passwd \n/bin/bash\n#（2）搜索passwd文件以root关键字开头的所有行，并输出该行的第1列和第7列，中间以“，”号分割。\n[atguigu@hadoop102 datas]$ awk -F: '/^root/{print $1\",\"$7}' passwd \nroot,/bin/bash\n注意：只有匹配了pattern的行才会执行action\n#（3）只显示/etc/passwd的第一列和第七列，以逗号分割，且在所有行前面添加列名user，shell在最后一行添加\"dahaige，/bin/zuishuai\"。\n[atguigu@hadoop102 datas]$ awk -F : 'BEGIN{print \"user, shell\"} {print $1\",\"$7} END{print \"dahaige,/bin/zuishuai\"}' passwd\nuser, shell\nroot,/bin/bash\nbin,/sbin/nologin\n。。。\natguigu,/bin/bash\ndahaige,/bin/zuishuai\n#注意：BEGIN 在所有数据读取行之前执行；END 在所有数据执行之后执行。\n#（4）将passwd文件中的用户id增加数值1并输出\n[atguigu@hadoop102 datas]$ awk -v i=1 -F: '{print $3+i}' passwd\n1\n2\n3\n4<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p><strong>awk的内置变量</strong></p>\n<div class=\"table-container\">\n<table>\n<thead>\n<tr>\n<th>变量</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>FILENAME</td>\n<td>文件名</td>\n</tr>\n<tr>\n<td>NR</td>\n<td>已读的记录数</td>\n</tr>\n<tr>\n<td>NF</td>\n<td>浏览记录的域的个数（切割后，列的个数）</td>\n</tr>\n</tbody>\n</table>\n</div>\n<pre class=\"line-numbers language-shell\" data-language=\"shell\"><code class=\"language-shell\"># （1）统计passwd文件名，每行的行号，每行的列数\n[atguigu@hadoop102 datas]$ awk -F: '{print \"filename:\"  FILENAME \", linenumber:\" NR  \",columns:\" NF}' passwd \nfilename:passwd, linenumber:1,columns:7\nfilename:passwd, linenumber:2,columns:7\nfilename:passwd, linenumber:3,columns:7\n#（2）切割IP\n[atguigu@hadoop102 datas]$ ifconfig eth0 | grep \"inet addr\" | awk -F: '{print $2}' | awk -F \" \" '{print $1}' \n192.168.1.102\n#（3）查询sed.txt中空行所在的行号\n[atguigu@hadoop102 datas]$ awk '/^$/{print NR}' sed.txt \n5<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h3 id=\"sort\"><a href=\"#sort\" class=\"headerlink\" title=\"sort\"></a>sort</h3><p>sort命令是在Linux里非常有用，它将文件进行排序，并将排序结果标准输出。</p>\n<p><strong>基本语法</strong></p>\n<p>sort(选项)(参数)</p>\n<div class=\"table-container\">\n<table>\n<thead>\n<tr>\n<th>选项</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>-n</td>\n<td>依照数值的大小排序</td>\n</tr>\n<tr>\n<td>-r</td>\n<td>以相反的顺序来排序</td>\n</tr>\n<tr>\n<td>-t</td>\n<td>设置排序时所用的分隔字符</td>\n</tr>\n<tr>\n<td>-k</td>\n<td>指定需要排序的列</td>\n</tr>\n</tbody>\n</table>\n</div>\n<p>参数：指定待排序的文件列表</p>\n<pre class=\"line-numbers language-shell\" data-language=\"shell\"><code class=\"language-shell\">#（0）数据准备\n[atguigu@hadoop102 datas]$ touch sort.sh\n[atguigu@hadoop102 datas]$ vim sort.sh \nbb:40:5.4\nbd:20:4.2\nxz:50:2.3\ncls:10:3.5\nss:30:1.6\n#（1）按照“：”分割后的第三列倒序排序。\n[atguigu@hadoop102 datas]$ sort -t : -nrk 3  sort.sh \nbb:40:5.4\nbd:20:4.2\ncls:10:3.5\nxz:50:2.3\nss:30:1.6<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h1 id=\"面试题\"><a href=\"#面试题\" class=\"headerlink\" title=\"面试题\"></a>面试题</h1><p><strong>问题1：使用Linux命令查询file1中空行所在的行号</strong></p>\n<pre class=\"line-numbers language-shell\" data-language=\"shell\"><code class=\"language-shell\">[atguigu@hadoop102 datas]$ awk '/^$/{print NR}' sed.txt \n5<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n<p><strong>问题2：有文件chengji.txt内容如下:</strong><br>张三 40<br>李四 50<br>王五 60<br>使用Linux命令计算第二列的和并输出</p>\n<pre class=\"line-numbers language-shell\" data-language=\"shell\"><code class=\"language-shell\">[atguigu@hadoop102 datas]$ cat chengji.txt | awk -F \" \" '{sum+=$2} END{print sum}'\n150<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n<p><strong>问题3：Shell脚本里如何检查一个文件是否存在？如果不存在该如何处理？</strong></p>\n<pre class=\"line-numbers language-shell\" data-language=\"shell\"><code class=\"language-shell\">#!/bin/bash\n\nif [ -f file.txt ]; then\n   echo \"文件存在!\"\nelse\n   echo \"文件不存在!\"\nfi<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p><strong>问题4：用shell写一个脚本，对文本中无序的一列数字排序</strong></p>\n<pre class=\"line-numbers language-shell\" data-language=\"shell\"><code class=\"language-shell\">[root@CentOS6-2 ~]# cat test.txt\n9\n8\n7\n6\n5\n4\n3\n2\n10\n1\n[root@CentOS6-2 ~]# sort -n test.txt|awk '{a+=$0;print $0}END{print \"SUM=\"a}'\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\nSUM=55<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p><strong>问题5：请用shell脚本写出查找当前文件夹（/home）下所有的文本文件内容中包含有字符”shen”的文件名称</strong></p>\n<pre class=\"line-numbers language-shell\" data-language=\"shell\"><code class=\"language-shell\">[atguigu@hadoop102 datas]$ grep -r \"shen\" /home | cut -d \":\" -f 1\n/home/atguigu/datas/sed.txt\n/home/atguigu/datas/cut.txt<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n","text":"shell编程 shell基础Shell是一个命令行解释器，它接收应用程序/用户命令,然后调用操作系统内核。 Shel解析器（1）Linux提供的Shell解析器有： [atguigu@hadoop101 ~]$ cat /etc/shells /bin/sh /bin/bash...","link":"","photos":[],"count_time":{"symbolsCount":"11k","symbolsTime":"10 mins."},"categories":[{"name":"大数据","slug":"大数据","count":8,"path":"api/categories/大数据.json"}],"tags":[{"name":"Hadoop","slug":"Hadoop","count":3,"path":"api/tags/Hadoop.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#shell%E5%9F%BA%E7%A1%80\"><span class=\"toc-text\">shell基础</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#Shel%E8%A7%A3%E6%9E%90%E5%99%A8\"><span class=\"toc-text\">Shel解析器</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#Shell%E8%84%9A%E6%9C%AC%E5%85%A5%E9%97%A8\"><span class=\"toc-text\">Shell脚本入门</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#Shell%E4%B8%AD%E5%8F%98%E9%87%8F\"><span class=\"toc-text\">Shell中变量</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E8%87%AA%E5%AE%9A%E4%B9%89%E5%8F%98%E9%87%8F\"><span class=\"toc-text\">自定义变量</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E7%89%B9%E6%AE%8A%E5%8F%98%E9%87%8F\"><span class=\"toc-text\">特殊变量</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E8%BF%90%E7%AE%97%E7%AC%A6\"><span class=\"toc-text\">运算符</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E6%9D%A1%E4%BB%B6%E5%88%A4%E6%96%AD\"><span class=\"toc-text\">条件判断</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E6%B5%81%E7%A8%8B%E6%8E%A7%E5%88%B6if-case-for-while\"><span class=\"toc-text\">流程控制if. case. for. while</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#read%E8%AF%BB%E5%8F%96%E6%8E%A7%E5%88%B6%E5%8F%B0%E8%BE%93%E5%85%A5\"><span class=\"toc-text\">read读取控制台输入</span></a></li></ol></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#shell%E9%AB%98%E7%BA%A7\"><span class=\"toc-text\">shell高级</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E7%B3%BB%E7%BB%9F%E5%87%BD%E6%95%B0\"><span class=\"toc-text\">系统函数</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E8%87%AA%E5%AE%9A%E4%B9%89%E5%87%BD%E6%95%B0\"><span class=\"toc-text\">自定义函数</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#Shell%E5%B7%A5%E5%85%B7\"><span class=\"toc-text\">Shell工具</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#cut\"><span class=\"toc-text\">cut</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#sed\"><span class=\"toc-text\">sed</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#awrk\"><span class=\"toc-text\">awrk</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#sort\"><span class=\"toc-text\">sort</span></a></li></ol></li></ol></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E9%9D%A2%E8%AF%95%E9%A2%98\"><span class=\"toc-text\">面试题</span></a></li></ol>","author":{"name":"YFR718","slug":"blog-author","avatar":"https://avatars.githubusercontent.com/u/47553658?s=400&u=5e0a85700c66d7a2661c5664ec5f24d94e5ed01a&v=4","link":"/","description":"大数据萌新","socials":{"github":"https://github.com/YFR718","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"d","csdn":"","juejin":"","customs":{}}},"mapped":true,"prev_post":{"title":"B4.大数据常用shell脚本","uid":"c8964ce203e761cbb3c6f466ff1217cb","slug":"B4-大数据常用shell脚本","date":"2021-11-16T08:46:58.000Z","updated":"2021-11-16T08:55:31.635Z","comments":true,"path":"api/articles/B4-大数据常用shell脚本.json","keywords":null,"cover":"https://img-blog.csdnimg.cn/a277ba5acebf4be9b68f076d7fab598b.jpg?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBAWUZSNzE4,size_20,color_FFFFFF,t_70,g_se,x_16#pic_center","text":"常见shell脚本集群见文件同步#!/bin/bash #1. 判断参数个数 if [ $# -lt 1 ] then echo Not Enough Arguement! exit; fi #2. 遍历集群所有机器 for host in hadoop102 hadoop103...","link":"","photos":[],"count_time":{"symbolsCount":"3.1k","symbolsTime":"3 mins."},"categories":[{"name":"大数据","slug":"大数据","count":8,"path":"api/categories/大数据.json"}],"tags":[{"name":"shell","slug":"shell","count":1,"path":"api/tags/shell.json"}],"author":{"name":"YFR718","slug":"blog-author","avatar":"https://avatars.githubusercontent.com/u/47553658?s=400&u=5e0a85700c66d7a2661c5664ec5f24d94e5ed01a&v=4","link":"/","description":"大数据萌新","socials":{"github":"https://github.com/YFR718","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"d","csdn":"","juejin":"","customs":{}}}},"next_post":{"title":"Linux基础","uid":"144f0b4d9b9f80ea377106e9c6a54a45","slug":"B0-Linux基础","date":"2021-11-16T08:35:41.000Z","updated":"2021-11-16T09:04:08.607Z","comments":true,"path":"api/articles/B0-Linux基础.json","keywords":null,"cover":"https://img-blog.csdnimg.cn/c2607b79df8149799253f31133417976.jpg?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBAWUZSNzE4,size_20,color_FFFFFF,t_70,g_se,x_16#pic_center","text":"Linux概述Linux的创始人:Linus Torvalds 林纳斯 Linux主要的发行版:Ubuntu(乌班图)、RedHat(红帽)、CentOS、Debain[蝶变]、Fedora、SuSE、OpenSUSE Linux由Unix发展而来。 linux与windows区...","link":"","photos":[],"count_time":{"symbolsCount":"13k","symbolsTime":"12 mins."},"categories":[{"name":"大数据","slug":"大数据","count":8,"path":"api/categories/大数据.json"}],"tags":[{"name":"Linux","slug":"Linux","count":1,"path":"api/tags/Linux.json"}],"author":{"name":"YFR718","slug":"blog-author","avatar":"https://avatars.githubusercontent.com/u/47553658?s=400&u=5e0a85700c66d7a2661c5664ec5f24d94e5ed01a&v=4","link":"/","description":"大数据萌新","socials":{"github":"https://github.com/YFR718","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"d","csdn":"","juejin":"","customs":{}}}}}