{"title":"String","uid":"61e4c5a8a060ffe1cb587c8f535074c6","slug":"J2-String","date":"2021-11-04T14:38:01.000Z","updated":"2021-11-05T02:27:29.267Z","comments":true,"path":"api/articles/J2-String.json","keywords":null,"cover":"https://img-blog.csdnimg.cn/ce3cebf7632b4003bbd0eca49e0b1a6b.jpg?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBAWUZSNzE4,size_20,color_FFFFFF,t_70,g_se,x_16","content":"<h1 id=\"常用方法\"><a href=\"#常用方法\" class=\"headerlink\" title=\"常用方法\"></a>常用方法</h1><pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token class-name\">String</span> s <span class=\"token operator\">=</span> <span class=\"token string\">\"123456\"</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<div class=\"table-container\">\n<table>\n<thead>\n<tr>\n<th>常用方法</th>\n<th>功能</th>\n<th>示例/说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>s.substring(x,y)</td>\n<td>获得字串[x,y-1]</td>\n<td>a.substring(0,3)</td>\n</tr>\n<tr>\n<td>s1 + s2</td>\n<td>拼接字符串</td>\n<td>s + “789”</td>\n</tr>\n<tr>\n<td>String.jion(‘’,”,s1,s2,s3)</td>\n<td>多个字符串放在一起用分隔符</td>\n<td>静态方法</td>\n</tr>\n<tr>\n<td>s.equals(s1)</td>\n<td>检查两字符串是否相等</td>\n<td></td>\n</tr>\n<tr>\n<td>s.equalsIgnoreCase(s1)</td>\n<td>检查两字符串是否相等，忽略大小写</td>\n<td></td>\n</tr>\n<tr>\n<td>s.length()</td>\n<td>获取字符串长度</td>\n<td>空串：长度为0</td>\n</tr>\n<tr>\n<td>s.codePointCount(0，s.length();</td>\n<td>得到实际的长度，即码点数量</td>\n<td></td>\n</tr>\n<tr>\n<td>s.charAt(n)</td>\n<td>返回位置n的代码单元</td>\n<td></td>\n</tr>\n<tr>\n<td>int codePointAt(int index)</td>\n<td>返回从给定位置开始的码点。</td>\n<td></td>\n</tr>\n<tr>\n<td>int offsetByCodePoints(int startIndex, int cpCount)</td>\n<td>返回从startIndex代码点开始，位移cpCount后的码点索引。</td>\n<td></td>\n</tr>\n<tr>\n<td>int compareTo(String other)</td>\n<td>按照字典顺序，如果字符串位于other之前，返回一个负数；如果字符串位于other之后，返回一个正数；如果两个字符串相等，返回0。</td>\n<td></td>\n</tr>\n<tr>\n<td>IntStream codePoints()</td>\n<td>将这个字符串的码点作为一个流返回。调用toArray将它们放在一个数组中。</td>\n<td></td>\n</tr>\n<tr>\n<td>new String(int[ ] codePoints, int offset, int count)</td>\n<td>new String(int[ ] codePoints, int offset, int count)</td>\n<td></td>\n</tr>\n<tr>\n<td>new String(int[ ] codePoints, int offset, int count)</td>\n<td>new String(int[ ] codePoints, int offset, int count)</td>\n<td></td>\n</tr>\n<tr>\n<td>boolean equalsIgnoreCase(String other)</td>\n<td>boolean equalsIgnoreCase(String other)</td>\n<td></td>\n</tr>\n<tr>\n<td>boolean startsWith(String prefix)</td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>boolean endsWith(String suffix)</td>\n<td>如果字符串以suffix开头或结尾，则返回true。</td>\n<td></td>\n</tr>\n<tr>\n<td>int index0f(String str, int fromIndex)</td>\n<td>返回与字符串str或代码点cp匹配的第一个子串的开始位置。这个位置从索引0或fromIndex开始计算。如果在原始串中不存在str，返回-1。</td>\n<td></td>\n</tr>\n<tr>\n<td>int lastIndex0f(String str, int fromIndex)</td>\n<td>int lastIndex0f(String str, int fromIndex)</td>\n<td></td>\n</tr>\n<tr>\n<td>int codePointCount(int startIndex, int endIndex)</td>\n<td>返回startIndex和endIndex-1之间的代码点数量。没有配成对的代用字符将计入代码点。</td>\n<td></td>\n</tr>\n<tr>\n<td>String replace(CharSequence oldString, CharSequence newString)</td>\n<td>返回一个新字符串。这个字符串用newString代替原始字符串中所有的oldString。可以用String或StringBuilder对象作为CharSequence参数。</td>\n<td></td>\n</tr>\n<tr>\n<td>String toUpperCase( )<br>String toUpperCase( )</td>\n<td>返回一个新字符串。这个字符串将原始字符串中的大写字母改为小写，或者将原始字符串中的所有小写字母改成了大写字母。</td>\n<td></td>\n</tr>\n<tr>\n<td>String trim( )</td>\n<td>返回一个新字符串。这个字符串将删除了原始字符串头部和尾部的空格。</td>\n<td></td>\n</tr>\n<tr>\n<td></td>\n<td></td>\n</tr>\n</tbody>\n</table>\n</div>\n<p>注意事项：</p>\n<ul>\n<li><p>String没办法修改字符串，可以通过提取字串+拼接实现</p>\n</li>\n<li><p>一定不要使用==运算符检测两个字符串是否相等！这个运算符只能够确定两个字符串是否放置在同一个位置上。完全有可能将内容相同的多个字符串的拷贝放置在不同的位置上。</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">.</span><span class=\"token function\">substring</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token string\">\"123\"</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// false</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n</li>\n</ul>\n<h1 id=\"StringBuilder\"><a href=\"#StringBuilder\" class=\"headerlink\" title=\"StringBuilder\"></a>StringBuilder</h1><p>需要由较短的字符串构建字符串</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token class-name\">StringBuilder</span> builder <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">StringBuilder</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">//当每次需要添加一部分内容时，就调用append方法。</span>\nbuilder<span class=\"token punctuation\">.</span><span class=\"token function\">append</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"1\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nbuilder<span class=\"token punctuation\">.</span><span class=\"token function\">append</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"2\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">//在需要构建字符串时就调用toString方法</span>\n<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>builder<span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>这个类的前身是StringBuffer，其效率稍有些低，但允许采用多线程的方式执行添加或删除字符的操作。如果所有字符串在一个单线程中编辑（通常都是这样），则应该用StringBuilder替代它。这两个类的API是相同的。</p></blockquote>\n<p><strong>API</strong></p>\n<div class=\"table-container\">\n<table>\n<thead>\n<tr>\n<th>方法</th>\n<th>功能</th>\n<th></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>StringBuilder()</td>\n<td>构造一个空的字符串构建器。</td>\n<td></td>\n</tr>\n<tr>\n<td>int length()</td>\n<td>返回构建器或缓冲器中的代码单元数量。</td>\n<td></td>\n</tr>\n<tr>\n<td>StringBuilder append(String str)</td>\n<td>追加一个字符串并返回this。</td>\n<td></td>\n</tr>\n<tr>\n<td>StringBuilder append(char c)</td>\n<td>追加一个代码单元并返回this。</td>\n<td></td>\n</tr>\n<tr>\n<td>StringBuilder appendCodePoint(int cp)</td>\n<td>追加一个代码点，并将其转换为一个或两个代码单元并返回this。</td>\n<td></td>\n</tr>\n<tr>\n<td>void setCharAt(int i, char c)</td>\n<td>将第i个代码单元设置为c。</td>\n<td></td>\n</tr>\n<tr>\n<td>StringBuilder insert(int offset, String str)</td>\n<td>在offset位置插入一个字符串并返回this。</td>\n<td></td>\n</tr>\n<tr>\n<td>StringBuilder insert(int offset, Char c)</td>\n<td>在offset位置插入一个代码单元并返回this。</td>\n<td></td>\n</tr>\n<tr>\n<td>在offset位置插入一个代码单元并返回this。</td>\n<td>在offset位置插入一个代码单元并返回this。</td>\n<td></td>\n</tr>\n<tr>\n<td>在offset位置插入一个代码单元并返回this。</td>\n<td>在offset位置插入一个代码单元并返回this。</td>\n</tr>\n</tbody>\n</table>\n</div>\n","text":"常用方法String s = \"123456\"; 常用方法 功能 示例/说明 s.substring(x,y) 获得字串[x,y-1] a.substring(0,3) s1 + s2 拼接字符串 s + “789” String.jion(‘’,”,s1,s2,s3) 多个字符...","link":"","photos":[],"count_time":{"symbolsCount":"2.7k","symbolsTime":"2 mins."},"categories":[{"name":"JAVA","slug":"JAVA","count":7,"path":"api/categories/JAVA.json"}],"tags":[{"name":"java","slug":"java","count":7,"path":"api/tags/java.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E5%B8%B8%E7%94%A8%E6%96%B9%E6%B3%95\"><span class=\"toc-text\">常用方法</span></a></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#StringBuilder\"><span class=\"toc-text\">StringBuilder</span></a></li></ol>","author":{"name":"YFR718","slug":"blog-author","avatar":"https://avatars.githubusercontent.com/u/47553658?s=400&u=5e0a85700c66d7a2661c5664ec5f24d94e5ed01a&v=4","link":"/","description":"大数据萌新","socials":{"github":"https://github.com/YFR718","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"d","csdn":"","juejin":"","customs":{}}},"mapped":true,"prev_post":{"title":"2. 两数相加","uid":"4ec631ba9c8264548f541e9cb0021e69","slug":"l0002","date":"2021-11-04T14:51:28.000Z","updated":"2021-11-05T02:10:12.359Z","comments":true,"path":"api/articles/l0002.json","keywords":null,"cover":"https://gimg2.baidu.com/image_search/src=http%3A%2F%2Fpic2.zhimg.com%2Fv2-3cd4587b9b5710397e4f843ba34701d9_1200x500.jpg&refer=http%3A%2F%2Fpic2.zhimg.com&app=2002&size=f9999,10000&q=a80&n=0&g=0n&fmt=jpeg?sec=1638619543&t=d96ab8217b035d9f4f538a3b47b2cf1b","text":"给你两个 非空 的链表，表示两个非负的整数。它们每位数字都是按照 逆序 的方式存储的，并且每个节点只能存储 一位 数字。 请你将两个数相加，并以相同形式返回一个表示和的链表。 你可以假设除了数字 0 之外，这两个数都不会以 0 开头。 输入：l1 = [2,4,3], l2 = ...","link":"","photos":[],"count_time":{"symbolsCount":"1k","symbolsTime":"1 mins."},"categories":[{"name":"LeetCode","slug":"LeetCode","count":5,"path":"api/categories/LeetCode.json"}],"tags":[{"name":"链表","slug":"链表","count":1,"path":"api/tags/链表.json"}],"author":{"name":"YFR718","slug":"blog-author","avatar":"https://avatars.githubusercontent.com/u/47553658?s=400&u=5e0a85700c66d7a2661c5664ec5f24d94e5ed01a&v=4","link":"/","description":"大数据萌新","socials":{"github":"https://github.com/YFR718","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"d","csdn":"","juejin":"","customs":{}}}},"next_post":{"title":"1. 两数之和","uid":"2a28fcbe1a17ab37c1c849fd02eb2771","slug":"l0001","date":"2021-11-04T12:06:25.000Z","updated":"2021-11-05T02:10:07.740Z","comments":true,"path":"api/articles/l0001.json","keywords":null,"cover":"https://gimg2.baidu.com/image_search/src=http%3A%2F%2Fpic2.zhimg.com%2Fv2-3cd4587b9b5710397e4f843ba34701d9_1200x500.jpg&refer=http%3A%2F%2Fpic2.zhimg.com&app=2002&size=f9999,10000&q=a80&n=0&g=0n&fmt=jpeg?sec=1638619543&t=d96ab8217b035d9f4f538a3b47b2cf1b","text":"给定一个整数数组 nums 和一个整数目标值 target，请你在该数组中找出 和为目标值 target 的那 两个 整数，并返回它们的数组下标。 你可以假设每种输入只会对应一个答案。但是，数组中同一个元素在答案里不能重复出现。 你可以按任意顺序返回答案。 输入：nums = [...","link":"","photos":[],"count_time":{"symbolsCount":"1.4k","symbolsTime":"1 mins."},"categories":[{"name":"LeetCode","slug":"LeetCode","count":5,"path":"api/categories/LeetCode.json"}],"tags":[{"name":"哈希","slug":"哈希","count":1,"path":"api/tags/哈希.json"}],"author":{"name":"YFR718","slug":"blog-author","avatar":"https://avatars.githubusercontent.com/u/47553658?s=400&u=5e0a85700c66d7a2661c5664ec5f24d94e5ed01a&v=4","link":"/","description":"大数据萌新","socials":{"github":"https://github.com/YFR718","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"d","csdn":"","juejin":"","customs":{}}}}}