{"title":"Java基础","uid":"3316961ecf1671c6065b043220187c47","slug":"J0-Java基础","date":"2021-11-04T06:41:20.000Z","updated":"2021-11-12T01:34:57.353Z","comments":true,"path":"api/articles/J0-Java基础.json","keywords":null,"cover":"https://img-blog.csdnimg.cn/ce3cebf7632b4003bbd0eca49e0b1a6b.jpg?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBAWUZSNzE4,size_20,color_FFFFFF,t_70,g_se,x_16","content":"<h1 id=\"Java概述\"><a href=\"#Java概述\" class=\"headerlink\" title=\"Java概述\"></a>Java概述</h1><p>是SUN(Stanford University Network，斯坦福大学网络公司 ) 1995年推出的一门高级编程语言。</p>\n<h2 id=\"Java语言特性\"><a href=\"#Java语言特性\" class=\"headerlink\" title=\"Java语言特性\"></a>Java语言特性</h2><ul>\n<li><p>特点一：面向对象</p>\n<p>两个基本概念：类、对象</p>\n<p>三大特性：封装、继承、多态</p>\n</li>\n<li><p>特点二：健壮性</p>\n<p>吸收了C/C++语言的优点，但去掉了其影响程序健壮性的部分（如指针、内存的申请与释放等），提供了一个相对安全的内存管理和访问机制</p>\n</li>\n<li><p>特点三：跨平台性</p>\n<p>跨平台性：通过Java语言编写的应用程序在不同的系统平台上都可以运行。“Write once , Run Anywhere”</p>\n<p>原理：只要在需要运行 java 应用程序的操作系统上，先安装一个Java虚拟机 (JVM Java Virtual Machine) 即可。由JVM来负责Java程序在该系统中的运行。</p>\n<p>因为有了JVM，同一个Java 程序在三个不同的操作系统中都可以执行。这样就实现了Java 程序的跨平台性。</p>\n</li>\n</ul>\n<h2 id=\"核心机制—Java虚拟机\"><a href=\"#核心机制—Java虚拟机\" class=\"headerlink\" title=\"核心机制—Java虚拟机\"></a>核心机制—Java虚拟机</h2><ul>\n<li>JVM是一个虚拟的计算机，具有指令集并使用不同的存储区域。负责执行指令，管理数据、内存、寄存器。</li>\n<li>对于不同的平台，有不同的虚拟机。</li>\n<li>只有某平台提供了对应的java虚拟机，java程序才可在此平台运行</li>\n<li>Java虚拟机机制屏蔽了底层运行平台的差别，实现了“一次编译，到处运行”</li>\n</ul>\n<h2 id=\"核心机制—垃圾回收\"><a href=\"#核心机制—垃圾回收\" class=\"headerlink\" title=\"核心机制—垃圾回收\"></a>核心机制—垃圾回收</h2><p>​        不再使用的内存空间应回收——垃圾回收。在C/C++等语言中，由程序员负责回收无用内存。Java 语言消除了程序员回收无用内存空间的责任：它提供一种系统级线程跟踪存储空间的分配情况。并在JVM空闲时，检查并释放那些可被释放的存储空间。垃圾回收在Java程序运行过程中自动进行，程序员无法精确控制和干预。</p>\n<div class=\"table-container\">\n<table>\n<thead>\n<tr>\n<th>Java语言的环境</th>\n<th>功能</th>\n<th>包含</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>JDK(Java Development Kit    Java开发工具包)</td>\n<td>JDK是提供给Java开发人员使用的，其中包含了java的开发工具，也包括了JRE。所以安装了JDK，就不用在单独安装JRE了。</td>\n<td>JRE + 开发工具集（编译工具javac.exe 打包工具jar.exe)</td>\n</tr>\n<tr>\n<td>JRE(Java Runtime Environment    Java运行环境)</td>\n<td>包括Java虚拟机(JVM Java Virtual Machine)和Java程序所需的核心类库等，如果想要运行一个开发好的Java程序，计算机中只需要安装JRE即可。</td>\n<td>JVM + Java SE标准类库</td>\n</tr>\n<tr>\n<td>JVM (Java Virtal Machine Java虚拟机）</td>\n<td>JVM是一个虚拟的计算机，具有指令集并使用不同的存储区域。负责执行指令，管理数据、内存、寄存器。</td>\n</tr>\n</tbody>\n</table>\n</div>\n<h2 id=\"Hello-Java\"><a href=\"#Hello-Java\" class=\"headerlink\" title=\"Hello Java\"></a>Hello Java</h2><p>​        我们来编写第一个简单的Java程序：</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">HelloJava</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"2333\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<ul>\n<li>public称为访问修饰符（accessmodifier），这些修饰符用于控制程序的其他部分对这段代码的访问级别。</li>\n<li>class表明Java程序中的全部内容都包含在类中。</li>\n<li>HelloJava：类名。</li>\n<li>static：静态方法。</li>\n<li>void：无参数返回。</li>\n<li>main：主方法，程序的入口。</li>\n<li>String[]：程序执行的参数。</li>\n<li>args：参数名。</li>\n<li>System.out.println()：输出一行语句。</li>\n</ul>\n<h2 id=\"Java运行步骤：\"><a href=\"#Java运行步骤：\" class=\"headerlink\" title=\"Java运行步骤：\"></a>Java运行步骤：</h2><ol>\n<li>将 Java 代码编写到扩展名为 .java 的文件中。</li>\n<li>通过 javac 命令对该 java 文件进行编译。</li>\n<li>通过 java 命令对生成的 class 文件进行运行。</li>\n</ol>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token class-name\">C</span><span class=\"token operator\">:</span>\\<span class=\"token class-name\">Users</span>\\<span class=\"token number\">24378</span>\\<span class=\"token class-name\">Desktop</span>\\<span class=\"token class-name\">Java</span><span class=\"token operator\">></span>javac f1<span class=\"token punctuation\">.</span>java\n<span class=\"token class-name\">C</span><span class=\"token operator\">:</span>\\<span class=\"token class-name\">Users</span>\\<span class=\"token number\">24378</span>\\<span class=\"token class-name\">Desktop</span>\\<span class=\"token class-name\">Java</span><span class=\"token operator\">></span>java f1\nhello <span class=\"token class-name\">Java</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n<h2 id=\"一些规范\"><a href=\"#一些规范\" class=\"headerlink\" title=\"一些规范\"></a>一些规范</h2><h3 id=\"Java命名规范\"><a href=\"#Java命名规范\" class=\"headerlink\" title=\"Java命名规范\"></a>Java命名规范</h3><div class=\"table-container\">\n<table>\n<thead>\n<tr>\n<th>类型(名)</th>\n<th>约束</th>\n<th>列</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>项目</td>\n<td>全部小写，画线-分隔</td>\n<td>spring-cloud</td>\n</tr>\n<tr>\n<td>包</td>\n<td>全部小写</td>\n<td>com.yfr.softmax</td>\n</tr>\n<tr>\n<td>类</td>\n<td>单次首字母大写</td>\n<td>NewWorld</td>\n</tr>\n<tr>\n<td>变量/方法</td>\n<td>首字母小写</td>\n<td>userName</td>\n</tr>\n<tr>\n<td>常量</td>\n<td>全部大写，下划线_分隔</td>\n<td>INT_MAX</td>\n</tr>\n</tbody>\n</table>\n</div>\n<h3 id=\"Java代码编写规范\"><a href=\"#Java代码编写规范\" class=\"headerlink\" title=\"Java代码编写规范\"></a>Java代码编写规范</h3><pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">HelloJava</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"2333\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<ul>\n<li>注意大括号的风格</li>\n<li>二元三元运算符两边用一个空格隔开</li>\n<li>逗号语句后如不换行，紧跟一个空格</li>\n<li>将类似操作，或一组操作放在一起不用空行隔开，而用空行隔开不同组的代码</li>\n<li>每个if while for等语句，都不要省略大括号{}</li>\n</ul>\n<h3 id=\"Java注释\"><a href=\"#Java注释\" class=\"headerlink\" title=\"Java注释\"></a>Java注释</h3><div class=\"table-container\">\n<table>\n<thead>\n<tr>\n<th>注释类型</th>\n<th></th>\n<th></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>单行注释</td>\n<td>//注释文字</td>\n<td></td>\n</tr>\n<tr>\n<td>多行注释</td>\n<td>/<em>  注释文字 </em>/</td>\n<td></td>\n</tr>\n<tr>\n<td>文档注释：</td>\n<td>/<em>*<br />@author  指定java程序的作者<br />@version  指定源文件的版本<br /></em>/</td>\n</tr>\n</tbody>\n</table>\n</div>\n<pre class=\"line-numbers language-shell\" data-language=\"shell\"><code class=\"language-shell\"># 生成注释文档\nPS C:\\Users\\24378\\Desktop\\Java&gt; javadoc -d mydoc -author -version .\\f1.java\n正在加载源文件.\\f1.java...\n正在构造 Javadoc 信息...\n...<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h3 id=\"Java注意事项\"><a href=\"#Java注意事项\" class=\"headerlink\" title=\"Java注意事项\"></a>Java注意事项</h3><ul>\n<li><p>Java源文件以“java”为扩展名。源文件的基本组成部分是类（class），如本例中的HelloWorld类。</p>\n</li>\n<li><p>Java应用程序的执行入口是main()方法。它有固定的书写格式：</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span>  <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n</li>\n</ul>\n<ul>\n<li><p>Java语言严格区分大小写。</p>\n</li>\n<li><p>Java方法由一条条语句构成，每个语句以“;”结束。</p>\n</li>\n<li><p>大括号都是成对出现的，缺一不可。</p>\n</li>\n<li><p>一个源文件中最多只能有一个public类。其它类的个数不限，如果源文件包含一个public类，则文件名必须按该类名命名。</p>\n</li>\n</ul>\n<h1 id=\"基本数据类型\"><a href=\"#基本数据类型\" class=\"headerlink\" title=\"基本数据类型\"></a>基本数据类型</h1><h2 id=\"整数\"><a href=\"#整数\" class=\"headerlink\" title=\"整数\"></a>整数</h2><div class=\"table-container\">\n<table>\n<thead>\n<tr>\n<th>类型</th>\n<th>存储需求</th>\n<th>取值范围</th>\n<th>例</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>int</td>\n<td>4字节</td>\n<td>$- 2^{31} \\sim 2^{31}-1$（21亿）</td>\n<td>10</td>\n</tr>\n<tr>\n<td>short</td>\n<td>2字节</td>\n<td>$- 2^{15} \\sim 2^{15}-1$（32768）</td>\n<td></td>\n</tr>\n<tr>\n<td>long</td>\n<td>8字节</td>\n<td>$- 2^{63} \\sim 2^{63}-1$</td>\n<td>10L</td>\n</tr>\n<tr>\n<td>byte</td>\n<td>1字节</td>\n<td>$- 2^{7} \\sim 2^{7}-1$（128）</td>\n</tr>\n</tbody>\n</table>\n</div>\n<h2 id=\"浮点数\"><a href=\"#浮点数\" class=\"headerlink\" title=\"浮点数\"></a>浮点数</h2><div class=\"table-container\">\n<table>\n<thead>\n<tr>\n<th>类型</th>\n<th>存储需求</th>\n<th>符号位</th>\n<th>指数位</th>\n<th>尾数位</th>\n<th>例</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>float</td>\n<td>4字节</td>\n<td>1</td>\n<td>8</td>\n<td>23</td>\n<td>3.14F</td>\n</tr>\n<tr>\n<td>double</td>\n<td>8字节</td>\n<td>1</td>\n<td>11</td>\n<td>52</td>\n<td>3.14</td>\n</tr>\n</tbody>\n</table>\n</div>\n<p><a href=\"https://blog.csdn.net/a327369238/article/details/52354811/\">更详细</a></p>\n<h2 id=\"char类型\"><a href=\"#char类型\" class=\"headerlink\" title=\"char类型\"></a>char类型</h2><div class=\"table-container\">\n<table>\n<thead>\n<tr>\n<th>类型</th>\n<th>存储需求</th>\n<th></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>char</td>\n<td>2字节</td>\n<td>1</td>\n</tr>\n</tbody>\n</table>\n</div>\n<p>char类型的字面量值要用单引号括起来。例如：’A’.</p>\n<p>在Java中，char类型描述了UTF-16编码中的一个代码单元。对char类型字符运行时，直接当做ASCII表对应的整数来对待。</p>\n<p><strong>Unicode 编码</strong>:一种编码，将世界上所有的符号都纳入其中。每一个符号都给予一个独一无二的编码，使用 Unicode 没有乱码的问题。</p>\n<p>Unicode 的缺点：Unicode 只规定了符号的二进制代码，却没有规定这个二进制代码应该如何存储：无法区别 Unicode 和ASCII：计算机无法区分三个字节表示一个符号还是分别表示三个符号。另外，我们知道，英文字母只用一个字节表示就够了，如果unicode统一规定，每个符号用三个或四个字节表示，那么每个英文字母前都必然有二到三个字节是0，这对于存储空间来说是极大的浪费。</p>\n<p><strong>UTF-8</strong>:一种变长的编码方式。它可以使用 1-6 个字节表示一个符号，根据不同的符号而变化字节长度。</p>\n<p>UTF-8的编码规则：<br>1）对于单字节的UTF-8编码，该字节的最高位为0，其余7位用来对字符进行编码（等同于ASCII码）。<br>2）对于多字节的UTF-8编码，如果编码包含 n 个字节，那么第一个字节的前 n 位为1，第一个字节的第 n+1 位为0，该字节的剩余各位用来对字符进行编码。在第一个字节之后的所有的字节，都是最高两位为”10”，其余6位用来对字符进行编码。</p>\n<h2 id=\"boolean\"><a href=\"#boolean\" class=\"headerlink\" title=\"boolean\"></a>boolean</h2><div class=\"table-container\">\n<table>\n<thead>\n<tr>\n<th>类型</th>\n<th>存储需求</th>\n<th></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>boolean</td>\n<td>1位</td>\n<td>true/flase</td>\n</tr>\n</tbody>\n</table>\n</div>\n<h1 id=\"变量\"><a href=\"#变量\" class=\"headerlink\" title=\"变量\"></a>变量</h1><h2 id=\"变量的声明与使用\"><a href=\"#变量的声明与使用\" class=\"headerlink\" title=\"变量的声明与使用\"></a>变量的声明与使用</h2><p><strong>标识符</strong>：Java 对各种变量、方法和类等要素命名时使用的字符序列称为标识符<br>定义合法标识符规则：</p>\n<ol>\n<li>由26个英文字母大小写，0-9 ，_或$ 组成</li>\n<li>数字不可以开头。</li>\n<li>不可以使用关键字和保留字，但能包含关键字和保留字。</li>\n<li>Java中严格区分大小写，长度无限制。</li>\n<li>标识符不能包含空格。</li>\n</ol>\n<p><strong>变量的概念：</strong>内存中的一个存储区域，该区域的数据可以在同一类型范围内不断变化。变量是程序中最基本的存储单元。包含变量类型、变量名和存储的值。<br><strong>变量的作用：</strong>用于在内存中保存数据</p>\n<p><strong>使用变量注意：</strong></p>\n<ul>\n<li>Java中每个变量必须先声明，后使用</li>\n<li>使用变量名来访问这块区域的数据</li>\n<li>变量的作用域：其定义所在的一对{ }内</li>\n<li>变量只有在其作用域内才有效</li>\n<li>同一个作用域内，不能定义重名的变量</li>\n</ul>\n<p><strong>声明变量</strong></p>\n<ul>\n<li><p>语法：&lt;数据类型&gt; &lt;变量名称&gt;;</p>\n</li>\n<li><p>例如：int var;</p>\n</li>\n</ul>\n<p><strong>变量的赋值</strong></p>\n<ul>\n<li>语法：&lt;变量名称&gt; =  &lt;值&gt;</li>\n<li>例如：var = 10;</li>\n</ul>\n<p><strong>声明和赋值变量</strong></p>\n<ul>\n<li>语法： &lt;数据类型&gt; &lt;变量名&gt; =  &lt;初始化值&gt;</li>\n<li>例如：int var = 10;</li>\n</ul>\n<p><strong>变量的分类-按数据类型</strong></p>\n<p><img src=\"https://img-blog.csdnimg.cn/8e0c6d2606c94f378c630da6000f1563.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBAWUZSNzE4,size_20,color_FFFFFF,t_70,g_se,x_16\" alt=\"\"></p>\n<p><strong>变量的分类-按声明的位置</strong></p>\n<ul>\n<li>在方法体外，类体内声明的变量称为成员变量。</li>\n<li>在方法体内部声明的变量称为局部变量。</li>\n</ul>\n<p><img src=\"https://img-blog.csdnimg.cn/ad86af8e53d449a4be0728472a5b7794.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBAWUZSNzE4,size_20,color_FFFFFF,t_70,g_se,x_16\" alt=\"\"></p>\n<h1 id=\"常量\"><a href=\"#常量\" class=\"headerlink\" title=\"常量\"></a>常量</h1><p>在Java中，利用关键字final指示常量。</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">final</span> <span class=\"token keyword\">int</span> <span class=\"token class-name\">A</span> <span class=\"token operator\">=</span> <span class=\"token number\">1000</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<h1 id=\"数值类型之间的转换\"><a href=\"#数值类型之间的转换\" class=\"headerlink\" title=\"数值类型之间的转换\"></a>数值类型之间的转换</h1><p><strong>自动类型转换</strong>：容量小的类型自动转换为容量大的数据类型。数据类型按容量大小排序为：</p>\n<p><img src=\"https://img-blog.csdnimg.cn/2b5ee4a6637541d1a61cc4009f8320e4.png\" alt=\"\"></p>\n<ul>\n<li>有多种类型的数据混合运算时，系统首先自动将所有数据转换成容量最大的那种数据类型，然后再进行计算。</li>\n<li>byte,short,char之间不会相互转换，他们三者在计算时首先转换为int类型。</li>\n<li>boolean类型不能与其它数据类型运算。</li>\n<li>当把任何基本数据类型的值和字符串(String)进行连接运算时(+)，基本数据类型的值将自动转化为字符串(String)类型。</li>\n</ul>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token class-name\">String</span> str1 <span class=\"token operator\">=</span> <span class=\"token number\">4</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//判断对错: no</span>\n<span class=\"token class-name\">String</span> str2<span class=\"token operator\">=</span> <span class=\"token number\">3.5f</span> <span class=\"token operator\">+</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//判断str2对错: yes</span>\n<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">printIn</span><span class=\"token punctuation\">(</span>str2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//输出:”3.5”</span>\n<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out <span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token operator\">+</span><span class=\"token number\">4</span><span class=\"token operator\">+</span><span class=\"token string\">\"Hello!\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//输出:7Hello!</span>\n<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Hello!\"</span> <span class=\"token operator\">+</span><span class=\"token number\">3</span><span class=\"token operator\">+</span><span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//输出: Hello!34</span>\n<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">printIn</span><span class=\"token punctuation\">(</span><span class=\"token string\">'a'</span><span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token operator\">+</span><span class=\"token string\">\"Hello!\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//输 出: 98Hello!</span>\n<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">printIn</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Hello\"</span><span class=\"token operator\">+</span><span class=\"token string\">'a'</span><span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//输出: Helloa1</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p><strong>强制类型转换：</strong>将容量大的数据类型转换为容量小的数据类型。使用时要加上强制转换符：()，但可能造成精度降低或溢出,格外要注意。</p>\n<p>通常，字符串不能直接转换为基本类型，但通过基本类型对应的包装类则可以实现把字符串转换成基本类型。</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token comment\">// 判断是否能通过编译</span>\n<span class=\"token keyword\">short</span> s <span class=\"token operator\">=</span> <span class=\"token number\">5</span><span class=\"token punctuation\">;</span>\ns <span class=\"token operator\">=</span> s <span class=\"token operator\">-</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//报错：int 不能用short存储</span>\ns <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">short</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">(</span>s <span class=\"token operator\">-</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//正确写法</span>\n\n<span class=\"token keyword\">byte</span> b <span class=\"token operator\">=</span> <span class=\"token number\">3</span><span class=\"token punctuation\">;</span>\nb <span class=\"token operator\">=</span> b <span class=\"token operator\">+</span> <span class=\"token number\">4</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//报错：int 不能用byte存储</span>\nb <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">byte</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">(</span>b <span class=\"token operator\">+</span> <span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//正确写法</span>\n\n<span class=\"token keyword\">char</span> a <span class=\"token operator\">=</span> <span class=\"token string\">'a'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">5</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">float</span> d <span class=\"token operator\">=</span> <span class=\"token number\">.314F</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">double</span> result <span class=\"token operator\">=</span> a <span class=\"token operator\">+</span> i <span class=\"token operator\">+</span> d<span class=\"token punctuation\">;</span> <span class=\"token comment\">//正确</span>\n\n<span class=\"token keyword\">byte</span> b <span class=\"token operator\">=</span> <span class=\"token number\">5</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">short</span> s <span class=\"token operator\">=</span> <span class=\"token number\">3</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">short</span> t <span class=\"token operator\">=</span> s <span class=\"token operator\">+</span> b<span class=\"token punctuation\">;</span> <span class=\"token comment\">//报错：int 不能用short存储</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h1 id=\"进制与运算符\"><a href=\"#进制与运算符\" class=\"headerlink\" title=\"进制与运算符\"></a>进制与运算符</h1><div class=\"table-container\">\n<table>\n<thead>\n<tr>\n<th>进制</th>\n<th></th>\n<th></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>二进制 (binary)</td>\n<td>0,1</td>\n<td>满2进1.以0b或0B开头</td>\n</tr>\n<tr>\n<td>十进制 (decimal)</td>\n<td>0-9</td>\n<td>满10进1</td>\n</tr>\n<tr>\n<td>八进制 (octal)：</td>\n<td>0-7</td>\n<td>满8进1. 以数字0开头表示</td>\n</tr>\n<tr>\n<td>十六进制 (hex) (hex)(hex)(hex)：</td>\n<td>0-9，A-F</td>\n<td>满16进1. 以0x或0X开头表示</td>\n</tr>\n</tbody>\n</table>\n</div>\n<p><strong>进制的基本转换</strong><br>    十进制 二进制互转<br>       二进制转成十进制 乘以2的幂数<br>       十进制转成二进制 除以2取余数<br>    二进制 八进制互转<br>    二进制 十六进制互转<br>    十进制八进制互转<br>    十进制十六进制互转</p>\n<div class=\"table-container\">\n<table>\n<thead>\n<tr>\n<th>运算符</th>\n<th>运算</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>算术运算符</td>\n<td>+-*/%++–</td>\n</tr>\n<tr>\n<td>赋值运算符</td>\n<td>=,+=, -=, *=, /=, %=</td>\n</tr>\n<tr>\n<td>比较运算符（关系运算符）</td>\n<td>==,!=,&lt;,&gt;,&lt;=,&gt;=,instanceof</td>\n</tr>\n<tr>\n<td>逻辑运算符</td>\n<td>&amp;,\\</td>\n<td>,!,&amp;&amp;,\\</td>\n<td>\\</td>\n<td>,^</td>\n</tr>\n<tr>\n<td>位运算符</td>\n<td>&lt;&lt;,&gt;&gt;,&gt;&gt;&gt;,&amp;,\\</td>\n<td>,^,~</td>\n</tr>\n<tr>\n<td>三元运算符</td>\n<td>(条件表达式)?表达式1：表达式2；</td>\n</tr>\n</tbody>\n</table>\n</div>\n<div class=\"table-container\">\n<table>\n<thead>\n<tr>\n<th></th>\n<th>位运算符的细节</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>&lt;&lt;</td>\n<td>空位补0，被移除的高位丢弃，空缺位补0。</td>\n</tr>\n<tr>\n<td>&gt;&gt;</td>\n<td>被移位的二进制最高位是0，右移后，空缺位补0；最高位是1，空缺位补1。</td>\n</tr>\n<tr>\n<td>&gt;&gt;&gt;</td>\n<td>被移位二进制最高位无论是0或者是1，空缺位都用0补。</td>\n</tr>\n<tr>\n<td>&amp;</td>\n<td>二进制位进行&amp;运算，只有1&amp;1时结果是1，否则是0;</td>\n</tr>\n<tr>\n<td>\\</td>\n<td></td>\n<td>二进制位进行 \\</td>\n<td>运算，只有0 \\</td>\n<td>0时结果是0，否则是1;</td>\n</tr>\n<tr>\n<td>^</td>\n<td>相同二进制位进行 ^ 运算，结果是0；1^1=0 , 0^0=0不相同二进制位 ^ 运算结果是1。1^0=1 , 0^1=1</td>\n</tr>\n<tr>\n<td>~</td>\n<td>正数取反，各二进制码按补码各位取反负数取反，各二进制码按补码各位取反</td>\n</tr>\n</tbody>\n</table>\n</div>\n<p><strong>运算优先级：</strong></p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">思考<span class=\"token number\">1</span>：\n<span class=\"token keyword\">short</span> s <span class=\"token operator\">=</span> <span class=\"token number\">3</span><span class=\"token punctuation\">;</span> \ns <span class=\"token operator\">=</span> s<span class=\"token operator\">+</span><span class=\"token number\">2</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//s1+2运算结果是int型，需要强制转换类型   </span>\n① s <span class=\"token operator\">+=</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span>    <span class=\"token comment\">//+= 不改变原本的数据类型</span>\n\n思考<span class=\"token number\">2</span>：\n<span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\ni <span class=\"token operator\">*=</span> <span class=\"token number\">0.1</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">//*= 不改变原本的数据类型</span>\n<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\ni<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n思考<span class=\"token number\">3</span>：\n<span class=\"token keyword\">int</span> m <span class=\"token operator\">=</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">int</span> n <span class=\"token operator\">=</span> <span class=\"token number\">3</span><span class=\"token punctuation\">;</span>\nn <span class=\"token operator\">*=</span> m<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span> \n<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"m=\"</span> <span class=\"token operator\">+</span> m<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"n=\"</span> <span class=\"token operator\">+</span> n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token number\">3</span>，<span class=\"token number\">6</span>\n    \n思考<span class=\"token number\">4</span>：\n<span class=\"token keyword\">int</span> n <span class=\"token operator\">=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span>\nn <span class=\"token operator\">+=</span> <span class=\"token punctuation\">(</span>n<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">++</span>n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//10 + 10 + 12</span>\n<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>“&amp;”和“&amp;&amp;”的区别：“|”和“||”的区别同理<br>    单&amp;时，左边无论真假，右边都进行运算；<br>    双&amp;时，如果左边为真，右边参与运算，如果左边为假，那么右边不参与运算。</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">int</span> x <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span>y <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>x<span class=\"token operator\">++</span><span class=\"token operator\">==</span><span class=\"token number\">2</span> <span class=\"token operator\">&amp;</span> <span class=\"token operator\">++</span>y<span class=\"token operator\">==</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n    x <span class=\"token operator\">=</span><span class=\"token number\">7</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"x=\"</span><span class=\"token operator\">+</span>x<span class=\"token operator\">+</span><span class=\"token string\">\",y=\"</span><span class=\"token operator\">+</span>y<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// 2，2</span>\n<span class=\"token keyword\">int</span> x <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span>y <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>x<span class=\"token operator\">++</span><span class=\"token operator\">==</span><span class=\"token number\">2</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token operator\">++</span>y<span class=\"token operator\">==</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n    x <span class=\"token operator\">=</span><span class=\"token number\">7</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"x=\"</span><span class=\"token operator\">+</span>x<span class=\"token operator\">+</span><span class=\"token string\">\",y=\"</span><span class=\"token operator\">+</span>y<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// 2，1</span>\n<span class=\"token keyword\">int</span> x <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span>y <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>x<span class=\"token operator\">++</span><span class=\"token operator\">==</span><span class=\"token number\">1</span> <span class=\"token operator\">|</span> <span class=\"token operator\">++</span>y<span class=\"token operator\">==</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n    x <span class=\"token operator\">=</span><span class=\"token number\">7</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"x=\"</span><span class=\"token operator\">+</span>x<span class=\"token operator\">+</span><span class=\"token string\">\",y=\"</span><span class=\"token operator\">+</span>y<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// 7，2</span>\n\n<span class=\"token keyword\">int</span> x <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span>y <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>x<span class=\"token operator\">++</span><span class=\"token operator\">==</span><span class=\"token number\">1</span> <span class=\"token operator\">||</span> <span class=\"token operator\">++</span>y<span class=\"token operator\">==</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n    x <span class=\"token operator\">=</span><span class=\"token number\">7</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"x=\"</span><span class=\"token operator\">+</span>x<span class=\"token operator\">+</span><span class=\"token string\">\",y=\"</span><span class=\"token operator\">+</span>y<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// 7，1</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Test</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> main <span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">boolean</span> x<span class=\"token operator\">=</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">boolean</span> y<span class=\"token operator\">=</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">short</span> z<span class=\"token operator\">=</span><span class=\"token number\">42</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">//if(y == true)</span>\n        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>z<span class=\"token operator\">++</span><span class=\"token operator\">==</span><span class=\"token number\">42</span><span class=\"token punctuation\">)</span><span class=\"token operator\">&amp;&amp;</span><span class=\"token punctuation\">(</span>y<span class=\"token operator\">=</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>z<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>x<span class=\"token operator\">=</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">||</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">++</span>z<span class=\"token operator\">==</span><span class=\"token number\">45</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> z<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"z=\"</span><span class=\"token operator\">+</span>z<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token comment\">// z=46</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h1 id=\"String\"><a href=\"#String\" class=\"headerlink\" title=\"String\"></a>String</h1><pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token class-name\">String</span> s <span class=\"token operator\">=</span> <span class=\"token string\">\"123456\"</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<div class=\"table-container\">\n<table>\n<thead>\n<tr>\n<th>常用方法</th>\n<th>功能</th>\n<th>示例/说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>s.substring(x,y)</td>\n<td>获得字串[x,y-1]</td>\n<td>a.substring(0,3)</td>\n</tr>\n<tr>\n<td>s1 + s2</td>\n<td>拼接字符串</td>\n<td>s + “789”</td>\n</tr>\n<tr>\n<td>String.jion(‘’,”,s1,s2,s3)</td>\n<td>多个字符串放在一起用分隔符</td>\n<td>静态方法</td>\n</tr>\n<tr>\n<td>s.equals(s1)</td>\n<td>检查两字符串是否相等</td>\n<td></td>\n</tr>\n<tr>\n<td>s.equalsIgnoreCase(s1)</td>\n<td>检查两字符串是否相等，忽略大小写</td>\n<td></td>\n</tr>\n<tr>\n<td>s.length()</td>\n<td>获取字符串长度</td>\n<td>空串：长度为0</td>\n</tr>\n<tr>\n<td>s.codePointCount(0，s.length();</td>\n<td>得到实际的长度，即码点数量</td>\n<td></td>\n</tr>\n<tr>\n<td>s.charAt(n)</td>\n<td>返回位置n的代码单元</td>\n<td></td>\n</tr>\n<tr>\n<td>int codePointAt(int index)</td>\n<td>返回从给定位置开始的码点。</td>\n<td></td>\n</tr>\n<tr>\n<td>int offsetByCodePoints(int startIndex, int cpCount)</td>\n<td>返回从startIndex代码点开始，位移cpCount后的码点索引。</td>\n<td></td>\n</tr>\n<tr>\n<td>int compareTo(String other)</td>\n<td>按照字典顺序，如果字符串位于other之前，返回一个负数；如果字符串位于other之后，返回一个正数；如果两个字符串相等，返回0。</td>\n<td></td>\n</tr>\n<tr>\n<td>IntStream codePoints()</td>\n<td>将这个字符串的码点作为一个流返回。调用toArray将它们放在一个数组中。</td>\n<td></td>\n</tr>\n<tr>\n<td>new String(int[ ] codePoints, int offset, int count)</td>\n<td>new String(int[ ] codePoints, int offset, int count)</td>\n<td></td>\n</tr>\n<tr>\n<td>new String(int[ ] codePoints, int offset, int count)</td>\n<td>new String(int[ ] codePoints, int offset, int count)</td>\n<td></td>\n</tr>\n<tr>\n<td>boolean equalsIgnoreCase(String other)</td>\n<td>boolean equalsIgnoreCase(String other)</td>\n<td></td>\n</tr>\n<tr>\n<td>boolean startsWith(String prefix)</td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>boolean endsWith(String suffix)</td>\n<td>如果字符串以suffix开头或结尾，则返回true。</td>\n<td></td>\n</tr>\n<tr>\n<td>int index0f(String str, int fromIndex)</td>\n<td>返回与字符串str或代码点cp匹配的第一个子串的开始位置。这个位置从索引0或fromIndex开始计算。如果在原始串中不存在str，返回-1。</td>\n<td></td>\n</tr>\n<tr>\n<td>int lastIndex0f(String str, int fromIndex)</td>\n<td>int lastIndex0f(String str, int fromIndex)</td>\n<td></td>\n</tr>\n<tr>\n<td>int codePointCount(int startIndex, int endIndex)</td>\n<td>返回startIndex和endIndex-1之间的代码点数量。没有配成对的代用字符将计入代码点。</td>\n<td></td>\n</tr>\n<tr>\n<td>String replace(CharSequence oldString, CharSequence newString)</td>\n<td>返回一个新字符串。这个字符串用newString代替原始字符串中所有的oldString。可以用String或StringBuilder对象作为CharSequence参数。</td>\n<td></td>\n</tr>\n<tr>\n<td>String toUpperCase( )<br />String toUpperCase( )</td>\n<td>返回一个新字符串。这个字符串将原始字符串中的大写字母改为小写，或者将原始字符串中的所有小写字母改成了大写字母。</td>\n<td></td>\n</tr>\n<tr>\n<td>String trim( )</td>\n<td>返回一个新字符串。这个字符串将删除了原始字符串头部和尾部的空格。</td>\n<td></td>\n</tr>\n<tr>\n<td></td>\n<td></td>\n</tr>\n</tbody>\n</table>\n</div>\n<p>注意事项：</p>\n<ul>\n<li><p>String没办法修改字符串，可以通过提取字串+拼接实现</p>\n</li>\n<li><p>一定不要使用==运算符检测两个字符串是否相等！这个运算符只能够确定两个字符串是否放置在同一个位置上。完全有可能将内容相同的多个字符串的拷贝放置在不同的位置上。</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">.</span><span class=\"token function\">substring</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token string\">\"123\"</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// false</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n</li>\n</ul>\n<h1 id=\"StringBuilder\"><a href=\"#StringBuilder\" class=\"headerlink\" title=\"StringBuilder\"></a>StringBuilder</h1><p>需要由较短的字符串构建字符串</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token class-name\">StringBuilder</span> builder <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">StringBuilder</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">//当每次需要添加一部分内容时，就调用append方法。</span>\nbuilder<span class=\"token punctuation\">.</span><span class=\"token function\">append</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"1\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nbuilder<span class=\"token punctuation\">.</span><span class=\"token function\">append</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"2\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">//在需要构建字符串时就调用toString方法</span>\n<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>builder<span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>这个类的前身是StringBuffer，其效率稍有些低，但允许采用多线程的方式执行添加或删除字符的操作。如果所有字符串在一个单线程中编辑（通常都是这样），则应该用StringBuilder替代它。这两个类的API是相同的。</p></blockquote>\n<p><strong>API</strong></p>\n<div class=\"table-container\">\n<table>\n<thead>\n<tr>\n<th>方法</th>\n<th>功能</th>\n<th></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>StringBuilder()</td>\n<td>构造一个空的字符串构建器。</td>\n<td></td>\n</tr>\n<tr>\n<td>int length()</td>\n<td>返回构建器或缓冲器中的代码单元数量。</td>\n<td></td>\n</tr>\n<tr>\n<td>StringBuilder append(String str)</td>\n<td>追加一个字符串并返回this。</td>\n<td></td>\n</tr>\n<tr>\n<td>StringBuilder append(char c)</td>\n<td>追加一个代码单元并返回this。</td>\n<td></td>\n</tr>\n<tr>\n<td>StringBuilder appendCodePoint(int cp)</td>\n<td>追加一个代码点，并将其转换为一个或两个代码单元并返回this。</td>\n<td></td>\n</tr>\n<tr>\n<td>void setCharAt(int i, char c)</td>\n<td>将第i个代码单元设置为c。</td>\n<td></td>\n</tr>\n<tr>\n<td>StringBuilder insert(int offset, String str)</td>\n<td>在offset位置插入一个字符串并返回this。</td>\n<td></td>\n</tr>\n<tr>\n<td>StringBuilder insert(int offset, Char c)</td>\n<td>在offset位置插入一个代码单元并返回this。</td>\n<td></td>\n</tr>\n<tr>\n<td>在offset位置插入一个代码单元并返回this。</td>\n<td>在offset位置插入一个代码单元并返回this。</td>\n<td></td>\n</tr>\n<tr>\n<td>在offset位置插入一个代码单元并返回this。</td>\n<td>在offset位置插入一个代码单元并返回this。</td>\n</tr>\n</tbody>\n</table>\n</div>\n<h1 id=\"标准输入输出\"><a href=\"#标准输入输出\" class=\"headerlink\" title=\"标准输入输出\"></a>标准输入输出</h1><h2 id=\"数据读入\"><a href=\"#数据读入\" class=\"headerlink\" title=\"数据读入\"></a>数据读入</h2><pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Scanner</span><span class=\"token punctuation\">;</span>\n<span class=\"token class-name\">Scanner</span> in <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Scanner</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">System</span><span class=\"token punctuation\">,</span>in<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// 读入一行</span>\n<span class=\"token class-name\">String</span> name <span class=\"token operator\">=</span> in<span class=\"token punctuation\">.</span><span class=\"token function\">nextLine</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">//读入一个单词</span>\n<span class=\"token class-name\">String</span> name <span class=\"token operator\">=</span> in<span class=\"token punctuation\">.</span><span class=\"token function\">next</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">//读入一个整数</span>\n <span class=\"token keyword\">int</span> a <span class=\"token operator\">=</span> sc<span class=\"token punctuation\">.</span><span class=\"token function\">nextInt</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<div class=\"table-container\">\n<table>\n<thead>\n<tr>\n<th>方法</th>\n<th>功能</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Scanner (InputStream in)</td>\n<td>用给定的输入流创建一个Scanner对象。</td>\n</tr>\n<tr>\n<td>String nextLine( )</td>\n<td>读取输入的下一行内容。</td>\n</tr>\n<tr>\n<td>String next( )</td>\n<td>读取输入的下一个单词（以空格作为分隔符）。</td>\n</tr>\n<tr>\n<td>int nextInt( )<br /> int nextInt( )</td>\n<td>读取并转换下一个表示整数或浮点数的字符序列。</td>\n</tr>\n<tr>\n<td>boolean hasNext( )</td>\n<td>检测输入中是否还有其他单词。</td>\n</tr>\n<tr>\n<td>boolean hasNextInt( )<br />boolean hasNextDouble( )</td>\n<td>检测是否还有表示整数或浮点数的下一个字符序列。</td>\n</tr>\n<tr>\n<td>static Console console( )</td>\n</tr>\n</tbody>\n</table>\n</div>\n<h2 id=\"格式化输出\"><a href=\"#格式化输出\" class=\"headerlink\" title=\"格式化输出\"></a>格式化输出</h2><pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">print</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p><strong>每一个以%字符开始的格式说明符都用相应的参数替换。格式说明符尾部的转换符将指示被格式化的数值类型：</strong></p>\n<div class=\"table-container\">\n<table>\n<thead>\n<tr>\n<th>转换符</th>\n<th>类型</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>d</td>\n<td>十进制</td>\n</tr>\n<tr>\n<td>x</td>\n<td>十六进制</td>\n</tr>\n<tr>\n<td>o</td>\n<td>八进制</td>\n</tr>\n<tr>\n<td>f</td>\n<td>定点浮点数</td>\n</tr>\n<tr>\n<td>e</td>\n<td>指数浮点数</td>\n</tr>\n<tr>\n<td>g</td>\n<td>通用浮点数</td>\n</tr>\n<tr>\n<td>a</td>\n<td>十六进制浮点数</td>\n</tr>\n<tr>\n<td>s</td>\n<td>字符串</td>\n</tr>\n<tr>\n<td>c</td>\n<td>字符</td>\n</tr>\n<tr>\n<td>b</td>\n<td>布尔</td>\n</tr>\n<tr>\n<td>h</td>\n<td>散列码</td>\n</tr>\n<tr>\n<td>tx/TX</td>\n<td>日期时间</td>\n</tr>\n<tr>\n<td>%</td>\n<td>百分号</td>\n</tr>\n<tr>\n<td>n</td>\n<td>行分隔符</td>\n</tr>\n</tbody>\n</table>\n</div>\n<p><strong>可以使用多个标志，例如，“%, ( .2f”使用分组的分隔符并将负数括在括号内。</strong></p>\n<div class=\"table-container\">\n<table>\n<thead>\n<tr>\n<th>标志</th>\n<th>目的</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>+</td>\n<td>打印正负号</td>\n</tr>\n<tr>\n<td>空格</td>\n<td>在正整数前加空格</td>\n</tr>\n<tr>\n<td>0</td>\n<td>数字前补0</td>\n</tr>\n<tr>\n<td>-</td>\n<td>左对齐</td>\n</tr>\n<tr>\n<td>(</td>\n<td>将负数扩在括号里</td>\n</tr>\n<tr>\n<td>,</td>\n<td>添加分组分隔符</td>\n</tr>\n<tr>\n<td>#(对f格式)</td>\n<td>包含小数点</td>\n</tr>\n<tr>\n<td>#(对x或0格式)</td>\n<td>添加前缀0x</td>\n</tr>\n<tr>\n<td>$</td>\n<td>给定被格式化的参数索引。例如，%ISd. %1$x 将以十进制和十六进制格式打印第1个参数</td>\n<td></td>\n</tr>\n<tr>\n<td>&lt;</td>\n<td>格式化前面说明的数值。例如，%d%&lt;x以十进制和十六进制打印同一个数值</td>\n</tr>\n<tr>\n<td></td>\n</tr>\n</tbody>\n</table>\n</div>\n<h1 id=\"文件输入与输出\"><a href=\"#文件输入与输出\" class=\"headerlink\" title=\"文件输入与输出\"></a>文件输入与输出</h1><h2 id=\"文件读取\"><a href=\"#文件读取\" class=\"headerlink\" title=\"文件读取\"></a>文件读取</h2><p>要想对文件进行读取，就需要一个用File对象构造一个Scanner对象，如下所示：</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token class-name\">Scanner</span> in <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Scanner</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Paths</span><span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"myfile.txt\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"UTF-8\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p><strong>如果文件名中包含反斜杠符号，就要记住在每个反斜杠之前再加一个额外的反斜杠：“c:\\\\mydirectory\\\\myfile.txt”。</strong></p>\n<h2 id=\"文件写入\"><a href=\"#文件写入\" class=\"headerlink\" title=\"文件写入\"></a>文件写入</h2><p>要想写入文件，就需要构造一个PrintWriter对象。在构造器中，只需要提供文件名：</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token class-name\">PrintWriter</span> out <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">PrintWriter</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"myfile.txt\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"UTF-8\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<div class=\"table-container\">\n<table>\n<thead>\n<tr>\n<th></th>\n<th></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Scanner(File f)</td>\n<td>构造一个从给定文件读取数据的Scanner。</td>\n</tr>\n<tr>\n<td>Scanner(String data)</td>\n<td>构造一个从给定字符串读取数据的Scanner。</td>\n</tr>\n<tr>\n<td>PrintWriter(String fileName)</td>\n<td>PrintWriter(String fileName)</td>\n</tr>\n<tr>\n<td>static Path get(String pathname)</td>\n<td>根据给定的路径名构造一个Path。</td>\n</tr>\n<tr>\n<td></td>\n</tr>\n</tbody>\n</table>\n</div>\n<h1 id=\"块作用域-Block\"><a href=\"#块作用域-Block\" class=\"headerlink\" title=\"块作用域 Block\"></a>块作用域 Block</h1><p>块（即复合语句）是指由一对大括号括起来的若干条简单的Java语句。块确定了变量的作用域。一个块可以嵌套在另一个块中。</p>\n<p><strong>注意：</strong></p>\n<ol>\n<li>不能在嵌套的两个块中声明同名的变量。</li>\n<li>块内定义的变量块外不能使用。</li>\n<li></li>\n</ol>\n<h1 id=\"流程控制语句\"><a href=\"#流程控制语句\" class=\"headerlink\" title=\"流程控制语句\"></a>流程控制语句</h1><div class=\"table-container\">\n<table>\n<thead>\n<tr>\n<th>流程控制</th>\n<th></th>\n<th></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>顺序结构</td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>分支语句</td>\n<td>if-else、switch-case</td>\n<td></td>\n</tr>\n<tr>\n<td>循环结构</td>\n<td>for、while、do-while</td>\n<td></td>\n</tr>\n<tr>\n<td>特殊流程控制语句</td>\n<td>break、continue、return</td>\n</tr>\n</tbody>\n</table>\n</div>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">switch</span> <span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">case</span> <span class=\"token number\">0</span><span class=\"token operator\">:</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">case</span> <span class=\"token number\">1</span><span class=\"token operator\">:</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">default</span><span class=\"token operator\">:</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>case标签可以是：</p>\n<p>● 类型为char、byte、short或int的常量表达式。</p>\n<p>● 枚举常量。</p>\n<p>● 从Java SE 7开始，case标签还可以是字符串字面量。</p>\n<h2 id=\"带标签的break语句\"><a href=\"#带标签的break语句\" class=\"headerlink\" title=\"带标签的break语句\"></a>带标签的break语句</h2><p>有时候，在嵌套很深的循环语句中会发生一些不可预料的事情。此时可能更加希望跳到嵌套的所有循环语句之外。通过添加一些额外的条件判断实现各层循环的检测很不方便。</p>\n<p>这里有一个示例说明了break语句的工作状态。请注意，标签必须放在希望跳出的最外层循环之前，并且必须紧跟一个冒号。</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">label<span class=\"token operator\">:</span>\n<span class=\"token punctuation\">&#123;</span>\n    <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\n\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>condition<span class=\"token punctuation\">)</span> <span class=\"token keyword\">break</span> label<span class=\"token punctuation\">;</span> <span class=\"token comment\">// exits b1ock</span>\n\t<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\n<span class=\"token punctuation\">&#125;</span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h1 id=\"大数值\"><a href=\"#大数值\" class=\"headerlink\" title=\"大数值\"></a>大数值</h1><p>如果基本的整数和浮点数精度不能够满足需求，那么可以使用java.math包中的两个很有用的类：BigInteger和BigDecimal。这两个类可以处理包含任意长度数字序列的数值。BigInteger类实现了任意精度的整数运算，BigDecimal实现了任意精度的浮点数运算。</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">&#x2F;&#x2F;使用静态的valueOf方法可以将普通的数值转换为大数值\nBigInteger a &#x3D; BigInteger.valueOf(999999999999999999l);\n\n&#x2F;&#x2F;使用大数值类中的add和multiply方法。\nBigInteger d &#x3D; a.multiply(a);\nSystem.out.println(d);<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<div class=\"table-container\">\n<table>\n<thead>\n<tr>\n<th>BigInteger</th>\n<th></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>BigInteger add(BigInteger other)</td>\n<td>+</td>\n</tr>\n<tr>\n<td>BigInteger subtract(BigInteger other)</td>\n<td>-</td>\n</tr>\n<tr>\n<td>BigInteger multiply(BigInteger other)</td>\n<td>*</td>\n</tr>\n<tr>\n<td>BigInteger divide(BigInteger other)</td>\n<td>/</td>\n</tr>\n<tr>\n<td>BigInteger divide(BigInteger other)</td>\n<td>%</td>\n</tr>\n<tr>\n<td>int compareTo(BigInteger other)</td>\n<td>相等，返回0；小于，返回负数；否则，返回正数。</td>\n</tr>\n<tr>\n<td>static BigInteger valueOf(long x)</td>\n<td>返回值等于x的大整数。</td>\n</tr>\n</tbody>\n</table>\n</div>\n<div class=\"table-container\">\n<table>\n<thead>\n<tr>\n<th>BigInteger</th>\n<th></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>BigDecimal add(BigDecimal other)</td>\n<td>+</td>\n</tr>\n<tr>\n<td>BigDecimal subtract(BigDecimal other)</td>\n<td>-</td>\n</tr>\n<tr>\n<td>BigDecimal multiply(BigDecimal other)</td>\n<td>*</td>\n</tr>\n<tr>\n<td>BigDecimal multiply(BigDecimal other)</td>\n<td>/</td>\n</tr>\n<tr>\n<td>int compareTo(BigDecimal other)</td>\n<td>比较</td>\n</tr>\n<tr>\n<td>static BigDecimal valueOf(long x)</td>\n<td></td>\n</tr>\n<tr>\n<td>static BigDecimal valueOf(long x, int scale)</td>\n<td>$x / 10^{scale}$</td>\n</tr>\n</tbody>\n</table>\n</div>\n<h1 id=\"Java数组\"><a href=\"#Java数组\" class=\"headerlink\" title=\"Java数组\"></a>Java数组</h1><p>数组(Array)，是多个相同类型数据按一定顺序排列的集合，并使用一个名字命名，并通过编号的方式对这些数据进行统一管理。</p>\n<p>数组的常见概念</p>\n<ol>\n<li>数组名</li>\n<li>下标(或索引)</li>\n<li>元素</li>\n<li>数组的长度</li>\n</ol>\n<h3 id=\"一维数组的创建与使用\"><a href=\"#一维数组的创建与使用\" class=\"headerlink\" title=\"一维数组的创建与使用\"></a>一维数组的创建与使用</h3><pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token comment\">// 一维数组的声明方式：</span>\ntype <span class=\"token keyword\">var</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> 或 type<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>  <span class=\"token keyword\">var</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">//Java语言中声明数组时不能指定其长度(数组中元素的数)， 例如： </span>\n<span class=\"token keyword\">int</span> a<span class=\"token punctuation\">[</span><span class=\"token number\">5</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">//非法</span>\n<span class=\"token comment\">//动态初始化：数组声明且为数组元素分配空间与赋值的操作分开进行</span>\n<span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> arr <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token class-name\">String</span> names<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> names <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">//静态初始化：在定义数组的同时就为数组元素分配空间并赋值。</span>\n<span class=\"token keyword\">int</span> arr<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">&#123;</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">9</span><span class=\"token punctuation\">,</span> <span class=\"token number\">8</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> arr <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">9</span><span class=\"token punctuation\">,</span><span class=\"token number\">8</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// 属性length</span>\na<span class=\"token punctuation\">.</span>length 指明数组a的长度<span class=\"token punctuation\">(</span>元素个数<span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>数组是引用类型，它的元素相当于类的成员变量，因此数组一经分配空间，其中的每个元素也被按照成员变量同样的方式被隐式初始化。</p>\n<ul>\n<li>对于基本数据类型而言，默认初始化值各有不同</li>\n<li>对于引用数据类型而言，默认初始化值为null(注意与0不同！</li>\n</ul>\n<p><img src=\"https://img-blog.csdnimg.cn/ba87a0244fda4b63b03fcc07b709aa02.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBAWUZSNzE4,size_20,color_FFFFFF,t_70,g_se,x_16\" alt=\"\"></p>\n<p><img src=\"https://img-blog.csdnimg.cn/1714833d1201408c917295f51da19d01.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBAWUZSNzE4,size_20,color_FFFFFF,t_70,g_se,x_16\" alt=\"\"></p>\n<p><img src=\"https://img-blog.csdnimg.cn/aa354e98937244fb914c6b422fa325d2.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBAWUZSNzE4,size_20,color_FFFFFF,t_70,g_se,x_16\" alt=\"\"></p>\n<p><img src=\"https://img-blog.csdnimg.cn/6d9b3347b1624d8a81326d57e1b1cdd9.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBAWUZSNzE4,size_20,color_FFFFFF,t_70,g_se,x_16\" alt=\"\"></p>\n<p><img src=\"https://img-blog.csdnimg.cn/09eb7f16ffe7413eb99ed0d0709a5898.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBAWUZSNzE4,size_20,color_FFFFFF,t_70,g_se,x_16\" alt=\"\"></p>\n<div class=\"table-container\">\n<table>\n<thead>\n<tr>\n<th>数组元素类型</th>\n<th>元素默认初始值</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>byte</td>\n<td>0</td>\n</tr>\n<tr>\n<td>short</td>\n<td>0</td>\n</tr>\n<tr>\n<td>int</td>\n<td>0</td>\n</tr>\n<tr>\n<td>long</td>\n<td>0L</td>\n</tr>\n<tr>\n<td>float</td>\n<td>0.0F</td>\n</tr>\n<tr>\n<td>double</td>\n<td>0.0</td>\n</tr>\n<tr>\n<td>char</td>\n<td>0 或写为:’\\u0000’(表现为空)</td>\n</tr>\n<tr>\n<td>boolean</td>\n<td>false</td>\n</tr>\n<tr>\n<td>引用类型</td>\n<td>null</td>\n</tr>\n</tbody>\n</table>\n</div>\n<h2 id=\"for-each循环\"><a href=\"#for-each循环\" class=\"headerlink\" title=\"for each循环\"></a>for each循环</h2><p>依次处理数组中的每个元素（其他类型的元素集合亦可）而不必为指定下标值而分心。</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>v <span class=\"token operator\">:</span> collection<span class=\"token punctuation\">)</span> statement<span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> ints <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token number\">100</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> anInt <span class=\"token operator\">:</span> ints<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h2 id=\"数组的拷贝\"><a href=\"#数组的拷贝\" class=\"headerlink\" title=\"数组的拷贝\"></a>数组的拷贝</h2><p>将一个数组变量拷贝给另一个数组变量。这时，两个变量将引用同一个数组：</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> ints <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token number\">100</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> b <span class=\"token operator\">=</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n<p>将一个数组的所有值拷贝到一个新的数组中去，就要使用Arrays类的copyOf方法：</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">int</span> b <span class=\"token operator\">=</span> <span class=\"token class-name\">Arrays</span><span class=\"token punctuation\">.</span><span class=\"token function\">copyof</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span>a<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<h2 id=\"多维数组\"><a href=\"#多维数组\" class=\"headerlink\" title=\"多维数组\"></a>多维数组</h2><pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token comment\">// 格式1（动态初始化）：</span>\n<span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> arr <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// 格式2（动态初始化）：</span>\n<span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> arr <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// 每个一维数组都是默认初始化值null (注意：区别于格式1）可以对这个三个一维数组分别进行初始化</span>\narr<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>    \narr<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>   \narr<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n注：<span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>arr <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">//非法</span>\n<span class=\"token comment\">// 格式3（静态初始化）：</span>\n<span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> arr <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#123;</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">8</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">&#123;</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">7</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">&#123;</span><span class=\"token number\">9</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">6</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// 注意特殊写法情况：</span>\n<span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> x<span class=\"token punctuation\">,</span>y<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> x是一维数组，y是二维数组。\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token comment\">// 声明：int[] x,y[]; 在给x,y变量赋值以后，以下选项允许通过编译的是：</span>\nx<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> y<span class=\"token punctuation\">;</span>  no\ny<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> x<span class=\"token punctuation\">;</span>   yes\ny<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> x<span class=\"token punctuation\">;</span>   no\nx<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> y<span class=\"token punctuation\">;</span>  no\ny<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> x<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>  yes\nx <span class=\"token operator\">=</span> y<span class=\"token punctuation\">;</span>   no\n<span class=\"token comment\">// 提示：</span>\n一维数组：<span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> x  或者<span class=\"token keyword\">int</span> x<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>   \n二维数组：<span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> y 或者 <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> y<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>  或者 <span class=\"token keyword\">int</span> y<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h2 id=\"数组的默认初始化与内存分析\"><a href=\"#数组的默认初始化与内存分析\" class=\"headerlink\" title=\"数组的默认初始化与内存分析\"></a>数组的默认初始化与内存分析</h2><h2 id=\"操作数组的工具类Arrays\"><a href=\"#操作数组的工具类Arrays\" class=\"headerlink\" title=\"操作数组的工具类Arrays\"></a>操作数组的工具类Arrays</h2><p>java.util.Arrays类即为操作数组的工具类，包含了用来操作数组（比如排序和搜索）的各种方法。</p>\n<div class=\"table-container\">\n<table>\n<thead>\n<tr>\n<th>工具类Arrays</th>\n<th></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>boolean equals(int[] a,int[] b)</td>\n<td>判断两个数组是否相等。</td>\n</tr>\n<tr>\n<td>String toString(int[] a)</td>\n<td>输出数组信息。</td>\n</tr>\n<tr>\n<td>void fill(int[] a,int val)</td>\n<td>将指定值填充到数组之中。</td>\n</tr>\n<tr>\n<td>void sort(int[] a)</td>\n<td>对数组进行排序。</td>\n</tr>\n<tr>\n<td>int binarySearch(int[] a,int key)</td>\n<td>对排序后的数组进行二分法检索指定的值。</td>\n</tr>\n<tr>\n<td>static type copyOf(type[] a, int length)</td>\n<td></td>\n</tr>\n<tr>\n<td>static type copyOfRange(type[] a, int start, int end)</td>\n<td></td>\n</tr>\n<tr>\n<td>static void sort(type[] a)</td>\n<td>优化的快速排序算法</td>\n</tr>\n<tr>\n<td>static int binarySearch(type[] a, type v)</td>\n<td></td>\n</tr>\n<tr>\n<td>static int binarySearch(type[] a, int start, int end, type v)</td>\n<td>二分搜索算法查找值v</td>\n</tr>\n<tr>\n<td>static void fill(type[] a, type v)</td>\n<td>将数组的所有数据元素值设置为v。</td>\n</tr>\n<tr>\n<td>static boolean equals(type[] a, type[] b)</td>\n<td>如果两个数组大小相同，并且下标相同的元素都对应相等，返回true。</td>\n</tr>\n<tr>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td></td>\n</tr>\n</tbody>\n</table>\n</div>\n<h2 id=\"Java关键字\"><a href=\"#Java关键字\" class=\"headerlink\" title=\"Java关键字\"></a>Java关键字</h2><p>    定义：被Java语言赋予了特殊含义，用做专门用途的字符串（单词）<br>    特点：关键字中所有字母都为小写</p>\n<div class=\"table-container\">\n<table>\n<thead>\n<tr>\n<th>用于定义数据类型的关键字</th>\n<th></th>\n<th></th>\n<th></th>\n<th></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>class</td>\n<td>interface</td>\n<td>enum</td>\n<td>byte</td>\n<td>short</td>\n</tr>\n<tr>\n<td>int</td>\n<td>long</td>\n<td>float</td>\n<td>double</td>\n<td>char</td>\n</tr>\n<tr>\n<td>boolean</td>\n<td>void</td>\n<td></td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>用于定义流程控制的关键字</td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>if</td>\n<td>else</td>\n<td>switch</td>\n<td>case</td>\n<td>default</td>\n</tr>\n<tr>\n<td>while</td>\n<td>do</td>\n<td>for</td>\n<td>break</td>\n<td>continue</td>\n</tr>\n<tr>\n<td>return</td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>用于定义访问权限修饰符的关键字</td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>private</td>\n<td>protect</td>\n<td>public</td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>用于定义类，函数，变量修饰符的关键字</td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>abstract</td>\n<td>final</td>\n<td>static</td>\n<td>synchronized</td>\n<td></td>\n</tr>\n<tr>\n<td>用于定义类与类之间关系的关键字</td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>extends</td>\n<td>implements</td>\n<td></td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>用于定义建立实例及引用实例，判断实例的关键字</td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>new</td>\n<td>this</td>\n<td>super</td>\n<td>instanceof</td>\n<td></td>\n</tr>\n<tr>\n<td>用于异常处理的关键字</td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>try</td>\n<td>catch</td>\n<td>finally</td>\n<td>throw</td>\n<td>throws</td>\n</tr>\n<tr>\n<td>用于包的关键字</td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>package</td>\n<td>import</td>\n<td></td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>其他修饰符关键字</td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>native</td>\n<td>strictfp</td>\n<td>transient</td>\n<td>volatile</td>\n<td>assert</td>\n</tr>\n<tr>\n<td>* 用于定义数据类型值的字面值</td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>true</td>\n<td>false</td>\n<td>null</td>\n<td></td>\n</tr>\n</tbody>\n</table>\n</div>\n<p>Java保留字：现有Java版本尚未使用，但以后版本可能会作为关键字使用。自己命名标识符时要避免使用这些保留字<br>goto 、const</p>\n<h2 id=\"Java的内存管理与垃圾回收\"><a href=\"#Java的内存管理与垃圾回收\" class=\"headerlink\" title=\"Java的内存管理与垃圾回收\"></a>Java的内存管理与垃圾回收</h2><p>JVM的内存结构</p>\n<p><img src=\"https://img-blog.csdnimg.cn/a9a8f96c62dd41019b5c436ab8177c84.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBAWUZSNzE4,size_20,color_FFFFFF,t_70,g_se,x_16\" style=\"zoom:100%;\" /></p>\n<div class=\"table-container\">\n<table>\n<thead>\n<tr>\n<th></th>\n<th></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>栈（Stack）</td>\n<td>虚拟机栈用于存储局部变量等。局部变量表存放了编译期可知长度的各种基本数据类型（boolean、byte、 char 、 short 、 int 、 float 、 long 、 double）、对象引用（reference类型，它不等同于对象本身，是对象在堆内存的首地址）。 方法执行完，自动释放。</td>\n</tr>\n<tr>\n<td>堆（Heap）</td>\n<td>此内存区域的唯一目的就是存放对象实例，几乎所有的对象实例都在这里分配内存。这一点在Java虚拟机规范中的描述是：所有的对象实例以及数组都要在堆上分配。</td>\n</tr>\n<tr>\n<td>方法区（Method Area）</td>\n<td>用于存储已被虚拟机加载的类信息、常量、静态变量、即时编译器编译后的代码等数据。</td>\n</tr>\n<tr>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td></td>\n</tr>\n</tbody>\n</table>\n</div>\n","text":"Java概述是SUN(Stanford University Network，斯坦福大学网络公司 ) 1995年推出的一门高级编程语言。 Java语言特性 特点一：面向对象 两个基本概念：类、对象 三大特性：封装、继承、多态 特点二：健壮性 吸收了C/C++语言的优点，但去掉了其...","link":"","photos":[],"count_time":{"symbolsCount":"16k","symbolsTime":"15 mins."},"categories":[{"name":"JAVA","slug":"JAVA","count":7,"path":"api/categories/JAVA.json"}],"tags":[{"name":"java","slug":"java","count":7,"path":"api/tags/java.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#Java%E6%A6%82%E8%BF%B0\"><span class=\"toc-text\">Java概述</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#Java%E8%AF%AD%E8%A8%80%E7%89%B9%E6%80%A7\"><span class=\"toc-text\">Java语言特性</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E6%A0%B8%E5%BF%83%E6%9C%BA%E5%88%B6%E2%80%94Java%E8%99%9A%E6%8B%9F%E6%9C%BA\"><span class=\"toc-text\">核心机制—Java虚拟机</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E6%A0%B8%E5%BF%83%E6%9C%BA%E5%88%B6%E2%80%94%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6\"><span class=\"toc-text\">核心机制—垃圾回收</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#Hello-Java\"><span class=\"toc-text\">Hello Java</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#Java%E8%BF%90%E8%A1%8C%E6%AD%A5%E9%AA%A4%EF%BC%9A\"><span class=\"toc-text\">Java运行步骤：</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E4%B8%80%E4%BA%9B%E8%A7%84%E8%8C%83\"><span class=\"toc-text\">一些规范</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#Java%E5%91%BD%E5%90%8D%E8%A7%84%E8%8C%83\"><span class=\"toc-text\">Java命名规范</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#Java%E4%BB%A3%E7%A0%81%E7%BC%96%E5%86%99%E8%A7%84%E8%8C%83\"><span class=\"toc-text\">Java代码编写规范</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#Java%E6%B3%A8%E9%87%8A\"><span class=\"toc-text\">Java注释</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#Java%E6%B3%A8%E6%84%8F%E4%BA%8B%E9%A1%B9\"><span class=\"toc-text\">Java注意事项</span></a></li></ol></li></ol></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E5%9F%BA%E6%9C%AC%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B\"><span class=\"toc-text\">基本数据类型</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E6%95%B4%E6%95%B0\"><span class=\"toc-text\">整数</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E6%B5%AE%E7%82%B9%E6%95%B0\"><span class=\"toc-text\">浮点数</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#char%E7%B1%BB%E5%9E%8B\"><span class=\"toc-text\">char类型</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#boolean\"><span class=\"toc-text\">boolean</span></a></li></ol></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E5%8F%98%E9%87%8F\"><span class=\"toc-text\">变量</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%8F%98%E9%87%8F%E7%9A%84%E5%A3%B0%E6%98%8E%E4%B8%8E%E4%BD%BF%E7%94%A8\"><span class=\"toc-text\">变量的声明与使用</span></a></li></ol></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E5%B8%B8%E9%87%8F\"><span class=\"toc-text\">常量</span></a></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E6%95%B0%E5%80%BC%E7%B1%BB%E5%9E%8B%E4%B9%8B%E9%97%B4%E7%9A%84%E8%BD%AC%E6%8D%A2\"><span class=\"toc-text\">数值类型之间的转换</span></a></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E8%BF%9B%E5%88%B6%E4%B8%8E%E8%BF%90%E7%AE%97%E7%AC%A6\"><span class=\"toc-text\">进制与运算符</span></a></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#String\"><span class=\"toc-text\">String</span></a></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#StringBuilder\"><span class=\"toc-text\">StringBuilder</span></a></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E6%A0%87%E5%87%86%E8%BE%93%E5%85%A5%E8%BE%93%E5%87%BA\"><span class=\"toc-text\">标准输入输出</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E6%95%B0%E6%8D%AE%E8%AF%BB%E5%85%A5\"><span class=\"toc-text\">数据读入</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E6%A0%BC%E5%BC%8F%E5%8C%96%E8%BE%93%E5%87%BA\"><span class=\"toc-text\">格式化输出</span></a></li></ol></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E6%96%87%E4%BB%B6%E8%BE%93%E5%85%A5%E4%B8%8E%E8%BE%93%E5%87%BA\"><span class=\"toc-text\">文件输入与输出</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E6%96%87%E4%BB%B6%E8%AF%BB%E5%8F%96\"><span class=\"toc-text\">文件读取</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E6%96%87%E4%BB%B6%E5%86%99%E5%85%A5\"><span class=\"toc-text\">文件写入</span></a></li></ol></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E5%9D%97%E4%BD%9C%E7%94%A8%E5%9F%9F-Block\"><span class=\"toc-text\">块作用域 Block</span></a></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E6%B5%81%E7%A8%8B%E6%8E%A7%E5%88%B6%E8%AF%AD%E5%8F%A5\"><span class=\"toc-text\">流程控制语句</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%B8%A6%E6%A0%87%E7%AD%BE%E7%9A%84break%E8%AF%AD%E5%8F%A5\"><span class=\"toc-text\">带标签的break语句</span></a></li></ol></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E5%A4%A7%E6%95%B0%E5%80%BC\"><span class=\"toc-text\">大数值</span></a></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#Java%E6%95%B0%E7%BB%84\"><span class=\"toc-text\">Java数组</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E4%B8%80%E7%BB%B4%E6%95%B0%E7%BB%84%E7%9A%84%E5%88%9B%E5%BB%BA%E4%B8%8E%E4%BD%BF%E7%94%A8\"><span class=\"toc-text\">一维数组的创建与使用</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#for-each%E5%BE%AA%E7%8E%AF\"><span class=\"toc-text\">for each循环</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E6%95%B0%E7%BB%84%E7%9A%84%E6%8B%B7%E8%B4%9D\"><span class=\"toc-text\">数组的拷贝</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%A4%9A%E7%BB%B4%E6%95%B0%E7%BB%84\"><span class=\"toc-text\">多维数组</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E6%95%B0%E7%BB%84%E7%9A%84%E9%BB%98%E8%AE%A4%E5%88%9D%E5%A7%8B%E5%8C%96%E4%B8%8E%E5%86%85%E5%AD%98%E5%88%86%E6%9E%90\"><span class=\"toc-text\">数组的默认初始化与内存分析</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E6%93%8D%E4%BD%9C%E6%95%B0%E7%BB%84%E7%9A%84%E5%B7%A5%E5%85%B7%E7%B1%BBArrays\"><span class=\"toc-text\">操作数组的工具类Arrays</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#Java%E5%85%B3%E9%94%AE%E5%AD%97\"><span class=\"toc-text\">Java关键字</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#Java%E7%9A%84%E5%86%85%E5%AD%98%E7%AE%A1%E7%90%86%E4%B8%8E%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6\"><span class=\"toc-text\">Java的内存管理与垃圾回收</span></a></li></ol></li></ol>","author":{"name":"YFR718","slug":"blog-author","avatar":"https://avatars.githubusercontent.com/u/47553658?s=400&u=5e0a85700c66d7a2661c5664ec5f24d94e5ed01a&v=4","link":"/","description":"大数据萌新","socials":{"github":"https://github.com/YFR718","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"d","csdn":"","juejin":"","customs":{}}},"mapped":true,"prev_post":{"title":"Leetcode：1~100","uid":"30c2d1a91e3f3491d3662bdaaf39ffa5","slug":"l01","date":"2021-11-04T12:06:25.000Z","updated":"2021-11-20T07:53:20.200Z","comments":true,"path":"api/articles/l01.json","keywords":null,"cover":"https://gimg2.baidu.com/image_search/src=http%3A%2F%2Fpic2.zhimg.com%2Fv2-3cd4587b9b5710397e4f843ba34701d9_1200x500.jpg&refer=http%3A%2F%2Fpic2.zhimg.com&app=2002&size=f9999,10000&q=a80&n=0&g=0n&fmt=jpeg?sec=1638619543&t=d96ab8217b035d9f4f538a3b47b2cf1b","text":"1. 两数之和给定一个整数数组 nums 和一个整数目标值 target，请你在该数组中找出 和为目标值 target 的那 两个 整数，并返回它们的数组下标。 你可以假设每种输入只会对应一个答案。但是，数组中同一个元素在答案里不能重复出现。 你可以按任意顺序返回答案。 输入：n...","link":"","photos":[],"count_time":{"symbolsCount":"25k","symbolsTime":"23 mins."},"categories":[{"name":"LeetCode","slug":"LeetCode","count":2,"path":"api/categories/LeetCode.json"}],"tags":[{"name":"哈希","slug":"哈希","count":1,"path":"api/tags/哈希.json"}],"author":{"name":"YFR718","slug":"blog-author","avatar":"https://avatars.githubusercontent.com/u/47553658?s=400&u=5e0a85700c66d7a2661c5664ec5f24d94e5ed01a&v=4","link":"/","description":"大数据萌新","socials":{"github":"https://github.com/YFR718","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"d","csdn":"","juejin":"","customs":{}}}},"next_post":{"title":"Hexo 个人博客搭建","uid":"07213b6ca5497f88ac351468e0325797","slug":"0.Hexo个人博客搭建","date":"2021-11-02T09:47:00.000Z","updated":"2021-11-18T08:30:42.124Z","comments":true,"path":"api/articles/0.Hexo个人博客搭建.json","keywords":null,"cover":"https://gimg2.baidu.com/image_search/src=http%3A%2F%2Fpic1.zhimg.com%2Fv2-2398dbd26ae17898697afeb738e9a0c0_1440w.jpg%3Fsource%3D172ae18b&refer=http%3A%2F%2Fpic1.zhimg.com&app=2002&size=f9999,10000&q=a80&n=0&g=0n&fmt=jpeg?sec=1638533210&t=db3cbdc1afe1acfd02b16bf8bba82cb2","text":"Hexo 个人博客搭建安装步骤 github创建yfr718.github.io项目 安装git、设置用户名和邮箱、ssh连接github git config --global user.name &quot;你的GitHub用户名&quot; git config --glo...","link":"","photos":[],"count_time":{"symbolsCount":"1.1k","symbolsTime":"1 mins."},"categories":[{"name":"前端","slug":"前端","count":1,"path":"api/categories/前端.json"}],"tags":[{"name":"hexo","slug":"hexo","count":1,"path":"api/tags/hexo.json"}],"author":{"name":"YFR718","slug":"blog-author","avatar":"https://avatars.githubusercontent.com/u/47553658?s=400&u=5e0a85700c66d7a2661c5664ec5f24d94e5ed01a&v=4","link":"/","description":"大数据萌新","socials":{"github":"https://github.com/YFR718","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"d","csdn":"","juejin":"","customs":{}}}}}