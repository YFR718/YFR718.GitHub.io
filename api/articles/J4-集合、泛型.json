{"title":"集合、泛型","uid":"a3bf914b929f60f3127d07c8144366a0","slug":"J4-集合、泛型","date":"2021-11-12T02:30:35.000Z","updated":"2021-11-24T07:31:23.778Z","comments":true,"path":"api/articles/J4-集合、泛型.json","keywords":null,"cover":"https://img-blog.csdnimg.cn/2cd6d6a421f1455fb6a93e78ffeefd47.jpg?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBAWUZSNzE4,size_20,color_FFFFFF,t_70,g_se,x_16#pic_center","content":"<h1 id=\"1-Java集合\"><a href=\"#1-Java集合\" class=\"headerlink\" title=\"1. Java集合\"></a>1. Java集合</h1><h2 id=\"1-1-Java集合框架概述\"><a href=\"#1-1-Java集合框架概述\" class=\"headerlink\" title=\"1.1 Java集合框架概述\"></a>1.1 Java集合框架概述</h2><p>Java 集合可分为 Collection 和 Map 两种体系</p>\n<ul>\n<li>Collection接口：单列数据，定义了存取一组对象的方法的集合<br>List：元素有序、可重复的集合<br>Set：元素无序、不可重复的集合</li>\n<li>Map接口：双列数据，保存具有映射关系“key-value对”的集合</li>\n</ul>\n<p><img src=\"https://img-blog.csdnimg.cn/284b849c621a4720a47372a97a494ef6.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBAWUZSNzE4,size_20,color_FFFFFF,t_70,g_se,x_16\" alt=\"\"></p>\n<p><img src=\"https://img-blog.csdnimg.cn/f8bf3bccb32846e8b5b807744b35d969.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBAWUZSNzE4,size_20,color_FFFFFF,t_70,g_se,x_16\" alt=\"\"></p>\n<h2 id=\"1-2-Collection接口方法\"><a href=\"#1-2-Collection接口方法\" class=\"headerlink\" title=\"1.2 Collection接口方法\"></a>1.2 Collection接口方法</h2><p>​        Collection 接口是 List、Set 和 Queue 接口的父接口，该接口里定义的方法既可用于操作 Set 集合，也可用于操作 List 和 Queue 集合。</p>\n<div class=\"table-container\">\n<table>\n<thead>\n<tr>\n<th>Collection接口方法</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>add(Object obj)<br>addAll(Collection coll)</td>\n<td>添加</td>\n</tr>\n<tr>\n<td>int size()</td>\n<td>计算个数</td>\n</tr>\n<tr>\n<td>void clear()</td>\n<td>清空集合</td>\n</tr>\n<tr>\n<td>boolean isEmpty()</td>\n<td>判断是否为空</td>\n</tr>\n<tr>\n<td>boolean contains(Object obj)</td>\n<td>equals方法判断是否是同一对象</td>\n</tr>\n<tr>\n<td>boolean containsAll(Collection c)</td>\n<td>拿两个集合的元素挨个比较。</td>\n</tr>\n<tr>\n<td>boolean remove(Object obj)</td>\n<td>equals方法删除第一个相同元素</td>\n</tr>\n<tr>\n<td>boolean removeAll(Collection coll)</td>\n<td>取当前集合的差集</td>\n</tr>\n<tr>\n<td>boolean retainAll(Collection c)</td>\n<td>取两个集合的交集</td>\n</tr>\n<tr>\n<td>boolean equals(Object obj)</td>\n<td>集合是否相等</td>\n</tr>\n<tr>\n<td>Object[] toArray()</td>\n<td>转成对象数组</td>\n</tr>\n<tr>\n<td>hashCode()</td>\n<td>获取集合对象的哈希值</td>\n</tr>\n<tr>\n<td>iterator()：</td>\n<td>遍历</td>\n</tr>\n</tbody>\n</table>\n</div>\n<h2 id=\"1-3-Iterator迭代器接口\"><a href=\"#1-3-Iterator迭代器接口\" class=\"headerlink\" title=\"1.3 Iterator迭代器接口\"></a>1.3 Iterator迭代器接口</h2><p> Iterator对象称为迭代器(设计模式的一种)，主要用于遍历 Collection 集合中的元素。</p>\n<div class=\"table-container\">\n<table>\n<thead>\n<tr>\n<th>Iterator接口的方法</th>\n<th></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>hasNext()</td>\n<td>是否还有更多元素</td>\n</tr>\n<tr>\n<td>next()</td>\n<td>返回下一个元素</td>\n</tr>\n<tr>\n<td>remove()</td>\n<td>删除元素</td>\n</tr>\n</tbody>\n</table>\n</div>\n<p>​        在调用it.next()方法之前必须要调用it.hasNext()进行检测。若不调用，且下一条记录无效，直接调用it.next()会抛出NoSuchElementException异常。</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token class-name\">Iterator</span> iterator <span class=\"token operator\">=</span> coll<span class=\"token punctuation\">.</span><span class=\"token function\">iterator</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">//hasNext():判断是否还有下一个元素</span>\n<span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>iterator<span class=\"token punctuation\">.</span><span class=\"token function\">hasNext</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t<span class=\"token comment\">//next():①指针下移 ②将下移以后集合位置上的元素返回</span>\n\t<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>iterator<span class=\"token punctuation\">.</span><span class=\"token function\">next</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token class-name\">Iterator</span> iter <span class=\"token operator\">=</span> coll<span class=\"token punctuation\">.</span><span class=\"token function\">iterator</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//回到起点</span>\n<span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>iter<span class=\"token punctuation\">.</span><span class=\"token function\">hasNext</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t<span class=\"token class-name\">Object</span> obj <span class=\"token operator\">=</span> iter<span class=\"token punctuation\">.</span><span class=\"token function\">next</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">.</span><span class=\"token function\">equals</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Tom\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t\titer<span class=\"token punctuation\">.</span><span class=\"token function\">remove</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span> \n<span class=\"token punctuation\">}</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>​        如果还未调用next()或在上一次调用 next 方法之后已经调用了 remove 方法，再调用remove都会报IllegalStateException。</p>\n<h3 id=\"使用-foreach-循环遍历集合元素\"><a href=\"#使用-foreach-循环遍历集合元素\" class=\"headerlink\" title=\"使用 foreach 循环遍历集合元素\"></a><strong>使用</strong> <strong>foreach</strong> <strong>循环遍历集合元素</strong></h3><p>Java 5.0 提供了 foreach 循环迭代访问 Collection和数组。</p>\n<p>遍历操作不需获取Collection或数组的长度，无需使用索引访问元素。</p>\n<p>遍历集合的底层调用Iterator完成操作。</p>\n<p>foreach还可以用来遍历数组。</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Person</span> <span class=\"token operator\">:</span> persons<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n<h2 id=\"1-4-Collection子接口一：List\"><a href=\"#1-4-Collection子接口一：List\" class=\"headerlink\" title=\"1.4 Collection子接口一：List\"></a>1.4 Collection子接口一：List</h2><p>List集合类中<strong>元素有序、且可重复</strong>，集合中的每个元素都有其对应的顺序索引。</p>\n<p>List容器中的元素都对应一个整数型的序号记载其在容器中的位置，可以根据序号存取容器中的元素。</p>\n<p>JDK API中List接口的实现类常用的有：ArrayList、LinkedList和Vector。</p>\n<h3 id=\"List接口方法\"><a href=\"#List接口方法\" class=\"headerlink\" title=\"List接口方法\"></a>List接口方法</h3><div class=\"table-container\">\n<table>\n<thead>\n<tr>\n<th>些根据索引来操作集合元素的方法</th>\n<th></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>void add(int index, Object ele)</td>\n<td>在index位置插入ele元素</td>\n</tr>\n<tr>\n<td>boolean addAll(int index, Collection eles)</td>\n<td>index位置开始将eles中的所有元素添加</td>\n</tr>\n<tr>\n<td>Object get(int index)</td>\n<td>获取指定index位置的元素</td>\n</tr>\n<tr>\n<td>int indexOf(Object obj)</td>\n<td>返回obj在集合中首次出现的位置</td>\n</tr>\n<tr>\n<td>int lastIndexOf(Object obj)</td>\n<td>返回obj在当前集合中末次出现的位置</td>\n</tr>\n<tr>\n<td>Object remove(int index)</td>\n<td>移除指定index位置的元素，并返回此元素</td>\n</tr>\n<tr>\n<td>Object set(int index, Object ele)</td>\n<td>设置指定index位置的元素为ele</td>\n</tr>\n<tr>\n<td>List subList(int fromIndex, int toIndex)</td>\n<td>返回从fromIndex到toIndex位置的子集合</td>\n</tr>\n</tbody>\n</table>\n</div>\n<h3 id=\"ArrayList\"><a href=\"#ArrayList\" class=\"headerlink\" title=\"ArrayList\"></a>ArrayList</h3><p>本质上，ArrayList是对象引用的一个”变长”数组</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token class-name\">List</span> list <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ArrayList</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nlist<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nlist<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nlist<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nlist<span class=\"token punctuation\">.</span><span class=\"token function\">remove</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>list<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h3 id=\"LinkedList\"><a href=\"#LinkedList\" class=\"headerlink\" title=\"LinkedList\"></a>LinkedList</h3><p><strong>双向链表</strong>，内部没有声明数组，而是定义了Node类型的first和last，用于记录首末元素。同时，定义内部类Node，作为LinkedList中保存数据的基本结构。Node除了保存数据，还定义了两个变量：</p>\n<p> prev变量记录前一个元素的位置</p>\n<p> next变量记录下一个元素的位置</p>\n<p>对于<strong>频繁的插入或删除元素</strong>的操作，建议使用LinkedList类，效率较高。</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Node</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">E</span><span class=\"token punctuation\">&gt;</span></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token class-name\">E</span> item<span class=\"token punctuation\">;</span>\n    <span class=\"token class-name\">Node</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">E</span><span class=\"token punctuation\">&gt;</span></span> next<span class=\"token punctuation\">;</span>\n    <span class=\"token class-name\">Node</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">E</span><span class=\"token punctuation\">&gt;</span></span> prev<span class=\"token punctuation\">;</span>\n    <span class=\"token class-name\">Node</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Node</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">E</span><span class=\"token punctuation\">&gt;</span></span> prev<span class=\"token punctuation\">,</span> <span class=\"token class-name\">E</span> element<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Node</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">E</span><span class=\"token punctuation\">&gt;</span></span> next<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>item <span class=\"token operator\">=</span> element<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>next <span class=\"token operator\">=</span> next<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>prev <span class=\"token operator\">=</span> prev<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span> \n<span class=\"token punctuation\">}</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<div class=\"table-container\">\n<table>\n<thead>\n<tr>\n<th>新增方法</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>void addFirst(Object obj)</td>\n<td>头插</td>\n</tr>\n<tr>\n<td>void addLast(Object obj)</td>\n<td>尾插</td>\n</tr>\n<tr>\n<td>Object getFirst()</td>\n<td>得到头节点</td>\n</tr>\n<tr>\n<td>Object getLast()</td>\n<td>得到尾节点</td>\n</tr>\n<tr>\n<td>Object removeFirst()</td>\n<td>删除头节点</td>\n</tr>\n<tr>\n<td>Object removeLast()</td>\n<td>删除尾节点</td>\n</tr>\n</tbody>\n</table>\n</div>\n<h3 id=\"Vector\"><a href=\"#Vector\" class=\"headerlink\" title=\"Vector\"></a>Vector</h3><p>Vector 是一个古老的集合，JDK1.0就有了。大多数操作与ArrayList相同，区别之处在于Vector是线程安全的。</p>\n<div class=\"table-container\">\n<table>\n<thead>\n<tr>\n<th>新增方法</th>\n<th></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>void addElement(Object obj)</td>\n<td></td>\n</tr>\n<tr>\n<td>void insertElementAt(Object obj,int index)</td>\n<td></td>\n</tr>\n<tr>\n<td>void setElementAt(Object obj,int index)</td>\n<td></td>\n</tr>\n<tr>\n<td>void removeElement(Object obj)</td>\n<td></td>\n</tr>\n<tr>\n<td>void removeAllElements()</td>\n</tr>\n</tbody>\n</table>\n</div>\n<h3 id=\"面试题\"><a href=\"#面试题\" class=\"headerlink\" title=\"面试题\"></a>面试题</h3><p>​        <strong>请问ArrayList/LinkedList/Vector的异同？谈谈你的理解？ArrayList底层是什么？扩容机制？Vector和ArrayList的最大区别?</strong> </p>\n<ul>\n<li>ArrayList和LinkedList的异同</li>\n</ul>\n<p>​        二者都线程不安全，相对线程安全的Vector，执行效率高。此外，ArrayList是实现了基于动态数组的数据结构，LinkedList基于链表的数据结构。对于随机访问get和set，ArrayList觉得优于LinkedList，因为LinkedList要移动指针。对于新增和删除操作add(特指插入)和remove，LinkedList比较占优势，因为ArrayList要移动数据。</p>\n<ul>\n<li>ArrayList和Vector的区别</li>\n</ul>\n<p>​        Vector和ArrayList几乎是完全相同的,唯一的区别在于Vector是同步类(synchronized)，属于强同步类。因此开销就比ArrayList要大，访问要慢。正常情况下,大多数的Java程序员使用ArrayList而不是Vector,因为同步完全可以由程序员自己来控制。Vector每次扩容请求其大小的2倍空间，而ArrayList是1.5倍。Vector还有一个子类Stack。</p>\n<h2 id=\"1-5-Collection子接口二：Set\"><a href=\"#1-5-Collection子接口二：Set\" class=\"headerlink\" title=\"1.5 Collection子接口二：Set\"></a>1.5 Collection子接口二：Set</h2><p>Set接口是Collection的子接口，set接口没有提供额外的方法。</p>\n<p>Set 集合不允许包含相同的元素，如果试把两个相同的元素加入同一个Set 集合中，则添加操作失败。</p>\n<p>Set 判断两个对象是否相同不是使用 == 运算符，而是根据 equals() 方法。</p>\n<h3 id=\"HashSet\"><a href=\"#HashSet\" class=\"headerlink\" title=\"HashSet\"></a>HashSet</h3><p>​        HashSet 按 Hash 算法来存储集合中的元素，因此具有很好的存取、查找、删除性能。 </p>\n<p><strong>HashSet具有以下特点：</strong></p>\n<ol>\n<li>不能保证元素的排列顺序</li>\n<li>HashSet 不是线程安全的</li>\n<li>集合元素可以是 null</li>\n</ol>\n<p><strong>HashSet集合判断两个元素相等的标准</strong>：两个对象通过 hashCode() 方法比较相等，并且两个对象的 equals() 方法返回值也相等。 </p>\n<p>对于存放在Set容器中的对象，<strong>对应的类一定要重写equals()和hashCode(Objectobj)方法，以实现对象相等规则。即：“相等的对象必须具有相等的散列码”。</strong></p>\n<p><strong>向HashSet中添加元素的过程：</strong></p>\n<p>​        当向 HashSet 集合中存入一个元素时，HashSet 会调用该对象的 hashCode() 方法来得到该对象的 hashCode 值，然后根据 hashCode 值，通过某种散列函数决定该对象在 HashSet 底层数组中的存储位置。（这个散列函数会与底层数组的长度相计算得到在数组中的下标，并且这种散列函数计算还尽可能保证能均匀存储元素，越是散列分布，该散列函数设计的越好） </p>\n<p>​        如果两个元素的hashCode()值相等，会再继续调用equals方法，如果equals方法结果为true，添加失败；如果为false，那么会保存该元素，但是该数组的位置已经有元素了，那么会通过链表的方式继续链接。 </p>\n<p>​        如果两个元素的 equals() 方法返回 true，但它们的 hashCode() 返回值不相等，hashSet 将会把它们存储在不同的位置，但依然可以添加成功。</p>\n<p><strong>重写 hashCode() 方法的基本原则</strong></p>\n<ol>\n<li>在程序运行时，同一个对象多次调用 hashCode() 方法应该返回相同的值。</li>\n<li>当两个对象的 equals() 方法比较返回 true 时，这两个对象的 hashCode() 方法的返回值也应相等。</li>\n<li>对象中用作 equals() 方法比较的 Field，都应该用来计算 hashCode 值。</li>\n</ol>\n<p><strong>以自定义的Customer类为例，何时需要重写equals()？</strong></p>\n<ol>\n<li>当一个类有自己特有的“逻辑相等”概念,当改写equals()的时候，总是要改写hashCode()，根据一个类的equals方法（改写后），两个截然不同的实例有可能在逻辑上是相等的，但是，根据Object.hashCode()方法，它们仅仅是两个对象。</li>\n<li>因此，违反了“相等的对象必须具有相等的散列码”。</li>\n<li>结论：复写equals方法的时候一般都需要同时复写hashCode方法。<strong>通常参与计算hashCode的对象的属性也应该参与到equals()中进行计算。</strong></li>\n</ol>\n<p><strong>以Eclipse/IDEA为例，在自定义类中可以调用工具自动重写equals和hashCode。问题：为什么用Eclipse/IDEA复写hashCode方法，有31这个数字？</strong></p>\n<ol>\n<li>选择系数的时候要选择尽量大的系数。因为如果计算出来的hash地址越大，所谓的“冲突”就越少，查找起来效率也会提高。（减少冲突）</li>\n<li>并且31只占用5bits,相乘造成数据溢出的概率较小。</li>\n<li>31可以 由i*31== (i&lt;&lt;5)-1来表示,现在很多虚拟机里面都有做相关优化。（提高算法效率）</li>\n<li>31是一个素数，素数作用就是如果我用一个数字来乘以这个素数，那么最终出来的结果只能被素数本身和被乘数还有1来整除！(减少冲突)</li>\n</ol>\n<h3 id=\"LinkedHashSet\"><a href=\"#LinkedHashSet\" class=\"headerlink\" title=\"LinkedHashSet\"></a>LinkedHashSet</h3><p>​        LinkedHashSet 根据元素的 hashCode 值来决定元素的存储位置，但它同时使用双向链表维护元素的次序，这使得元素看起来是以插入顺序保存的。</p>\n<p>​        LinkedHashSet插入性能略低于 HashSet，但在迭代访问 Set 里的全部元素时有很好的性能。</p>\n<p>​        LinkedHashSet 不允许集合元素重复。</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token class-name\">Set</span> set <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">LinkedHashSet</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nset<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"AA\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nset<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token number\">456</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nset<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token number\">456</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nset<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Customer</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"刘德华\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1001</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h3 id=\"TreeSet\"><a href=\"#TreeSet\" class=\"headerlink\" title=\"TreeSet\"></a>TreeSet</h3><p>​        TreeSet 是 SortedSet 接口的实现类，TreeSet 可以确保集合元素处于排序状态。</p>\n<p>​        TreeSet底层使用<strong>红黑树</strong>结构存储数据</p>\n<div class=\"table-container\">\n<table>\n<thead>\n<tr>\n<th>新增的方法</th>\n<th></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Comparator comparator()</td>\n<td></td>\n</tr>\n<tr>\n<td>Object first()</td>\n<td></td>\n</tr>\n<tr>\n<td>Object last()</td>\n<td></td>\n</tr>\n<tr>\n<td>Object lower(Object e)</td>\n<td></td>\n</tr>\n<tr>\n<td>Object higher(Object e)</td>\n<td></td>\n</tr>\n<tr>\n<td>SortedSet subSet(fromElement, toElement)</td>\n<td></td>\n</tr>\n<tr>\n<td>SortedSet headSet(toElement)</td>\n<td></td>\n</tr>\n<tr>\n<td>SortedSet tailSet(fromElement)</td>\n</tr>\n</tbody>\n</table>\n</div>\n<p>TreeSet 两种排序方法：<strong>自然排序</strong>和<strong>定制排序</strong>。默认情况下，TreeSet 采用自然排序。</p>\n<p><strong>自然排序</strong>：TreeSet 会调用集合元素的 compareTo(Object obj) 方法来比较元素之间的大小关系，然后将集合元素按升序(默认情况)排列。如果试图把一个对象添加到 TreeSet 时，则该对象的类必须实现 Comparable 接口。</p>\n<p><strong>Comparable 的典型实现：</strong></p>\n<ol>\n<li>BigDecimal、BigInteger 以及所有的数值型对应的包装类：按它们对应的数值大小进行比较</li>\n<li>Character：按字符的 unicode值来进行比较</li>\n<li>Boolean：true 对应的包装类实例大于 false 对应的包装类实例</li>\n<li>String：按字符串中字符的 unicode 值进行比较</li>\n<li>Date、Time：后边的时间、日期比前面的时间、日期大</li>\n</ol>\n<p>​        当需要把一个对象放入 TreeSet 中，重写该对象对应的 equals() 方法时，应保证该方法与 compareTo(Object obj) 方法有一致的结果：如果两个对象通过equals() 方法比较返回 true，则通过 compareTo(Object obj) 方法比较应返回 0。否则，让人难以理解。</p>\n<p><strong>定制排序</strong>：不希望按照升序(默认情况)的方式排列元素或希望按照其它属性大小进行排序，则考虑使用定制排序。定制排序，通过Comparator接口来实现。需要重写compare(T o1,T o2)方法。 如果方法返回正整数，则表示o1大于o2；如果返回0，表示相等；返回负整数，表示o1小于o2。 </p>\n<h3 id=\"面试题-1\"><a href=\"#面试题-1\" class=\"headerlink\" title=\"面试题\"></a>面试题</h3><pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token class-name\">HashSet</span> set <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">HashSet</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token class-name\">Person</span> p1 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Person</span><span class=\"token punctuation\">(</span><span class=\"token number\">1001</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"AA\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token class-name\">Person</span> p2 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Person</span><span class=\"token punctuation\">(</span><span class=\"token number\">1002</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"BB\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nset<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>p1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nset<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>p2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\np1<span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> <span class=\"token string\">\"CC\"</span><span class=\"token punctuation\">;</span>\nset<span class=\"token punctuation\">.</span><span class=\"token function\">remove</span><span class=\"token punctuation\">(</span>p1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>set<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nset<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Person</span><span class=\"token punctuation\">(</span><span class=\"token number\">1001</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"CC\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>set<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nset<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Person</span><span class=\"token punctuation\">(</span><span class=\"token number\">1001</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"AA\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>set<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h2 id=\"1-6-Map接口\"><a href=\"#1-6-Map接口\" class=\"headerlink\" title=\"1.6 Map接口\"></a>1.6 Map接口</h2><ol>\n<li>Map与Collection并列存在。用于保存具有<strong>映射关系</strong>的数据:key-value</li>\n<li>Map 中的 key 和 value 都可以是任何引用类型的数据</li>\n<li>Map 中的 key 用Set来存放，<strong>不允许重复</strong>，即同一个 Map 对象所对应的类，须重写hashCode()和equals()方法</li>\n<li>常用String类作为Map的“键”</li>\n<li>key 和 value 之间存在单向一对一关系，即通过指定的 key 总能找到唯一的、确定的 value</li>\n<li>Map接口的常用实现类：HashMap、TreeMap、LinkedHashMap和Properties。其中，HashMap是 Map 接口使用频率最高的实现类</li>\n</ol>\n<h3 id=\"Map接口：常用方法\"><a href=\"#Map接口：常用方法\" class=\"headerlink\" title=\"Map接口：常用方法\"></a>Map接口：常用方法</h3><div class=\"table-container\">\n<table>\n<thead>\n<tr>\n<th>添加、删除、修改操作</th>\n<th></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Object put(Object key,Object value)</td>\n<td>将指定key-value添加到(或修改)当前map对象中</td>\n</tr>\n<tr>\n<td>void putAll(Map m)</td>\n<td>将m中的所有key-value对存放到当前map中</td>\n</tr>\n<tr>\n<td>Object remove(Object key)</td>\n<td>移除指定key的key-value对，并返回value</td>\n</tr>\n<tr>\n<td>void clear()</td>\n<td>清空当前map中的所有数据</td>\n</tr>\n</tbody>\n</table>\n</div>\n<div class=\"table-container\">\n<table>\n<thead>\n<tr>\n<th>元素查询的操作</th>\n<th></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Object get(Object key)</td>\n<td>获取指定key对应的value</td>\n</tr>\n<tr>\n<td>boolean containsKey(Object key)</td>\n<td>是否包含指定的key</td>\n</tr>\n<tr>\n<td>boolean containsValue(Object value)</td>\n<td>是否包含指定的value</td>\n</tr>\n<tr>\n<td>int size()</td>\n<td>返回map中key-value对的个数</td>\n</tr>\n<tr>\n<td>boolean isEmpty()</td>\n<td>判断当前map是否为空</td>\n</tr>\n<tr>\n<td>boolean equals(Object obj)</td>\n<td>判断当前map和参数对象obj是否相等</td>\n</tr>\n</tbody>\n</table>\n</div>\n<div class=\"table-container\">\n<table>\n<thead>\n<tr>\n<th>元视图操作的方法</th>\n<th></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Set keySet()</td>\n<td>返回所有key构成的Set集合</td>\n</tr>\n<tr>\n<td>Collection values()</td>\n<td>返回所有value构成的Collection集合</td>\n</tr>\n<tr>\n<td>Set entrySet()</td>\n<td>返回所有key-value对构成的Set集合</td>\n</tr>\n</tbody>\n</table>\n</div>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token class-name\">Map</span> map <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">HashMap</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">//map.put(..,..)省略</span>\n<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"map的所有key:\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token class-name\">Set</span> keys <span class=\"token operator\">=</span> map<span class=\"token punctuation\">.</span><span class=\"token function\">keySet</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// HashSet</span>\n<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Object</span> key <span class=\"token operator\">:</span> keys<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>key <span class=\"token operator\">+</span> <span class=\"token string\">\"-&gt;\"</span> <span class=\"token operator\">+</span> map<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"map的所有的value：\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token class-name\">Collection</span> values <span class=\"token operator\">=</span> map<span class=\"token punctuation\">.</span><span class=\"token function\">values</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token class-name\">Iterator</span> iter <span class=\"token operator\">=</span> values<span class=\"token punctuation\">.</span><span class=\"token function\">iterator</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>iter<span class=\"token punctuation\">.</span><span class=\"token function\">hasNext</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>iter<span class=\"token punctuation\">.</span><span class=\"token function\">next</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"map所有的映射关系：\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// 映射关系的类型是Map.Entry类型，它是Map接口的内部接口</span>\n<span class=\"token class-name\">Set</span> mappings <span class=\"token operator\">=</span> map<span class=\"token punctuation\">.</span><span class=\"token function\">entrySet</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Object</span> mapping <span class=\"token operator\">:</span> mappings<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token class-name\">Map<span class=\"token punctuation\">.</span>Entry</span> entry <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Map<span class=\"token punctuation\">.</span>Entry</span><span class=\"token punctuation\">)</span> mapping<span class=\"token punctuation\">;</span>\n\t<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"key是：\"</span> <span class=\"token operator\">+</span> entry<span class=\"token punctuation\">.</span><span class=\"token function\">getKey</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token string\">\"，value是：\"</span> <span class=\"token operator\">+</span> entry<span class=\"token punctuation\">.</span><span class=\"token function\">getValue</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h3 id=\"HashMap\"><a href=\"#HashMap\" class=\"headerlink\" title=\"HashMap\"></a>HashMap</h3><ol>\n<li>HashMap是 Map 接口<strong>使用频率最高</strong>的实现类。</li>\n<li>允许使用null键和null值，与HashSet一样，不保证映射的顺序。</li>\n<li>所有的key构成的集合是Set:无序的、不可重复的。所以，key所在的类要重写：equals()和hashCode()</li>\n<li>所有的value构成的集合是Collection:无序的、可以重复的。所以，value所在的类要重写：equals()</li>\n<li>一个key-value构成一个entry</li>\n<li>所有的entry构成的集合是Set:无序的、不可重复的</li>\n<li>HashMap <strong>判断两个</strong> <strong>key</strong> <strong>相等的标准</strong>是：两个 key 通过 equals() 方法返回 true，hashCode 值也相等。</li>\n<li>HashMap <strong>判断两个</strong> <strong>value**</strong>相等的标准**是：两个 value 通过 equals() 方法返回 true。</li>\n</ol>\n<p><strong>HashMap的存储结构</strong></p>\n<p>JDK 7及以前版本：HashMap是数组+链表结构(即为链地址法)</p>\n<p>JDK 8版本发布以后：HashMap是数组+链表+红黑树实现。</p>\n<p><strong>HashMap源码中的重要常量</strong></p>\n<ol>\n<li><strong>DEFAULT_INITIAL_CAPACITY</strong> : HashMap的默认容量，16</li>\n<li><strong>MAXIMUM_CAPACITY</strong> ： HashMap的最大支持容量，2^30</li>\n<li><strong>DEFAULT_LOAD_FACTOR：HashMap</strong>的默认加载因子</li>\n<li><strong>TREEIFY_THRESHOLD：Bucket</strong>中链表长度大于该默认值，转化为红黑树</li>\n<li><strong>UNTREEIFY_THRESHOLD：Bucket</strong>中红黑树存储的Node小于该默认值，转化为链表</li>\n<li><strong>MIN_TREEIFY_CAPACITY</strong>：桶中的Node被树化时最小的hash表容量。（当桶中Node的数量大到需要变红黑树时，若hash表容量小于MIN_TREEIFY_CAPACITY时，此时应执行resize扩容操作这MIN_TREEIFY_CAPACITY的值至少是TREEIFY_THRESHOLD的4倍。）</li>\n<li><strong>table</strong>：存储元素的数组，总是2的n次幂</li>\n<li><strong>entrySet</strong>：存储具体元素的集</li>\n<li><strong>size：HashMap</strong>中存储的键值对的数量</li>\n<li><strong>modCount：HashMap</strong>扩容和结构改变的次数。</li>\n<li><strong>threshold</strong>：扩容的临界值，=容量*填充因子</li>\n<li><strong>loadFactor</strong>：填充因子</li>\n</ol>\n<p><strong>HashMap的存储结构：JDK 1.8之前</strong></p>\n<ul>\n<li><p>HashMap的内部存储结构其实是<strong>数组和链表的结合</strong>。当实例化一个HashMap时，系统会创建一个长度为Capacity的Entry数组，这个长度在哈希表中被称为容量(Capacity)，在这个数组中可以存放元素的位置我们称之为“桶”(bucket)，每个bucket都有自己的索引，系统可以根据索引快速的查找bucket中的元素。 </p>\n</li>\n<li><p>每个bucket中存储一个元素，即一个Entry对象，但每一个Entry对象可以带一个引用变量，用于指向下一个元素，因此，在一个桶中，就有可能生成一个Entry链。而且新添加的元素作为链表的head。 </p>\n</li>\n<li><p>添加元素的过程：</p>\n<p>向HashMap中添加entry1(key，value)，需要首先计算entry1中key的哈希值(根据key所在类的hashCode()计算得到)，此哈希值经过处理以后，得到在底层Entry[]数组中要存储的位置i。如果位置i上没有元素，则entry1直接添加成功。如果位置i上已经存在entry2(或还有链表存在的entry3，entry4)，则需要通过循环的方法，依次比较entry1中key和其他的entry。如果彼此hash值不同，则直接添加成功。如果hash值不同，继续比较二者是否equals。如果返回值为true，则使用entry1的value去替换equals为true的entry的value。如果遍历一遍以后，发现所有的equals返回都为false,则entry1仍可添加成功。entry1指向原有的entry元素。</p>\n</li>\n<li><p>HashMap的扩容</p>\n<p>当HashMap中的元素越来越多的时候，hash冲突的几率也就越来越高，因为数组的长度是固定的。所以为了提高查询的效率，就要对HashMap的数组进行扩容，而在HashMap数组扩容之后，最消耗性能的点就出现了：原数组中的数据必须重新计算其在新数组中的位置，并放进去，这就是resize。</p>\n</li>\n<li><p>那么HashMap什么时候进行扩容呢？</p>\n<p>当HashMap中的元素个数超过数组大小(数组总大小length,不是数组中个数size)*loadFactor 时 ， 就 会 进 行 数 组 扩 容 ， loadFactor 的默认 值 (DEFAULT_LOAD_FACTOR)为0.75，这是一个折中的取值。也就是说，默认情况下，数组大小(DEFAULT_INITIAL_CAPACITY)为16，那么当HashMap中元素个数超过16*0.75=12（这个值就是代码中的threshold值，也叫做临界值）的时候，就把数组的大小扩展为 2*16=32，即扩大一倍，然后重新计算每个元素在数组中的位置，而这是一个非常消耗性能的操作，所以如果我们已经预知HashMap中元素的个数，那么预设元素的个数能够有效的提高HashMap的性能。</p>\n</li>\n<li><p>HashMap的内部存储结构其实是数组+链表+树的结合。当实例化一个HashMap时，会初始化initialCapacity和loadFactor，在put第一对映射关系时，系统会创建一个长度为initialCapacity的Node数组，这个长度在哈希表中被称为容量(Capacity)，在这个数组中可以存放元素的位置我们称之为“桶”(bucket)，每个bucket都有自己的索引，系统可以根据索引快速的查找bucket中的元素。 </p>\n</li>\n<li>每个bucket中存储一个元素，即一个Node对象，但每一个Node对象可以带一个引用变量next，用于指向下一个元素，因此，在一个桶中，就有可能生成一个Node链。也可能是一个一个TreeNode对象，每一个TreeNode对象可以有两个叶子结点left和right，因此，在一个桶中，就有可能生成一个TreeNode树。而新添加的元素作为链表的last，或树的叶子结点。</li>\n</ul>\n<p><strong>那么HashMap什么时候进行扩容和树形化呢？</strong> </p>\n<p>​        当HashMap中的元素个数超过数组大小(数组总大小length,不是数组中个数size)*loadFactor 时 ， 就会进行数组扩容 ， loadFactor 的默认 值 (DEFAULT_LOAD_FACTOR)为0.75，这是一个折中的取值。也就是说，默认情况下，数组大小(DEFAULT_INITIAL_CAPACITY)为16，那么当HashMap中元素个数超过16*0.75=12（这个值就是代码中的threshold值，也叫做临界值）的时候，就把数组的大小扩展为 2*16=32，即扩大一倍，然后重新计算每个元素在数组中的位置，而这是一个非常消耗性能的操作，所以如果我们已经预知HashMap中元素的个数，那么预设元素的个数能够有效的提高HashMap的性能。</p>\n<p>​        当HashMap中的其中一个链的对象个数如果达到了8个，此时如果capacity没有达到64，那么HashMap会先扩容解决，如果已经达到了64，那么这个链会变成树，结点类型由Node变成TreeNode类型。当然，如果当映射关系被移除后，下次resize方法时判断树的结点个数低于6个，也会把树再转为链表。</p>\n<p><strong>关于映射关系的key是否可以修改？answer：不要修改</strong></p>\n<p>​        映射关系存储到HashMap中会存储key的hash值，这样就不用在每次查找时重新计算每一个Entry或Node（TreeNode）的hash值了，因此如果已经put到Map中的映射关系，再修改key的属性，而这个属性又参与hashcode值的计算，那么会导致匹配不上。</p>\n<p><strong>总结：JDK1.8相较于之前的变化：</strong></p>\n<ol>\n<li>HashMap map = new HashMap();//默认情况下，先不创建长度为16的数组</li>\n<li>当首次调用map.put()时，再创建长度为16的数组</li>\n<li>数组为Node类型，在jdk7中称为Entry类型</li>\n<li>形成链表结构时，新添加的key-value对在链表的尾部（七上八下）</li>\n<li>当数组指定索引位置的链表长度&gt;8时，且map中的数组的长度&gt; 64时，此索引位置上的所有key-value对使用红黑树进行存储。</li>\n</ol>\n<h3 id=\"面试题-2\"><a href=\"#面试题-2\" class=\"headerlink\" title=\"面试题\"></a>面试题</h3><p>谈谈你对HashMap中put/get方法的认识？如果了解再谈谈HashMap的扩容机制？默认大小是多少？什么是负载因子(或填充比)？什么是吞吐临界值(或阈值、threshold)？</p>\n<p><strong>负载因子值的大小，对HashMap有什么影响</strong></p>\n<ul>\n<li>负载因子的大小决定了HashMap的数据密度。</li>\n<li>负载因子越大密度越大，发生碰撞的几率越高，数组中的链表越容易长,造成查询或插入时的比较次数增多，性能会下降。</li>\n<li>负载因子越小，就越容易触发扩容，数据密度也越小，意味着发生碰撞的几率越小，数组中的链表也就越短，查询和插入时比较的次数也越小，性能会更高。但是会浪费一定的内容空间。而且经常扩容也会影响性能，建议初始化预设大一点的空间。</li>\n<li>按照其他语言的参考及研究经验，会考虑将负载因子设置为0.7~0.75，此<br>时平均检索长度接近于常数。</li>\n</ul>\n<h3 id=\"LinkedHashMap\"><a href=\"#LinkedHashMap\" class=\"headerlink\" title=\"LinkedHashMap\"></a>LinkedHashMap</h3><ul>\n<li>LinkedHashMap 是 HashMap 的子类</li>\n<li>在HashMap存储结构的基础上，使用了一对双向链表来记录添加元素的顺序</li>\n<li>与LinkedHashSet类似，LinkedHashMap 可以维护 Map 的迭代顺序：迭代顺序与 Key-Value 对的插入顺序一致</li>\n</ul>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token comment\">//HashMap中的内部类：Node</span>\n<span class=\"token keyword\">static</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Node</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">K</span><span class=\"token punctuation\">,</span><span class=\"token class-name\">V</span><span class=\"token punctuation\">&gt;</span></span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">Map<span class=\"token punctuation\">.</span>Entry</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">K</span><span class=\"token punctuation\">,</span><span class=\"token class-name\">V</span><span class=\"token punctuation\">&gt;</span></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">final</span> <span class=\"token keyword\">int</span> hash<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">final</span> <span class=\"token class-name\">K</span> key<span class=\"token punctuation\">;</span>\n    <span class=\"token class-name\">V</span> value<span class=\"token punctuation\">;</span>\n    <span class=\"token class-name\">Node</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">K</span><span class=\"token punctuation\">,</span><span class=\"token class-name\">V</span><span class=\"token punctuation\">&gt;</span></span> next<span class=\"token punctuation\">;</span> \n<span class=\"token punctuation\">}</span>\n<span class=\"token comment\">//LinkedHashMap中的内部类：Entry</span>\n<span class=\"token keyword\">static</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Entry</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">K</span><span class=\"token punctuation\">,</span><span class=\"token class-name\">V</span><span class=\"token punctuation\">&gt;</span></span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">HashMap<span class=\"token punctuation\">.</span>Node</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">K</span><span class=\"token punctuation\">,</span><span class=\"token class-name\">V</span><span class=\"token punctuation\">&gt;</span></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token class-name\">Entry</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">K</span><span class=\"token punctuation\">,</span><span class=\"token class-name\">V</span><span class=\"token punctuation\">&gt;</span></span> before<span class=\"token punctuation\">,</span> after<span class=\"token punctuation\">;</span>\n    <span class=\"token class-name\">Entry</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> hash<span class=\"token punctuation\">,</span> <span class=\"token class-name\">K</span> key<span class=\"token punctuation\">,</span> <span class=\"token class-name\">V</span> value<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Node</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">K</span><span class=\"token punctuation\">,</span><span class=\"token class-name\">V</span><span class=\"token punctuation\">&gt;</span></span> next<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    \t<span class=\"token keyword\">super</span><span class=\"token punctuation\">(</span>hash<span class=\"token punctuation\">,</span> key<span class=\"token punctuation\">,</span> value<span class=\"token punctuation\">,</span> next<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span> \n<span class=\"token punctuation\">}</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h3 id=\"TreeMap\"><a href=\"#TreeMap\" class=\"headerlink\" title=\"TreeMap\"></a>TreeMap</h3><ul>\n<li>TreeMap存储 Key-Value 对时，需要根据 key-value 对进行排序。TreeMap 可以保证所有的 Key-Value 对处于有序状态。 </li>\n<li>TreeSet底层使用红黑树结构存储数据</li>\n<li>TreeMap 的 Key 的排序：<ul>\n<li>自然排序：TreeMap 的所有的 Key 必须实现 Comparable 接口，而且所有的 Key 应该是同一个类的对象，否则将会抛出 ClasssCastException</li>\n<li>定制排序：创建 TreeMap 时，传入一个 Comparator 对象，该对象负责对TreeMap 中的所有 key 进行排序。此时不需要 Map 的 Key 实现Comparable 接口</li>\n</ul>\n</li>\n<li>TreeMap判断两个key相等的标准：两个key通过compareTo()方法或者compare()方法返回0。</li>\n</ul>\n<h3 id=\"Hashtable\"><a href=\"#Hashtable\" class=\"headerlink\" title=\"Hashtable\"></a>Hashtable</h3><ul>\n<li>Hashtable是个古老的 Map 实现类，JDK1.0就提供了。不同于HashMap，Hashtable是线程安全的。</li>\n<li>Hashtable实现原理和HashMap相同，功能相同。底层都使用哈希表结构，查询速度快，很多情况下可以互用。 </li>\n<li>与HashMap不同，Hashtable 不允许使用 null 作为 key 和 value</li>\n<li>与HashMap一样，Hashtable 也不能保证其中 Key-Value 对的顺序</li>\n<li>Hashtable判断两个key相等、两个value相等的标准，与HashMap一致。</li>\n</ul>\n<h3 id=\"Properties\"><a href=\"#Properties\" class=\"headerlink\" title=\"Properties\"></a>Properties</h3><ul>\n<li>Properties 类是 Hashtable 的子类，该对象用于处理属性文件</li>\n<li>由于属性文件里的 key、value 都是字符串类型，所以 Properties 里的 key 和 value 都是字符串类型</li>\n<li>存取数据时，建议使用setProperty(String key,String value)方法和getProperty(String key)方法</li>\n</ul>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token class-name\">Properties</span> pros <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Properties</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\npros<span class=\"token punctuation\">.</span><span class=\"token function\">load</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">FileInputStream</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"jdbc.properties\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token class-name\">String</span> user <span class=\"token operator\">=</span> pros<span class=\"token punctuation\">.</span><span class=\"token function\">getProperty</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"user\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>user<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n<h2 id=\"1-7-Collections工具类\"><a href=\"#1-7-Collections工具类\" class=\"headerlink\" title=\"1.7 Collections工具类\"></a>1.7 Collections工具类</h2><p>​        Collections 是一个操作 Set、List 和 Map 等集合的工具类<br>​        Collections 中提供了一系列静态的方法对集合元素进行排序、查询和修改等操作，还提供了对集合对象设置不可变、对集合对象实现同步控制等方法</p>\n<div class=\"table-container\">\n<table>\n<thead>\n<tr>\n<th>排序操作</th>\n<th>（均为static方法）</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>reverse(List)</td>\n<td>反转 List 中元素的顺序</td>\n</tr>\n<tr>\n<td>shuffle(List)</td>\n<td>对 List 集合元素进行随机排序</td>\n</tr>\n<tr>\n<td>sort(List)</td>\n<td>根据元素的自然顺序对指定 List 集合元素按升序排序</td>\n</tr>\n<tr>\n<td>sort(List，Comparator)</td>\n<td>根据指定的 Comparator 产生的顺序对 List 集合元素进行排序</td>\n</tr>\n<tr>\n<td>swap(List，int， int)</td>\n<td>将指定 list 集合中的 i 处元素和 j 处元素进行交换</td>\n</tr>\n</tbody>\n</table>\n</div>\n<div class=\"table-container\">\n<table>\n<thead>\n<tr>\n<th>查找、替换</th>\n<th></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Object max(Collection)</td>\n<td>根据元素的自然顺序，返回给定集合中的最大元素</td>\n</tr>\n<tr>\n<td>Object max(Collection，Comparator)</td>\n<td>根据 Comparator 指定的顺序，返回给定集合中的最大元素</td>\n</tr>\n<tr>\n<td>Object min(Collection)</td>\n<td></td>\n</tr>\n<tr>\n<td>Object min(Collection，Comparator)</td>\n<td></td>\n</tr>\n<tr>\n<td>int frequency(Collection，Object)</td>\n<td>返回指定集合中指定元素的出现次数</td>\n</tr>\n<tr>\n<td>void copy(List dest,List src)</td>\n<td>将src中的内容复制到dest中</td>\n</tr>\n<tr>\n<td>boolean replaceAll(List list，Object oldVal，Object newVal)</td>\n<td>使用新值替换List 对象的所有旧值</td>\n</tr>\n</tbody>\n</table>\n</div>\n<p><strong>同步控制</strong>:Collections 类中提供了多个 synchronizedXxx() 方法，该方法可使将指定集合包装成线程同步的集合，从而可以解决多线程并发访问集合时的线程安全问题。</p>\n<p><strong>补充：Enumeration</strong>：Enumeration 接口是 Iterator 迭代器的 “古老版本”</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token class-name\">Enumeration</span> stringEnum <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">StringTokenizer</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"a-b*c-d-e-g\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"-\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>stringEnum<span class=\"token punctuation\">.</span><span class=\"token function\">hasMoreElements</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    <span class=\"token class-name\">Object</span> obj <span class=\"token operator\">=</span> stringEnum<span class=\"token punctuation\">.</span><span class=\"token function\">nextElement</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> \n<span class=\"token punctuation\">}</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h1 id=\"2-泛型\"><a href=\"#2-泛型\" class=\"headerlink\" title=\"2. 泛型\"></a>2. 泛型</h1><p>​        集合容器类在设计阶段/声明阶段不能确定这个容器到底实际存的是什么类型的对象，所以在JDK1.5之前只能把元素类型设计为Object，JDK1.5之后使用泛型来解决。因为这个时候除了元素的类型不确定，其他的部分是确定的，例如关于这个元素如何保存，如何管理等是确定的，因此此时把元素的类型设计成一个参数，这个类型参数叫做泛型。Collection<e>，List<e>，ArrayList<e> 这个<e>就是类型参数，即泛型。</e></e></e></e></p>\n<h2 id=\"2-1-为什么要有泛型\"><a href=\"#2-1-为什么要有泛型\" class=\"headerlink\" title=\"2.1 为什么要有泛型\"></a>2.1 为什么要有泛型</h2><p><strong>泛型的概念</strong></p>\n<p>​        所谓泛型，就是允许在定义类、接口时通过一个标识表示类中某个属性的类型或者是某个方法的返回值及参数类型。这个类型参数将在使用时（例如，继承或实现这个接口，用这个类型声明变量、创建对象时）确定（即传入实际的类型参数，也称为类型实参）。</p>\n<p><strong>那么为什么要有泛型呢，直接Object不是也可以存储数据吗？</strong></p>\n<ol>\n<li>解决元素存储的安全性问题，好比商品、药品标签，不会弄错。</li>\n<li>解决获取数据元素时，需要类型强制转换的问题，好比不用每回拿商品、药品都要辨别。</li>\n</ol>\n<h2 id=\"2-2-在集合中使用泛型\"><a href=\"#2-2-在集合中使用泛型\" class=\"headerlink\" title=\"2.2 在集合中使用泛型\"></a>2.2 在集合中使用泛型</h2><pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token class-name\">ArrayList</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">&gt;</span></span> list <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ArrayList</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//类型推断</span>\nlist<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token number\">78</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nlist<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token number\">88</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nlist<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token number\">77</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nlist<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token number\">66</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">//遍历方式一：</span>\n<span class=\"token comment\">//for(Integer i : list){</span>\n    <span class=\"token comment\">//不需要强转</span>\n    <span class=\"token comment\">//System.out.println(i);</span>\n<span class=\"token comment\">//}</span>\n<span class=\"token comment\">//遍历方式二：</span>\n<span class=\"token class-name\">Iterator</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">&gt;</span></span> iterator <span class=\"token operator\">=</span> list<span class=\"token punctuation\">.</span><span class=\"token function\">iterator</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>iterator<span class=\"token punctuation\">.</span><span class=\"token function\">hasNext</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>iterator<span class=\"token punctuation\">.</span><span class=\"token function\">next</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token class-name\">Map</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">,</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">&gt;</span></span> map <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">HashMap</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">,</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nmap<span class=\"token punctuation\">.</span><span class=\"token function\">put</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Tom1\"</span><span class=\"token punctuation\">,</span><span class=\"token number\">34</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nmap<span class=\"token punctuation\">.</span><span class=\"token function\">put</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Tom2\"</span><span class=\"token punctuation\">,</span><span class=\"token number\">44</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nmap<span class=\"token punctuation\">.</span><span class=\"token function\">put</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Tom3\"</span><span class=\"token punctuation\">,</span><span class=\"token number\">33</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nmap<span class=\"token punctuation\">.</span><span class=\"token function\">put</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Tom4\"</span><span class=\"token punctuation\">,</span><span class=\"token number\">32</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">//添加失败</span>\n<span class=\"token comment\">//map.put(33, \"Tom\");</span>\n<span class=\"token class-name\">Set</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Entry</span><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">,</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">&gt;</span><span class=\"token punctuation\">&gt;</span></span> entrySet <span class=\"token operator\">=</span> map<span class=\"token punctuation\">.</span><span class=\"token function\">entrySet</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token class-name\">Iterator</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Entry</span><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">,</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">&gt;</span><span class=\"token punctuation\">&gt;</span></span> iterator <span class=\"token operator\">=</span> entrySet<span class=\"token punctuation\">.</span><span class=\"token function\">iterator</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>iterator<span class=\"token punctuation\">.</span><span class=\"token function\">hasNext</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    <span class=\"token class-name\">Entry</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">,</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">&gt;</span></span> entry <span class=\"token operator\">=</span> iterator<span class=\"token punctuation\">.</span><span class=\"token function\">next</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>entry<span class=\"token punctuation\">.</span><span class=\"token function\">getKey</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token string\">\"---&gt;\"</span> <span class=\"token operator\">+</span> entry<span class=\"token punctuation\">.</span><span class=\"token function\">getValue</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h2 id=\"2-3-自定义泛型结构\"><a href=\"#2-3-自定义泛型结构\" class=\"headerlink\" title=\"2.3 自定义泛型结构\"></a>2.3 自定义泛型结构</h2><h3 id=\"自定义泛型结构\"><a href=\"#自定义泛型结构\" class=\"headerlink\" title=\"自定义泛型结构\"></a>自定义泛型结构</h3><p><strong>1.泛型的声明</strong></p>\n<p>​        interface List<t> 和 class GenTest<k,v> 其中，T,K,V不代表值，而是表示类型。这里使用任意字母都可以。常用T表示，是Type的缩写。</k,v></t></p>\n<p><strong>2.泛型的实例化：</strong></p>\n<p>一定要在类名后面指定类型参数的值（类型）。如：<br>List<string> strList = new ArrayList<string>();<br>Iterator<customer> iterator = customers.iterator();</customer></string></string></p>\n<ul>\n<li>T只能是类，不能用基本数据类型填充。但可以使用包装类填充</li>\n<li>把一个集合中的内容限制为一个特定的数据类型，这就是generics背后的核心思想</li>\n</ul>\n<h3 id=\"泛型类、泛型接口\"><a href=\"#泛型类、泛型接口\" class=\"headerlink\" title=\"泛型类、泛型接口\"></a>泛型类、泛型接口</h3><ol>\n<li>泛型类可能有多个参数，此时应将多个参数一起放在尖括号内。比如：<e1,e2,e3></e1,e2,e3></li>\n<li>泛型类的构造器如下：public GenericClass(){}。而下面是错误的：public GenericClass<e>(){}</e></li>\n<li>实例化后，操作原来泛型位置的结构必须与指定的泛型类型一致。</li>\n<li><p>泛型不同的引用不能相互赋值。尽管在编译时ArrayList<string>和ArrayList<integer>是两种类型，但是，在运行时只有一个ArrayList被加载到JVM中。</integer></string></p>\n</li>\n<li><p>泛型如果不指定，将被擦除，泛型对应的类型均按照Object处理，但不等价于Object。经验：泛型要使用一路都用。要不用，一路都不要用。</p>\n</li>\n<li>如果泛型结构是一个接口或抽象类，则不可创建泛型类的对象。</li>\n<li>jdk1.7，泛型的简化操作：ArrayList<fruit> flist = new ArrayList&lt;&gt;();</fruit></li>\n<li>泛型的指定中不能使用基本数据类型，可以使用包装类替换。</li>\n<li>在类/接口上声明的泛型，在本类或本接口中即代表某种类型，可以作为非静态属性的类型、非静态方法的参数类型、非静态方法的返回值类型。但在静态方法中不能使用类的泛型。</li>\n<li>异常类不能是泛型的</li>\n<li>不能使用new E[]。但是可以：E[] elements = (E[])new Object[capacity];<br>参考：ArrayList源码中声明：Object[] elementData，而非泛型参数类型数组。</li>\n<li>父类有泛型，子类可以选择保留泛型也可以选择指定泛型类型：<ul>\n<li>子类不保留父类的泛型：按需实现<br> 没有类型 擦除<br> 具体类型</li>\n<li>子类保留父类的泛型：泛型子类<br> 全部保留<br> 部分保留</li>\n<li>结论：子类必须是“富二代”，子类除了指定或保留父类的泛型，还可以增加自己的泛型</li>\n</ul>\n</li>\n</ol>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Father</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span>T1<span class=\"token punctuation\">,</span> T2<span class=\"token punctuation\">&gt;</span></span> <span class=\"token punctuation\">{</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token comment\">// 子类不保留父类的泛型</span>\n<span class=\"token comment\">// 1)没有类型 擦除</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Son1</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Father</span> <span class=\"token punctuation\">{</span><span class=\"token comment\">// 等价于class Son extends Father&lt;Object,Object&gt;{</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token comment\">// 2)具体类型</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Son2</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Father</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">&gt;</span></span> <span class=\"token punctuation\">{</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token comment\">// 子类保留父类的泛型</span>\n<span class=\"token comment\">// 1)全部保留</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Son3</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span>T1<span class=\"token punctuation\">,</span> T2<span class=\"token punctuation\">&gt;</span></span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Father</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span>T1<span class=\"token punctuation\">,</span> T2<span class=\"token punctuation\">&gt;</span></span> <span class=\"token punctuation\">{</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token comment\">// 2)部分保留</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Son4</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span>T2<span class=\"token punctuation\">&gt;</span></span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Father</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">,</span> T2<span class=\"token punctuation\">&gt;</span></span> <span class=\"token punctuation\">{</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Person</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">T</span><span class=\"token punctuation\">&gt;</span></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// 使用T类型定义变量</span>\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">T</span> info<span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">// 使用T类型定义一般方法</span>\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">T</span> <span class=\"token function\">getInfo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    \t<span class=\"token keyword\">return</span> info<span class=\"token punctuation\">;</span> \n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">setInfo</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">T</span> info<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    \t<span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>info <span class=\"token operator\">=</span> info<span class=\"token punctuation\">;</span> \n    <span class=\"token punctuation\">}</span>\n    <span class=\"token comment\">// 使用T类型定义构造器</span>\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">Person</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">Person</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">T</span> info<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    \t<span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>info <span class=\"token operator\">=</span> info<span class=\"token punctuation\">;</span> \n    <span class=\"token punctuation\">}</span>\n    <span class=\"token comment\">// static的方法中不能声明泛型</span>\n    <span class=\"token comment\">//public static void show(T t) {</span>\n    <span class=\"token comment\">//</span>\n    <span class=\"token comment\">//}</span>\n    <span class=\"token comment\">// 不能在try-catch中使用泛型定义</span>\n    <span class=\"token comment\">//public void test() {</span>\n    <span class=\"token comment\">//try {</span>\n    <span class=\"token comment\">//</span>\n    <span class=\"token comment\">//} catch (MyException&lt;T&gt; ex) {</span>\n    <span class=\"token comment\">//</span>\n    <span class=\"token comment\">//}</span>\n    <span class=\"token comment\">//}</span>\n<span class=\"token punctuation\">}</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h3 id=\"泛型方法\"><a href=\"#泛型方法\" class=\"headerlink\" title=\"泛型方法\"></a>泛型方法</h3><p>泛型方法的格式：[访问权限] &lt;泛型&gt; 返回类型 方法名([泛型标识 参数名称]) 抛出的异常</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> DAO <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">E</span><span class=\"token punctuation\">&gt;</span></span> <span class=\"token class-name\">E</span> <span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> id<span class=\"token punctuation\">,</span> <span class=\"token class-name\">E</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token class-name\">E</span> result <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> result<span class=\"token punctuation\">;</span> \n    <span class=\"token punctuation\">}</span> \n<span class=\"token punctuation\">}</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">T</span><span class=\"token punctuation\">&gt;</span></span> <span class=\"token keyword\">void</span> <span class=\"token function\">fromArrayToCollection</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">T</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> a<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Collection</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">T</span><span class=\"token punctuation\">&gt;</span></span> c<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">T</span> o <span class=\"token operator\">:</span> a<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    \tc<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>o<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span> \n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token class-name\">Object</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> ao <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Object</span><span class=\"token punctuation\">[</span><span class=\"token number\">100</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token class-name\">Collection</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Object</span><span class=\"token punctuation\">&gt;</span></span> co <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ArrayList</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Object</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">fromArrayToCollection</span><span class=\"token punctuation\">(</span>ao<span class=\"token punctuation\">,</span> co<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> sa <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token number\">20</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token class-name\">Collection</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">&gt;</span></span> cs <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ArrayList</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">fromArrayToCollection</span><span class=\"token punctuation\">(</span>sa<span class=\"token punctuation\">,</span> cs<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token class-name\">Collection</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Double</span><span class=\"token punctuation\">&gt;</span></span> cd <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ArrayList</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">// 下面代码中T是Double类，但sa是String类型，编译错误。</span>\n    <span class=\"token comment\">// fromArrayToCollection(sa, cd);</span>\n    <span class=\"token comment\">// 下面代码中T是Object类型，sa是String类型，可以赋值成功。</span>\n    <span class=\"token function\">fromArrayToCollection</span><span class=\"token punctuation\">(</span>sa<span class=\"token punctuation\">,</span> co<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Creature</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Person</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Creature</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Man</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Person</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">PersonTest</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">T</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Person</span><span class=\"token punctuation\">&gt;</span></span> <span class=\"token keyword\">void</span> <span class=\"token function\">test</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">T</span> t<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    \t<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>t<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token function\">test</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Person</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token function\">test</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Man</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">//The method test(T) in the type PersonTest is not </span>\n        <span class=\"token comment\">//applicable for the arguments (Creature)</span>\n        <span class=\"token function\">test</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Creature</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span> \n<span class=\"token punctuation\">}</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h2 id=\"2-4-泛型在继承上的体现\"><a href=\"#2-4-泛型在继承上的体现\" class=\"headerlink\" title=\"2.4 泛型在继承上的体现\"></a>2.4 泛型在继承上的体现</h2><p>如果B是A的一个子类型（子类或者子接口），而G是具有泛型声明的类或接口，G<b>并不是G<a>的子类型！<br>比如：String是Object的子类，但是List<string>并不是List<object>的子类。</object></string></a></b></p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">testGenericAndSubClass</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token class-name\">Person</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> persons <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n    <span class=\"token class-name\">Man</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> mans <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">// 而 Person[] 是 Man[] 的父类.</span>\n    persons <span class=\"token operator\">=</span> mans<span class=\"token punctuation\">;</span>\n    <span class=\"token class-name\">Person</span> p <span class=\"token operator\">=</span> mans<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">// 在泛型的集合上</span>\n    <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Person</span><span class=\"token punctuation\">&gt;</span></span> personList <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n    <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Man</span><span class=\"token punctuation\">&gt;</span></span> manList <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">// personList = manList;(报错) </span>\n<span class=\"token punctuation\">}</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h2 id=\"2-5-通配符的使用\"><a href=\"#2-5-通配符的使用\" class=\"headerlink\" title=\"2.5 通配符的使用\"></a>2.5 通配符的使用</h2><ol>\n<li>使用类型通配符：？<br>比如：List&lt;?&gt; ，Map&lt;?,?&gt;<br>List&lt;?&gt;是List<string>、List<object>等各种泛型List的父类。</object></string></li>\n<li>读取List&lt;?&gt;的对象list中的元素时，永远是安全的，因为不管list的真实类型是什么，它包含的都是Object。</li>\n<li>写入list中的元素时，不行。因为我们不知道c的元素类型，我们不能向其中添加对象。<br> 唯一的例外是null，它是所有类型的成员。</li>\n</ol>\n<ul>\n<li>将任意元素加入到其中不是类型安全的：<br>Collection&lt;?&gt; c = new ArrayList<string>();<br>c.add(new Object()); // 编译时错误<br>因为我们不知道c的元素类型，我们不能向其中添加对象。add方法有类型参数E作为集合的元素类型。我们传给add的任何参数都必须是一个未知类型的子类。因为我们不知道那是什么类型，所以我们无法传任何东西进去。</string></li>\n<li>唯一的例外的是null，它是所有类型的成员。</li>\n<li>另一方面，我们可以调用get()方法并使用其返回值。返回值是一个未知的类型，但是我们知道，它总是一个Object。</li>\n</ul>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token operator\">?</span><span class=\"token punctuation\">&gt;</span></span> list <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n    list <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ArrayList</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    list <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ArrayList</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Double</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">// list.add(3);//编译不通过</span>\n    list<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">&gt;</span></span> l1 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ArrayList</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">&gt;</span></span> l2 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ArrayList</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    l1<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"尚硅谷\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    l2<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token number\">15</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">read</span><span class=\"token punctuation\">(</span>l1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">read</span><span class=\"token punctuation\">(</span>l2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">read</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token operator\">?</span><span class=\"token punctuation\">&gt;</span></span> list<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Object</span> o <span class=\"token operator\">:</span> list<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    \t<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>o<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span> \n<span class=\"token punctuation\">}</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token comment\">//注意点1：编译错误：不能用在泛型方法声明上，返回值类型前面&lt;&gt;不能使用?</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token operator\">?</span><span class=\"token punctuation\">&gt;</span></span> <span class=\"token keyword\">void</span> <span class=\"token function\">test</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ArrayList</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token operator\">?</span><span class=\"token punctuation\">&gt;</span></span> list<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token comment\">//注意点2：编译错误：不能用在泛型类的声明上</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">GenericTypeClass</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token operator\">?</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token punctuation\">{</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token comment\">//注意点3：编译错误：不能用在创建对象上，右边属于创建集合对象</span>\n<span class=\"token class-name\">ArrayList</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token operator\">?</span><span class=\"token punctuation\">&gt;</span></span> list2 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ArrayList</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token operator\">?</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p><strong>有限制的通配符</strong></p>\n<ul>\n<li><p>&lt;?&gt;<br>允许所有泛型的引用调用</p>\n</li>\n<li><p>通配符指定上限<br>上限extends：使用时指定的类型必须是继承某个类，或者实现某个接口，即&lt;= </p>\n</li>\n<li><p>通配符指定下限<br>下限super：使用时指定的类型不能小于操作的类，即&gt;=</p>\n</li>\n<li><p>举例： </p>\n<ul>\n<li><p>&lt;? extends Number&gt; (无穷小 , Number]<br>只允许泛型为Number及Number子类的引用调用</p>\n</li>\n<li><p>&lt;? super Number&gt; [Number , 无穷大) </p>\n<p>只允许泛型为Number及Number父类的引用调用</p>\n</li>\n<li><p>&lt;? extends Comparable&gt;<br>只允许泛型为实现Comparable接口的实现类的引用调用</p>\n</li>\n</ul>\n</li>\n</ul>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">printCollection3</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Collection</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token operator\">?</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Person</span><span class=\"token punctuation\">&gt;</span></span> coll<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">//Iterator只能用Iterator&lt;?&gt;或Iterator&lt;? extends Person&gt;.why?</span>\n    <span class=\"token class-name\">Iterator</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token operator\">?</span><span class=\"token punctuation\">&gt;</span></span> iterator <span class=\"token operator\">=</span> coll<span class=\"token punctuation\">.</span><span class=\"token function\">iterator</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>iterator<span class=\"token punctuation\">.</span><span class=\"token function\">hasNext</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    \t<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>iterator<span class=\"token punctuation\">.</span><span class=\"token function\">next</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span> \n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">printCollection4</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Collection</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token operator\">?</span> <span class=\"token keyword\">super</span> <span class=\"token class-name\">Person</span><span class=\"token punctuation\">&gt;</span></span> coll<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">//Iterator只能用Iterator&lt;?&gt;或Iterator&lt;? super Person&gt;.why?</span>\n    <span class=\"token class-name\">Iterator</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token operator\">?</span><span class=\"token punctuation\">&gt;</span></span> iterator <span class=\"token operator\">=</span> coll<span class=\"token punctuation\">.</span><span class=\"token function\">iterator</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>iterator<span class=\"token punctuation\">.</span><span class=\"token function\">hasNext</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    \t<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>iterator<span class=\"token punctuation\">.</span><span class=\"token function\">next</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span> \n<span class=\"token punctuation\">}</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h2 id=\"2-6-泛型应用举例\"><a href=\"#2-6-泛型应用举例\" class=\"headerlink\" title=\"2.6 泛型应用举例\"></a>2.6 泛型应用举例</h2><pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token class-name\">HashMap</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">ArrayList</span><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Citizen</span><span class=\"token punctuation\">&gt;</span><span class=\"token punctuation\">&gt;</span></span> map <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">HashMap</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">ArrayList</span><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Citizen</span><span class=\"token punctuation\">&gt;</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token class-name\">ArrayList</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Citizen</span><span class=\"token punctuation\">&gt;</span></span> list <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ArrayList</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Citizen</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    list<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Citizen</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"刘恺威\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    list<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Citizen</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"杨幂\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    list<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Citizen</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"小糯米\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    map<span class=\"token punctuation\">.</span><span class=\"token function\">put</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"刘恺威\"</span><span class=\"token punctuation\">,</span> list<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token class-name\">Set</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Entry</span><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">ArrayList</span><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Citizen</span><span class=\"token punctuation\">&gt;</span><span class=\"token punctuation\">&gt;</span><span class=\"token punctuation\">&gt;</span></span> entrySet <span class=\"token operator\">=</span> map<span class=\"token punctuation\">.</span><span class=\"token function\">entrySet</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token class-name\">Iterator</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Entry</span><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">ArrayList</span><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Citizen</span><span class=\"token punctuation\">&gt;</span><span class=\"token punctuation\">&gt;</span><span class=\"token punctuation\">&gt;</span></span> iterator <span class=\"token operator\">=</span> entrySet<span class=\"token punctuation\">.</span><span class=\"token function\">iterator</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>iterator<span class=\"token punctuation\">.</span><span class=\"token function\">hasNext</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token class-name\">Entry</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">ArrayList</span><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Citizen</span><span class=\"token punctuation\">&gt;</span><span class=\"token punctuation\">&gt;</span></span> entry <span class=\"token operator\">=</span> iterator<span class=\"token punctuation\">.</span><span class=\"token function\">next</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">String</span> key <span class=\"token operator\">=</span> entry<span class=\"token punctuation\">.</span><span class=\"token function\">getKey</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">ArrayList</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Citizen</span><span class=\"token punctuation\">&gt;</span></span> value <span class=\"token operator\">=</span> entry<span class=\"token punctuation\">.</span><span class=\"token function\">getValue</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"户主：\"</span> <span class=\"token operator\">+</span> key<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"家庭成员：\"</span> <span class=\"token operator\">+</span> value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span> \n<span class=\"token punctuation\">}</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n","text":"1. Java集合1.1 Java集合框架概述Java 集合可分为 Collection 和 Map 两种体系 Collection接口：单列数据，定义了存取一组对象的方法的集合List：元素有序、可重复的集合Set：元素无序、不可重复的集合 Map接口：双列数据，保存具有映射关...","link":"","photos":[],"count_time":{"symbolsCount":"23k","symbolsTime":"21 mins."},"categories":[{"name":"JAVA","slug":"JAVA","count":7,"path":"api/categories/JAVA.json"}],"tags":[{"name":"java","slug":"java","count":7,"path":"api/tags/java.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#1-Java%E9%9B%86%E5%90%88\"><span class=\"toc-text\">1. Java集合</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#1-1-Java%E9%9B%86%E5%90%88%E6%A1%86%E6%9E%B6%E6%A6%82%E8%BF%B0\"><span class=\"toc-text\">1.1 Java集合框架概述</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#1-2-Collection%E6%8E%A5%E5%8F%A3%E6%96%B9%E6%B3%95\"><span class=\"toc-text\">1.2 Collection接口方法</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#1-3-Iterator%E8%BF%AD%E4%BB%A3%E5%99%A8%E6%8E%A5%E5%8F%A3\"><span class=\"toc-text\">1.3 Iterator迭代器接口</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E4%BD%BF%E7%94%A8-foreach-%E5%BE%AA%E7%8E%AF%E9%81%8D%E5%8E%86%E9%9B%86%E5%90%88%E5%85%83%E7%B4%A0\"><span class=\"toc-text\">使用 foreach 循环遍历集合元素</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#1-4-Collection%E5%AD%90%E6%8E%A5%E5%8F%A3%E4%B8%80%EF%BC%9AList\"><span class=\"toc-text\">1.4 Collection子接口一：List</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#List%E6%8E%A5%E5%8F%A3%E6%96%B9%E6%B3%95\"><span class=\"toc-text\">List接口方法</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#ArrayList\"><span class=\"toc-text\">ArrayList</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#LinkedList\"><span class=\"toc-text\">LinkedList</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#Vector\"><span class=\"toc-text\">Vector</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E9%9D%A2%E8%AF%95%E9%A2%98\"><span class=\"toc-text\">面试题</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#1-5-Collection%E5%AD%90%E6%8E%A5%E5%8F%A3%E4%BA%8C%EF%BC%9ASet\"><span class=\"toc-text\">1.5 Collection子接口二：Set</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#HashSet\"><span class=\"toc-text\">HashSet</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#LinkedHashSet\"><span class=\"toc-text\">LinkedHashSet</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#TreeSet\"><span class=\"toc-text\">TreeSet</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E9%9D%A2%E8%AF%95%E9%A2%98-1\"><span class=\"toc-text\">面试题</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#1-6-Map%E6%8E%A5%E5%8F%A3\"><span class=\"toc-text\">1.6 Map接口</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#Map%E6%8E%A5%E5%8F%A3%EF%BC%9A%E5%B8%B8%E7%94%A8%E6%96%B9%E6%B3%95\"><span class=\"toc-text\">Map接口：常用方法</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#HashMap\"><span class=\"toc-text\">HashMap</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E9%9D%A2%E8%AF%95%E9%A2%98-2\"><span class=\"toc-text\">面试题</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#LinkedHashMap\"><span class=\"toc-text\">LinkedHashMap</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#TreeMap\"><span class=\"toc-text\">TreeMap</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#Hashtable\"><span class=\"toc-text\">Hashtable</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#Properties\"><span class=\"toc-text\">Properties</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#1-7-Collections%E5%B7%A5%E5%85%B7%E7%B1%BB\"><span class=\"toc-text\">1.7 Collections工具类</span></a></li></ol></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#2-%E6%B3%9B%E5%9E%8B\"><span class=\"toc-text\">2. 泛型</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#2-1-%E4%B8%BA%E4%BB%80%E4%B9%88%E8%A6%81%E6%9C%89%E6%B3%9B%E5%9E%8B\"><span class=\"toc-text\">2.1 为什么要有泛型</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#2-2-%E5%9C%A8%E9%9B%86%E5%90%88%E4%B8%AD%E4%BD%BF%E7%94%A8%E6%B3%9B%E5%9E%8B\"><span class=\"toc-text\">2.2 在集合中使用泛型</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#2-3-%E8%87%AA%E5%AE%9A%E4%B9%89%E6%B3%9B%E5%9E%8B%E7%BB%93%E6%9E%84\"><span class=\"toc-text\">2.3 自定义泛型结构</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E8%87%AA%E5%AE%9A%E4%B9%89%E6%B3%9B%E5%9E%8B%E7%BB%93%E6%9E%84\"><span class=\"toc-text\">自定义泛型结构</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E6%B3%9B%E5%9E%8B%E7%B1%BB%E3%80%81%E6%B3%9B%E5%9E%8B%E6%8E%A5%E5%8F%A3\"><span class=\"toc-text\">泛型类、泛型接口</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E6%B3%9B%E5%9E%8B%E6%96%B9%E6%B3%95\"><span class=\"toc-text\">泛型方法</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#2-4-%E6%B3%9B%E5%9E%8B%E5%9C%A8%E7%BB%A7%E6%89%BF%E4%B8%8A%E7%9A%84%E4%BD%93%E7%8E%B0\"><span class=\"toc-text\">2.4 泛型在继承上的体现</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#2-5-%E9%80%9A%E9%85%8D%E7%AC%A6%E7%9A%84%E4%BD%BF%E7%94%A8\"><span class=\"toc-text\">2.5 通配符的使用</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#2-6-%E6%B3%9B%E5%9E%8B%E5%BA%94%E7%94%A8%E4%B8%BE%E4%BE%8B\"><span class=\"toc-text\">2.6 泛型应用举例</span></a></li></ol></li></ol>","author":{"name":"YFR718","slug":"blog-author","avatar":"https://avatars.githubusercontent.com/u/47553658?s=400&u=5e0a85700c66d7a2661c5664ec5f24d94e5ed01a&v=4","link":"/","description":"大数据萌新","socials":{"github":"https://github.com/YFR718","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"d","csdn":"","juejin":"","customs":{}}},"mapped":true,"prev_post":{"title":"IO、网络编程","uid":"8bbd211a4ba9676d95abee1aaae0937f","slug":"J5-IO、网络编程","date":"2021-11-12T02:31:03.000Z","updated":"2021-11-12T07:49:55.498Z","comments":true,"path":"api/articles/J5-IO、网络编程.json","keywords":null,"cover":"https://img-blog.csdnimg.cn/b0800299144a42068df6728fac896d25.jpg?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBAWUZSNzE4,size_20,color_FFFFFF,t_70,g_se,x_16#pic_center","text":"1. IO流1.1 File类的使用1.2 IO流原理及流的分类1.3 节点流(或文件流)1.4 缓冲流1.5 转换流1.6 标准输入、输出流1.7 打印流1.8 数据流1.9 对象流1.10 随机存取文件流1.11 NIO.2中Path、Paths、 Files类的使用2. 网...","link":"","photos":[],"count_time":{"symbolsCount":226,"symbolsTime":"1 mins."},"categories":[{"name":"JAVA","slug":"JAVA","count":7,"path":"api/categories/JAVA.json"}],"tags":[{"name":"java","slug":"java","count":7,"path":"api/tags/java.json"}],"author":{"name":"YFR718","slug":"blog-author","avatar":"https://avatars.githubusercontent.com/u/47553658?s=400&u=5e0a85700c66d7a2661c5664ec5f24d94e5ed01a&v=4","link":"/","description":"大数据萌新","socials":{"github":"https://github.com/YFR718","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"d","csdn":"","juejin":"","customs":{}}}},"next_post":{"title":"常用类、枚举、注解","uid":"d0396f84e2a9cf009e1f2a35f0f836dd","slug":"J3-常用类、枚举、注解","date":"2021-11-12T02:30:10.000Z","updated":"2021-11-22T08:57:16.597Z","comments":true,"path":"api/articles/J3-常用类、枚举、注解.json","keywords":null,"cover":"https://img-blog.csdnimg.cn/eef428568dd84069a9e6a30263ad6b00.jpg?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBAWUZSNzE4,size_20,color_FFFFFF,t_70,g_se,x_16#pic_center","text":"1. Java常用类0. Wapper包装类ing 1.1 字符串相关的类StringString的特性 String类：代表字符串。Java 程序中的所有字符串字面值（如 “abc” ）都作为此类的实例实现。 String是一个final类，代表不可变的字符序列。 字符串是常量...","link":"","photos":[],"count_time":{"symbolsCount":"17k","symbolsTime":"16 mins."},"categories":[{"name":"JAVA","slug":"JAVA","count":7,"path":"api/categories/JAVA.json"}],"tags":[{"name":"java","slug":"java","count":7,"path":"api/tags/java.json"}],"author":{"name":"YFR718","slug":"blog-author","avatar":"https://avatars.githubusercontent.com/u/47553658?s=400&u=5e0a85700c66d7a2661c5664ec5f24d94e5ed01a&v=4","link":"/","description":"大数据萌新","socials":{"github":"https://github.com/YFR718","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"d","csdn":"","juejin":"","customs":{}}}}}