{"title":"Python基础","uid":"9b69dffe0262764ac691bc95bc415c22","slug":"P0-Python","date":"2021-11-01T08:38:34.000Z","updated":"2021-11-12T09:14:24.918Z","comments":true,"path":"api/articles/P0-Python.json","keywords":null,"cover":"https://img-blog.csdnimg.cn/5dfa363e61aa4900b64fcf634709f893.jpg?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBAWUZSNzE4,size_20,color_FFFFFF,t_70,g_se,x_16#pic_center","content":"<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p><a href=\"https://tianchi.aliyun.com/specials/promotion/aicamppython?spm=5176.14154004.J_1266466330.1.7ea256998wf1R1\">天池Python训练营</a></p></blockquote>\n<h1 id=\"Python基础\"><a href=\"#Python基础\" class=\"headerlink\" title=\"Python基础\"></a>Python基础</h1><h2 id=\"1-变量、运算符与数据类型\"><a href=\"#1-变量、运算符与数据类型\" class=\"headerlink\" title=\"1.变量、运算符与数据类型\"></a>1.变量、运算符与数据类型</h2><h3 id=\"1-1-注释\"><a href=\"#1-1-注释\" class=\"headerlink\" title=\"1.1 注释\"></a>1.1 注释</h3><p><strong># 表示注释，作用于整行。</strong></p>\n<p><strong>‘’’ ‘’’ 或者 “”” “”” 表示区间注释，在三引号之间的所有内容被注释</strong></p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token comment\"># 这是一个注释</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Hello world\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token triple-quoted-string string\">'''\n这是多行注释，用三个单引号\n'''</span>\n<span class=\"token triple-quoted-string string\">\"\"\"\n这是多行注释，用三个双引号\n\"\"\"</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h3 id=\"1-2-运算符\"><a href=\"#1-2-运算符\" class=\"headerlink\" title=\"1.2 运算符\"></a>1.2 运算符</h3><div class=\"table-container\">\n<table>\n<thead>\n<tr>\n<th>运算符</th>\n<th></th>\n<th></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>算术运算符</td>\n<td>+, -, <em>, /, //, %, *</em></td>\n<td></td>\n</tr>\n<tr>\n<td>比较运算符</td>\n<td>&gt;, &gt;=, &lt;, &lt;=, !=</td>\n<td></td>\n</tr>\n<tr>\n<td>逻辑运算符</td>\n<td>and, or, not</td>\n<td></td>\n</tr>\n<tr>\n<td>位运算符</td>\n<td>~, &amp;, \\</td>\n<td>, ^, &lt;&lt;, &gt;&gt;</td>\n<td></td>\n</tr>\n<tr>\n<td>三元运算符</td>\n<td>x if x&lt;y else y</td>\n<td></td>\n</tr>\n<tr>\n<td>其他运算符</td>\n<td>is, not is, in, not in</td>\n</tr>\n</tbody>\n</table>\n</div>\n<p><strong>注意</strong></p>\n<ol>\n<li>is, is not 对比的是两个变量的内存地址：假如比较的两个变量，指向的都是地址不可变的类型（str等），那么is，is not 和 ==，！= 是完全等价的。</li>\n<li>==, != 对比的是两个变量的值：假如对比的两个变量，指向的是地址可变的类型（list，dict，tuple等），则两者是有区别的。</li>\n</ol>\n<p><strong>运算符的优先级</strong></p>\n<ol>\n<li>一元运算符优于二元运算符。如正负号。</li>\n<li>先算术运算，后移位运算，最后位运算。例如 1 &lt;&lt; 3 + 2 &amp; 7等价于 (1 &lt;&lt; (3 + 2)) &amp; 7</li>\n<li>逻辑运算最后结合</li>\n</ol>\n<h4 id=\"位运算\"><a href=\"#位运算\" class=\"headerlink\" title=\"位运算\"></a>位运算</h4><p><strong>原码、反码和补码</strong></p>\n<p>二进制有三种不同的表示形式：原码、反码和补码，计算机内部使用补码来表示。</p>\n<p>原码：就是其二进制表示（注意，有一位符号位）。</p>\n<p>反码：正数的反码就是原码，负数的反码是符号位不变，其余位取反（对应正数按位取反）。</p>\n<p>补码：正数的补码就是原码，负数的补码是反码+1。</p>\n<p>符号位：最高位为符号位，0表示正数，1表示负数。在位运算中符号位也参与运算。<br><strong>利用位运算实现快速计算</strong></p>\n<ul>\n<li><p>通过 &lt;&lt; ， &gt;&gt; 快速计算2的倍数问题。</p>\n</li>\n<li><p>通过 ^ 快速交换两个整数。</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">a <span class=\"token operator\">^</span><span class=\"token operator\">=</span> b\nb <span class=\"token operator\">^</span><span class=\"token operator\">=</span> a\na <span class=\"token operator\">^</span><span class=\"token operator\">=</span> b<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n</li>\n<li><p>通过 a &amp; (-a) 快速获取a 的最后为 1 位置的整数。</p>\n</li>\n</ul>\n<p><strong>利用位运算实现整数集合</strong></p>\n<ul>\n<li><p>一个数的二进制表示可以看作是一个集合（0 表示不在集合中，1 表示在集合中）。<br>比如集合 {1, 3, 4, 8} ，可以表示成 01 00 01 10 10 而对应的位运算也就可以看作是对集合进行的操作。</p>\n</li>\n<li><p>元素与集合的操作：</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">a <span class=\"token operator\">|</span> <span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token operator\">&lt;&lt;</span>i<span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span><span class=\"token operator\">></span> 把 i 插入到集合中\na <span class=\"token operator\">&amp;</span> <span class=\"token operator\">~</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token operator\">&lt;&lt;</span>i<span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span><span class=\"token operator\">></span> 把 i 从集合中删除\na <span class=\"token operator\">&amp;</span> <span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token operator\">&lt;&lt;</span>i<span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span><span class=\"token operator\">></span> 判断 i 是否属于该集合（零不属于，非零属于）<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n</li>\n<li><p>集合之间的操作：</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">a 补 <span class=\"token operator\">-</span><span class=\"token operator\">></span> <span class=\"token operator\">~</span>a\na 交 b <span class=\"token operator\">-</span><span class=\"token operator\">></span> a <span class=\"token operator\">&amp;</span> b\na 并 b <span class=\"token operator\">-</span><span class=\"token operator\">></span> a <span class=\"token operator\">|</span> b\na 差 b <span class=\"token operator\">-</span><span class=\"token operator\">></span> a <span class=\"token operator\">&amp;</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">~</span>b<span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n</li>\n</ul>\n<h3 id=\"1-3-变量和赋值\"><a href=\"#1-3-变量和赋值\" class=\"headerlink\" title=\"1.3 变量和赋值\"></a>1.3 变量和赋值</h3><ol>\n<li>在使用变量之前，需要对其先赋值。</li>\n<li>变量名可以包括字母、数字、下划线、但变量名不能以数字开头。</li>\n<li>Python 变量名是大小写敏感的，foo != Foo。</li>\n</ol>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">first <span class=\"token operator\">=</span> <span class=\"token number\">2</span>\nsecond <span class=\"token operator\">=</span> <span class=\"token number\">3</span>\nthird <span class=\"token operator\">=</span> first <span class=\"token operator\">+</span> second\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>third<span class=\"token punctuation\">)</span> <span class=\"token comment\"># 5</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n<h3 id=\"1-4-数据类型与转换\"><a href=\"#1-4-数据类型与转换\" class=\"headerlink\" title=\"1.4 数据类型与转换\"></a>1.4 数据类型与转换</h3><p>Python3 中有六个标准的数据类型：</p>\n<ul>\n<li>Number（数字）：<strong>int、float、bool、complex（复数）</strong>。</li>\n<li>String（字符串）</li>\n<li>List（列表）</li>\n<li>Tuple（元组）</li>\n<li>Set（集合）</li>\n<li>Dictionary（字典）</li>\n</ul>\n<p>Python3 的六个标准数据类型中：</p>\n<ul>\n<li><strong>不可变数据（3 个）：</strong>Number（数字）、String（字符串）、Tuple（元组）；</li>\n<li><strong>可变数据（3 个）：</strong>List（列表）、Dictionary（字典）、Set（集合）。</li>\n</ul>\n<p><strong>简单数据类型</strong></p>\n<ol>\n<li>整型<class 'int'></li>\n<li>浮点型<class 'float'></li>\n<li>布尔型<class 'bool'></li>\n</ol>\n<p><strong>容器数据类型</strong></p>\n<ol>\n<li>列表<class 'list'></li>\n<li>元组<class 'tuple'></li>\n<li>字典<class 'dict'></li>\n<li>集合<class 'set'></li>\n<li>字符串<class 'str'></li>\n</ol>\n<h3 id=\"1-5-print-函数\"><a href=\"#1-5-print-函数\" class=\"headerlink\" title=\"1.5 print() 函数\"></a>1.5 print() 函数</h3><pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>objects<span class=\"token punctuation\">,</span> sep<span class=\"token operator\">=</span><span class=\"token string\">' '</span><span class=\"token punctuation\">,</span> end<span class=\"token operator\">=</span><span class=\"token string\">'\\n'</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">file</span><span class=\"token operator\">=</span>sys<span class=\"token punctuation\">.</span>stdout<span class=\"token punctuation\">,</span> flush<span class=\"token operator\">=</span><span class=\"token boolean\">False</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<ol>\n<li>将对象以字符串表示的方式格式化输出到流文件对象file里。其中所有非关键字参数都按str() 方式进行转换为字符串输出；</li>\n<li>关键字参数sep 是实现分隔符，比如多个参数输出时想要输出中间的分隔字符；</li>\n<li>关键字参数end 是输出结束时的字符，默认是换行符\\n ；</li>\n<li>关键字参数file 是定义流输出的文件，可以是标准的系统输出sys.stdout ，也可以重定义为别的文件；</li>\n<li>关键字参数flush 是立即把内容输出到流文件，不作缓存。</li>\n</ol>\n<p>【例子】， item 值与’another string’ 两个值之间用sep 设置的参数&amp; 分割。由于end 参数没有设置，因此默认是输出解释后换行，即end 参数的默认值为\\n 。</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">shoplist <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'apple'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'mango'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'carrot'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'banana'</span><span class=\"token punctuation\">]</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"This is printed with 'sep='&amp;''.\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">for</span> item <span class=\"token keyword\">in</span> shoplist<span class=\"token punctuation\">:</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>item<span class=\"token punctuation\">,</span> <span class=\"token string\">'another string'</span><span class=\"token punctuation\">,</span> sep<span class=\"token operator\">=</span><span class=\"token string\">'&amp;'</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\"># This is printed with 'sep='&amp;''.</span>\n<span class=\"token comment\"># apple&amp;another string</span>\n<span class=\"token comment\"># mango&amp;another string</span>\n<span class=\"token comment\"># carrot&amp;another string</span>\n<span class=\"token comment\"># banana&amp;another string</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h2 id=\"2-逻辑语句\"><a href=\"#2-逻辑语句\" class=\"headerlink\" title=\"2 逻辑语句\"></a>2 逻辑语句</h2><div class=\"table-container\">\n<table>\n<thead>\n<tr>\n<th>语句类型</th>\n<th></th>\n<th></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>判断</td>\n<td>if…elif…else</td>\n<td></td>\n</tr>\n<tr>\n<td>while循环</td>\n<td>while…else…</td>\n<td></td>\n</tr>\n<tr>\n<td>for循环</td>\n<td>for 迭代变量 in 可迭代对象…else…</td>\n<td></td>\n</tr>\n<tr>\n<td>其他</td>\n<td>break、continue、pass</td>\n</tr>\n</tbody>\n</table>\n</div>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token comment\"># 当while 循环正常执行完的情况下，执行else 输出，如果while 循环中执行了跳出循环的语句，比如 break ，将不执行else 代码块的内容。</span>\ncount <span class=\"token operator\">=</span> <span class=\"token number\">0</span>\n<span class=\"token keyword\">while</span> count <span class=\"token operator\">&lt;</span> <span class=\"token number\">5</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d is less than 5\"</span> <span class=\"token operator\">%</span> count<span class=\"token punctuation\">)</span>\n    count <span class=\"token operator\">=</span> count <span class=\"token operator\">+</span> <span class=\"token number\">1</span>\n<span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span>\n\t<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d is not less than 5\"</span> <span class=\"token operator\">%</span> count<span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> <span class=\"token string\">'ILoveLSGO'</span><span class=\"token punctuation\">:</span>\n\t<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">,</span> end<span class=\"token operator\">=</span><span class=\"token string\">' '</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># 不换行输出</span>\n<span class=\"token comment\"># I L o v e L S G O</span>\n\n<span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>member<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n\t<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>member<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n\t\ndic <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span><span class=\"token string\">'a'</span><span class=\"token punctuation\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'b'</span><span class=\"token punctuation\">:</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'c'</span><span class=\"token punctuation\">:</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'d'</span><span class=\"token punctuation\">:</span> <span class=\"token number\">4</span><span class=\"token punctuation\">&#125;</span>\n<span class=\"token keyword\">for</span> key<span class=\"token punctuation\">,</span> value <span class=\"token keyword\">in</span> dic<span class=\"token punctuation\">.</span>items<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n\t<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">,</span> value<span class=\"token punctuation\">,</span> sep<span class=\"token operator\">=</span><span class=\"token string\">':'</span><span class=\"token punctuation\">,</span> end<span class=\"token operator\">=</span><span class=\"token string\">' '</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\"># a:1 b:2 c:3 d:4</span>\n\ndic <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span><span class=\"token string\">'a'</span><span class=\"token punctuation\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'b'</span><span class=\"token punctuation\">:</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'c'</span><span class=\"token punctuation\">:</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'d'</span><span class=\"token punctuation\">:</span> <span class=\"token number\">4</span><span class=\"token punctuation\">&#125;</span>\n<span class=\"token keyword\">for</span> key <span class=\"token keyword\">in</span> dic<span class=\"token punctuation\">.</span>keys<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n\t<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">,</span> end<span class=\"token operator\">=</span><span class=\"token string\">' '</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\"># a b c d</span>\n\n<span class=\"token keyword\">for</span> num <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">,</span> <span class=\"token number\">20</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span> <span class=\"token comment\"># 迭代 10 到 20 之间的数字</span>\n    <span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> num<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span> <span class=\"token comment\"># 根据因子迭代</span>\n        <span class=\"token keyword\">if</span> num <span class=\"token operator\">%</span> i <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">:</span> <span class=\"token comment\"># 确定第一个因子</span>\n            j <span class=\"token operator\">=</span> num <span class=\"token operator\">/</span> i <span class=\"token comment\"># 计算第二个因子</span>\n            <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'%d 等于 %d * %d'</span> <span class=\"token operator\">%</span> <span class=\"token punctuation\">(</span>num<span class=\"token punctuation\">,</span> i<span class=\"token punctuation\">,</span> j<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n            <span class=\"token keyword\">break</span> <span class=\"token comment\"># 跳出当前循环</span>\n    <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span> <span class=\"token comment\"># 循环的 else 部分</span>\n    \t<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>num<span class=\"token punctuation\">,</span> <span class=\"token string\">'是一个质数'</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\"># 10 等于 2 * 5</span>\n<span class=\"token comment\"># 11 是一个质数</span>\n<span class=\"token comment\"># 12 等于 2 * 6</span>\n<span class=\"token comment\"># 13 是一个质数</span>\n<span class=\"token comment\"># 14 等于 2 * 7</span>\n<span class=\"token comment\"># 15 等于 3 * 5</span>\n<span class=\"token comment\"># 16 等于 2 * 8</span>\n<span class=\"token comment\"># 17 是一个质数</span>\n<span class=\"token comment\"># 18 等于 2 * 9</span>\n<span class=\"token comment\"># 19 是一个质数</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<ol>\n<li>break 语句可以跳出当前所在层的循环。</li>\n<li>continue 终止本轮循环并开始下一轮循环。</li>\n<li>pass 语句的意思是“不做任何事”，如果你在需要有语句的地方不写任何语句，那么解释器会提示出错，而 pass 语句就是用来解决这些问题的。</li>\n</ol>\n<h3 id=\"2-1assert-关键词\"><a href=\"#2-1assert-关键词\" class=\"headerlink\" title=\"2.1assert 关键词\"></a>2.1assert 关键词</h3><p>assert 这个关键词我们称之为“断言”，当这个关键词后边的条件为 False 时，程序自动崩溃并抛出AssertionError 的异常。</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">my_list <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'lsgogroup'</span><span class=\"token punctuation\">]</span>\nmy_list<span class=\"token punctuation\">.</span>pop<span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">assert</span> <span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>my_list<span class=\"token punctuation\">)</span> <span class=\"token operator\">></span> <span class=\"token number\">0</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n<h3 id=\"2-2-range-函数\"><a href=\"#2-2-range-函数\" class=\"headerlink\" title=\"2.2 range() 函数\"></a>2.2 range() 函数</h3><pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>start<span class=\"token punctuation\">,</span><span class=\"token punctuation\">]</span> stop<span class=\"token punctuation\">[</span><span class=\"token punctuation\">,</span> step<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">9</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span> <span class=\"token comment\"># 不包含9</span>\n\t<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n<ol>\n<li>这个BIF（Built-in functions）有三个参数，其中用中括号括起来的两个表示这两个参数是可选的。</li>\n<li>step=1 表示第三个参数的默认值是1。</li>\n<li>range 这个BIF的作用是生成一个从start 参数的值开始到stop 参数的值结束的数字序列，该序列包含start 的值但不包含stop 的值。</li>\n</ol>\n<h3 id=\"2-3-enumerate-函数\"><a href=\"#2-3-enumerate-函数\" class=\"headerlink\" title=\"2.3 enumerate()函数\"></a>2.3 enumerate()函数</h3><pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token builtin\">enumerate</span><span class=\"token punctuation\">(</span>sequence<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span>start<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<ol>\n<li>sequence — 一个序列、迭代器或其他支持迭代对象。</li>\n<li>start — 下标起始位置。</li>\n<li>返回 enumerate(枚举) 对象</li>\n</ol>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">seasons <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'Spring'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'Summer'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'Fall'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'Winter'</span><span class=\"token punctuation\">]</span>\nlst <span class=\"token operator\">=</span> <span class=\"token builtin\">list</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">enumerate</span><span class=\"token punctuation\">(</span>seasons<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>lst<span class=\"token punctuation\">)</span>\n<span class=\"token comment\"># [(0, 'Spring'), (1, 'Summer'), (2, 'Fall'), (3, 'Winter')]</span>\n\nlst <span class=\"token operator\">=</span> <span class=\"token builtin\">list</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">enumerate</span><span class=\"token punctuation\">(</span>seasons<span class=\"token punctuation\">,</span> start<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># 下标从 1 开始</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>lst<span class=\"token punctuation\">)</span>\n<span class=\"token comment\"># [(1, 'Spring'), (2, 'Summer'), (3, 'Fall'), (4, 'Winter')]</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p><strong>enumerate() 与 for 循环的结合使用</strong></p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token keyword\">for</span> i<span class=\"token punctuation\">,</span> a <span class=\"token keyword\">in</span> <span class=\"token builtin\">enumerate</span><span class=\"token punctuation\">(</span>A<span class=\"token punctuation\">)</span>\n\tdo something <span class=\"token keyword\">with</span> a<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n<p>用 enumerate(A) 不仅返回了 A 中的元素，还顺便给该元素一个索引值 (默认从 0 开始)。此外，用enumerate(A, j) 还可以确定索引起始值为 j 。</p>\n<h3 id=\"2-4-推导式\"><a href=\"#2-4-推导式\" class=\"headerlink\" title=\"2.4 推导式\"></a>2.4 推导式</h3><h4 id=\"列表推导式\"><a href=\"#列表推导式\" class=\"headerlink\" title=\"列表推导式\"></a><strong>列表推导式</strong></h4><pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token punctuation\">[</span> expr <span class=\"token keyword\">for</span> value <span class=\"token keyword\">in</span> collection <span class=\"token punctuation\">[</span><span class=\"token keyword\">if</span> condition<span class=\"token punctuation\">]</span> <span class=\"token punctuation\">]</span>\n\nx <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token operator\">-</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">-</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">]</span>\ny <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>a <span class=\"token operator\">*</span> <span class=\"token number\">2</span> <span class=\"token keyword\">for</span> a <span class=\"token keyword\">in</span> x<span class=\"token punctuation\">]</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>y<span class=\"token punctuation\">)</span>\n<span class=\"token comment\"># [-8, -4, 0, 4, 8]</span>\n\nx <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>i <span class=\"token operator\">**</span> <span class=\"token number\">2</span> <span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span>\n<span class=\"token comment\"># [1, 4, 9, 16, 25, 36, 49, 64, 81]</span>\n\nx <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">,</span> i <span class=\"token operator\">**</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span><span class=\"token number\">6</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span>\n<span class=\"token comment\"># [(0, 0), (1, 1), (2, 4), (3, 9), (4, 16), (5, 25)]</span>\n\nx <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>i <span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span><span class=\"token number\">100</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>i <span class=\"token operator\">%</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">!=</span> <span class=\"token number\">0</span> <span class=\"token keyword\">and</span> <span class=\"token punctuation\">(</span>i <span class=\"token operator\">%</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">]</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span>\n<span class=\"token comment\"># [3, 9, 15, 21, 27, 33, 39, 45, 51, 57, 63, 69, 75, 81, 87, 93, 99]</span>\n\na <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">,</span> j<span class=\"token punctuation\">)</span> <span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">for</span> j <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span>\n<span class=\"token comment\"># [(0, 0), (0, 1), (0, 2), (1, 0), (1, 1), (1, 2), (2, 0), (2, 1), (2, 2)]</span>\n\nx <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">,</span> j<span class=\"token punctuation\">]</span> <span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">for</span> j <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span>\n<span class=\"token comment\"># [[0, 0], [0, 1], [0, 2], [1, 0], [1, 1], [1, 2], [2, 0], [2, 1], [2, 2]]</span>\nx<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">10</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span>\n<span class=\"token comment\"># [[10, 0], [0, 1], [0, 2], [1, 0], [1, 1], [1, 2], [2, 0], [2, 1], [2, 2]]</span>\n\na <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">,</span> j<span class=\"token punctuation\">)</span> <span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">if</span> i <span class=\"token operator\">&lt;</span> <span class=\"token number\">1</span> <span class=\"token keyword\">for</span> j <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">if</span> j <span class=\"token operator\">></span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span>\n<span class=\"token comment\"># [(0, 2)]</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h4 id=\"元组推导式\"><a href=\"#元组推导式\" class=\"headerlink\" title=\"元组推导式\"></a><strong>元组推导式</strong></h4><pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token punctuation\">(</span> expr <span class=\"token keyword\">for</span> value <span class=\"token keyword\">in</span> collection <span class=\"token punctuation\">[</span><span class=\"token keyword\">if</span> condition<span class=\"token punctuation\">]</span> <span class=\"token punctuation\">)</span>\n\na <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>x <span class=\"token keyword\">for</span> x <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span>\n<span class=\"token comment\"># &lt;generator object &lt;genexpr> at 0x0000025BE511CC48></span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">tuple</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\"># (0, 1, 2, 3, 4, 5, 6, 7, 8, 9)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h4 id=\"字典推导式\"><a href=\"#字典推导式\" class=\"headerlink\" title=\"字典推导式\"></a><strong>字典推导式</strong></h4><pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token punctuation\">&#123;</span> key_expr<span class=\"token punctuation\">:</span> value_expr <span class=\"token keyword\">for</span> value <span class=\"token keyword\">in</span> collection <span class=\"token punctuation\">[</span><span class=\"token keyword\">if</span> condition<span class=\"token punctuation\">]</span> <span class=\"token punctuation\">&#125;</span>\n\nb <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span>i<span class=\"token punctuation\">:</span> i <span class=\"token operator\">%</span> <span class=\"token number\">2</span> <span class=\"token operator\">==</span> <span class=\"token number\">0</span> <span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">if</span> i <span class=\"token operator\">%</span> <span class=\"token number\">3</span> <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">&#125;</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>b<span class=\"token punctuation\">)</span>\n<span class=\"token comment\"># &#123;0: True, 3: False, 6: True, 9: False&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h4 id=\"集合推导式\"><a href=\"#集合推导式\" class=\"headerlink\" title=\"集合推导式\"></a><strong>集合推导式</strong></h4><pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token punctuation\">&#123;</span> expr <span class=\"token keyword\">for</span> value <span class=\"token keyword\">in</span> collection <span class=\"token punctuation\">[</span><span class=\"token keyword\">if</span> condition<span class=\"token punctuation\">]</span> <span class=\"token punctuation\">&#125;</span>\n\nc <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span>i <span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">6</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">&#125;</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>c<span class=\"token punctuation\">)</span>\n<span class=\"token comment\"># &#123;1, 2, 3, 4, 5, 6&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h2 id=\"3-异常处理\"><a href=\"#3-异常处理\" class=\"headerlink\" title=\"3 异常处理\"></a>3 异常处理</h2><p>异常就是运行期检测到的错误。计算机语言针对可能出现的错误定义了异常类型，某种错误引发对应的异常时，异常处理程序将被启动，从而恢复程序的正常运行。</p>\n<h3 id=\"3-1-Python-标准异常总结\"><a href=\"#3-1-Python-标准异常总结\" class=\"headerlink\" title=\"3.1 Python 标准异常总结\"></a>3.1 Python 标准异常总结</h3><ol>\n<li>BaseException：所有异常的 基类</li>\n<li>Exception：常规异常的 基类</li>\n<li>StandardError：所有的内建标准异常的基类</li>\n<li>ArithmeticError：所有数值计算异常的基类</li>\n<li>FloatingPointError：浮点计算异常</li>\n<li>OverflowError：数值运算超出最大限制</li>\n<li>ZeroDivisionError：除数为零</li>\n<li>AssertionError：断言语句（assert）失败</li>\n<li>AttributeError：尝试访问未知的对象属性</li>\n<li>EOFError：没有内建输入，到达EOF标记</li>\n<li>EnvironmentError：操作系统异常的基类</li>\n<li>IOError：输入/输出操作失败</li>\n<li>OSError：操作系统产生的异常（例如打开一个不存在的文件）</li>\n<li>WindowsError：系统调用失败</li>\n<li>ImportError：导入模块失败的时候</li>\n<li>KeyboardInterrupt：用户中断执行</li>\n<li>LookupError：无效数据查询的基类</li>\n<li>IndexError：索引超出序列的范围</li>\n<li>KeyError：字典中查找一个不存在的关键字</li>\n<li>MemoryError：内存溢出（可通过删除对象释放内存）</li>\n<li>NameError：尝试访问一个不存在的变量</li>\n<li>UnboundLocalError：访问未初始化的本地变量</li>\n<li>ReferenceError：弱引用试图访问已经垃圾回收了的对象</li>\n<li>RuntimeError：一般的运行时异常</li>\n<li>NotImplementedError：尚未实现的方法</li>\n<li>SyntaxError：语法错误导致的异常</li>\n<li>IndentationError：缩进错误导致的异常</li>\n<li>TabError：Tab和空格混用</li>\n<li>SystemError：一般的解释器系统异常</li>\n<li>TypeError：不同类型间的无效操作</li>\n<li>ValueError：传入无效的参数</li>\n<li>UnicodeError：Unicode相关的异常</li>\n<li>UnicodeDecodeError：Unicode解码时的异常</li>\n<li>UnicodeEncodeError：Unicode编码错误导致的异常</li>\n<li>UnicodeTranslateError：Unicode转换错误导致的异常</li>\n</ol>\n<p>异常体系内部有层次关系，Python异常体系中的部分关系如下所示：</p>\n<p><img src=\"https://img-blog.csdnimg.cn/bf6d00eaa4d4482e910095eefde667b5.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBAWUZSNzE4,size_20,color_FFFFFF,t_70,g_se,x_16\" alt=\"\"></p>\n<h3 id=\"3-2-Python标准警告总结\"><a href=\"#3-2-Python标准警告总结\" class=\"headerlink\" title=\"3.2 Python标准警告总结\"></a>3.2 Python标准警告总结</h3><ol>\n<li>Warning：警告的基类</li>\n<li>DeprecationWarning：关于被弃用的特征的警告</li>\n<li>FutureWarning：关于构造将来语义会有改变的警告</li>\n<li>UserWarning：用户代码生成的警告</li>\n<li>PendingDeprecationWarning：关于特性将会被废弃的警告</li>\n<li>RuntimeWarning：可疑的运行时行为(runtime behavior)的警告</li>\n<li>SyntaxWarning：可疑语法的警告</li>\n<li>ImportWarning：用于在导入模块过程中触发的警告</li>\n<li>UnicodeWarning：与Unicode相关的警告</li>\n<li>BytesWarning：与字节或字节码相关的警告</li>\n<li>ResourceWarning：与资源使用相关的警告</li>\n</ol>\n<h3 id=\"3-3-异常处理语句\"><a href=\"#3-3-异常处理语句\" class=\"headerlink\" title=\"3.3 异常处理语句\"></a>3.3 异常处理语句</h3><h4 id=\"try-except\"><a href=\"#try-except\" class=\"headerlink\" title=\"try - except\"></a>try - except</h4><pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token keyword\">try</span><span class=\"token punctuation\">:</span>\n\t检测范围\n<span class=\"token keyword\">except</span> Exception<span class=\"token punctuation\">[</span><span class=\"token keyword\">as</span> reason<span class=\"token punctuation\">]</span><span class=\"token punctuation\">:</span>\n\t出现异常后的处理代码<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n<p>try 语句按照如下方式工作：</p>\n<ol>\n<li>首先，执行try 子句（在关键字try 和关键字except 之间的语句）</li>\n<li>如果没有异常发生，忽略except 子句， try 子句执行后结束。</li>\n<li>如果在执行try 子句的过程中发生了异常，那么try 子句余下的部分将被忽略。如果异常的类型和except 之后的名称相符，那么对应的except 子句将被执行。最后执行try 语句之后的代码。</li>\n<li>如果一个异常没有与任何的except 匹配，那么这个异常将会传递给上层的try 中。</li>\n</ol>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token keyword\">try</span><span class=\"token punctuation\">:</span>\n    <span class=\"token builtin\">int</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"abc\"</span><span class=\"token punctuation\">)</span>\n    s <span class=\"token operator\">=</span> <span class=\"token number\">1</span> <span class=\"token operator\">+</span> <span class=\"token string\">'1'</span>\n    f <span class=\"token operator\">=</span> <span class=\"token builtin\">open</span><span class=\"token punctuation\">(</span><span class=\"token string\">'test.txt'</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>f<span class=\"token punctuation\">.</span>read<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    f<span class=\"token punctuation\">.</span>close<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">except</span> OSError <span class=\"token keyword\">as</span> error<span class=\"token punctuation\">:</span>\n\t<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'打开文件出错\\n原因是：'</span> <span class=\"token operator\">+</span> <span class=\"token builtin\">str</span><span class=\"token punctuation\">(</span>error<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">except</span> TypeError <span class=\"token keyword\">as</span> error<span class=\"token punctuation\">:</span>\n\t<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'类型出错\\n原因是：'</span> <span class=\"token operator\">+</span> <span class=\"token builtin\">str</span><span class=\"token punctuation\">(</span>error<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">except</span> ValueError <span class=\"token keyword\">as</span> error<span class=\"token punctuation\">:</span>\n\t<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'数值出错\\n原因是：'</span> <span class=\"token operator\">+</span> <span class=\"token builtin\">str</span><span class=\"token punctuation\">(</span>error<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\"># 数值出错</span>\n<span class=\"token comment\"># 原因是：invalid literal for int() with base 10: 'abc'</span>\n\ndict1 <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span><span class=\"token string\">'a'</span><span class=\"token punctuation\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'b'</span><span class=\"token punctuation\">:</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'v'</span><span class=\"token punctuation\">:</span> <span class=\"token number\">22</span><span class=\"token punctuation\">&#125;</span>\n<span class=\"token keyword\">try</span><span class=\"token punctuation\">:</span>\n\tx <span class=\"token operator\">=</span> dict1<span class=\"token punctuation\">[</span><span class=\"token string\">'y'</span><span class=\"token punctuation\">]</span>\n<span class=\"token keyword\">except</span> KeyError<span class=\"token punctuation\">:</span>\n\t<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'键错误'</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">except</span> LookupError<span class=\"token punctuation\">:</span>\n\t<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'查询错误'</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span>\n\t<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span>\n<span class=\"token comment\"># 键错误</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>try-except-else 语句尝试查询不在dict 中的键值对，从而引发了异常。这一异常准确地说应属于KeyError ，但由于KeyError 是LookupError 的子类，且将LookupError 置于KeyError 之前，因此程序优先执行该except 代码块。所以，使用多个except 代码块时，必须坚持对其规范排序，要从最具针对性的异常到最通用的异常。</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token keyword\">try</span><span class=\"token punctuation\">:</span>\n    s <span class=\"token operator\">=</span> <span class=\"token number\">1</span> <span class=\"token operator\">+</span> <span class=\"token string\">'1'</span>\n    <span class=\"token builtin\">int</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"abc\"</span><span class=\"token punctuation\">)</span>\n    f <span class=\"token operator\">=</span> <span class=\"token builtin\">open</span><span class=\"token punctuation\">(</span><span class=\"token string\">'test.txt'</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>f<span class=\"token punctuation\">.</span>read<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    f<span class=\"token punctuation\">.</span>close<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">except</span> <span class=\"token punctuation\">(</span>OSError<span class=\"token punctuation\">,</span> TypeError<span class=\"token punctuation\">,</span> ValueError<span class=\"token punctuation\">)</span> <span class=\"token keyword\">as</span> error<span class=\"token punctuation\">:</span>\n\t<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'出错了！\\n原因是：'</span> <span class=\"token operator\">+</span> <span class=\"token builtin\">str</span><span class=\"token punctuation\">(</span>error<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\"># 出错了！</span>\n<span class=\"token comment\"># 原因是：unsupported operand type(s) for +: 'int' and 'str'</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>一个 except 子句可以同时处理多个异常，这些异常将被放在一个括号里成为一个元组。</p>\n<h4 id=\"try-except-finally\"><a href=\"#try-except-finally\" class=\"headerlink\" title=\"try - except - finally\"></a><strong>try - except - finally</strong></h4><pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token keyword\">try</span><span class=\"token punctuation\">:</span>\n\t检测范围\n<span class=\"token keyword\">except</span> Exception<span class=\"token punctuation\">[</span><span class=\"token keyword\">as</span> reason<span class=\"token punctuation\">]</span><span class=\"token punctuation\">:</span>\n\t出现异常后的处理代码\n<span class=\"token keyword\">finally</span><span class=\"token punctuation\">:</span>\n\t无论如何都会被执行的代码<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>不管try 子句里面有没有发生异常， finally 子句都会执行。<br>如果一个异常在try 子句里被抛出，而又没有任何的except 把它截住，那么这个异常会在finally 子句执行后被抛出。</p>\n<h4 id=\"try-except-else\"><a href=\"#try-except-else\" class=\"headerlink\" title=\"try - except - else\"></a><strong>try - except - else</strong></h4><p>如果在try 子句执行时没有发生异常，Python将执行else 语句后的语句。</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token keyword\">try</span><span class=\"token punctuation\">:</span>\n\t检测范围\n<span class=\"token keyword\">except</span><span class=\"token punctuation\">(</span>Exception1<span class=\"token punctuation\">[</span><span class=\"token punctuation\">,</span> Exception2<span class=\"token punctuation\">[</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>ExceptionN<span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n\t发生以上多个异常中的一个，执行这块代码\n<span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span>\n\t如果没有异常执行这块代码<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h4 id=\"raise语句\"><a href=\"#raise语句\" class=\"headerlink\" title=\"raise语句\"></a>raise语句</h4><p>Python 使用raise 语句抛出一个指定的异常。</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token keyword\">try</span><span class=\"token punctuation\">:</span>\n\t<span class=\"token keyword\">raise</span> NameError<span class=\"token punctuation\">(</span><span class=\"token string\">'HiThere'</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">except</span> NameError<span class=\"token punctuation\">:</span>\n\t<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'An exception flew by!'</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\"># An exception flew by!</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h2 id=\"4-列表-list\"><a href=\"#4-列表-list\" class=\"headerlink\" title=\"4 列表 list\"></a>4 列表 list</h2><h3 id=\"4-1-列表的定义\"><a href=\"#4-1-列表的定义\" class=\"headerlink\" title=\"4.1 列表的定义\"></a>4.1 列表的定义</h3><p>列表是有序集合，没有固定大小，能够保存任意数量任意类型的 Python 对象，语法为 [元素1, 元素2, …, 元素n] 。</p>\n<ol>\n<li>关键点是「中括号 []」和「逗号 ,」</li>\n<li>中括号 把所有元素绑在一起</li>\n<li>逗号 将每个元素一一分开</li>\n</ol>\n<p><strong>列表的创建</strong></p>\n<ol>\n<li>直接定义</li>\n<li>利用range() 创建列表</li>\n<li>利用推导式创建列表</li>\n</ol>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">x <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'Monday'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'Tuesday'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'Wednesday'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'Thursday'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'Friday'</span><span class=\"token punctuation\">]</span>\n\nx <span class=\"token operator\">=</span> <span class=\"token builtin\">list</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\nx <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>i <span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span><span class=\"token number\">100</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>i <span class=\"token operator\">%</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">!=</span> <span class=\"token number\">0</span> <span class=\"token keyword\">and</span> <span class=\"token punctuation\">(</span>i <span class=\"token operator\">%</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">]</span>\n\nx <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span> <span class=\"token keyword\">for</span> col <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span> <span class=\"token keyword\">for</span> row <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span><span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>由于list的元素可以是任何对象，因此列表中所保存的是对象的指针。即使保存一个简单的[1,2,3] ，也有3个指针和3个整数对象。<br>x = [a] * 4 操作中，只是创建4个指向list的引用，所以一旦a 改变， x 中4个a 也会随之改变。</p>\n<h3 id=\"4-2-列表的操作\"><a href=\"#4-2-列表的操作\" class=\"headerlink\" title=\"4.2 列表的操作\"></a>4.2 列表的操作</h3><h4 id=\"添加元素\"><a href=\"#添加元素\" class=\"headerlink\" title=\"添加元素\"></a>添加元素</h4><ul>\n<li>list.append(obj) 在列表末尾添加新的对象，只接受一个参数，参数可以是任何数据类型，被追加的元素在 list中保持着原结构类型。</li>\n<li>list.extend(seq) 在列表末尾一次性追加另一个序列中的多个值（用新列表扩展原来的列表）</li>\n<li>list.insert(index, obj) 在编号 index 位置前插入 obj 。</li>\n</ul>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">x <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'Monday'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'Tuesday'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'Wednesday'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'Thursday'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'Friday'</span><span class=\"token punctuation\">]</span>\nx<span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span><span class=\"token string\">'Thursday'</span><span class=\"token punctuation\">)</span>\nx<span class=\"token punctuation\">.</span>extend<span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token string\">'Thursday'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'Sunday'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\nx<span class=\"token punctuation\">.</span>insert<span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'Sunday'</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n<h4 id=\"删除元素\"><a href=\"#删除元素\" class=\"headerlink\" title=\"删除元素\"></a>删除元素</h4><ol>\n<li>list.remove(obj) 移除列表中某个值的第一个匹配项</li>\n<li>list.pop([index=-1]) 移除列表中的一个元素（默认最后一个元素），并且返回该元素的值</li>\n<li>del var1[, var2 ……] 删除单个或多个对象。</li>\n</ol>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">x <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'Monday'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'Tuesday'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'Wednesday'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'Thursday'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'Friday'</span><span class=\"token punctuation\">]</span>\nx<span class=\"token punctuation\">.</span>remove<span class=\"token punctuation\">(</span><span class=\"token string\">'Monday'</span><span class=\"token punctuation\">)</span>\ny <span class=\"token operator\">=</span> x<span class=\"token punctuation\">.</span>pop<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">del</span> x<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">:</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n<h4 id=\"获取列表中的元素\"><a href=\"#获取列表中的元素\" class=\"headerlink\" title=\"获取列表中的元素\"></a>获取列表中的元素</h4><ol>\n<li>通过元素的索引值，从列表获取单个元素，注意，列表索引值是从0开始的。</li>\n<li>通过将索引指定为-1，可让Python返回最后一个列表元素，索引 -2 返回倒数第二个列表元素，以此类推。</li>\n<li>切片的通用写法是 start : stop : step</li>\n</ol>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">x <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'Monday'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'Tuesday'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'Wednesday'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'Thursday'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'Friday'</span><span class=\"token punctuation\">]</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># ['Thursday', 'Friday']</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">[</span><span class=\"token operator\">-</span><span class=\"token number\">3</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># ['Wednesday', 'Thursday', 'Friday']</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n<h4 id=\"列表的常用操作符\"><a href=\"#列表的常用操作符\" class=\"headerlink\" title=\"列表的常用操作符\"></a>列表的常用操作符</h4><ol>\n<li>等号操作符： ==</li>\n<li>连接操作符 +</li>\n<li>重复操作符 *</li>\n<li>成员关系操作符 in 、not in</li>\n</ol>\n<p>「等号 ==」，只有成员、成员位置都相同时才返回True。<br>和元组拼接一样， 列表拼接也有两种方式，用「加号 +」和「乘号 *」，前者首尾拼接，后者复制拼接。</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">list1 <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">123</span><span class=\"token punctuation\">,</span> <span class=\"token number\">456</span><span class=\"token punctuation\">]</span>\nlist2 <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">456</span><span class=\"token punctuation\">,</span> <span class=\"token number\">123</span><span class=\"token punctuation\">]</span>\nlist3 <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">123</span><span class=\"token punctuation\">,</span> <span class=\"token number\">456</span><span class=\"token punctuation\">]</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>list1 <span class=\"token operator\">==</span> list2<span class=\"token punctuation\">)</span> <span class=\"token comment\"># False</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>list1 <span class=\"token operator\">==</span> list3<span class=\"token punctuation\">)</span> <span class=\"token comment\"># True</span>\n\nlist4 <span class=\"token operator\">=</span> list1 <span class=\"token operator\">+</span> list2 <span class=\"token comment\"># extend()</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>list4<span class=\"token punctuation\">)</span> <span class=\"token comment\"># [123, 456, 456, 123]</span>\n\nlist5 <span class=\"token operator\">=</span> list3 <span class=\"token operator\">*</span> <span class=\"token number\">3</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>list5<span class=\"token punctuation\">)</span> <span class=\"token comment\"># [123, 456, 123, 456, 123, 456]</span>\n\nlist3 <span class=\"token operator\">*=</span> <span class=\"token number\">3</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>list3<span class=\"token punctuation\">)</span> <span class=\"token comment\"># [123, 456, 123, 456, 123, 456]</span>\n\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token number\">123</span> <span class=\"token keyword\">in</span> list3<span class=\"token punctuation\">)</span> <span class=\"token comment\"># True</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token number\">456</span> <span class=\"token keyword\">not</span> <span class=\"token keyword\">in</span> list3<span class=\"token punctuation\">)</span> <span class=\"token comment\"># False</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>前面三种方法（ append , extend , insert ）可对列表增加元素，它们没有返回值，是直接修改了原数据对象。<br>将两个list相加，需要创建新的 list 对象，从而需要消耗额外的内存，特别是当 list 较大时，尽量不要使用 “+” 来添加list。</p>\n<h4 id=\"列表的其它方法\"><a href=\"#列表的其它方法\" class=\"headerlink\" title=\"列表的其它方法\"></a>列表的其它方法</h4><div class=\"table-container\">\n<table>\n<thead>\n<tr>\n<th>list方法</th>\n<th></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>list.count(obj)</td>\n<td>统计某个元素在列表中出现的次数</td>\n</tr>\n<tr>\n<td>list.index(x[, start[, end]])</td>\n<td>从列表中找出某个值第一个匹配项的索引位置</td>\n</tr>\n<tr>\n<td>list.reverse()</td>\n<td>反向列表中元素</td>\n</tr>\n<tr>\n<td>list.sort(key=None, reverse=False)</td>\n<td>对原列表进行排序。</td>\n</tr>\n<tr>\n<td></td>\n</tr>\n</tbody>\n</table>\n</div>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token comment\"># 获取列表的第二个元素</span>\n<span class=\"token keyword\">def</span> <span class=\"token function\">takeSecond</span><span class=\"token punctuation\">(</span>elem<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n<span class=\"token keyword\">return</span> elem<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span>\nx <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span>\nx<span class=\"token punctuation\">.</span>sort<span class=\"token punctuation\">(</span>key<span class=\"token operator\">=</span>takeSecond<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span>\n<span class=\"token comment\"># [(4, 1), (2, 2), (1, 3), (3, 4)]</span>\nx<span class=\"token punctuation\">.</span>sort<span class=\"token punctuation\">(</span>key<span class=\"token operator\">=</span><span class=\"token keyword\">lambda</span> a<span class=\"token punctuation\">:</span> a<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span>\n<span class=\"token comment\"># [(1, 3), (2, 2), (3, 4), (4, 1)]</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h2 id=\"5-元组\"><a href=\"#5-元组\" class=\"headerlink\" title=\"5 元组\"></a>5 元组</h2><p>「元组」定义语法为： (元素1, 元素2, …, 元素n)</p>\n<ol>\n<li>小括号把所有元素绑在一起</li>\n<li>逗号将每个元素一一分开</li>\n</ol>\n<h3 id=\"5-1-创建和访问一个元组\"><a href=\"#5-1-创建和访问一个元组\" class=\"headerlink\" title=\"5.1 创建和访问一个元组\"></a>5.1 创建和访问一个元组</h3><ol>\n<li>Python 的元组与列表类似，不同之处在于tuple被创建后就不能对其进行修改，类似字符串。</li>\n<li>元组使用小括号，列表使用方括号。</li>\n</ol>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">t1 <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">10.31</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'python'</span><span class=\"token punctuation\">)</span>\nt2 <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">10.31</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'python'</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>t1<span class=\"token punctuation\">,</span> <span class=\"token builtin\">type</span><span class=\"token punctuation\">(</span>t1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\"># (1, 10.31, 'python') &lt;class 'tuple'></span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>t2<span class=\"token punctuation\">,</span> <span class=\"token builtin\">type</span><span class=\"token punctuation\">(</span>t2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\"># (1, 10.31, 'python') &lt;class 'tuple'></span>\n\ntuple1 <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">6</span><span class=\"token punctuation\">,</span> <span class=\"token number\">7</span><span class=\"token punctuation\">,</span> <span class=\"token number\">8</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>tuple1<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># 2</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>tuple1<span class=\"token punctuation\">[</span><span class=\"token number\">5</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># (6, 7, 8)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>tuple1<span class=\"token punctuation\">[</span><span class=\"token punctuation\">:</span><span class=\"token number\">5</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># (1, 2, 3, 4, 5)</span>\ntuple2 <span class=\"token operator\">=</span> tuple1<span class=\"token punctuation\">[</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">]</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>tuple2<span class=\"token punctuation\">)</span> <span class=\"token comment\"># (1, 2, 3, 4, 5, 6, 7, 8)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<ol>\n<li>创建元组可以用小括号 ()，也可以什么都不用，为了可读性，建议还是用 ()。</li>\n<li>元组中只包含一个元素时，需要在元素后面添加逗号，否则括号会被当作运算符使用：</li>\n</ol>\n<h3 id=\"5-2-更新和删除一个元组\"><a href=\"#5-2-更新和删除一个元组\" class=\"headerlink\" title=\"5.2 更新和删除一个元组\"></a>5.2 更新和删除一个元组</h3><p>元组有不可更改 (immutable) 的性质，因此不能直接给元组的元素赋值，但是只要元组中的元素可更改 (mutable)，那么我们可以直接更改其元素，注意这跟赋值其元素不同。</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">week <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token string\">'Monday'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'Tuesday'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'Thursday'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'Friday'</span><span class=\"token punctuation\">)</span>\nweek <span class=\"token operator\">=</span> week<span class=\"token punctuation\">[</span><span class=\"token punctuation\">:</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span> <span class=\"token punctuation\">(</span><span class=\"token string\">'Wednesday'</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> week<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">]</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>week<span class=\"token punctuation\">)</span> <span class=\"token comment\"># ('Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday')</span>\n\nt1 <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">6</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>t1<span class=\"token punctuation\">)</span> <span class=\"token comment\"># (1, 2, 3, [4, 5, 6])</span>\nt1<span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">9</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>t1<span class=\"token punctuation\">)</span> <span class=\"token comment\"># (1, 2, 3, [9, 5, 6])</span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h3 id=\"5-3-元组相关的操作符\"><a href=\"#5-3-元组相关的操作符\" class=\"headerlink\" title=\"5.3 元组相关的操作符\"></a>5.3 元组相关的操作符</h3><ol>\n<li>比较操作符</li>\n<li>逻辑操作符</li>\n<li>连接操作符 +</li>\n<li>重复操作符 *</li>\n<li>成员关系操作符 in 、not in</li>\n</ol>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">t1 <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">)</span>\nt2 <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token string\">'老马的程序人生'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'小马的程序人生'</span><span class=\"token punctuation\">)</span>\nt3 <span class=\"token operator\">=</span> t1 <span class=\"token operator\">+</span> t2\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>t3<span class=\"token punctuation\">)</span>\n<span class=\"token comment\"># (2, 3, 4, 5, '老马的程序人生', '小马的程序人生')</span>\nt4 <span class=\"token operator\">=</span> t2 <span class=\"token operator\">*</span> <span class=\"token number\">2</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>t4<span class=\"token punctuation\">)</span>\n<span class=\"token comment\"># ('老马的程序人生', '小马的程序人生', '老马的程序人生', '小马的程序人生')</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h3 id=\"5-4-内置方法\"><a href=\"#5-4-内置方法\" class=\"headerlink\" title=\"5.4 内置方法\"></a>5.4 内置方法</h3><ol>\n<li>.count() 是记录在元组  中该元素出现几次</li>\n<li>.index() 是找到该元素在元组的索引</li>\n</ol>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">t <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">10.31</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'python'</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>t<span class=\"token punctuation\">.</span>count<span class=\"token punctuation\">(</span><span class=\"token string\">'python'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># 1</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>t<span class=\"token punctuation\">.</span>index<span class=\"token punctuation\">(</span><span class=\"token number\">10.31</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># 1</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n<h3 id=\"5-5-解压元组\"><a href=\"#5-5-解压元组\" class=\"headerlink\" title=\"5.5 解压元组\"></a>5.5 解压元组</h3><pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">t <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">10.31</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'python'</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">,</span> c<span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> t\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">,</span> c<span class=\"token punctuation\">)</span>\n<span class=\"token comment\"># 1 10.31 python</span>\n\nt <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">10.31</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token string\">'OK'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'python'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span>c<span class=\"token punctuation\">,</span> d<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> t\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">,</span> c<span class=\"token punctuation\">,</span> d<span class=\"token punctuation\">)</span>\n<span class=\"token comment\"># 1 10.31 OK python</span>\n\n<span class=\"token comment\"># 如果你只想要元组其中几个元素，用通配符「*」，英文叫 wildcard，在计算机语言中代表一个或多个元素。下例就是把多个元素丢给了 rest 变量。</span>\nt <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span>\na<span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">,</span> <span class=\"token operator\">*</span>rest<span class=\"token punctuation\">,</span> c <span class=\"token operator\">=</span> t\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">,</span> c<span class=\"token punctuation\">)</span> <span class=\"token comment\"># 1 2 5</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>rest<span class=\"token punctuation\">)</span> <span class=\"token comment\"># [3, 4]</span>\n\n<span class=\"token comment\"># 如果你根本不在乎 rest 变量，那么就用通配符「*」加上下划线「_」。</span>\na<span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">,</span> <span class=\"token operator\">*</span>_ <span class=\"token operator\">=</span> t\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">)</span> <span class=\"token comment\"># 1 2</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h2 id=\"6-字符串\"><a href=\"#6-字符串\" class=\"headerlink\" title=\"6 字符串\"></a>6 字符串</h2><h3 id=\"6-1-字符串的定义\"><a href=\"#6-1-字符串的定义\" class=\"headerlink\" title=\"6.1 字符串的定义\"></a>6.1 字符串的定义</h3><ol>\n<li>Python 中字符串被定义为引号之间的字符集合。</li>\n<li>Python 支持使用成对的 单引号 或 双引号</li>\n</ol>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">t1 <span class=\"token operator\">=</span> <span class=\"token string\">'i love Python!'</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>t1<span class=\"token punctuation\">,</span> <span class=\"token builtin\">type</span><span class=\"token punctuation\">(</span>t1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\"># i love Python! &lt;class 'str'></span>\nt2 <span class=\"token operator\">=</span> <span class=\"token string\">\"I love Python!\"</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>t2<span class=\"token punctuation\">,</span> <span class=\"token builtin\">type</span><span class=\"token punctuation\">(</span>t2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\"># I love Python! &lt;class 'str'></span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token number\">5</span> <span class=\"token operator\">+</span> <span class=\"token number\">8</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># 13</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'5'</span> <span class=\"token operator\">+</span> <span class=\"token string\">'8'</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># 58</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p><strong>Python 的常用转义字符</strong></p>\n<div class=\"table-container\">\n<table>\n<thead>\n<tr>\n<th>转移字符</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>\\\\\\\\</td>\n<td>反斜杠</td>\n</tr>\n<tr>\n<td>\\\\’</td>\n<td>单引号</td>\n</tr>\n<tr>\n<td>\\\\”</td>\n<td>双引号</td>\n</tr>\n<tr>\n<td>\\\\n</td>\n<td>换行</td>\n</tr>\n<tr>\n<td>\\\\t</td>\n<td>TAB</td>\n</tr>\n<tr>\n<td>\\\\r</td>\n<td>回车</td>\n</tr>\n</tbody>\n</table>\n</div>\n<p><strong>原始字符串只需要在字符串前边加一个英文字母 r 即可。</strong></p>\n<h3 id=\"6-2-字符串的切片与拼接\"><a href=\"#6-2-字符串的切片与拼接\" class=\"headerlink\" title=\"6.2 字符串的切片与拼接\"></a>6.2 字符串的切片与拼接</h3><ol>\n<li>类似于元组具有不可修改性</li>\n<li>从 0 开始 (和 C 一样)</li>\n<li>切片通常写成 start:end 这种形式，包括「start 索引」对应的元素，不包括「end 索引」对应的元素。</li>\n<li>索引值可正可负，正索引从 0 开始，从左往右；负索引从 -1 开始，从右往左。使用负数索引时，会从最后一个元素<br>开始计数。最后一个元素的位置编号是 -1。</li>\n</ol>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">str1 <span class=\"token operator\">=</span> <span class=\"token string\">'I Love LsgoGroup'</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>str1<span class=\"token punctuation\">[</span><span class=\"token punctuation\">:</span><span class=\"token number\">6</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># I Love</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>str1<span class=\"token punctuation\">[</span><span class=\"token number\">5</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># e</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>str1<span class=\"token punctuation\">[</span><span class=\"token punctuation\">:</span><span class=\"token number\">6</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span> <span class=\"token string\">\" 插入的字符串 \"</span> <span class=\"token operator\">+</span> str1<span class=\"token punctuation\">[</span><span class=\"token number\">6</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\"># I Love 插入的字符串 LsgoGroup</span>\ns <span class=\"token operator\">=</span> <span class=\"token string\">'Python'</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">)</span> <span class=\"token comment\"># Python</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">:</span><span class=\"token number\">4</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># th</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">[</span><span class=\"token operator\">-</span><span class=\"token number\">5</span><span class=\"token punctuation\">:</span><span class=\"token operator\">-</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># yth</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># t</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">[</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># n</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h3 id=\"6-3-字符串的常用内置方法\"><a href=\"#6-3-字符串的常用内置方法\" class=\"headerlink\" title=\"6.3 字符串的常用内置方法\"></a>6.3 字符串的常用内置方法</h3><ol>\n<li><strong>capitalize()</strong> 将字符串的第一个字符转换为大写。</li>\n</ol>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">str2 <span class=\"token operator\">=</span> <span class=\"token string\">'xiaoxie'</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>str2<span class=\"token punctuation\">.</span>capitalize<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># Xiaoxie</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n<ol>\n<li><strong>lower()</strong> 转换字符串中所有大写字符为小写。</li>\n<li><strong>upper()</strong> 转换字符串中的小写字母为大写。</li>\n<li><strong>swapcase()</strong> 将字符串中大写转换为小写，小写转换为大写。</li>\n</ol>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">str2 <span class=\"token operator\">=</span> <span class=\"token string\">\"DAXIExiaoxie\"</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>str2<span class=\"token punctuation\">.</span>lower<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># daxiexiaoxie</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>str2<span class=\"token punctuation\">.</span>upper<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># DAXIEXIAOXIE</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>str2<span class=\"token punctuation\">.</span>swapcase<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># daxieXIAOXIE</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n<ol>\n<li><strong>count(str, beg= 0,end=len(string))</strong> 返回str 在 string 里面出现的次数，如果beg 或者end 指定则返回指定范围内str 出现的次数。</li>\n</ol>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">str2 <span class=\"token operator\">=</span> <span class=\"token string\">\"DAXIExiaoxie\"</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>str2<span class=\"token punctuation\">.</span>count<span class=\"token punctuation\">(</span><span class=\"token string\">'xi'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># 2</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n<ol>\n<li><strong>endswith(suffix, beg=0, end=len(string))</strong> 检查字符串是否以指定子字符串 suffix 结束，如果是，返回<br>True,否则返回 False。如果 beg 和 end 指定值，则在指定范围内检查。</li>\n<li><strong>startswith(substr, beg=0,end=len(string))</strong> 检查字符串是否以指定子字符串 substr 开头，如果是，返回<br>True，否则返回 False。如果 beg 和 end 指定值，则在指定范围内检查。</li>\n</ol>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">str2 <span class=\"token operator\">=</span> <span class=\"token string\">\"DAXIExiaoxie\"</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>str2<span class=\"token punctuation\">.</span>endswith<span class=\"token punctuation\">(</span><span class=\"token string\">'ie'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># True</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>str2<span class=\"token punctuation\">.</span>endswith<span class=\"token punctuation\">(</span><span class=\"token string\">'xi'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># False</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>str2<span class=\"token punctuation\">.</span>startswith<span class=\"token punctuation\">(</span><span class=\"token string\">'Da'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># False</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>str2<span class=\"token punctuation\">.</span>startswith<span class=\"token punctuation\">(</span><span class=\"token string\">'DA'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># True</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<ol>\n<li><strong>find(str, beg=0, end=len(string))</strong> 检测 str 是否包含在字符串中，如果指定范围 beg 和 end ，则检查是<br>否包含在指定范围内，如果包含，返回开始的索引值，否则返回 -1。</li>\n<li><strong>rfind(str, beg=0,end=len(string))</strong> 类似于 find() 函数，不过是从右边开始查找。</li>\n</ol>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">str2 <span class=\"token operator\">=</span> <span class=\"token string\">\"DAXIExiaoxie\"</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>str2<span class=\"token punctuation\">.</span>find<span class=\"token punctuation\">(</span><span class=\"token string\">'xi'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># 5</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>str2<span class=\"token punctuation\">.</span>find<span class=\"token punctuation\">(</span><span class=\"token string\">'ix'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># -1</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>str2<span class=\"token punctuation\">.</span>rfind<span class=\"token punctuation\">(</span><span class=\"token string\">'xi'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># 9</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n<ol>\n<li><strong>isnumeric()</strong> 如果字符串中只包含数字字符，则返回 True，否则返回 False。</li>\n</ol>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">str3 <span class=\"token operator\">=</span> <span class=\"token string\">'12345'</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>str3<span class=\"token punctuation\">.</span>isnumeric<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># True</span>\nstr3 <span class=\"token operator\">+=</span> <span class=\"token string\">'a'</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>str3<span class=\"token punctuation\">.</span>isnumeric<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># False</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n<ol>\n<li><strong>ljust(width[, fillchar])</strong> 返回一个原字符串左对齐，并使用fillchar （默认空格）填充至长度width 的新字<br>符串。</li>\n<li><strong>rjust(width[, fillchar])</strong> 返回一个原字符串右对齐，并使用fillchar （默认空格）填充至长度width 的新字<br>符串。</li>\n</ol>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">str4 <span class=\"token operator\">=</span> <span class=\"token string\">'1101'</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>str4<span class=\"token punctuation\">.</span>ljust<span class=\"token punctuation\">(</span><span class=\"token number\">8</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'0'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># 11010000</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>str4<span class=\"token punctuation\">.</span>rjust<span class=\"token punctuation\">(</span><span class=\"token number\">8</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'0'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># 00001101</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n<ol>\n<li><strong>lstrip([chars])</strong> 截掉字符串左边的空格或指定字符。</li>\n<li><strong>rstrip([chars])</strong> 删除字符串末尾的空格或指定字符。</li>\n<li><strong>strip([chars])</strong> 在字符串上执行lstrip() 和rstrip() 。</li>\n</ol>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">str5 <span class=\"token operator\">=</span> <span class=\"token string\">' I Love LsgoGroup '</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>str5<span class=\"token punctuation\">.</span>lstrip<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># 'I Love LsgoGroup '</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>str5<span class=\"token punctuation\">.</span>lstrip<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>strip<span class=\"token punctuation\">(</span><span class=\"token string\">'I'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># ' Love LsgoGroup '</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>str5<span class=\"token punctuation\">.</span>rstrip<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># ' I Love LsgoGroup'</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>str5<span class=\"token punctuation\">.</span>strip<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># 'I Love LsgoGroup'</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>str5<span class=\"token punctuation\">.</span>strip<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>strip<span class=\"token punctuation\">(</span><span class=\"token string\">'p'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># 'I Love LsgoGrou'</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<ol>\n<li><strong>partition(sub)</strong> 找到子字符串sub，把字符串分为一个三元组(pre_sub,sub,fol_sub) ，如果字符串中不包含<br>sub则返回(‘原字符串’,’’,’’) 。</li>\n<li><strong>rpartition(sub)</strong> 类似于partition() 方法，不过是从右边开始查找。</li>\n</ol>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">str5 <span class=\"token operator\">=</span> <span class=\"token string\">' I Love LsgoGroup '</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>str5<span class=\"token punctuation\">.</span>strip<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>partition<span class=\"token punctuation\">(</span><span class=\"token string\">'o'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># ('I L', 'o', 've LsgoGroup')</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>str5<span class=\"token punctuation\">.</span>strip<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>partition<span class=\"token punctuation\">(</span><span class=\"token string\">'m'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># ('I Love LsgoGroup', '', '')</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>str5<span class=\"token punctuation\">.</span>strip<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>rpartition<span class=\"token punctuation\">(</span><span class=\"token string\">'o'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># ('I Love LsgoGr', 'o', 'up')</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n<ol>\n<li><strong>replace(old, new [, max])</strong> 把 将字符串中的old 替换成new ，如果max 指定，则替换不超过max 次。</li>\n</ol>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">str5 <span class=\"token operator\">=</span> <span class=\"token string\">' I Love LsgoGroup '</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>str5<span class=\"token punctuation\">.</span>strip<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>replace<span class=\"token punctuation\">(</span><span class=\"token string\">'I'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'We'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># We Love LsgoGroup</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n<ol>\n<li><strong>split(str=””, num)</strong> 不带参数默认是以空格为分隔符切片字符串，如果num 参数有设置，则仅分隔num 个子字符串，返回切片后的子字符串拼接的列表。</li>\n</ol>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">str5 <span class=\"token operator\">=</span> <span class=\"token string\">' I Love LsgoGroup '</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>str5<span class=\"token punctuation\">.</span>strip<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>split<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># ['I', 'Love', 'LsgoGroup']</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>str5<span class=\"token punctuation\">.</span>strip<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>split<span class=\"token punctuation\">(</span><span class=\"token string\">'o'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># ['I L', 've Lsg', 'Gr', 'up']</span>\n\nu <span class=\"token operator\">=</span> <span class=\"token string\">\"www.baidu.com.cn\"</span>\n<span class=\"token comment\"># 分割两次</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>u<span class=\"token punctuation\">.</span>split<span class=\"token punctuation\">(</span><span class=\"token string\">\".\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># ['www', 'baidu', 'com.cn']</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<ol>\n<li><strong>splitlines([keepends])</strong> 按照行(‘\\r’, ‘\\r\\n’, \\n’)分隔，返回一个包含各行作为元素的列表，如果参数keepends 为False，不包含换行符，如果为 True，则保留换行符。</li>\n</ol>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">str6 <span class=\"token operator\">=</span> <span class=\"token string\">'I \\n Love \\n LsgoGroup'</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>str6<span class=\"token punctuation\">.</span>splitlines<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># ['I ', ' Love ', ' LsgoGroup']</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>str6<span class=\"token punctuation\">.</span>splitlines<span class=\"token punctuation\">(</span><span class=\"token boolean\">True</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># ['I \\n', ' Love \\n', ' LsgoGroup']</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n<ol>\n<li>maketrans(intab, outtab) 创建字符映射的转换表，第一个参数是字符串，表示需要转换的字符，第二个参数也<br>是字符串表示转换的目标。</li>\n<li>translate(table, deletechars=””) 根据参数table 给出的表，转换字符串的字符，要过滤掉的字符放<br>到deletechars 参数中。</li>\n</ol>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token builtin\">str</span> <span class=\"token operator\">=</span> <span class=\"token string\">'this is string example....wow!!!'</span>\nintab <span class=\"token operator\">=</span> <span class=\"token string\">'aeiou'</span>\nouttab <span class=\"token operator\">=</span> <span class=\"token string\">'12345'</span>\ntrantab <span class=\"token operator\">=</span> <span class=\"token builtin\">str</span><span class=\"token punctuation\">.</span>maketrans<span class=\"token punctuation\">(</span>intab<span class=\"token punctuation\">,</span> outtab<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>trantab<span class=\"token punctuation\">)</span> <span class=\"token comment\"># &#123;97: 49, 111: 52, 117: 53, 101: 50, 105: 51&#125;</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">str</span><span class=\"token punctuation\">.</span>translate<span class=\"token punctuation\">(</span>trantab<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># th3s 3s str3ng 2x1mpl2....w4w!!!</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h3 id=\"6-4-字符串格式化\"><a href=\"#6-4-字符串格式化\" class=\"headerlink\" title=\"6.4 字符串格式化\"></a>6.4 字符串格式化</h3><p><strong>format 格式化函数</strong></p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token builtin\">str</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"&#123;0&#125; Love &#123;1&#125;\"</span><span class=\"token punctuation\">.</span><span class=\"token builtin\">format</span><span class=\"token punctuation\">(</span><span class=\"token string\">'I'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'Lsgogroup'</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># 位置参数</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">str</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># I Love Lsgogroup</span>\n<span class=\"token builtin\">str</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"&#123;a&#125; Love &#123;b&#125;\"</span><span class=\"token punctuation\">.</span><span class=\"token builtin\">format</span><span class=\"token punctuation\">(</span>a<span class=\"token operator\">=</span><span class=\"token string\">'I'</span><span class=\"token punctuation\">,</span> b<span class=\"token operator\">=</span><span class=\"token string\">'Lsgogroup'</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># 关键字参数</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">str</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># I Love Lsgogroup</span>\n<span class=\"token builtin\">str</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"&#123;0&#125; Love &#123;b&#125;\"</span><span class=\"token punctuation\">.</span><span class=\"token builtin\">format</span><span class=\"token punctuation\">(</span><span class=\"token string\">'I'</span><span class=\"token punctuation\">,</span> b<span class=\"token operator\">=</span><span class=\"token string\">'Lsgogroup'</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># 位置参数要在关键字参数之前</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">str</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># I Love Lsgogroup</span>\n<span class=\"token builtin\">str</span> <span class=\"token operator\">=</span> <span class=\"token string\">'&#123;0:.2f&#125;&#123;1&#125;'</span><span class=\"token punctuation\">.</span><span class=\"token builtin\">format</span><span class=\"token punctuation\">(</span><span class=\"token number\">27.658</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'GB'</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># 保留小数点后两位</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">str</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># 27.66GB</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p><strong>Python 字符串格式化符号</strong></p>\n<div class=\"table-container\">\n<table>\n<thead>\n<tr>\n<th>符号</th>\n<th></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>%c</td>\n<td>格式化字符及其ASCII码</td>\n</tr>\n<tr>\n<td>%s</td>\n<td>格式化字符串，用str()方法处理对象</td>\n</tr>\n<tr>\n<td>%r</td>\n<td>格式化字符串，用rper()方法处理对象</td>\n</tr>\n<tr>\n<td>%d</td>\n<td>格式化整数</td>\n</tr>\n<tr>\n<td>%o</td>\n<td>格式化无符号八进制数</td>\n</tr>\n<tr>\n<td>%x</td>\n<td>格式化无符号十六进制数</td>\n</tr>\n<tr>\n<td>%X</td>\n<td>格式化无符号十六进制数（大写）</td>\n</tr>\n<tr>\n<td>%f</td>\n<td>格式化浮点数字，可指定小数点后的精度</td>\n</tr>\n<tr>\n<td>%e</td>\n<td>用科学计数法格式化浮点数</td>\n</tr>\n<tr>\n<td>%E</td>\n<td>作用同%e，用科学计数法格式化浮点数</td>\n</tr>\n<tr>\n<td>%g</td>\n<td>根据值的大小决定使用%f或%e</td>\n</tr>\n<tr>\n<td>%G</td>\n<td>作用同%g，根据值的大小决定使用%f或%E</td>\n</tr>\n</tbody>\n</table>\n</div>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'%c'</span> <span class=\"token operator\">%</span> <span class=\"token number\">97</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># a</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'%c %c %c'</span> <span class=\"token operator\">%</span> <span class=\"token punctuation\">(</span><span class=\"token number\">97</span><span class=\"token punctuation\">,</span> <span class=\"token number\">98</span><span class=\"token punctuation\">,</span> <span class=\"token number\">99</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># a b c</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'%d + %d = %d'</span> <span class=\"token operator\">%</span> <span class=\"token punctuation\">(</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">9</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># 4 + 5 = 9</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"我叫 %s 今年 %d 岁!\"</span> <span class=\"token operator\">%</span> <span class=\"token punctuation\">(</span><span class=\"token string\">'小明'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># 我叫 小明 今年 10 岁!</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'%o'</span> <span class=\"token operator\">%</span> <span class=\"token number\">10</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># 12</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'%x'</span> <span class=\"token operator\">%</span> <span class=\"token number\">10</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># a</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'%X'</span> <span class=\"token operator\">%</span> <span class=\"token number\">10</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># A</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'%f'</span> <span class=\"token operator\">%</span> <span class=\"token number\">27.658</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># 27.658000</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'%e'</span> <span class=\"token operator\">%</span> <span class=\"token number\">27.658</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># 2.765800e+01</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'%E'</span> <span class=\"token operator\">%</span> <span class=\"token number\">27.658</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># 2.765800E+01</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'%g'</span> <span class=\"token operator\">%</span> <span class=\"token number\">27.658</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># 27.658</span>\ntext <span class=\"token operator\">=</span> <span class=\"token string\">\"I am %d years old.\"</span> <span class=\"token operator\">%</span> <span class=\"token number\">22</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"I said: %s.\"</span> <span class=\"token operator\">%</span> text<span class=\"token punctuation\">)</span> <span class=\"token comment\"># I said: I am 22 years old..</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"I said: %r.\"</span> <span class=\"token operator\">%</span> text<span class=\"token punctuation\">)</span> <span class=\"token comment\"># I said: 'I am 22 years old.'</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p><strong>格式化操作符辅助指令</strong></p>\n<div class=\"table-container\">\n<table>\n<thead>\n<tr>\n<th>符号</th>\n<th>功能</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>m.n</td>\n<td>m 是显示的最小总宽度,n 是小数点后的位数(如果可用的话)</td>\n</tr>\n<tr>\n<td>-</td>\n<td>用做左对齐</td>\n</tr>\n<tr>\n<td>+</td>\n<td>在正数前面显示加号( + )</td>\n</tr>\n<tr>\n<td>#</td>\n<td>在八进制数前面显示零(‘0’)，在十六进制前面显示’0x’或者’0X’(取决于用的是’x’还是’X’)</td>\n</tr>\n<tr>\n<td>0</td>\n<td>显示的数字前面填充’0’而不是默认的空格</td>\n</tr>\n</tbody>\n</table>\n</div>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'%5.1f'</span> <span class=\"token operator\">%</span> <span class=\"token number\">27.658</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># ' 27.7'</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'%.2e'</span> <span class=\"token operator\">%</span> <span class=\"token number\">27.658</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># 2.77e+01</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'%10d'</span> <span class=\"token operator\">%</span> <span class=\"token number\">10</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># ' 10'</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'%-10d'</span> <span class=\"token operator\">%</span> <span class=\"token number\">10</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># '10 '</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'%+d'</span> <span class=\"token operator\">%</span> <span class=\"token number\">10</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># +10</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'%#o'</span> <span class=\"token operator\">%</span> <span class=\"token number\">10</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># 0o12</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'%#x'</span> <span class=\"token operator\">%</span> <span class=\"token number\">108</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># 0x6c</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'%010d'</span> <span class=\"token operator\">%</span> <span class=\"token number\">5</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># 0000000005</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h2 id=\"7-字典\"><a href=\"#7-字典\" class=\"headerlink\" title=\"7 字典\"></a>7 字典</h2><h3 id=\"7-1-可变类型与不可变类型\"><a href=\"#7-1-可变类型与不可变类型\" class=\"headerlink\" title=\"7.1 可变类型与不可变类型\"></a>7.1 可变类型与不可变类型</h3><ol>\n<li>序列是以连续的整数为索引，与此不同的是，字典以”关键字”为索引，关键字可以是任意==不可变类型==，通常用字符串<br>或数值。</li>\n<li>字典是 Python 唯一的一个 映射类型，字符串、元组、列表属于序列类型。</li>\n</ol>\n<p>那么如何快速判断一个数据类型 X 是不是可变类型的呢？两种方法：</p>\n<ol>\n<li>麻烦方法：用 id(X) 函数，对 X 进行某种操作，比较操作前后的 id ，如果不一样，则 X 不可变，如果一样，则<br>X 可变。</li>\n<li>便捷方法：用 hash(X) ，只要不报错，证明 X 可被哈希，即不可变，反过来不可被哈希，即可变。</li>\n</ol>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">i &#x3D; 1\nprint(id(i)) # 140732167000896\ni &#x3D; i + 2\nprint(id(i)) # 140732167000960\nl &#x3D; [1, 2]\nprint(id(l)) # 4300825160\nl.append(&#39;Python&#39;)\nprint(id(l)) # 4300825160<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<ol>\n<li>整数 i 在加 1 之后的 id 和之前不一样，因此加完之后的这个 i (虽然名字没变)，但不是加之前的那个 i 了，因此整数是不可变类型。</li>\n<li>列表 l 在附加 ‘Python’ 之后的 id 和之前一样，因此列表是可变类型。</li>\n</ol>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">hash</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Name'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># -9215951442099718823</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">hash</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'Python'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># 823362308207799471</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">hash</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'Python'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\"># TypeError: unhashable type: 'list'</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">hash</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\"># TypeError: unhashable type: 'set'</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<ol>\n<li>数值、字符和元组 都能被哈希，因此它们是不可变类型。</li>\n<li>列表、集合、字典不能被哈希，因此它是可变类型。</li>\n</ol>\n<h3 id=\"7-2-字典的定义\"><a href=\"#7-2-字典的定义\" class=\"headerlink\" title=\"7.2 字典的定义\"></a>7.2 字典的定义</h3><p>字典 是无序的 键:值（ key:value ）对集合，键必须是互不相同的（在同一个字典之内）。</p>\n<ol>\n<li>dict 内部存放的顺序和 key 放入的顺序是没有关系的。</li>\n<li>dict 查找和插入的速度极快，不会随着 key 的增加而增加，但是需要占用大量的内存。</li>\n</ol>\n<p>字典 定义语法为 {元素1, 元素2, …, 元素n}</p>\n<ol>\n<li>其中每一个元素是一个「键值对」— 键:值 ( key:value )</li>\n<li>关键点是「大括号 {}」,「逗号 ,」和「冒号 :」</li>\n<li>大括号 — 把所有元素绑在一起</li>\n<li>逗号 — 将每个键值对分开</li>\n<li>冒号 — 将键和值分开</li>\n</ol>\n<h3 id=\"7-3-创建和访问字典\"><a href=\"#7-3-创建和访问字典\" class=\"headerlink\" title=\"7.3 创建和访问字典\"></a>7.3 创建和访问字典</h3><p><strong>通过字符串或数值作为key 来创建字典。</strong></p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">dic <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span><span class=\"token string\">'李宁'</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'一切皆有可能'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'耐克'</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'Just do it'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'阿迪达斯'</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'Impossible is nothing'</span><span class=\"token punctuation\">&#125;</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'耐克的口号是:'</span><span class=\"token punctuation\">,</span> dic<span class=\"token punctuation\">[</span><span class=\"token string\">'耐克'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\"># 耐克的口号是: Just do it</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n<p>注意：如果我们取的键在字典中不存在，会直接报错KeyError 。</p>\n<p><strong>通过元组作为key 来创建字典，但一般不这样使用。</strong></p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">dic <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"Tom\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Age\"</span><span class=\"token punctuation\">:</span> <span class=\"token number\">12</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">7</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">&#125;</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>dic<span class=\"token punctuation\">)</span> <span class=\"token comment\"># &#123;(1, 2, 3): 'Tom', 'Age': 12, 3: [3, 5, 7]&#125;</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">type</span><span class=\"token punctuation\">(</span>dic<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># &lt;class 'dict'></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n<p><strong>通过构造函数dict 来创建字典。</strong></p>\n<p>dict() -&gt; 创建一个空的字典。</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">dic <span class=\"token operator\">=</span> <span class=\"token builtin\">dict</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\ndic<span class=\"token punctuation\">[</span><span class=\"token string\">'a'</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">1</span>\ndic<span class=\"token punctuation\">[</span><span class=\"token string\">'b'</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">2</span>\ndic<span class=\"token punctuation\">[</span><span class=\"token string\">'c'</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">3</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>dic<span class=\"token punctuation\">)</span>\n<span class=\"token comment\"># &#123;'a': 1, 'b': 2, 'c': 3&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h3 id=\"7-4-字典的内置方法\"><a href=\"#7-4-字典的内置方法\" class=\"headerlink\" title=\"7.4 字典的内置方法\"></a>7.4 字典的内置方法</h3><p><strong>dict.fromkeys(seq[, value])</strong> 用于创建一个新字典，以序列 seq 中元素做字典的键， value 为字典所有键对应的初始值。</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">seq <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token string\">'name'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'age'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'sex'</span><span class=\"token punctuation\">)</span>\ndic1 <span class=\"token operator\">=</span> <span class=\"token builtin\">dict</span><span class=\"token punctuation\">.</span>fromkeys<span class=\"token punctuation\">(</span>seq<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"新的字典为 : %s\"</span> <span class=\"token operator\">%</span> <span class=\"token builtin\">str</span><span class=\"token punctuation\">(</span>dic1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\"># 新的字典为 : &#123;'name': None, 'age': None, 'sex': None&#125;</span>\ndic2 <span class=\"token operator\">=</span> <span class=\"token builtin\">dict</span><span class=\"token punctuation\">.</span>fromkeys<span class=\"token punctuation\">(</span>seq<span class=\"token punctuation\">,</span> <span class=\"token number\">10</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"新的字典为 : %s\"</span> <span class=\"token operator\">%</span> <span class=\"token builtin\">str</span><span class=\"token punctuation\">(</span>dic2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\"># 新的字典为 : &#123;'name': 10, 'age': 10, 'sex': 10&#125;</span>\ndic3 <span class=\"token operator\">=</span> <span class=\"token builtin\">dict</span><span class=\"token punctuation\">.</span>fromkeys<span class=\"token punctuation\">(</span>seq<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token string\">'小马'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'8'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'男'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"新的字典为 : %s\"</span> <span class=\"token operator\">%</span> <span class=\"token builtin\">str</span><span class=\"token punctuation\">(</span>dic3<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\"># 新的字典为 : &#123;'name': ('小马', '8', '男'), 'age': ('小马', '8', '男'), 'sex': ('小马', '8', '男')&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p><strong>dict.keys()</strong> 返回一个可迭代对象，可以使用 list() 来转换为列表，列表为字典中的所有键。</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">dic <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span><span class=\"token string\">'Name'</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'lsgogroup'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'Age'</span><span class=\"token punctuation\">:</span> <span class=\"token number\">7</span><span class=\"token punctuation\">&#125;</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>dic<span class=\"token punctuation\">.</span>keys<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># dict_keys(['Name', 'Age'])</span>\nlst <span class=\"token operator\">=</span> <span class=\"token builtin\">list</span><span class=\"token punctuation\">(</span>dic<span class=\"token punctuation\">.</span>keys<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># 转换为列表</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>lst<span class=\"token punctuation\">)</span> <span class=\"token comment\"># ['Name', 'Age']</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n<p><strong>dict.values()</strong> 返回一个迭代器，可以使用 list() 来转换为列表，列表为字典中的所有值。</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">dic <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span><span class=\"token string\">'Sex'</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'female'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'Age'</span><span class=\"token punctuation\">:</span> <span class=\"token number\">7</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'Name'</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'Zara'</span><span class=\"token punctuation\">&#125;</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"字典所有值为 : \"</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">list</span><span class=\"token punctuation\">(</span>dic<span class=\"token punctuation\">.</span>values<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\"># 字典所有值为 : [7, 'female', 'Zara']</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n<p><strong>dict.items()</strong> 以列表返回可遍历的 (键, 值) 元组数组。</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">dic <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span><span class=\"token string\">'Name'</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'Lsgogroup'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'Age'</span><span class=\"token punctuation\">:</span> <span class=\"token number\">7</span><span class=\"token punctuation\">&#125;</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Value : %s\"</span> <span class=\"token operator\">%</span> dic<span class=\"token punctuation\">.</span>items<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\"># Value : dict_items([('Name', 'Lsgogroup'), ('Age', 7)])</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">tuple</span><span class=\"token punctuation\">(</span>dic<span class=\"token punctuation\">.</span>items<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\"># (('Name', 'Lsgogroup'), ('Age', 7))</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p><strong>dict.get(key, default=None)</strong> 返回指定键的值，如果值不在字典中返回默认值。</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">dic <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span><span class=\"token string\">'Name'</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'Lsgogroup'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'Age'</span><span class=\"token punctuation\">:</span> <span class=\"token number\">27</span><span class=\"token punctuation\">&#125;</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Age 值为 : %s\"</span> <span class=\"token operator\">%</span> dic<span class=\"token punctuation\">.</span>get<span class=\"token punctuation\">(</span><span class=\"token string\">'Age'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># Age 值为 : 27</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Sex 值为 : %s\"</span> <span class=\"token operator\">%</span> dic<span class=\"token punctuation\">.</span>get<span class=\"token punctuation\">(</span><span class=\"token string\">'Sex'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"NA\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># Sex 值为 : NA</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n<p><strong>dict.setdefault(key, default=None)</strong> 和get() 方法 类似, 如果键不存在于字典中，将会添加键并将值设为默认值。</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">dic <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span><span class=\"token string\">'Name'</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'Lsgogroup'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'Age'</span><span class=\"token punctuation\">:</span> <span class=\"token number\">7</span><span class=\"token punctuation\">&#125;</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Age 键的值为 : %s\"</span> <span class=\"token operator\">%</span> dic<span class=\"token punctuation\">.</span>setdefault<span class=\"token punctuation\">(</span><span class=\"token string\">'Age'</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">None</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># Age 键的值为 : 7</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Sex 键的值为 : %s\"</span> <span class=\"token operator\">%</span> dic<span class=\"token punctuation\">.</span>setdefault<span class=\"token punctuation\">(</span><span class=\"token string\">'Sex'</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">None</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># Sex 键的值为 : None</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"新字典为：\"</span><span class=\"token punctuation\">,</span> dic<span class=\"token punctuation\">)</span>\n<span class=\"token comment\"># 新字典为： &#123;'Age': 7, 'Name': 'Lsgogroup', 'Sex': None&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p><strong>key in dict </strong> in操作符用于判断键是否存在于字典中，如果键在字典 dict 里返回true ，否则返回false 。<br>而not in 操作符刚好相反，如果键在字典 dict 里返回false ，否则返回true 。</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">dic <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span><span class=\"token string\">'Name'</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'Lsgogroup'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'Age'</span><span class=\"token punctuation\">:</span> <span class=\"token number\">7</span><span class=\"token punctuation\">&#125;</span>\n<span class=\"token comment\"># in 检测键 Age 是否存在</span>\n<span class=\"token keyword\">if</span> <span class=\"token string\">'Age'</span> <span class=\"token keyword\">in</span> dic<span class=\"token punctuation\">:</span>\n\t<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"键 Age 存在\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span>\n\t<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"键 Age 不存在\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\"># 检测键 Sex 是否存在 </span>\n<span class=\"token keyword\">if</span> <span class=\"token string\">'Sex'</span> <span class=\"token keyword\">in</span> dic<span class=\"token punctuation\">:</span>\n\t<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"键 Sex 存在\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span>\n\t<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"键 Sex 不存在\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\"># not in 检测键 Age 是否存在</span>\n<span class=\"token keyword\">if</span> <span class=\"token string\">'Age'</span> <span class=\"token keyword\">not</span> <span class=\"token keyword\">in</span> dic<span class=\"token punctuation\">:</span>\n\t<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"键 Age 不存在\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span>\n\t<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"键 Age 存在\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\"># 键 Age 存在</span>\n<span class=\"token comment\"># 键 Sex 不存在</span>\n<span class=\"token comment\"># 键 Age 存在</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p><strong>dict.pop(key[,default])</strong> 删除字典给定键 key 所对应的值，返回值为被删除的值。key 值必须给出。若key不存在，则返回 default 值。</p>\n<p><strong>del dict[key]</strong> 删除字典给定键 key 所对应的值。</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">dic1 <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span><span class=\"token number\">1</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"a\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">&#125;</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>dic1<span class=\"token punctuation\">.</span>pop<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> dic1<span class=\"token punctuation\">)</span> <span class=\"token comment\"># a &#123;2: [1, 2]&#125;</span>\n<span class=\"token comment\"># 设置默认值，必须添加，否则报错</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>dic1<span class=\"token punctuation\">.</span>pop<span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"nokey\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> dic1<span class=\"token punctuation\">)</span> <span class=\"token comment\"># nokey &#123;2: [1, 2]&#125;</span>\n<span class=\"token keyword\">del</span> dic1<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>dic1<span class=\"token punctuation\">)</span> <span class=\"token comment\"># &#123;&#125; </span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p><strong>dict.popitem()</strong> 随机返回并删除字典中的一对键和值，如果字典已经为空，却调用了此方法，就报出KeyError异常。</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">dic1 <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span><span class=\"token number\">1</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"a\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">&#125;</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>dic1<span class=\"token punctuation\">.</span>popitem<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># (1, 'a')</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>dic1<span class=\"token punctuation\">)</span> <span class=\"token comment\"># &#123;2: [1, 2]&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n<p><strong>dict.clear()</strong> 用于删除字典内所有元素。</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">dic <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span><span class=\"token string\">'Name'</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'Zara'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'Age'</span><span class=\"token punctuation\">:</span> <span class=\"token number\">7</span><span class=\"token punctuation\">&#125;</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"字典长度 : %d\"</span> <span class=\"token operator\">%</span> <span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>dic<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># 字典长度 : 2</span>\n<span class=\"token builtin\">dict</span><span class=\"token punctuation\">.</span>clear<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"字典删除后长度 : %d\"</span> <span class=\"token operator\">%</span> <span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>dic<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># 字典删除后长度 : 0</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n<p><strong>dict.copy()</strong> 返回一个字典的浅复制。</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">dic1 <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span><span class=\"token string\">'Name'</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'Lsgogroup'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'Age'</span><span class=\"token punctuation\">:</span> <span class=\"token number\">7</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'Class'</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'First'</span><span class=\"token punctuation\">&#125;</span>\ndic2 <span class=\"token operator\">=</span> dic1<span class=\"token punctuation\">.</span>copy<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"新复制的字典为 : \"</span><span class=\"token punctuation\">,</span> dic2<span class=\"token punctuation\">)</span>\n<span class=\"token comment\"># 新复制的字典为 : &#123;'Age': 7, 'Name': 'Lsgogroup', 'Class': 'First'&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n<p><strong>dict.update(dict2)</strong> 把字典参数 dict2 的 key:value 对 更新到字典 dict 里。</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">dic <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span><span class=\"token string\">'Name'</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'Lsgogroup'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'Age'</span><span class=\"token punctuation\">:</span> <span class=\"token number\">7</span><span class=\"token punctuation\">&#125;</span>\ndic2 <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span><span class=\"token string\">'Sex'</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'female'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'Age'</span><span class=\"token punctuation\">:</span> <span class=\"token number\">8</span><span class=\"token punctuation\">&#125;</span>\ndic<span class=\"token punctuation\">.</span>update<span class=\"token punctuation\">(</span>dic2<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"更新字典 dict : \"</span><span class=\"token punctuation\">,</span> dic<span class=\"token punctuation\">)</span>\n<span class=\"token comment\"># 更新字典 dict : &#123;'Sex': 'female', 'Age': 8, 'Name': 'Lsgogroup'&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h2 id=\"8-集合\"><a href=\"#8-集合\" class=\"headerlink\" title=\"8 集合\"></a>8 集合</h2><p>python 中set 与dict 类似，也是一组key 的集合，但不存储value 。由于key 不能重复，所以，在set 中，没有重复的key 。</p>\n<p>注意， key 为不可变类型，即可哈希的值。</p>\n<h3 id=\"8-1-集合的创建\"><a href=\"#8-1-集合的创建\" class=\"headerlink\" title=\"8.1 集合的创建\"></a>8.1 集合的创建</h3><ol>\n<li>先创建对象再加入元素。</li>\n<li>在创建空集合的时候只能使用s = set() ，因为s = {} 创建的是空字典。</li>\n</ol>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">basket <span class=\"token operator\">=</span> <span class=\"token builtin\">set</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\nbasket<span class=\"token punctuation\">.</span>add<span class=\"token punctuation\">(</span><span class=\"token string\">'apple'</span><span class=\"token punctuation\">)</span>\nbasket<span class=\"token punctuation\">.</span>add<span class=\"token punctuation\">(</span><span class=\"token string\">'banana'</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>basket<span class=\"token punctuation\">)</span> <span class=\"token comment\"># &#123;'banana', 'apple'&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n<ol>\n<li>直接把一堆元素用花括号括起来{元素1, 元素2, …, 元素n} 。</li>\n<li>重复元素在set 中会被自动被过滤。</li>\n</ol>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">basket <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span><span class=\"token string\">'apple'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'orange'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'apple'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'pear'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'orange'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'banana'</span><span class=\"token punctuation\">&#125;</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>basket<span class=\"token punctuation\">)</span> <span class=\"token comment\"># &#123;'banana', 'apple', 'pear', 'orange'&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n<ol>\n<li>使用set(value) 工厂函数，把列表或元组转换成集合。</li>\n</ol>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">a <span class=\"token operator\">=</span> <span class=\"token builtin\">set</span><span class=\"token punctuation\">(</span><span class=\"token string\">'abracadabra'</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span>\n<span class=\"token comment\"># &#123;'r', 'b', 'd', 'c', 'a'&#125;</span>\nb <span class=\"token operator\">=</span> <span class=\"token builtin\">set</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Google\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Lsgogroup\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Taobao\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Taobao\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>b<span class=\"token punctuation\">)</span>\n<span class=\"token comment\"># &#123;'Taobao', 'Lsgogroup', 'Google'&#125;</span>\nc <span class=\"token operator\">=</span> <span class=\"token builtin\">set</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token string\">\"Google\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Lsgogroup\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Taobao\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Google\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>c<span class=\"token punctuation\">)</span>\n<span class=\"token comment\"># &#123;'Taobao', 'Lsgogroup', 'Google'&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>由于 set 存储的是无序集合，所以我们不可以为集合创建索引或执行切片(slice)操作，也没有键(keys)可用来获取集合中元素的值，但是可以判断一个元素是否在集合中。</p>\n<h3 id=\"8-2-访问集合中的值\"><a href=\"#8-2-访问集合中的值\" class=\"headerlink\" title=\"8.2 访问集合中的值\"></a>8.2 访问集合中的值</h3><ol>\n<li>可以使用len() 內建函数得到集合的大小。</li>\n</ol>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">thisset <span class=\"token operator\">=</span> <span class=\"token builtin\">set</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token string\">'Google'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'Baidu'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'Taobao'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>thisset<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># 3</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n<ol>\n<li>可以使用for 把集合中的数据一个个读取出来。</li>\n</ol>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">thisset <span class=\"token operator\">=</span> <span class=\"token builtin\">set</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token string\">'Google'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'Baidu'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'Taobao'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">for</span> item <span class=\"token keyword\">in</span> thisset<span class=\"token punctuation\">:</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>item<span class=\"token punctuation\">)</span>\n<span class=\"token comment\"># Baidu</span>\n<span class=\"token comment\"># Google</span>\n<span class=\"token comment\"># Taobao</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<ol>\n<li>可以通过in 或not in 判断一个元素是否在集合中已经存在</li>\n</ol>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">thisset <span class=\"token operator\">=</span> <span class=\"token builtin\">set</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token string\">'Google'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'Baidu'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'Taobao'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Taobao'</span> <span class=\"token keyword\">in</span> thisset<span class=\"token punctuation\">)</span> <span class=\"token comment\"># True</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Facebook'</span> <span class=\"token keyword\">not</span> <span class=\"token keyword\">in</span> thisset<span class=\"token punctuation\">)</span> <span class=\"token comment\"># True</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n<h3 id=\"8-3-集合的内置方法\"><a href=\"#8-3-集合的内置方法\" class=\"headerlink\" title=\"8.3 集合的内置方法\"></a>8.3 集合的内置方法</h3><ol>\n<li>set.add(elmnt) 用于给集合添加元素，如果添加的元素在集合中已存在，则不执行任何操作。</li>\n</ol>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">fruits <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span><span class=\"token string\">\"apple\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"banana\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"cherry\"</span><span class=\"token punctuation\">&#125;</span>\nfruits<span class=\"token punctuation\">.</span>add<span class=\"token punctuation\">(</span><span class=\"token string\">\"orange\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>fruits<span class=\"token punctuation\">)</span>\n<span class=\"token comment\"># &#123;'orange', 'cherry', 'banana', 'apple'&#125;</span>\nfruits<span class=\"token punctuation\">.</span>add<span class=\"token punctuation\">(</span><span class=\"token string\">\"apple\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>fruits<span class=\"token punctuation\">)</span>\n<span class=\"token comment\"># &#123;'orange', 'cherry', 'banana', 'apple'&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<ol>\n<li>set.update(set) 用于修改当前集合，可以添加新的元素或集合到当前集合中，如果添加的元素在集合中已存在，则该元素只会出现一次，重复的会忽略。</li>\n</ol>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">x <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span><span class=\"token string\">\"apple\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"banana\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"cherry\"</span><span class=\"token punctuation\">&#125;</span>\ny <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span><span class=\"token string\">\"google\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"baidu\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"apple\"</span><span class=\"token punctuation\">&#125;</span>\nx<span class=\"token punctuation\">.</span>update<span class=\"token punctuation\">(</span>y<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span>\n<span class=\"token comment\"># &#123;'cherry', 'banana', 'apple', 'google', 'baidu'&#125;</span>\ny<span class=\"token punctuation\">.</span>update<span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token string\">\"lsgo\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"dreamtech\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>y<span class=\"token punctuation\">)</span>\n<span class=\"token comment\"># &#123;'lsgo', 'baidu', 'dreamtech', 'apple', 'google'&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<ol>\n<li>set.remove(item) 用于移除集合中的指定元素。如果元素不存在，则会发生错误。</li>\n</ol>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">fruits <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span><span class=\"token string\">\"apple\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"banana\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"cherry\"</span><span class=\"token punctuation\">&#125;</span>\nfruits<span class=\"token punctuation\">.</span>remove<span class=\"token punctuation\">(</span><span class=\"token string\">\"banana\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>fruits<span class=\"token punctuation\">)</span> <span class=\"token comment\"># &#123;'apple', 'cherry'&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n<ol>\n<li>set.discard(value) 用于移除指定的集合元素。remove() 方法在移除一个不存在的元素时会发生错误，而discard() 方法不会。</li>\n</ol>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">fruits <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span><span class=\"token string\">\"apple\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"banana\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"cherry\"</span><span class=\"token punctuation\">&#125;</span>\nfruits<span class=\"token punctuation\">.</span>discard<span class=\"token punctuation\">(</span><span class=\"token string\">\"banana\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>fruits<span class=\"token punctuation\">)</span> <span class=\"token comment\"># &#123;'apple', 'cherry'&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n<ol>\n<li>set.pop() 用于随机移除一个元素。</li>\n</ol>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">fruits <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span><span class=\"token string\">\"apple\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"banana\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"cherry\"</span><span class=\"token punctuation\">&#125;</span>\nx <span class=\"token operator\">=</span> fruits<span class=\"token punctuation\">.</span>pop<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>fruits<span class=\"token punctuation\">)</span> <span class=\"token comment\"># &#123;'cherry', 'apple'&#125;</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span> <span class=\"token comment\"># banana</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n<p>由于 set 是无序和无重复元素的集合，所以两个或多个 set 可以做数学意义上的集合操作。</p>\n<ol>\n<li>set.intersection(set1, set2 …) 返回两个集合的交集。</li>\n<li>set1 &amp; set2 返回两个集合的交集。</li>\n<li>set.intersection_update(set1, set2 …) 交集，在原始的集合上移除不重叠的元素。</li>\n</ol>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">a <span class=\"token operator\">=</span> <span class=\"token builtin\">set</span><span class=\"token punctuation\">(</span><span class=\"token string\">'abracadabra'</span><span class=\"token punctuation\">)</span>\nb <span class=\"token operator\">=</span> <span class=\"token builtin\">set</span><span class=\"token punctuation\">(</span><span class=\"token string\">'alacazam'</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span> <span class=\"token comment\"># &#123;'r', 'a', 'c', 'b', 'd'&#125;</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>b<span class=\"token punctuation\">)</span> <span class=\"token comment\"># &#123;'c', 'a', 'l', 'm', 'z'&#125;</span>\nc <span class=\"token operator\">=</span> a<span class=\"token punctuation\">.</span>intersection<span class=\"token punctuation\">(</span>b<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>c<span class=\"token punctuation\">)</span> <span class=\"token comment\"># &#123;'a', 'c'&#125;</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>a <span class=\"token operator\">&amp;</span> b<span class=\"token punctuation\">)</span> <span class=\"token comment\"># &#123;'c', 'a'&#125;</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span> <span class=\"token comment\"># &#123;'a', 'r', 'c', 'b', 'd'&#125;</span>\na<span class=\"token punctuation\">.</span>intersection_update<span class=\"token punctuation\">(</span>b<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span> <span class=\"token comment\"># &#123;'a', 'c'&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<ol>\n<li>set.union(set1, set2…) 返回两个集合的并集。</li>\n<li>set1 | set2 返回两个集合的并集。</li>\n</ol>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">a <span class=\"token operator\">=</span> <span class=\"token builtin\">set</span><span class=\"token punctuation\">(</span><span class=\"token string\">'abracadabra'</span><span class=\"token punctuation\">)</span>\nb <span class=\"token operator\">=</span> <span class=\"token builtin\">set</span><span class=\"token punctuation\">(</span><span class=\"token string\">'alacazam'</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span> <span class=\"token comment\"># &#123;'r', 'a', 'c', 'b', 'd'&#125;</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>b<span class=\"token punctuation\">)</span> <span class=\"token comment\"># &#123;'c', 'a', 'l', 'm', 'z'&#125;</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>a <span class=\"token operator\">|</span> b<span class=\"token punctuation\">)</span> <span class=\"token comment\"># &#123;'l', 'd', 'm', 'b', 'a', 'r', 'z', 'c'&#125;</span>\nc <span class=\"token operator\">=</span> a<span class=\"token punctuation\">.</span>union<span class=\"token punctuation\">(</span>b<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>c<span class=\"token punctuation\">)</span> <span class=\"token comment\"># &#123;'c', 'a', 'd', 'm', 'r', 'b', 'z', 'l'&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<ol>\n<li>set.difference(set) 返回集合的差集。</li>\n<li>set1 - set2 返回集合的差集。</li>\n<li>set.difference_update(set) 集合的差集，直接在原来的集合中移除元素，没有返回值。</li>\n</ol>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">a <span class=\"token operator\">=</span> <span class=\"token builtin\">set</span><span class=\"token punctuation\">(</span><span class=\"token string\">'abracadabra'</span><span class=\"token punctuation\">)</span>\nb <span class=\"token operator\">=</span> <span class=\"token builtin\">set</span><span class=\"token punctuation\">(</span><span class=\"token string\">'alacazam'</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span> <span class=\"token comment\"># &#123;'r', 'a', 'c', 'b', 'd'&#125;</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>b<span class=\"token punctuation\">)</span> <span class=\"token comment\"># &#123;'c', 'a', 'l', 'm', 'z'&#125;</span>\nc <span class=\"token operator\">=</span> a<span class=\"token punctuation\">.</span>difference<span class=\"token punctuation\">(</span>b<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>c<span class=\"token punctuation\">)</span> <span class=\"token comment\"># &#123;'b', 'd', 'r'&#125;</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>a <span class=\"token operator\">-</span> b<span class=\"token punctuation\">)</span> <span class=\"token comment\"># &#123;'d', 'b', 'r'&#125;</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span> <span class=\"token comment\"># &#123;'r', 'd', 'c', 'a', 'b'&#125;</span>\na<span class=\"token punctuation\">.</span>difference_update<span class=\"token punctuation\">(</span>b<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span> <span class=\"token comment\"># &#123;'d', 'r', 'b'&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<ol>\n<li>set.symmetric_difference(set) 返回集合的异或。</li>\n<li>set1 ^ set2 返回集合的异或。</li>\n<li>set.symmetric_difference_update(set) 移除当前集合中在另外一个指定集合相同的元素，并将另外一个指定集合中不同的元素插入到当前集合中。</li>\n</ol>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">a <span class=\"token operator\">=</span> <span class=\"token builtin\">set</span><span class=\"token punctuation\">(</span><span class=\"token string\">'abracadabra'</span><span class=\"token punctuation\">)</span>\nb <span class=\"token operator\">=</span> <span class=\"token builtin\">set</span><span class=\"token punctuation\">(</span><span class=\"token string\">'alacazam'</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span> <span class=\"token comment\"># &#123;'r', 'a', 'c', 'b', 'd'&#125;</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>b<span class=\"token punctuation\">)</span> <span class=\"token comment\"># &#123;'c', 'a', 'l', 'm', 'z'&#125;</span>\nc <span class=\"token operator\">=</span> a<span class=\"token punctuation\">.</span>symmetric_difference<span class=\"token punctuation\">(</span>b<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>c<span class=\"token punctuation\">)</span> <span class=\"token comment\"># &#123;'m', 'r', 'l', 'b', 'z', 'd'&#125;</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>a <span class=\"token operator\">^</span> b<span class=\"token punctuation\">)</span> <span class=\"token comment\"># &#123;'m', 'r', 'l', 'b', 'z', 'd'&#125;</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span> <span class=\"token comment\"># &#123;'r', 'd', 'c', 'a', 'b'&#125;</span>\na<span class=\"token punctuation\">.</span>symmetric_difference_update<span class=\"token punctuation\">(</span>b<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span> <span class=\"token comment\"># &#123;'r', 'b', 'm', 'l', 'z', 'd'&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<ol>\n<li>set.issubset(set) 判断集合是不是被其他集合包含，如果是则返回 True，否则返回 False。</li>\n<li>set1 &lt;= set2 判断集合是不是被其他集合包含，如果是则返回 True，否则返回 False。</li>\n</ol>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">x <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span><span class=\"token string\">\"a\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"b\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"c\"</span><span class=\"token punctuation\">&#125;</span>\ny <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span><span class=\"token string\">\"f\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"e\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"d\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"c\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"b\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"a\"</span><span class=\"token punctuation\">&#125;</span>\nz <span class=\"token operator\">=</span> x<span class=\"token punctuation\">.</span>issubset<span class=\"token punctuation\">(</span>y<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>z<span class=\"token punctuation\">)</span> <span class=\"token comment\"># True</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>x <span class=\"token operator\">&lt;=</span> y<span class=\"token punctuation\">)</span> <span class=\"token comment\"># True</span>\nx <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span><span class=\"token string\">\"a\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"b\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"c\"</span><span class=\"token punctuation\">&#125;</span>\ny <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span><span class=\"token string\">\"f\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"e\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"d\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"c\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"b\"</span><span class=\"token punctuation\">&#125;</span>\nz <span class=\"token operator\">=</span> x<span class=\"token punctuation\">.</span>issubset<span class=\"token punctuation\">(</span>y<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>z<span class=\"token punctuation\">)</span> <span class=\"token comment\"># False</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>x <span class=\"token operator\">&lt;=</span> y<span class=\"token punctuation\">)</span> <span class=\"token comment\"># False</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<ol>\n<li>set.issuperset(set) 用于判断集合是不是包含其他集合，如果是则返回 True，否则返回 False。</li>\n<li>set1 &gt;= set2 判断集合是不是包含其他集合，如果是则返回 True，否则返回 False。</li>\n</ol>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">x <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span><span class=\"token string\">\"f\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"e\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"d\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"c\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"b\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"a\"</span><span class=\"token punctuation\">&#125;</span>\ny <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span><span class=\"token string\">\"a\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"b\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"c\"</span><span class=\"token punctuation\">&#125;</span>\nz <span class=\"token operator\">=</span> x<span class=\"token punctuation\">.</span>issuperset<span class=\"token punctuation\">(</span>y<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>z<span class=\"token punctuation\">)</span> <span class=\"token comment\"># True</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>x <span class=\"token operator\">>=</span> y<span class=\"token punctuation\">)</span> <span class=\"token comment\"># True</span>\nx <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span><span class=\"token string\">\"f\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"e\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"d\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"c\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"b\"</span><span class=\"token punctuation\">&#125;</span>\ny <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span><span class=\"token string\">\"a\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"b\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"c\"</span><span class=\"token punctuation\">&#125;</span>\nz <span class=\"token operator\">=</span> x<span class=\"token punctuation\">.</span>issuperset<span class=\"token punctuation\">(</span>y<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>z<span class=\"token punctuation\">)</span> <span class=\"token comment\"># False</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>x <span class=\"token operator\">>=</span> y<span class=\"token punctuation\">)</span> <span class=\"token comment\"># False</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<ol>\n<li>set.isdisjoint(set) 用于判断两个集合是不是不相交，如果是返回 True，否则返回 False。</li>\n</ol>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">x <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span><span class=\"token string\">\"f\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"e\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"d\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"c\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"b\"</span><span class=\"token punctuation\">&#125;</span>\ny <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span><span class=\"token string\">\"a\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"b\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"c\"</span><span class=\"token punctuation\">&#125;</span>\nz <span class=\"token operator\">=</span> x<span class=\"token punctuation\">.</span>isdisjoint<span class=\"token punctuation\">(</span>y<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>z<span class=\"token punctuation\">)</span> <span class=\"token comment\"># False</span>\nx <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span><span class=\"token string\">\"f\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"e\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"d\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"m\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"g\"</span><span class=\"token punctuation\">&#125;</span>\ny <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span><span class=\"token string\">\"a\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"b\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"c\"</span><span class=\"token punctuation\">&#125;</span>\nz <span class=\"token operator\">=</span> x<span class=\"token punctuation\">.</span>isdisjoint<span class=\"token punctuation\">(</span>y<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>z<span class=\"token punctuation\">)</span> <span class=\"token comment\"># True</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h3 id=\"8-4-集合的转换\"><a href=\"#8-4-集合的转换\" class=\"headerlink\" title=\"8.4 集合的转换\"></a>8.4 集合的转换</h3><pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">se <span class=\"token operator\">=</span> <span class=\"token builtin\">set</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span><span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\nli <span class=\"token operator\">=</span> <span class=\"token builtin\">list</span><span class=\"token punctuation\">(</span>se<span class=\"token punctuation\">)</span>\ntu <span class=\"token operator\">=</span> <span class=\"token builtin\">tuple</span><span class=\"token punctuation\">(</span>se<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>se<span class=\"token punctuation\">,</span> <span class=\"token builtin\">type</span><span class=\"token punctuation\">(</span>se<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># &#123;0, 1, 2, 3&#125; &lt;class 'set'></span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>li<span class=\"token punctuation\">,</span> <span class=\"token builtin\">type</span><span class=\"token punctuation\">(</span>li<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># [0, 1, 2, 3] &lt;class 'list'></span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>tu<span class=\"token punctuation\">,</span> <span class=\"token builtin\">type</span><span class=\"token punctuation\">(</span>tu<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># (0, 1, 2, 3) &lt;class 'tuple'></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h3 id=\"8-5-不可变集合\"><a href=\"#8-5-不可变集合\" class=\"headerlink\" title=\"8.5 不可变集合\"></a>8.5 不可变集合</h3><p>Python 提供了不能改变元素的集合的实现版本，即不能增加或删除元素，类型名叫frozenset 。需要注意的是frozenset 仍然可以进行集合操作，只是不能用带有update 的方法。</p>\n<ol>\n<li>frozenset([iterable]) 返回一个冻结的集合，冻结后集合不能再添加或删除任何元素。</li>\n</ol>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">a <span class=\"token operator\">=</span> <span class=\"token builtin\">frozenset</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># 生成一个新的不可变集合</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span>\n<span class=\"token comment\"># frozenset(&#123;0, 1, 2, 3, 4, 5, 6, 7, 8, 9&#125;)</span>\nb <span class=\"token operator\">=</span> <span class=\"token builtin\">frozenset</span><span class=\"token punctuation\">(</span><span class=\"token string\">'lsgogroup'</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>b<span class=\"token punctuation\">)</span>\n<span class=\"token comment\"># frozenset(&#123;'g', 's', 'p', 'r', 'u', 'o', 'l'&#125;)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h2 id=\"9-序列\"><a href=\"#9-序列\" class=\"headerlink\" title=\"9 序列\"></a>9 序列</h2><h3 id=\"针对序列的内置函数\"><a href=\"#针对序列的内置函数\" class=\"headerlink\" title=\"针对序列的内置函数\"></a><strong>针对序列的内置函数</strong></h3><ol>\n<li>list(sub) 把一个可迭代对象转换为列表。</li>\n</ol>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">a <span class=\"token operator\">=</span> <span class=\"token builtin\">list</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span> <span class=\"token comment\"># []</span>\nb <span class=\"token operator\">=</span> <span class=\"token string\">'I Love LsgoGroup'</span>\nb <span class=\"token operator\">=</span> <span class=\"token builtin\">list</span><span class=\"token punctuation\">(</span>b<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>b<span class=\"token punctuation\">)</span>\n<span class=\"token comment\"># ['I', ' ', 'L', 'o', 'v', 'e', ' ', 'L', 's', 'g', 'o', 'G', 'r', 'o', 'u', 'p']</span>\nc <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">8</span><span class=\"token punctuation\">)</span>\nc <span class=\"token operator\">=</span> <span class=\"token builtin\">list</span><span class=\"token punctuation\">(</span>c<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>c<span class=\"token punctuation\">)</span> <span class=\"token comment\"># [1, 1, 2, 3, 5, 8]</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<ol>\n<li>tuple(sub) 把一个可迭代对象转换为元组。</li>\n</ol>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">a <span class=\"token operator\">=</span> <span class=\"token builtin\">tuple</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span> <span class=\"token comment\"># ()</span>\nb <span class=\"token operator\">=</span> <span class=\"token string\">'I Love LsgoGroup'</span>\nb <span class=\"token operator\">=</span> <span class=\"token builtin\">tuple</span><span class=\"token punctuation\">(</span>b<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>b<span class=\"token punctuation\">)</span>\n<span class=\"token comment\"># ('I', ' ', 'L', 'o', 'v', 'e', ' ', 'L', 's', 'g', 'o', 'G', 'r', 'o', 'u', 'p')</span>\nc <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">8</span><span class=\"token punctuation\">]</span>\nc <span class=\"token operator\">=</span> <span class=\"token builtin\">tuple</span><span class=\"token punctuation\">(</span>c<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>c<span class=\"token punctuation\">)</span> <span class=\"token comment\"># (1, 1, 2, 3, 5, 8)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<ol>\n<li>str(obj) 把obj对象转换为字符串</li>\n</ol>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">a <span class=\"token operator\">=</span> <span class=\"token number\">123</span>\na <span class=\"token operator\">=</span> <span class=\"token builtin\">str</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span> <span class=\"token comment\"># 123</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n<ol>\n<li>len(s) 返回对象（字符、列表、元组等）长度或元素个数。<br>a. s — 对象。</li>\n</ol>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">a <span class=\"token operator\">=</span> <span class=\"token builtin\">list</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># 0</span>\nb <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token string\">'I'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">' '</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'L'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'o'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'v'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'e'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">' '</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'L'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'s'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'g'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'o'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'G'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'r'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'o'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'u'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'p'</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># 16</span>\nc <span class=\"token operator\">=</span> <span class=\"token string\">'I Love LsgoGroup'</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>c<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># 16</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<ol>\n<li>max(sub) 返回序列或者参数集合中的最大值</li>\n</ol>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">max</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># 5</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">max</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token operator\">-</span><span class=\"token number\">8</span><span class=\"token punctuation\">,</span> <span class=\"token number\">99</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">7</span><span class=\"token punctuation\">,</span> <span class=\"token number\">83</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># 99</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">max</span><span class=\"token punctuation\">(</span><span class=\"token string\">'IloveLsgoGroup'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># v</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n<ol>\n<li>min(sub) 返回序列或参数集合中的最小值</li>\n</ol>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">min</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># 1</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">min</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token operator\">-</span><span class=\"token number\">8</span><span class=\"token punctuation\">,</span> <span class=\"token number\">99</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">7</span><span class=\"token punctuation\">,</span> <span class=\"token number\">83</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># -8</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">min</span><span class=\"token punctuation\">(</span><span class=\"token string\">'IloveLsgoGroup'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># G</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n<ol>\n<li>sum(iterable[, start=0]) 返回序列iterable 与可选参数start 的总和。</li>\n</ol>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">sum</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">7</span><span class=\"token punctuation\">,</span> <span class=\"token number\">9</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># 25</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">sum</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">7</span><span class=\"token punctuation\">,</span> <span class=\"token number\">9</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># 35</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">sum</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">7</span><span class=\"token punctuation\">,</span> <span class=\"token number\">9</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># 25</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">sum</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">7</span><span class=\"token punctuation\">,</span> <span class=\"token number\">9</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">20</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># 45</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n<ol>\n<li><p>sorted(iterable, key=None, reverse=False) 对所有可迭代的对象进行排序操作。<br>a. iterable — 可迭代对象。<br>  b. key — 主要是用来进行比较的元素，只有一个参数，具体的函数的参数就是取自于可迭代对象中，指定可迭代<br>  对象中的一个元素来进行排序。<br>  c. reverse — 排序规则， reverse = True 降序 ， reverse = False 升序（默认）。</p>\n<p>d. 返回重新排序的列表。</p>\n</li>\n</ol>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">x <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token operator\">-</span><span class=\"token number\">8</span><span class=\"token punctuation\">,</span> <span class=\"token number\">99</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">7</span><span class=\"token punctuation\">,</span> <span class=\"token number\">83</span><span class=\"token punctuation\">]</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">sorted</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># [-8, 3, 7, 83, 99]</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">sorted</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">,</span> reverse<span class=\"token operator\">=</span><span class=\"token boolean\">True</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># [99, 83, 7, 3, -8]</span>\nt <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span><span class=\"token string\">\"age\"</span><span class=\"token punctuation\">:</span> <span class=\"token number\">20</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"name\"</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"a\"</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">&#123;</span><span class=\"token string\">\"age\"</span><span class=\"token punctuation\">:</span> <span class=\"token number\">25</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"name\"</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"b\"</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">&#123;</span><span class=\"token string\">\"age\"</span><span class=\"token punctuation\">:</span> <span class=\"token number\">10</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"name\"</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"c\"</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span>\nx <span class=\"token operator\">=</span> <span class=\"token builtin\">sorted</span><span class=\"token punctuation\">(</span>t<span class=\"token punctuation\">,</span> key<span class=\"token operator\">=</span><span class=\"token keyword\">lambda</span> a<span class=\"token punctuation\">:</span> a<span class=\"token punctuation\">[</span><span class=\"token string\">\"age\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span>\n<span class=\"token comment\"># [&#123;'age': 10, 'name': 'c'&#125;, &#123;'age': 20, 'name': 'a'&#125;, &#123;'age': 25, 'name': 'b'&#125;]</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<ol>\n<li>reversed(seq) 函数返回一个反转的迭代器。<br>a. seq — 要转换的序列，可以是 tuple, string, list 或 range。</li>\n</ol>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">s <span class=\"token operator\">=</span> <span class=\"token string\">'lsgogroup'</span>\nx <span class=\"token operator\">=</span> <span class=\"token builtin\">reversed</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">type</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># &lt;class 'reversed'></span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span> <span class=\"token comment\"># &lt;reversed object at 0x000002507E8EC2C8></span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">list</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\"># ['p', 'u', 'o', 'r', 'g', 'o', 'g', 's', 'l']</span>\nt <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token string\">'l'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'s'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'g'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'o'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'g'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'r'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'o'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'u'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'p'</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">list</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">reversed</span><span class=\"token punctuation\">(</span>t<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\"># ['p', 'u', 'o', 'r', 'g', 'o', 'g', 's', 'l']</span>\nr <span class=\"token operator\">=</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">9</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">list</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">reversed</span><span class=\"token punctuation\">(</span>r<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\"># [8, 7, 6, 5]</span>\nx <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token operator\">-</span><span class=\"token number\">8</span><span class=\"token punctuation\">,</span> <span class=\"token number\">99</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">7</span><span class=\"token punctuation\">,</span> <span class=\"token number\">83</span><span class=\"token punctuation\">]</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">list</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">reversed</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\"># [83, 7, 3, 99, -8]</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<ol>\n<li>enumerate(sequence, [start=0])</li>\n</ol>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">seasons <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'Spring'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'Summer'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'Fall'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'Winter'</span><span class=\"token punctuation\">]</span>\na <span class=\"token operator\">=</span> <span class=\"token builtin\">list</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">enumerate</span><span class=\"token punctuation\">(</span>seasons<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span>\n<span class=\"token comment\"># [(0, 'Spring'), (1, 'Summer'), (2, 'Fall'), (3, 'Winter')]</span>\nb <span class=\"token operator\">=</span> <span class=\"token builtin\">list</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">enumerate</span><span class=\"token punctuation\">(</span>seasons<span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>b<span class=\"token punctuation\">)</span>\n<span class=\"token comment\"># [(1, 'Spring'), (2, 'Summer'), (3, 'Fall'), (4, 'Winter')]</span>\n<span class=\"token keyword\">for</span> i<span class=\"token punctuation\">,</span> element <span class=\"token keyword\">in</span> a<span class=\"token punctuation\">:</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'&#123;0&#125;,&#123;1&#125;'</span><span class=\"token punctuation\">.</span><span class=\"token builtin\">format</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">,</span> element<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<ol>\n<li>zip(iter1 [,iter2 […]])<br>a. 用于将可迭代的对象作为参数，将对象中对应的元素打包成一个个元组，然后返回由这些元组组成的对象，这样做的好处是节约了不少的内存。<br>b. 我们可以使用 list() 转换来输出列表。<br>c. 如果各个迭代器的元素个数不一致，则返回列表长度与最短的对象相同，利用 * 号操作符，可以将元组解压为列表。</li>\n</ol>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">a <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">]</span>\nb <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">6</span><span class=\"token punctuation\">]</span>\nc <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">6</span><span class=\"token punctuation\">,</span> <span class=\"token number\">7</span><span class=\"token punctuation\">,</span> <span class=\"token number\">8</span><span class=\"token punctuation\">]</span>\nzipped <span class=\"token operator\">=</span> <span class=\"token builtin\">zip</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>zipped<span class=\"token punctuation\">)</span> <span class=\"token comment\"># &lt;zip object at 0x000000C5D89EDD88></span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">list</span><span class=\"token punctuation\">(</span>zipped<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># [(1, 4), (2, 5), (3, 6)]</span>\nzipped <span class=\"token operator\">=</span> <span class=\"token builtin\">zip</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span> c<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">list</span><span class=\"token punctuation\">(</span>zipped<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># [(1, 4), (2, 5), (3, 6)]</span>\na1<span class=\"token punctuation\">,</span> a2 <span class=\"token operator\">=</span> <span class=\"token builtin\">zip</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span><span class=\"token builtin\">zip</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">list</span><span class=\"token punctuation\">(</span>a1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># [1, 2, 3]</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">list</span><span class=\"token punctuation\">(</span>a2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># [4, 5, 6]</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h2 id=\"10-函数与Lambda表达式\"><a href=\"#10-函数与Lambda表达式\" class=\"headerlink\" title=\"10 函数与Lambda表达式\"></a>10 函数与Lambda表达式</h2><h3 id=\"10-1-函数\"><a href=\"#10-1-函数\" class=\"headerlink\" title=\"10.1 函数\"></a>10.1 函数</h3><h4 id=\"函数的定义\"><a href=\"#函数的定义\" class=\"headerlink\" title=\"函数的定义\"></a>函数的定义</h4><ol>\n<li>函数以def 关键词开头，后接函数名和圆括号()。</li>\n<li>函数执行的代码以冒号起始，并且缩进。</li>\n<li>return [表达式] 结束函数，选择性地返回一个值给调用方。不带表达式的return相当于返回None 。</li>\n</ol>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token keyword\">def</span> <span class=\"token function\">functionname</span><span class=\"token punctuation\">(</span>parameters<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n<span class=\"token string\">\"函数_文档字符串\"</span>\nfunction_suite\n<span class=\"token keyword\">return</span> <span class=\"token punctuation\">[</span>expression<span class=\"token punctuation\">]</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n<h4 id=\"函数参数\"><a href=\"#函数参数\" class=\"headerlink\" title=\"函数参数\"></a>函数参数</h4><p>Python 的函数具有非常灵活多样的参数形态，既可以实现简单的调用，又可以传入非常复杂的参数。从简到繁的参数形态<br>如下：</p>\n<ol>\n<li><p>位置参数 (positional argument)</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token keyword\">def</span> <span class=\"token function\">functionname</span><span class=\"token punctuation\">(</span>arg1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token string\">\"函数_文档字符串\"</span>\n    function_suite\n<span class=\"token keyword\">return</span> <span class=\"token punctuation\">[</span>expression<span class=\"token punctuation\">]</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n</li>\n<li><p>默认参数 (default argument)</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token keyword\">def</span> <span class=\"token function\">functionname</span><span class=\"token punctuation\">(</span>arg1<span class=\"token punctuation\">,</span> arg2<span class=\"token operator\">=</span>v<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token string\">\"函数_文档字符串\"</span>\n    function_suite\n<span class=\"token keyword\">return</span> <span class=\"token punctuation\">[</span>expression<span class=\"token punctuation\">]</span>\n<span class=\"token comment\"># 默认参数一定要放在位置参数 后面，不然程序会报错。</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n</li>\n<li><p>可变参数 (variable argument)</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token keyword\">def</span> <span class=\"token function\">functionname</span><span class=\"token punctuation\">(</span>arg1<span class=\"token punctuation\">,</span> arg2<span class=\"token operator\">=</span>v<span class=\"token punctuation\">,</span> <span class=\"token operator\">*</span>args<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">for</span> var <span class=\"token keyword\">in</span> args<span class=\"token punctuation\">:</span>\n\t\t<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>var<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">return</span> <span class=\"token punctuation\">[</span>expression<span class=\"token punctuation\">]</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n<ol>\n<li>*args - 可变参数，可以是从零个到任意个，自动组装成元组。</li>\n<li>加了星号（*）的变量名会存放所有未命名的变量参数。</li>\n</ol>\n</li>\n<li><p>关键字参数 (keyword argument)</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token keyword\">def</span> <span class=\"token function\">functionname</span><span class=\"token punctuation\">(</span>arg1<span class=\"token punctuation\">,</span> arg2<span class=\"token operator\">=</span>v<span class=\"token punctuation\">,</span> <span class=\"token operator\">*</span>args<span class=\"token punctuation\">,</span> <span class=\"token operator\">**</span>kw<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token string\">\"函数_文档字符串\"</span>\n    function_suite\n<span class=\"token keyword\">return</span> <span class=\"token punctuation\">[</span>expression<span class=\"token punctuation\">]</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n<ol>\n<li>**kw - 关键字参数，可以是从零个到任意个，自动组装成字典。</li>\n</ol>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token keyword\">def</span> <span class=\"token function\">printinfo</span><span class=\"token punctuation\">(</span>arg1<span class=\"token punctuation\">,</span> <span class=\"token operator\">*</span>args<span class=\"token punctuation\">,</span> <span class=\"token operator\">**</span>kwargs<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>arg1<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>args<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>kwargs<span class=\"token punctuation\">)</span>\nprintinfo<span class=\"token punctuation\">(</span><span class=\"token number\">70</span><span class=\"token punctuation\">,</span> <span class=\"token number\">60</span><span class=\"token punctuation\">,</span> <span class=\"token number\">50</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\"># 70</span>\n<span class=\"token comment\"># (60, 50)</span>\n<span class=\"token comment\"># &#123;&#125;</span>\nprintinfo<span class=\"token punctuation\">(</span><span class=\"token number\">70</span><span class=\"token punctuation\">,</span> <span class=\"token number\">60</span><span class=\"token punctuation\">,</span> <span class=\"token number\">50</span><span class=\"token punctuation\">,</span> a<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> b<span class=\"token operator\">=</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\"># 70</span>\n<span class=\"token comment\"># (60, 50)</span>\n<span class=\"token comment\"># &#123;'a': 1, 'b': 2&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>「可变参数」和「关键字参数」的同异总结如下：</p>\n<ol>\n<li>可变参数允许传入零个到任意个参数，它们在函数调用时自动组装为一个元组 (tuple)。</li>\n<li>关键字参数允许传入零个到任意个参数，它们在函数内部自动组装为一个字典 (dict)。</li>\n</ol>\n</li>\n<li><p>命名关键字参数 (name keyword argument)</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token keyword\">def</span> <span class=\"token function\">functionname</span><span class=\"token punctuation\">(</span>arg1<span class=\"token punctuation\">,</span> arg2<span class=\"token operator\">=</span>v<span class=\"token punctuation\">,</span> <span class=\"token operator\">*</span>args<span class=\"token punctuation\">,</span> <span class=\"token operator\">*</span><span class=\"token punctuation\">,</span> nkw<span class=\"token punctuation\">,</span> <span class=\"token operator\">**</span>kw<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token string\">\"函数_文档字符串\"</span>\n    function_suite\n<span class=\"token keyword\">return</span> <span class=\"token punctuation\">[</span>expression<span class=\"token punctuation\">]</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n<ol>\n<li><em>, nkw - 命名关键字参数，用户想要输入的关键字参数，定义方式是在nkw 前面加个分隔符 </em>。</li>\n<li>如果要限制关键字参数的名字，就可以用「命名关键字参数」</li>\n<li>使用命名关键字参数时，要特别注意不能缺少参数名。</li>\n</ol>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token keyword\">def</span> <span class=\"token function\">printinfo</span><span class=\"token punctuation\">(</span>arg1<span class=\"token punctuation\">,</span> <span class=\"token operator\">*</span><span class=\"token punctuation\">,</span> nkw<span class=\"token punctuation\">,</span> <span class=\"token operator\">**</span>kwargs<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>arg1<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>nkw<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>kwargs<span class=\"token punctuation\">)</span>\nprintinfo<span class=\"token punctuation\">(</span><span class=\"token number\">70</span><span class=\"token punctuation\">,</span> nkw<span class=\"token operator\">=</span><span class=\"token number\">10</span><span class=\"token punctuation\">,</span> a<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> b<span class=\"token operator\">=</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\"># 70</span>\n<span class=\"token comment\"># 10</span>\n<span class=\"token comment\"># &#123;'a': 1, 'b': 2&#125;</span>\nprintinfo<span class=\"token punctuation\">(</span><span class=\"token number\">70</span><span class=\"token punctuation\">,</span> <span class=\"token number\">10</span><span class=\"token punctuation\">,</span> a<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> b<span class=\"token operator\">=</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\"># TypeError: printinfo() takes 1 positional argument but 2 were given</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<ol>\n<li>没有写参数名nwk ，因此 10 被当成「位置参数」，而原函数只有 1 个位置函数，现在调用了 2 个，因此程序会报错。</li>\n</ol>\n</li>\n<li><p>参数组合</p>\n<p>在 Python 中定义函数，可以用位置参数、默认参数、可变参数、命名关键字参数和关键字参数，这 5 种参数中的 4 个都可以一起使用，但是注意，参数定义的顺序必须是：</p>\n<ol>\n<li>位置参数、默认参数、可变参数和关键字参数。</li>\n<li>位置参数、默认参数、命名关键字参数和关键字参数。<br>要注意定义可变参数和关键字参数的语法：</li>\n<li>*args 是可变参数， args 接收的是一个 tuple</li>\n<li><em>*kw 是关键字参数， kw 接收的是一个 dict<br>命名关键字参数是为了限制调用者可以传入的参数名，同时可以提供默认值。定义命名关键字参数不要忘了写分隔符</em>，否则定义的是位置参数。</li>\n</ol>\n<p>警告：虽然可以组合多达 5 种参数，但不要同时使用太多的组合，否则函数很难懂。</p>\n</li>\n</ol>\n<h4 id=\"变量作用域\"><a href=\"#变量作用域\" class=\"headerlink\" title=\"变量作用域\"></a>变量作用域</h4><ol>\n<li>Python 中，程序的变量并不是在哪个位置都可以访问的，访问权限决定于这个变量是在哪里赋值的。</li>\n<li>定义在函数内部的变量拥有局部作用域，该变量称为局部变量。</li>\n<li>定义在函数外部的变量拥有全局作用域，该变量称为全局变量。</li>\n<li>局部变量只能在其被声明的函数内部访问，而全局变量可以在整个程序范围内访问。</li>\n<li>当内部作用域想修改外部作用域的变量时，就要用到global 和nonlocal 关键字了。</li>\n</ol>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">num <span class=\"token operator\">=</span> <span class=\"token number\">1</span>\n<span class=\"token keyword\">def</span> <span class=\"token function\">fun1</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">global</span> num <span class=\"token comment\"># 需要使用 global 关键字声明</span>\n    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>num<span class=\"token punctuation\">)</span> <span class=\"token comment\"># 1</span>\n    num <span class=\"token operator\">=</span> <span class=\"token number\">123</span>\n    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>num<span class=\"token punctuation\">)</span> <span class=\"token comment\"># 123</span>\nfun1<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>num<span class=\"token punctuation\">)</span> <span class=\"token comment\"># 123</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h3 id=\"10-2-Lambda-表达式\"><a href=\"#10-2-Lambda-表达式\" class=\"headerlink\" title=\"10.2 Lambda 表达式\"></a>10.2 Lambda 表达式</h3><h4 id=\"匿名函数的定义\"><a href=\"#匿名函数的定义\" class=\"headerlink\" title=\"匿名函数的定义\"></a>匿名函数的定义</h4><pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token keyword\">lambda</span> argument_list<span class=\"token punctuation\">:</span> expression<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<ol>\n<li>lambda - 定义匿名函数的关键词。</li>\n<li>argument_list - 函数参数，它们可以是位置参数、默认参数、关键字参数，和正规函数里的参数类型一样。</li>\n<li>: - 冒号，在函数参数和表达式中间要加个冒号。</li>\n<li>expression - 只是一个表达式，输入函数参数，输出一些值。</li>\n</ol>\n<p><strong>注意</strong>：</p>\n<ol>\n<li>expression 中没有 return 语句，因为 lambda 不需要它来返回，表达式本身结果就是返回值。</li>\n<li>匿名函数拥有自己的命名空间，且不能访问自己参数列表之外或全局命名空间里的参数。</li>\n</ol>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token keyword\">def</span> <span class=\"token function\">sqr</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n<span class=\"token keyword\">return</span> x <span class=\"token operator\">**</span> <span class=\"token number\">2</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>sqr<span class=\"token punctuation\">)</span>\n<span class=\"token comment\"># &lt;function sqr at 0x000000BABD3A4400></span>\n\ny <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>sqr<span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span> <span class=\"token keyword\">for</span> x <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>y<span class=\"token punctuation\">)</span>\n<span class=\"token comment\"># [0, 1, 4, 9, 16, 25, 36, 49, 64, 81]</span>\n\nlbd_sqr <span class=\"token operator\">=</span> <span class=\"token keyword\">lambda</span> x<span class=\"token punctuation\">:</span> x <span class=\"token operator\">**</span> <span class=\"token number\">2</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>lbd_sqr<span class=\"token punctuation\">)</span>\n<span class=\"token comment\"># &lt;function &lt;lambda> at 0x000000BABB6AC1E0></span>\n\ny <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>lbd_sqr<span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span> <span class=\"token keyword\">for</span> x <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>y<span class=\"token punctuation\">)</span>\n<span class=\"token comment\"># [0, 1, 4, 9, 16, 25, 36, 49, 64, 81]</span>\n\nsumary <span class=\"token operator\">=</span> <span class=\"token keyword\">lambda</span> arg1<span class=\"token punctuation\">,</span> arg2<span class=\"token punctuation\">:</span> arg1 <span class=\"token operator\">+</span> arg2\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>sumary<span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">,</span> <span class=\"token number\">20</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># 30</span>\nfunc <span class=\"token operator\">=</span> <span class=\"token keyword\">lambda</span> <span class=\"token operator\">*</span>args<span class=\"token punctuation\">:</span> <span class=\"token builtin\">sum</span><span class=\"token punctuation\">(</span>args<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>func<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># 15</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h4 id=\"匿名函数的应用\"><a href=\"#匿名函数的应用\" class=\"headerlink\" title=\"匿名函数的应用\"></a>匿名函数的应用</h4><p><strong>函数式编程</strong> 是指代码中每一块都是不可变的，都由纯函数的形式组成。这里的纯函数，是指函数本身相互独立、互不影响，对于相同的输入，总会有相同的输出，没有任何副作用。</p>\n<p>匿名函数 常常应用于函数式编程的高阶函数 (high-order function)中，主要有两种形式：</p>\n<ol>\n<li>参数是函数 (filter, map)</li>\n<li>返回值是函数 (closure)<br>如，在 filter 和map 函数中的应用：</li>\n<li>filter(function, iterable) 过滤序列，过滤掉不符合条件的元素，返回一个迭代器对象，如果要转换为列表，可以使用 list() 来转换。</li>\n</ol>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">odd <span class=\"token operator\">=</span> <span class=\"token keyword\">lambda</span> x<span class=\"token punctuation\">:</span> x <span class=\"token operator\">%</span> <span class=\"token number\">2</span> <span class=\"token operator\">==</span> <span class=\"token number\">1</span>\ntemplist <span class=\"token operator\">=</span> <span class=\"token builtin\">filter</span><span class=\"token punctuation\">(</span>odd<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">6</span><span class=\"token punctuation\">,</span> <span class=\"token number\">7</span><span class=\"token punctuation\">,</span> <span class=\"token number\">8</span><span class=\"token punctuation\">,</span> <span class=\"token number\">9</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">list</span><span class=\"token punctuation\">(</span>templist<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># [1, 3, 5, 7, 9]</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n<ol>\n<li>map(function, *iterables) 根据提供的函数对指定序列做映射。</li>\n</ol>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">m1 <span class=\"token operator\">=</span> <span class=\"token builtin\">map</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">lambda</span> x<span class=\"token punctuation\">:</span> x <span class=\"token operator\">**</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">list</span><span class=\"token punctuation\">(</span>m1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\"># [1, 4, 9, 16, 25]</span>\nm2 <span class=\"token operator\">=</span> <span class=\"token builtin\">map</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">lambda</span> x<span class=\"token punctuation\">,</span> y<span class=\"token punctuation\">:</span> x <span class=\"token operator\">+</span> y<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">7</span><span class=\"token punctuation\">,</span> <span class=\"token number\">9</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">6</span><span class=\"token punctuation\">,</span> <span class=\"token number\">8</span><span class=\"token punctuation\">,</span> <span class=\"token number\">10</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">list</span><span class=\"token punctuation\">(</span>m2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\"># [3, 7, 11, 15, 19]</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h2 id=\"11-类与对象\"><a href=\"#11-类与对象\" class=\"headerlink\" title=\"11 类与对象\"></a>11 类与对象</h2><h3 id=\"11-1-对象-属性-方法\"><a href=\"#11-1-对象-属性-方法\" class=\"headerlink\" title=\"11.1 对象 = 属性 + 方法\"></a>11.1 对象 = 属性 + 方法</h3><p>对象是类的实例。换句话说，类主要定义对象的结构，然后我们以类为模板创建对象。类不但包含方法定义，而且还包含所有实例共享的数据。</p>\n<p><strong>封装：信息隐蔽技术</strong><br>我们可以使用关键字 class 定义 Python 类，关键字后面紧跟类的名称、分号和类的实现。</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Turtle</span><span class=\"token punctuation\">:</span> <span class=\"token comment\"># Python中的类名约定以大写字母开头</span>\n<span class=\"token triple-quoted-string string\">\"\"\"关于类的一个简单例子\"\"\"</span>\n    <span class=\"token comment\"># 属性</span>\n    color <span class=\"token operator\">=</span> <span class=\"token string\">'green'</span>\n    mouth <span class=\"token operator\">=</span> <span class=\"token string\">'大嘴'</span>\n    <span class=\"token comment\"># 方法</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">climb</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    \t<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'我正在很努力的向前爬...'</span><span class=\"token punctuation\">)</span>\n    \t\n    \t\ntt <span class=\"token operator\">=</span> Turtle<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\ntt<span class=\"token punctuation\">.</span>climb<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\"># 我正在很努力的向前爬...</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p><strong>继承：子类自动共享父类之间数据和方法的机制</strong></p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">MyList</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">list</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n\t<span class=\"token keyword\">pass</span>\nlst <span class=\"token operator\">=</span> MyList<span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">7</span><span class=\"token punctuation\">,</span> <span class=\"token number\">8</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\nlst<span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span><span class=\"token number\">9</span><span class=\"token punctuation\">)</span>\nlst<span class=\"token punctuation\">.</span>sort<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>lst<span class=\"token punctuation\">)</span>\n<span class=\"token comment\"># [1, 2, 5, 7, 8, 9]</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p><strong>多态：不同对象对同一方法响应不同的行动</strong></p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Animal</span><span class=\"token punctuation\">:</span>\n\t<span class=\"token keyword\">def</span> <span class=\"token function\">run</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n\t\t<span class=\"token keyword\">raise</span> AttributeError<span class=\"token punctuation\">(</span><span class=\"token string\">'子类必须实现这个方法'</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">People</span><span class=\"token punctuation\">(</span>Animal<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n\t<span class=\"token keyword\">def</span> <span class=\"token function\">run</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n\t\t<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'人正在走'</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Pig</span><span class=\"token punctuation\">(</span>Animal<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n\t<span class=\"token keyword\">def</span> <span class=\"token function\">run</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n\t\t<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'pig is walking'</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h3 id=\"11-2-self-是什么？\"><a href=\"#11-2-self-是什么？\" class=\"headerlink\" title=\"11.2 self 是什么？\"></a>11.2 self 是什么？</h3><p>Python 的 self 相当于 C++ 的 this 指针。</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">class Test:\n    def prt(self):\n        print(self)\n        print(self.__class__)\nt &#x3D; Test()\nt.prt()\n# &lt;__main__.Test object at 0x000000BC5A351208&gt;\n# &lt;class &#39;__main__.Test&#39;&gt;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>类的方法与普通的函数只有一个特别的区别 —— 它们必须有一个额外的第一个参数名称（对应于该实例，即该对象本身），按照惯例它的名称是 self 。在调用方法时，我们无需明确提供与参数 self 相对应的参数。</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Ball</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">setName</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    \tself<span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> name\n    <span class=\"token keyword\">def</span> <span class=\"token function\">kick</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    \t<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"我叫%s,该死的，谁踢我...\"</span> <span class=\"token operator\">%</span> self<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h3 id=\"11-3-Python-的魔法方法\"><a href=\"#11-3-Python-的魔法方法\" class=\"headerlink\" title=\"11.3 Python 的魔法方法\"></a>11.3 Python 的魔法方法</h3><p>类有一个名为<strong>__init__(self[, param1, param2…])</strong> 的魔法方法，该方法在类实例化时会自动调用。</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Ball</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">__init__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    \tself<span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> name<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n<h3 id=\"11-4-公有和私有\"><a href=\"#11-4-公有和私有\" class=\"headerlink\" title=\"11.4 公有和私有\"></a>11.4 公有和私有</h3><p>在 Python 中定义私有变量只需要在变量名或函数名前加上“__”两个下划线，那么这个函数或变量就会为私有的了。</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">class JustCounter:\n    __secretCount &#x3D; 0 # 私有变量\n    publicCount &#x3D; 0 # 公开变量\n    \n    def __foo(self): # 私有方法\n\t\tprint(&#39;这是私有方法&#39;)<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h3 id=\"11-5-继承\"><a href=\"#11-5-继承\" class=\"headerlink\" title=\"11.5 继承\"></a>11.5 继承</h3><p>Python 同样支持类的继承，派生类的定义如下所示：</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">DerivedClassName</span><span class=\"token punctuation\">(</span>BaseClassName<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token operator\">&lt;</span>statement<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token operator\">></span>\n    <span class=\"token punctuation\">.</span>\n    <span class=\"token punctuation\">.</span>\n    <span class=\"token punctuation\">.</span>\n    <span class=\"token operator\">&lt;</span>statement<span class=\"token operator\">-</span>N<span class=\"token operator\">></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>BaseClassName （示例中的基类名）必须与派生类定义在一个作用域内。除了类，还可以用表达式，基类定义在另一个模块中时这一点非常有用：</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">DerivedClassName</span><span class=\"token punctuation\">(</span>modname<span class=\"token punctuation\">.</span>BaseClassName<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token operator\">&lt;</span>statement<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token operator\">></span>\n    <span class=\"token punctuation\">.</span>\n    <span class=\"token punctuation\">.</span>\n    <span class=\"token punctuation\">.</span>\n    <span class=\"token operator\">&lt;</span>statement<span class=\"token operator\">-</span>N<span class=\"token operator\">></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<ul>\n<li>如果子类中定义与父类同名的方法或属性，则会自动覆盖父类对应的方法或属性。</li>\n</ul>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Fish</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">__init__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        self<span class=\"token punctuation\">.</span>x <span class=\"token operator\">=</span> r<span class=\"token punctuation\">.</span>randint<span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">10</span><span class=\"token punctuation\">)</span>\n        self<span class=\"token punctuation\">.</span>y <span class=\"token operator\">=</span> r<span class=\"token punctuation\">.</span>randint<span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">10</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">move</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    \tself<span class=\"token punctuation\">.</span>x <span class=\"token operator\">-=</span> <span class=\"token number\">1</span>\n    \t<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"我的位置\"</span><span class=\"token punctuation\">,</span> self<span class=\"token punctuation\">.</span>x<span class=\"token punctuation\">,</span> self<span class=\"token punctuation\">.</span>y<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Shark</span><span class=\"token punctuation\">(</span>Fish<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span> <span class=\"token comment\"># 鲨鱼</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">__init__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        Fish<span class=\"token punctuation\">.</span>__init__<span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span>\n        self<span class=\"token punctuation\">.</span>hungry <span class=\"token operator\">=</span> <span class=\"token boolean\">True</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<ul>\n<li>使用super函数super().<strong>init</strong>()</li>\n</ul>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Shark</span><span class=\"token punctuation\">(</span>Fish<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span> <span class=\"token comment\"># 鲨鱼</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">__init__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token builtin\">super</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>__init__<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        self<span class=\"token punctuation\">.</span>hungry <span class=\"token operator\">=</span> <span class=\"token boolean\">True</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n<p>Python 虽然支持多继承的形式，但我们一般不使用多继承，因为容易引起混乱。</p>\n<p>需要注意圆括号中父类的顺序，若是父类中有相同的方法名，而在子类使用时未指定，Python 从左至右搜索，即方法在子类中未找到时，从左到右查找父类中是否包含方法。</p>\n<h3 id=\"11-6-类、类对象和实例对象\"><a href=\"#11-6-类、类对象和实例对象\" class=\"headerlink\" title=\"11.6 类、类对象和实例对象\"></a>11.6 类、类对象和实例对象</h3><p>类对象：创建一个类，其实也是一个对象也在内存开辟了一块空间，称为类对象，类对象只有一个。</p>\n<p>实例对象：就是通过实例化类创建的对象，称为实例对象，实例对象可以有多个。</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token comment\"># 类对象</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">A</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">object</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n\t<span class=\"token keyword\">pass</span>\n<span class=\"token comment\"># 实例化对象 a、b、c都属于实例对象。</span>\na <span class=\"token operator\">=</span> A<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\nb <span class=\"token operator\">=</span> A<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\nc <span class=\"token operator\">=</span> A<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>类属性：类里面方法外面定义的变量称为类属性。类属性所属于类对象并且多个实例对象之间共享同一个类属性，说白了就是类属性所有的通过该类实例化的对象都能共享。</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">A</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    a <span class=\"token operator\">=</span> xx <span class=\"token comment\">#类属性</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">__init__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    \tA<span class=\"token punctuation\">.</span>a <span class=\"token operator\">=</span> xx <span class=\"token comment\">#使用类属性可以通过 （类名.类属性）调用。</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n<p>实例属性：实例属性和具体的某个实例对象有关系，并且一个实例对象和另外一个实例对象是不共享属性的，说白了实例属性只能在自己的对象里面使用，其他的对象不能直接使用，因为self 是谁调用，它的值就属于该对象。</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token keyword\">class</span> 类名<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    __init__<span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span>：\n    \tself<span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> xx <span class=\"token comment\">#实例属性</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n<p>类属性和实例属性区别</p>\n<ol>\n<li>类属性：类外面，可以通过实例对象.类属性和类名.类属性进行调用。类里面，通过self.类属性和类名.类属性进行调用。</li>\n<li>实例属性 ：类外面，可以通过实例对象.实例属性调用。类里面，通过self.实例属性调用。</li>\n<li>实例属性就相当于局部变量。出了这个类或者这个类的实例对象，就没有作用了。</li>\n<li>类属性就相当于类里面的全局变量，可以和这个类的所有实例对象共享。</li>\n</ol>\n<h3 id=\"11-8-什么是绑定？\"><a href=\"#11-8-什么是绑定？\" class=\"headerlink\" title=\"11.8 什么是绑定？\"></a>11.8 什么是绑定？</h3><p>Python 严格要求方法需要有实例才能被调用，这种限制其实就是 Python 所谓的绑定概念。<br>Python 对象的数据属性通常存储在名为.<strong> dict</strong> 的字典中，我们可以直接访问<strong>dict</strong> ，或利用 Python 的内置函数vars() 获取.<strong> dict</strong> 。</p>\n<h3 id=\"11-9-一些相关的内置函数（BIF）\"><a href=\"#11-9-一些相关的内置函数（BIF）\" class=\"headerlink\" title=\"11.9 一些相关的内置函数（BIF）\"></a>11.9 一些相关的内置函数（BIF）</h3><ol>\n<li>issubclass(class, classinfo) 方法用于判断参数 class 是否是类型参数 classinfo 的子类。</li>\n<li>一个类被认为是其自身的子类。</li>\n<li>classinfo 可以是类对象的元组，只要class是其中任何一个候选类的子类，则返回True 。</li>\n</ol>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">A</span><span class=\"token punctuation\">:</span>\n\t<span class=\"token keyword\">pass</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">B</span><span class=\"token punctuation\">(</span>A<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n\t<span class=\"token keyword\">pass</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">issubclass</span><span class=\"token punctuation\">(</span>B<span class=\"token punctuation\">,</span> A<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># True</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">issubclass</span><span class=\"token punctuation\">(</span>B<span class=\"token punctuation\">,</span> B<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># True</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">issubclass</span><span class=\"token punctuation\">(</span>A<span class=\"token punctuation\">,</span> B<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># False</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">issubclass</span><span class=\"token punctuation\">(</span>B<span class=\"token punctuation\">,</span> <span class=\"token builtin\">object</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># True</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<ol>\n<li>isinstance(object, classinfo) 方法用于判断一个对象是否是一个已知的类型，类似type() 。</li>\n<li>type() 不会认为子类是一种父类类型，不考虑继承关系。</li>\n<li>isinstance() 会认为子类是一种父类类型，考虑继承关系。</li>\n<li>如果第一个参数不是对象，则永远返回False 。</li>\n<li>如果第二个参数不是类或者由类对象组成的元组，会抛出一个TypeError 异常。</li>\n</ol>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">a <span class=\"token operator\">=</span> <span class=\"token number\">2</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">isinstance</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span> <span class=\"token builtin\">int</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># True</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">isinstance</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span> <span class=\"token builtin\">str</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># False</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">isinstance</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token builtin\">str</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">int</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">list</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># True</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">A</span><span class=\"token punctuation\">:</span>\n<span class=\"token keyword\">pass</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">B</span><span class=\"token punctuation\">(</span>A<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n<span class=\"token keyword\">pass</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">isinstance</span><span class=\"token punctuation\">(</span>A<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> A<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># True</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">type</span><span class=\"token punctuation\">(</span>A<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> A<span class=\"token punctuation\">)</span> <span class=\"token comment\"># True</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">isinstance</span><span class=\"token punctuation\">(</span>B<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> A<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># True</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">type</span><span class=\"token punctuation\">(</span>B<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> A<span class=\"token punctuation\">)</span> <span class=\"token comment\"># False</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<ol>\n<li>hasattr(object, name) 用于判断对象是否包含对应的属性。</li>\n</ol>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Coordinate</span><span class=\"token punctuation\">:</span>\n    x <span class=\"token operator\">=</span> <span class=\"token number\">10</span>\n    y <span class=\"token operator\">=</span> <span class=\"token operator\">-</span><span class=\"token number\">5</span>\n    z <span class=\"token operator\">=</span> <span class=\"token number\">0</span>\npoint1 <span class=\"token operator\">=</span> Coordinate<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">hasattr</span><span class=\"token punctuation\">(</span>point1<span class=\"token punctuation\">,</span> <span class=\"token string\">'x'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># True</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">hasattr</span><span class=\"token punctuation\">(</span>point1<span class=\"token punctuation\">,</span> <span class=\"token string\">'y'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># True</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">hasattr</span><span class=\"token punctuation\">(</span>point1<span class=\"token punctuation\">,</span> <span class=\"token string\">'z'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># True</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">hasattr</span><span class=\"token punctuation\">(</span>point1<span class=\"token punctuation\">,</span> <span class=\"token string\">'no'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># False</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<ol>\n<li>getattr(object, name[, default]) 用于返回一个对象属性值。</li>\n</ol>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">A</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">object</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n\tbar <span class=\"token operator\">=</span> <span class=\"token number\">1</span>\na <span class=\"token operator\">=</span> A<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">getattr</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span> <span class=\"token string\">'bar'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># 1</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">getattr</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span> <span class=\"token string\">'bar2'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># 3</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">getattr</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span> <span class=\"token string\">'bar2'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\"># AttributeError: 'A' object has no attribute 'bar2'</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<ol>\n<li>setattr(object, name, value) 对应函数 getattr() ，用于设置属性值，该属性不一定是存在的。</li>\n</ol>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">A</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">object</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\nbar <span class=\"token operator\">=</span> <span class=\"token number\">1</span>\na <span class=\"token operator\">=</span> A<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">getattr</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span> <span class=\"token string\">'bar'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># 1</span>\n<span class=\"token builtin\">setattr</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span> <span class=\"token string\">'bar'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">.</span>bar<span class=\"token punctuation\">)</span> <span class=\"token comment\"># 5</span>\n<span class=\"token builtin\">setattr</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span> <span class=\"token string\">\"age\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">28</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">.</span>age<span class=\"token punctuation\">)</span> <span class=\"token comment\"># 28</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<ol>\n<li><p>delattr(object, name) 用于删除属性。</p>\n</li>\n<li><p>class property([fget[, fset[, fdel[, doc]]]]) 用于在新式类中返回属性值。<br>a. fget — 获取属性值的函数<br>b. fset — 设置属性值的函数<br>c. fdel — 删除属性值函数<br>d. doc — 属性描述信息</p>\n</li>\n</ol>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">C</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">object</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">__init__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    \tself<span class=\"token punctuation\">.</span>__x <span class=\"token operator\">=</span> <span class=\"token boolean\">None</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">getx</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    \t<span class=\"token keyword\">return</span> self<span class=\"token punctuation\">.</span>__x\n    <span class=\"token keyword\">def</span> <span class=\"token function\">setx</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    \tself<span class=\"token punctuation\">.</span>__x <span class=\"token operator\">=</span> value\n    <span class=\"token keyword\">def</span> <span class=\"token function\">delx</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    \t<span class=\"token keyword\">del</span> self<span class=\"token punctuation\">.</span>__x\n    x <span class=\"token operator\">=</span> <span class=\"token builtin\">property</span><span class=\"token punctuation\">(</span>getx<span class=\"token punctuation\">,</span> setx<span class=\"token punctuation\">,</span> delx<span class=\"token punctuation\">,</span> <span class=\"token string\">\"I'm the 'x' property.\"</span><span class=\"token punctuation\">)</span>\ncc <span class=\"token operator\">=</span> C<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\ncc<span class=\"token punctuation\">.</span>x <span class=\"token operator\">=</span> <span class=\"token number\">2</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>cc<span class=\"token punctuation\">.</span>x<span class=\"token punctuation\">)</span> <span class=\"token comment\"># 2</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h2 id=\"12-魔法方法\"><a href=\"#12-魔法方法\" class=\"headerlink\" title=\"12 魔法方法\"></a>12 魔法方法</h2><p>魔法方法总是被双下划线包围，例如<strong>init</strong> 。<br>魔法方法是面向对象的 Python 的一切，如果你不知道魔法方法，说明你还没能意识到面向对象的 Python 的强大。<br>魔法方法的“魔力”体现在它们总能够在适当的时候被自动调用。<br>魔法方法的第一个参数应为cls （类方法） 或者self （实例方法）。</p>\n<ol>\n<li>cls ：代表一个类的名称</li>\n<li>self ：代表一个实例对象的名称</li>\n</ol>\n<h3 id=\"12-1-基本的魔法方法\"><a href=\"#12-1-基本的魔法方法\" class=\"headerlink\" title=\"12.1 基本的魔法方法\"></a>12.1 基本的魔法方法</h3><p><strong><strong>init</strong>(self[, …])</strong>:构造器，当一个实例被创建的时候调用的初始化方法</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Rectangle</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">__init__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> x<span class=\"token punctuation\">,</span> y<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    \tself<span class=\"token punctuation\">.</span>x <span class=\"token operator\">=</span> x\n    \tself<span class=\"token punctuation\">.</span>y <span class=\"token operator\">=</span> y<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n<p><strong>__new__(cls[, …])</strong></p>\n<ol>\n<li><strong>new</strong> 是在一个对象实例化的时候所调用的第一个方法，在调用<strong>init</strong> 初始化前，先调用<strong>new</strong> 。</li>\n<li><strong>new</strong> 至少要有一个参数cls ，代表要实例化的类，此参数在实例化时由 Python 解释器自动提供，后面的参数直<br>接传递给<strong>init</strong> 。</li>\n<li><strong>new</strong> 对当前类进行了实例化，并将实例返回，传给<strong>init</strong> 的self 。但是，执行了<strong>new</strong> ，并不一定会<br>进入<strong>init</strong> ，只有<strong>new</strong> 返回了，当前类cls 的实例，当前类的<strong>init</strong> 才会进入。</li>\n<li>若<strong>new</strong> 没有正确返回当前类cls 的实例，那<strong>init</strong> 是不会被调用的，即使是父类的实例也不行，将没有<strong>init</strong> 被调用。</li>\n<li>可利用<strong>new</strong> 实现单例模式。</li>\n<li><strong>new</strong> 方法主要是当你继承一些不可变的 class 时（比如int, str, tuple ）， 提供给你一个自定义这些类的实例化过程的途径。</li>\n</ol>\n<p><strong>__del__(self)</strong></p>\n<p>析构器，当一个对象将要被系统回收之时调用的方法。<br>        Python 采用自动引用计数（ARC）方式来回收对象所占用的空间，当程序中有一个变量引用该 Python 对象时，Python会自动保证该对象引用计数为 1；当程序中有两个变量引用该 Python 对象时，Python 会自动保证该对象引用计数为 2，依此类推，如果一个对象的引用计数变成了 0，则说明程序中不再有变量引用该对象，表明程序不再需要该对象，因此Python 就会回收该对象。<br>        大部分时候，Python 的 ARC 都能准确、高效地回收系统中的每个对象。但如果系统中出现循环引用的情况，比如对象a 持有一个实例变量引用对象 b，而对象 b 又持有一个实例变量引用对象 a，此时两个对象的引用计数都是 1，而实际上程序已经不再有变量引用它们，系统应该回收它们，此时 Python 的垃圾回收器就可能没那么快，要等专门的循环垃圾<br>回收器（Cyclic Garbage Collector）来检测并回收这种引用循环。</p>\n<p><strong>__str__(self) :</strong></p>\n<ol>\n<li>当你打印一个对象的时候，触发<strong>str</strong></li>\n<li>当你使用%s 格式化的时候，触发<strong>str</strong></li>\n<li>str 强转数据类型的时候，触发<strong>str</strong></li>\n</ol>\n<p><strong>__repr__(self):</strong></p>\n<ol>\n<li>repr 是str 的备胎</li>\n<li>有<strong>str</strong> 的时候执行<strong>str</strong> ,没有实现<strong>str</strong> 的时候，执行<strong>repr</strong></li>\n<li>repr(obj) 内置函数对应的结果是<strong>repr</strong> 的返回值</li>\n<li>当你使用%r 格式化的时候 触发<strong>repr</strong></li>\n</ol>\n<p><strong>str</strong>(self) 的返回结果可读性强。也就是说， <strong>str</strong> 的意义是得到便于人们阅读的信息，就像下面的 ‘2019-10-11’ 一样。<br><strong>repr</strong>(self) 的返回结果应更准确。怎么说， <strong>repr</strong> 存在的目的在于调试，便于开发者使用。</p>\n<h3 id=\"12-2-算术运算符\"><a href=\"#12-2-算术运算符\" class=\"headerlink\" title=\"12.2 算术运算符\"></a>12.2 算术运算符</h3><p>类型工厂函数，指的是不通过类而是通过函数来创建对象。</p>\n<ol>\n<li>__add__(self, other) 定义加法的行为： +</li>\n<li>__sub__(self, other) 定义减法的行为： -</li>\n<li>__mul__(self, other) 定义乘法的行为： *</li>\n<li>__truediv__(self, other) 定义真除法的行为： /</li>\n<li>__floordiv__(self, other) 定义整数除法的行为： //</li>\n<li>__mod__(self, other) 定义取模算法的行为： %</li>\n<li>__divmod__(self, other) 定义当被 divmod() 调用时的行为</li>\n<li>divmod(a, b) 把除数和余数运算结果结合起来，返回一个包含商和余数的元组(a // b, a % b) 。</li>\n<li>__mul__(self, other) 定义乘法的行为： *</li>\n<li>__truediv__(self, other) 定义真除法的行为： /</li>\n<li>__floordiv__(self, other) 定义整数除法的行为： //</li>\n<li>__mod__(self, other) 定义取模算法的行为： %</li>\n<li>__divmod__(self, other) 定义当被 divmod() 调用时的行为</li>\n<li>divmod(a, b) 把除数和余数运算结果结合起来，返回一个包含商和余数的元组(a // b, a % b) 。</li>\n</ol>\n<h3 id=\"12-3-反算术运算符\"><a href=\"#12-3-反算术运算符\" class=\"headerlink\" title=\"12.3 反算术运算符\"></a>12.3 反算术运算符</h3><p>反运算魔方方法，与算术运算符保持一一对应，不同之处就是反运算的魔法方法多了一个“r”。当文件左操作不支持相应的操作时被调用。</p>\n<ol>\n<li>__radd__(self, other) 定义加法的行为： +</li>\n<li>__rsub__(self, other) 定义减法的行为： -</li>\n<li>__rmul__(self, other) 定义乘法的行为： *</li>\n<li>__rtruediv__(self, other) 定义真除法的行为： /</li>\n<li>__rfloordiv__(self, other) 定义整数除法的行为： //</li>\n<li>__rmod__(self, other) 定义取模算法的行为： %</li>\n<li>__rdivmod__(self, other) 定义当被 divmod() 调用时的行为</li>\n<li>__rpow__(self, other[, module]) 定义当被 power() 调用或 ** 运算时的行为</li>\n<li>__rlshift__(self, other) 定义按位左移位的行为： &lt;&lt;</li>\n<li>__rrshift__(self, other) 定义按位右移位的行为： &gt;&gt;</li>\n<li>__rand__(self, other) 定义按位与操作的行为： &amp;</li>\n<li>__rxor__(self, other) 定义按位异或操作的行为： ^</li>\n<li>__ror__(self, other) 定义按位或操作的行为： |</li>\n</ol>\n<p>a + b<br>这里加数是a ，被加数是b ，因此是a 主动，反运算就是如果a 对象的__add<strong>() 方法没有实现或者不支持相应的操作，那么 Python 就会调用b 的\\</strong>radd__() 方法。</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">class Nint(int):\n    def __radd__(self, other):\n    \treturn int.__sub__(other, self) # 注意 self 在后面\na &#x3D; Nint(5)\nb &#x3D; Nint(3)\nprint(a + b) # 8\nprint(1 + b) # -2<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h3 id=\"12-4-增量赋值运算符\"><a href=\"#12-4-增量赋值运算符\" class=\"headerlink\" title=\"12.4 增量赋值运算符\"></a>12.4 增量赋值运算符</h3><ol>\n<li>__iadd__(self, other) 定义赋值加法的行为： +=</li>\n<li>__isub__(self, other) 定义赋值减法的行为： -=</li>\n<li>__imul__(self, other) 定义赋值乘法的行为： *=</li>\n<li>__itruediv__(self, other) 定义赋值真除法的行为： /=</li>\n<li>__ifloordiv__(self, other) 定义赋值整数除法的行为： //=</li>\n<li>__imod__(self, other) 定义赋值取模算法的行为： %=</li>\n<li>__ipow__(self, other[, modulo]) 定义赋值幂运算的行为： **=</li>\n<li>__ilshift__(self, other) 定义赋值按位左移位的行为： &lt;&lt;=</li>\n<li>__irshift__(self, other) 定义赋值按位右移位的行为： &gt;&gt;=</li>\n<li>__iand__(self, other) 定义赋值按位与操作的行为： &amp;=</li>\n<li>__ixor__(self, other) 定义赋值按位异或操作的行为： ^=</li>\n<li>__ior__(self, other) 定义赋值按位或操作的行为： |=</li>\n</ol>\n<h3 id=\"12-5-一元运算符\"><a href=\"#12-5-一元运算符\" class=\"headerlink\" title=\"12.5 一元运算符\"></a>12.5 一元运算符</h3><ol>\n<li>__neg__(self) 定义正号的行为： +x</li>\n<li>__pos__(self) 定义负号的行为： -x</li>\n<li>__abs__(self) 定义当被abs() 调用时的行为</li>\n<li>__invert__(self) 定义按位求反的行为： ~x</li>\n</ol>\n<h3 id=\"12-6-属性访问\"><a href=\"#12-6-属性访问\" class=\"headerlink\" title=\"12.6 属性访问\"></a>12.6 属性访问</h3><p>__getattr<strong>(self, name) : 定义当用户试图获取一个不存在的属性时的行为。__getattribute__(self, name) ：定义当该类的属性被访问时的行为（先调用该方法，查看是否存在该属性，若不存在，接着去调用\\</strong>getattr__ ）。<br>__setattr__(self, name, value) ：定义当一个属性被设置时的行为。<br>__delattr__(self, name) ：定义当一个属性被删除时的行为。</p>\n<h3 id=\"12-7-描述符\"><a href=\"#12-7-描述符\" class=\"headerlink\" title=\"12.7 描述符\"></a>12.7 描述符</h3><p>描述符就是将某种特殊类型的类的实例指派给另一个类的属性。</p>\n<ol>\n<li><p>__get__(self, instance, owner) 用于访问属性，它返回属性的值。</p>\n</li>\n<li><p>__set__(self, instance, value) 将在属性分配操作中调用，不返回任何内容。</p>\n</li>\n<li><p>__del__(self, instance) 控制删除操作，不返回任何内容。</p>\n</li>\n</ol>\n<h3 id=\"12-8-定制序列\"><a href=\"#12-8-定制序列\" class=\"headerlink\" title=\"12.8 定制序列\"></a>12.8 定制序列</h3><p>协议（Protocols）与其它编程语言中的接口很相似，它规定你哪些方法必须要定义。然而，在 Python 中的协议就显得不那么正式。事实上，在 Python 中，协议更像是一种指南。<br>容器类型的协议</p>\n<ol>\n<li>如果说你希望定制的容器是不可变的话，你只需要定义__len<strong>() 和\\</strong>getitem__() 方法。</li>\n<li><p>如果你希望定制的容器是可变的话，除了__len<strong>() 和\\</strong>getitem<strong>() 方法，你还需要定义\\</strong>setitem<strong>()和\\</strong>delitem__() 两个方法。</p>\n</li>\n<li><p>__len__(self) 定义当被len() 调用时的行为（返回容器中元素的个数）。</p>\n</li>\n<li>__getitem__(self, key) 定义获取容器中元素的行为，相当于self[key] 。</li>\n<li>__setitem__(self, key, value) 定义设置容器中指定元素的行为，相当于self[key] = value 。</li>\n<li>__delitem__(self, key) 定义删除容器中指定元素的行为，相当于del self[key] 。</li>\n</ol>\n<h3 id=\"12-9-迭代器\"><a href=\"#12-9-迭代器\" class=\"headerlink\" title=\"12.9 迭代器\"></a>12.9 迭代器</h3><ol>\n<li>迭代是 Python 最强大的功能之一，是访问集合元素的一种方式。</li>\n<li>迭代器是一个可以记住遍历的位置的对象。</li>\n<li>迭代器对象从集合的第一个元素开始访问，直到所有的元素被访问完结束。</li>\n<li>迭代器只能往前不会后退。</li>\n<li>字符串，列表或元组对象都可用于创建迭代器：</li>\n</ol>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">string <span class=\"token operator\">=</span> <span class=\"token string\">'lsgogroup'</span>\n<span class=\"token keyword\">for</span> c <span class=\"token keyword\">in</span> string<span class=\"token punctuation\">:</span>\n\t<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>c<span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n<ol>\n<li>迭代器有两个基本的方法： iter() 和 next() 。</li>\n<li>iter(object) 函数用来生成迭代器。</li>\n<li>next(iterator[, default]) 返回迭代器的下一个项目。</li>\n<li>iterator — 可迭代对象</li>\n<li>default — 可选，用于设置在没有下一个元素时返回该默认值，如果不设置，又没有下一个元素则会触发<br>StopIteration 异常。</li>\n</ol>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">links <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span><span class=\"token string\">'B'</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'百度'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'A'</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'阿里'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'T'</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'腾讯'</span><span class=\"token punctuation\">&#125;</span>\nit <span class=\"token operator\">=</span> <span class=\"token builtin\">iter</span><span class=\"token punctuation\">(</span>links<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">next</span><span class=\"token punctuation\">(</span>it<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># B</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">next</span><span class=\"token punctuation\">(</span>it<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># A</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">next</span><span class=\"token punctuation\">(</span>it<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># T</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">next</span><span class=\"token punctuation\">(</span>it<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># StopIteration</span>\n\nit <span class=\"token operator\">=</span> <span class=\"token builtin\">iter</span><span class=\"token punctuation\">(</span>links<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">while</span> <span class=\"token boolean\">True</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">try</span><span class=\"token punctuation\">:</span>\n    \teach <span class=\"token operator\">=</span> <span class=\"token builtin\">next</span><span class=\"token punctuation\">(</span>it<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">except</span> StopIteration<span class=\"token punctuation\">:</span>\n    \t<span class=\"token keyword\">break</span>\n    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>each<span class=\"token punctuation\">)</span>\n<span class=\"token comment\"># B</span>\n<span class=\"token comment\"># A</span>\n<span class=\"token comment\"># T</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>把一个类作为一个迭代器使用需要在类中实现两个魔法方法 <strong>iter</strong>() 与 <strong>next</strong>() 。</p>\n<ol>\n<li>__iter<strong>(self) 定义当迭代容器中的元素的行为，返回一个特殊的迭代器对象， 这个迭代器对象实现了</strong>next__() 方法并通过 StopIteration 异常标识迭代的完成。</li>\n<li>__next__() 返回下一个迭代器对象。</li>\n<li>StopIteration 异常用于标识迭代的完成，防止出现无限循环的情况，在 <strong>next</strong>() 方法中我们可以设置在完<br>成指定循环次数后触发 StopIteration 异常来结束迭代。</li>\n</ol>\n<h3 id=\"12-10-生成器\"><a href=\"#12-10-生成器\" class=\"headerlink\" title=\"12.10 生成器\"></a>12.10 生成器</h3><ol>\n<li>在 Python 中，使用了 yield 的函数被称为生成器（generator）。</li>\n<li>跟普通函数不同的是，生成器是一个返回迭代器的函数，只能用于迭代操作，更简单点理解生成器就是一个迭代器。</li>\n<li>在调用生成器运行的过程中，每次遇到 yield 时函数会暂停并保存当前所有的运行信息，返回 yield 的值, 并在下一次执行 next() 方法时从当前位置继续运行。</li>\n<li>调用一个生成器函数，返回的是一个迭代器对象。</li>\n</ol>\n<h2 id=\"13-模块\"><a href=\"#13-模块\" class=\"headerlink\" title=\"13 模块\"></a>13 模块</h2><p>​        在前面我们脚本是用 Python 解释器来编程，如果你从 Python 解释器退出再进入，那么你定义的所有的方法和变量就都消失了。<br>​        为此 Python 提供了一个办法，把这些定义存放在文件中，为一些脚本或者交互式的解释器实例使用，这个文件被称为模块（Module）。<br>​        模块是一个包含所有你定义的函数和变量的文件，其后缀名是.py 。模块可以被别的程序引入，以使用该模块中的函数等功能。这也是使用 Python 标准库的方法。</p>\n<h3 id=\"13-1-什么是模块\"><a href=\"#13-1-什么是模块\" class=\"headerlink\" title=\"13.1 什么是模块\"></a>13.1 什么是模块</h3><ol>\n<li>容器 -&gt; 数据的封装</li>\n<li>函数 -&gt; 语句的封装</li>\n<li>类 -&gt; 方法和属性的封装</li>\n<li>模块 -&gt; 程序文件</li>\n</ol>\n<h3 id=\"13-2-命名空间\"><a href=\"#13-2-命名空间\" class=\"headerlink\" title=\"13.2 命名空间\"></a>13.2 命名空间</h3><p>命名空间因为对象的不同，也有所区别，可以分为如下几种：</p>\n<ol>\n<li>内置命名空间（Built-in Namespaces）：Python 运行起来，它们就存在了。内置函数的命名空间都属于内置命名空间，所以，我们可以在任何程序中直接运行它们，比如id() ,不需要做什么操作，拿过来就直接使用了。</li>\n<li>全局命名空间（Module：Global Namespaces）：每个模块创建它自己所拥有的全局命名空间，不同模块的全局命名空间彼此独立，不同模块中相同名称的命名空间，也会因为模块的不同而不相互干扰。</li>\n<li>本地命名空间（Function &amp; Class：Local Namespaces）：模块中有函数或者类，每个函数或者类所定义的命名空间就是本地命名空间。如果函数返回了结果或者抛出异常，则本地命名空间也结束了。</li>\n</ol>\n<p>程序在查询上述三种命名空间的时候，就按照从里到外的顺序，即：Local Namespaces —&gt; Global Namesspaces —&gt; Built-inNamesspaces。</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token keyword\">import</span> hello\nhello<span class=\"token punctuation\">.</span>hi<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># Hi everyone, I love lsgogroup!</span>\nhi<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># NameError: name 'hi' is not defined</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n<h3 id=\"13-3-导入模块\"><a href=\"#13-3-导入模块\" class=\"headerlink\" title=\"13.3 导入模块\"></a>13.3 导入模块</h3><ol>\n<li>第一种：import 模块名</li>\n<li>第二种：from 模块名 import 函数名</li>\n<li>第三种：import 模块名 as 新名字</li>\n</ol>\n<h3 id=\"13-4-if-name-‘-main-’\"><a href=\"#13-4-if-name-‘-main-’\" class=\"headerlink\" title=\"13.4 if __name == ‘\\main__’\"></a>13.4 if __name<strong> == ‘\\</strong>main__’</h3><p>​        对于很多编程语言来说，程序都必须要有一个入口，而 Python 则不同，它属于脚本语言，不像编译型语言那样先将程序编译成二进制再运行，而是动态的逐行解释运行。也就是从脚本第一行开始运行，没有统一的入口。<br>假设我们有一个 const.py 文件，内容如下：</p>\n<h3 id=\"13-5-搜索路径\"><a href=\"#13-5-搜索路径\" class=\"headerlink\" title=\"13.5 搜索路径\"></a>13.5 搜索路径</h3><p>当解释器遇到 import 语句，如果模块在当前的搜索路径就会被导入。</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token keyword\">import</span> sys\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>sys<span class=\"token punctuation\">.</span>path<span class=\"token punctuation\">)</span>\n<span class=\"token comment\"># ['C:\\\\ProgramData\\\\Anaconda3\\\\DLLs', 'C:\\\\ProgramData\\\\Anaconda3\\\\lib',</span>\n<span class=\"token string\">'C:\\\\ProgramData\\\\Anaconda3'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'C:\\\\ProgramData\\\\Anaconda3\\\\lib\\\\site-packages'</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">]</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n<p>​        我们使用 import 语句的时候，Python 解释器是怎样找到对应的文件的呢？<br>​        这就涉及到 Python 的搜索路径，搜索路径是由一系列目录名组成的，Python 解释器就依次从这些目录中去寻找所引入的模块。<br>​        这看起来很像环境变量，事实上，也可以通过定义环境变量的方式来确定搜索路径。<br>搜索路径是在 Python 编译或安装的时候确定的，安装新的库应该也会修改。搜索路径被存储在 sys 模块中的 path 变量中。</p>\n<h3 id=\"13-6-包（package）\"><a href=\"#13-6-包（package）\" class=\"headerlink\" title=\"13.6 包（package）\"></a>13.6 包（package）</h3><p>包是一种管理 Python 模块命名空间的形式，采用”点模块名称”。<br>创建包分为三个步骤：</p>\n<ol>\n<li>创建一个文件夹，用于存放相关的模块，文件夹的名字即包的名字。</li>\n<li>在文件夹中创建一个 <strong>init</strong>.py 的模块文件，内容可以为空。</li>\n<li>将相关的模块放入文件夹中。</li>\n</ol>\n<p>不妨假设你想设计一套统一处理声音文件和数据的模块（或者称之为一个”包”）。</p>\n<p>现存很多种不同的音频文件格式（基本上都是通过后缀名区分的，例如：.wav，.aiff，.au），所以你需要有一组不断增加的模块，用来在不同的格式之间转换。<br>并且针对这些音频数据，还有很多不同的操作（比如混音，添加回声，增加均衡器功能，创建人造立体声效果），所以你还需要一组怎么也写不完的模块来处理这些操作。</p>\n<h2 id=\"14-datetime模块\"><a href=\"#14-datetime模块\" class=\"headerlink\" title=\"14 datetime模块\"></a>14 datetime模块</h2><h3 id=\"14-1-datetime类\"><a href=\"#14-1-datetime类\" class=\"headerlink\" title=\"14.1 datetime类\"></a>14.1 datetime类</h3><pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">datetime</span><span class=\"token punctuation\">(</span>date<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">__init__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> year<span class=\"token punctuation\">,</span> month<span class=\"token punctuation\">,</span> day<span class=\"token punctuation\">,</span> hour<span class=\"token punctuation\">,</span> minute<span class=\"token punctuation\">,</span> second<span class=\"token punctuation\">,</span> microsecond<span class=\"token punctuation\">,</span> tzinfo<span class=\"token punctuation\">)</span>\n    \t<span class=\"token keyword\">pass</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">now</span><span class=\"token punctuation\">(</span>cls<span class=\"token punctuation\">,</span> tz<span class=\"token operator\">=</span><span class=\"token boolean\">None</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    \t<span class=\"token keyword\">pass</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">timestamp</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    \t<span class=\"token keyword\">pass</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">fromtimestamp</span><span class=\"token punctuation\">(</span>cls<span class=\"token punctuation\">,</span> t<span class=\"token punctuation\">,</span> tz<span class=\"token operator\">=</span><span class=\"token boolean\">None</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    \t<span class=\"token keyword\">pass</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">date</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    \t<span class=\"token keyword\">pass</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">time</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    \t<span class=\"token keyword\">pass</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">year</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    \t<span class=\"token keyword\">pass</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">month</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    \t<span class=\"token keyword\">pass</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">day</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    \t<span class=\"token keyword\">pass</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">hour</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    \t<span class=\"token keyword\">pass</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">minute</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    \t<span class=\"token keyword\">pass</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">second</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    \t<span class=\"token keyword\">pass</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">isoweekday</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    \t<span class=\"token keyword\">pass</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">strftime</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> fmt<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    \t<span class=\"token keyword\">pass</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">combine</span><span class=\"token punctuation\">(</span>cls<span class=\"token punctuation\">,</span> date<span class=\"token punctuation\">,</span> time<span class=\"token punctuation\">,</span> tzinfo<span class=\"token operator\">=</span><span class=\"token boolean\">True</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    \t<span class=\"token keyword\">pass</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<ol>\n<li>datetime.now(tz=None) 获取当前的日期时间，输出顺序为：年、月、日、时、分、秒、微秒。</li>\n<li>datetime.timestamp() 获取以 1970年1月1日为起点记录的秒数。</li>\n<li>datetime.fromtimestamp(tz=None) 使用 unixtimestamp 创建一个 datetime。</li>\n</ol>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token keyword\">import</span> datetime\ndt <span class=\"token operator\">=</span> datetime<span class=\"token punctuation\">.</span>datetime<span class=\"token punctuation\">(</span>year<span class=\"token operator\">=</span><span class=\"token number\">2020</span><span class=\"token punctuation\">,</span> month<span class=\"token operator\">=</span><span class=\"token number\">6</span><span class=\"token punctuation\">,</span> day<span class=\"token operator\">=</span><span class=\"token number\">25</span><span class=\"token punctuation\">,</span> hour<span class=\"token operator\">=</span><span class=\"token number\">11</span><span class=\"token punctuation\">,</span> minute<span class=\"token operator\">=</span><span class=\"token number\">23</span><span class=\"token punctuation\">,</span> second<span class=\"token operator\">=</span><span class=\"token number\">59</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>dt<span class=\"token punctuation\">)</span> <span class=\"token comment\"># 2020-06-25 11:23:59</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>dt<span class=\"token punctuation\">.</span>timestamp<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># 1593055439.0</span>\ndt <span class=\"token operator\">=</span> datetime<span class=\"token punctuation\">.</span>datetime<span class=\"token punctuation\">.</span>fromtimestamp<span class=\"token punctuation\">(</span><span class=\"token number\">1593055439.0</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>dt<span class=\"token punctuation\">)</span> <span class=\"token comment\"># 2020-06-25 11:23:59</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">type</span><span class=\"token punctuation\">(</span>dt<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># &lt;class 'datetime.datetime'></span>\ndt <span class=\"token operator\">=</span> datetime<span class=\"token punctuation\">.</span>datetime<span class=\"token punctuation\">.</span>now<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>dt<span class=\"token punctuation\">)</span> <span class=\"token comment\"># 2020-06-25 11:11:03.877853</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">type</span><span class=\"token punctuation\">(</span>dt<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># &lt;class 'datetime.datetime'></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<ol>\n<li>datetime.strftime(fmt) 格式化 datetime 对象。</li>\n</ol>\n<p>%a 本地简化星期名称（如星期一，返回 Mon）<br>%A 本地完整星期名称（如星期一，返回 Monday）<br>%b 本地简化的月份名称（如一月，返回 Jan）<br>%B 本地完整的月份名称（如一月，返回 January）<br>%c 本地相应的日期表示和时间表示<br>%d 月内中的一天（0-31）<br>%H 24小时制小时数（0-23）<br>%I 12小时制小时数（01-12）<br>%j 年内的一天（001-366）<br>%m 月份（01-12）<br>%M 分钟数（00-59）<br>%p 本地A.M.或P.M.的等价符<br>%S 秒（00-59）<br>%U 一年中的星期数（00-53）星期天为星期的开始<br>%w 星期（0-6），星期天为星期的开始<br>%W 一年中的星期数（00-53）星期一为星期的开始<br>%x 本地相应的日期表示<br>%X 本地相应的时间表示<br>%y 两位数的年份表示（00-99）<br>%Y 四位数的年份表示（0000-9999）<br>%Z 当前时区的名称（如果是本地时间，返回空字符串）<br>%% %号本身</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token keyword\">import</span> datetime\ndt <span class=\"token operator\">=</span> datetime<span class=\"token punctuation\">.</span>datetime<span class=\"token punctuation\">(</span>year<span class=\"token operator\">=</span><span class=\"token number\">2020</span><span class=\"token punctuation\">,</span> month<span class=\"token operator\">=</span><span class=\"token number\">6</span><span class=\"token punctuation\">,</span> day<span class=\"token operator\">=</span><span class=\"token number\">25</span><span class=\"token punctuation\">,</span> hour<span class=\"token operator\">=</span><span class=\"token number\">11</span><span class=\"token punctuation\">,</span> minute<span class=\"token operator\">=</span><span class=\"token number\">51</span><span class=\"token punctuation\">,</span> second<span class=\"token operator\">=</span><span class=\"token number\">49</span><span class=\"token punctuation\">)</span>\ns <span class=\"token operator\">=</span> dt<span class=\"token punctuation\">.</span>strftime<span class=\"token punctuation\">(</span><span class=\"token string\">\"'%Y/%m/%d %H:%M:%S\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">)</span> <span class=\"token comment\"># '2020/06/25 11:51:49</span>\ns <span class=\"token operator\">=</span> dt<span class=\"token punctuation\">.</span>strftime<span class=\"token punctuation\">(</span><span class=\"token string\">'%d %B, %Y, %A'</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">)</span> <span class=\"token comment\"># 25 June, 2020, Thursday</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<ol>\n<li>datetime.date() Return the date part.</li>\n<li>datetime.time() Return the time part, with tzinfo None.</li>\n<li>datetime.year 年</li>\n<li>datetime.month 月</li>\n<li>datetime.day 日</li>\n<li>datetime.hour 小时</li>\n<li>datetime.minute 分钟</li>\n<li>datetime.second 秒</li>\n<li>datetime.isoweekday 星期几</li>\n</ol>\n<p>在处理含有字符串日期的数据集或表格时，我们需要一种自动解析字符串的方法，无论它是什么格式的，都可以将其转化<br>为 datetime 对象。这时，就要使用到 dateutil 中的 parser 模块。</p>\n<ol>\n<li>parser.parse(timestr, parserinfo=None, **kwargs)</li>\n</ol>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token keyword\">from</span> dateutil <span class=\"token keyword\">import</span> parser\ns <span class=\"token operator\">=</span> <span class=\"token string\">'2020-06-25'</span>\ndt <span class=\"token operator\">=</span> parser<span class=\"token punctuation\">.</span>parse<span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>dt<span class=\"token punctuation\">)</span> <span class=\"token comment\"># 2020-06-25 00:00:00</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">type</span><span class=\"token punctuation\">(</span>dt<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># &lt;class 'datetime.datetime'></span>\ns <span class=\"token operator\">=</span> <span class=\"token string\">'March 31, 2010, 10:51pm'</span>\ndt <span class=\"token operator\">=</span> parser<span class=\"token punctuation\">.</span>parse<span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>dt<span class=\"token punctuation\">)</span> <span class=\"token comment\"># 2010-03-31 22:51:00</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">type</span><span class=\"token punctuation\">(</span>dt<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># &lt;class 'datetime.datetime'></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h3 id=\"14-2-date类\"><a href=\"#14-2-date类\" class=\"headerlink\" title=\"14.2 date类\"></a>14.2 date类</h3><pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">date</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">__init__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> year<span class=\"token punctuation\">,</span> month<span class=\"token punctuation\">,</span> day<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    \t<span class=\"token keyword\">pass</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">today</span><span class=\"token punctuation\">(</span>cls<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    \t<span class=\"token keyword\">pass</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<ol>\n<li>date.today() 获取当前日期信息。</li>\n</ol>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token keyword\">import</span> datetime\nd <span class=\"token operator\">=</span> datetime<span class=\"token punctuation\">.</span>date<span class=\"token punctuation\">(</span><span class=\"token number\">2020</span><span class=\"token punctuation\">,</span> <span class=\"token number\">6</span><span class=\"token punctuation\">,</span> <span class=\"token number\">25</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>d<span class=\"token punctuation\">)</span> <span class=\"token comment\"># 2020-06-25</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">type</span><span class=\"token punctuation\">(</span>d<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># &lt;class 'datetime.date'></span>\nd <span class=\"token operator\">=</span> datetime<span class=\"token punctuation\">.</span>date<span class=\"token punctuation\">.</span>today<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>d<span class=\"token punctuation\">)</span> <span class=\"token comment\"># 2020-06-25</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">type</span><span class=\"token punctuation\">(</span>d<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># &lt;class 'datetime.date'></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h3 id=\"14-3-time类\"><a href=\"#14-3-time类\" class=\"headerlink\" title=\"14.3 time类\"></a>14.3 time类</h3><pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">time</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">__init__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> hour<span class=\"token punctuation\">,</span> minute<span class=\"token punctuation\">,</span> second<span class=\"token punctuation\">,</span> microsecond<span class=\"token punctuation\">,</span> tzinfo<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    \t<span class=\"token keyword\">pass</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token keyword\">import</span> datetime\nt <span class=\"token operator\">=</span> datetime<span class=\"token punctuation\">.</span>time<span class=\"token punctuation\">(</span><span class=\"token number\">12</span><span class=\"token punctuation\">,</span> <span class=\"token number\">9</span><span class=\"token punctuation\">,</span> <span class=\"token number\">23</span><span class=\"token punctuation\">,</span> <span class=\"token number\">12980</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>t<span class=\"token punctuation\">)</span> <span class=\"token comment\"># 12:09:23.012980</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">type</span><span class=\"token punctuation\">(</span>t<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># &lt;class 'datetime.time'></span>\n\n<span class=\"token comment\"># 输入</span>\ndate <span class=\"token operator\">=</span> datetime<span class=\"token punctuation\">.</span>date<span class=\"token punctuation\">(</span><span class=\"token number\">2019</span><span class=\"token punctuation\">,</span> <span class=\"token number\">10</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\"># 输出</span>\n<span class=\"token number\">2019</span><span class=\"token operator\">-</span><span class=\"token number\">10</span><span class=\"token operator\">-</span><span class=\"token number\">02</span> <span class=\"token number\">00</span><span class=\"token punctuation\">:</span><span class=\"token number\">00</span><span class=\"token punctuation\">:</span><span class=\"token number\">00</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h3 id=\"14-4-timedelta类\"><a href=\"#14-4-timedelta类\" class=\"headerlink\" title=\"14.4 timedelta类\"></a>14.4 timedelta类</h3><p>timedelta 表示具体时间实例中的一段时间。你可以把它们简单想象成两个日期或时间之间的间隔。<br>它常常被用来从 datetime 对象中添加或移除一段特定的时间。</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">timedelta</span><span class=\"token punctuation\">(</span>SupportsAbs<span class=\"token punctuation\">[</span>timedelta<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">__init__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> days<span class=\"token punctuation\">,</span> seconds<span class=\"token punctuation\">,</span> microseconds<span class=\"token punctuation\">,</span> milliseconds<span class=\"token punctuation\">,</span> minutes<span class=\"token punctuation\">,</span> hours<span class=\"token punctuation\">,</span> weeks<span class=\"token punctuation\">,</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    \t<span class=\"token keyword\">pass</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">days</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    \t<span class=\"token keyword\">pass</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">total_seconds</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    \t<span class=\"token keyword\">pass</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token keyword\">import</span> datetime\n\ntd <span class=\"token operator\">=</span> datetime<span class=\"token punctuation\">.</span>timedelta<span class=\"token punctuation\">(</span>days<span class=\"token operator\">=</span><span class=\"token number\">30</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>td<span class=\"token punctuation\">)</span> <span class=\"token comment\"># 30 days, 0:00:00</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">type</span><span class=\"token punctuation\">(</span>td<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># &lt;class 'datetime.timedelta'></span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>datetime<span class=\"token punctuation\">.</span>date<span class=\"token punctuation\">.</span>today<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># 2020-07-01</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>datetime<span class=\"token punctuation\">.</span>date<span class=\"token punctuation\">.</span>today<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> td<span class=\"token punctuation\">)</span> <span class=\"token comment\"># 2020-07-31</span>\n\ndt1 <span class=\"token operator\">=</span> datetime<span class=\"token punctuation\">.</span>datetime<span class=\"token punctuation\">(</span><span class=\"token number\">2020</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">31</span><span class=\"token punctuation\">,</span> <span class=\"token number\">10</span><span class=\"token punctuation\">,</span> <span class=\"token number\">10</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\ndt2 <span class=\"token operator\">=</span> datetime<span class=\"token punctuation\">.</span>datetime<span class=\"token punctuation\">(</span><span class=\"token number\">2019</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">31</span><span class=\"token punctuation\">,</span> <span class=\"token number\">10</span><span class=\"token punctuation\">,</span> <span class=\"token number\">10</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\ntd <span class=\"token operator\">=</span> dt1 <span class=\"token operator\">-</span> dt2\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>td<span class=\"token punctuation\">)</span> <span class=\"token comment\"># 365 days, 0:00:00</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">type</span><span class=\"token punctuation\">(</span>td<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># &lt;class 'datetime.timedelta'></span>\n\ntd1 <span class=\"token operator\">=</span> datetime<span class=\"token punctuation\">.</span>timedelta<span class=\"token punctuation\">(</span>days<span class=\"token operator\">=</span><span class=\"token number\">30</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># 30 days</span>\ntd2 <span class=\"token operator\">=</span> datetime<span class=\"token punctuation\">.</span>timedelta<span class=\"token punctuation\">(</span>weeks<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># 1 week</span>\ntd <span class=\"token operator\">=</span> td1 <span class=\"token operator\">-</span> td2\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>td<span class=\"token punctuation\">)</span> <span class=\"token comment\"># 23 days, 0:00:00</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">type</span><span class=\"token punctuation\">(</span>td<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># &lt;class 'datetime.timedelta'></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>如果将两个 datetime 对象相减，就会得到表示该时间间隔的 timedelta 对象。<br>同样地，将两个时间间隔相减，可以得到另一个 timedelta 对象。</p>\n<h3 id=\"15-文件与文件系统\"><a href=\"#15-文件与文件系统\" class=\"headerlink\" title=\"15 文件与文件系统\"></a>15 文件与文件系统</h3><h3 id=\"15-1-打开文件\"><a href=\"#15-1-打开文件\" class=\"headerlink\" title=\"15.1 打开文件\"></a>15.1 打开文件</h3><p><strong>open(file, mode=’r’, buffering=None, encoding=None, errors=None, newline=None, closefd=True)</strong><br>Open file and return a stream. Raise OSError upon failure.<br>a. file : 必需，文件路径（相对或者绝对路径）。<br>b. mode : 可选，文件打开模式<br>c. buffering : 设置缓冲<br>d. encoding : 一般使用utf8<br>e. errors : 报错级别<br>f. newline : 区分换行符<br>常见的mode 如下表所示：</p>\n<div class=\"table-container\">\n<table>\n<thead>\n<tr>\n<th>打开模式</th>\n<th>执行操作</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>‘r’</td>\n<td>以只读方式打开文件。文件的指针将会放在文件的开头。这是默认模式。</td>\n</tr>\n<tr>\n<td>‘w’</td>\n<td>打开一个文件只用于写入。<br/>如果该文件已存在则打开文件，并从开头开始编辑。<br/>即原有内容会被删除。<br/>如果该文件不存在，创建新文件。</td>\n</tr>\n<tr>\n<td>‘x’</td>\n<td>写模式，新建一个文件，如果该文件已存在则会报错。</td>\n</tr>\n<tr>\n<td>‘a’</td>\n<td>追加模式，打开一个文件用于追加。<br/>如果该文件已存在，文件指针将会放在文件的结尾。<br/>也就是说，新的内容将会被写入到已有内容之后。<br/>如果该文件不存在，创建新文件进行写入。</td>\n</tr>\n<tr>\n<td>‘b’</td>\n<td>以二进制模式打开文件。一般用于非文本文件，如：图片。</td>\n</tr>\n<tr>\n<td>‘t’</td>\n<td>以文本模式打开（默认）。一般用于文本文件，如：txt。</td>\n</tr>\n<tr>\n<td>‘+’</td>\n<td>可读写模式（可添加到其它模式中使用）</td>\n</tr>\n</tbody>\n</table>\n</div>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">f <span class=\"token operator\">=</span> <span class=\"token builtin\">open</span><span class=\"token punctuation\">(</span><span class=\"token string\">'将进酒.txt'</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>f<span class=\"token punctuation\">)</span>\n<span class=\"token comment\"># &lt;_io.TextIOWrapper name='将进酒.txt' mode='r' encoding='cp936'></span>\n<span class=\"token keyword\">for</span> each <span class=\"token keyword\">in</span> f<span class=\"token punctuation\">:</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>each<span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h3 id=\"15-2-文件对象方法\"><a href=\"#15-2-文件对象方法\" class=\"headerlink\" title=\"15.2 文件对象方法\"></a>15.2 文件对象方法</h3><p><strong>fileObject.close()</strong> 用于关闭一个已打开的文件。关闭后的文件不能再进行读写操作， 否则会触发ValueError错误。</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">f <span class=\"token operator\">=</span> <span class=\"token builtin\">open</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"将进酒.txt\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'FileName:'</span><span class=\"token punctuation\">,</span> f<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">)</span> <span class=\"token comment\"># FileName: 将进酒.txt</span>\nf<span class=\"token punctuation\">.</span>close<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n<p><strong>fileObject.read([size])</strong> 用于从文件读取指定的字符数，如果未给定或为负则读取所有。</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">f <span class=\"token operator\">=</span> <span class=\"token builtin\">open</span><span class=\"token punctuation\">(</span><span class=\"token string\">'将进酒.txt'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'r'</span><span class=\"token punctuation\">)</span>\nline <span class=\"token operator\">=</span> f<span class=\"token punctuation\">.</span>read<span class=\"token punctuation\">(</span><span class=\"token number\">20</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"读取的字符串: %s\"</span> <span class=\"token operator\">%</span> line<span class=\"token punctuation\">)</span>\n<span class=\"token comment\"># 读取的字符串: 君不见，黄河之水天上来，奔流到海不复回。</span>\nf<span class=\"token punctuation\">.</span>close<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p><strong>fileObject.readline()</strong> 读取整行，包括 “\\n” 字符。</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">f <span class=\"token operator\">=</span> <span class=\"token builtin\">open</span><span class=\"token punctuation\">(</span><span class=\"token string\">'将进酒.txt'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'r'</span><span class=\"token punctuation\">)</span>\nline <span class=\"token operator\">=</span> f<span class=\"token punctuation\">.</span>readline<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"读取的字符串: %s\"</span> <span class=\"token operator\">%</span> line<span class=\"token punctuation\">)</span>\n<span class=\"token comment\"># 读取的字符串: 君不见，黄河之水天上来，奔流到海不复回。</span>\nf<span class=\"token punctuation\">.</span>close<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p><strong>fileObject.readlines()</strong> 用于读取所有行(直到结束符 EOF)并返回列表，该列表可以由 Python 的<br><strong>for… in …</strong> 结构进行处理。</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">f <span class=\"token operator\">=</span> <span class=\"token builtin\">open</span><span class=\"token punctuation\">(</span><span class=\"token string\">'将进酒.txt'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'r'</span><span class=\"token punctuation\">)</span>\nline <span class=\"token operator\">=</span> f<span class=\"token punctuation\">.</span>readline<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"读取的字符串: %s\"</span> <span class=\"token operator\">%</span> line<span class=\"token punctuation\">)</span>\n<span class=\"token comment\"># 读取的字符串: 君不见，黄河之水天上来，奔流到海不复回。</span>\nf<span class=\"token punctuation\">.</span>close<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p><strong>fileObject.tell()</strong> 返回文件的当前位置，即文件指针当前位置。</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">f <span class=\"token operator\">=</span> <span class=\"token builtin\">open</span><span class=\"token punctuation\">(</span><span class=\"token string\">'将进酒.txt'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'r'</span><span class=\"token punctuation\">)</span>\nline <span class=\"token operator\">=</span> f<span class=\"token punctuation\">.</span>readline<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>line<span class=\"token punctuation\">)</span>\n<span class=\"token comment\"># 君不见，黄河之水天上来，奔流到海不复回。</span>\npos <span class=\"token operator\">=</span> f<span class=\"token punctuation\">.</span>tell<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>pos<span class=\"token punctuation\">)</span> <span class=\"token comment\"># 42</span>\nf<span class=\"token punctuation\">.</span>close<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p><strong>fileObject.seek(offset[, whence])</strong> 用于移动文件读取指针到指定位置。<br>a. offset ：开始的偏移量，也就是代表需要移动偏移的字节数，如果是负数表示从倒数第几位开始。<br>b. whence ：可选，默认值为 0。给 offset 定义一个参数，表示要从哪个位置开始偏移；0 代表从文件开头开始<br>算起，1 代表从当前位置开始算起，2 代表从文件末尾算起。</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">f <span class=\"token operator\">=</span> <span class=\"token builtin\">open</span><span class=\"token punctuation\">(</span><span class=\"token string\">'将进酒.txt'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'r'</span><span class=\"token punctuation\">)</span>\nline <span class=\"token operator\">=</span> f<span class=\"token punctuation\">.</span>readline<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>line<span class=\"token punctuation\">)</span>\n<span class=\"token comment\"># 君不见，黄河之水天上来，奔流到海不复回。</span>\nline <span class=\"token operator\">=</span> f<span class=\"token punctuation\">.</span>readline<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>line<span class=\"token punctuation\">)</span>\n<span class=\"token comment\"># 君不见，高堂明镜悲白发，朝如青丝暮成雪。</span>\nf<span class=\"token punctuation\">.</span>seek<span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\nline <span class=\"token operator\">=</span> f<span class=\"token punctuation\">.</span>readline<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>line<span class=\"token punctuation\">)</span>\n<span class=\"token comment\"># 君不见，黄河之水天上来，奔流到海不复回。</span>\nf<span class=\"token punctuation\">.</span>close<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p><strong>fileObject.write(str)</strong> 用于向文件中写入指定字符串，返回的是写入的字符长度。</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">f <span class=\"token operator\">=</span> <span class=\"token builtin\">open</span><span class=\"token punctuation\">(</span><span class=\"token string\">'workfile.txt'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'wb+'</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>f<span class=\"token punctuation\">.</span>write<span class=\"token punctuation\">(</span><span class=\"token string\">b'0123456789abcdef'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># 16</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>f<span class=\"token punctuation\">.</span>seek<span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># 5</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>f<span class=\"token punctuation\">.</span>read<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># b'5'</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>f<span class=\"token punctuation\">.</span>seek<span class=\"token punctuation\">(</span><span class=\"token operator\">-</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># 13</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>f<span class=\"token punctuation\">.</span>read<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># b'd'</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>在文件关闭前或缓冲区刷新前，字符串内容存储在缓冲区中，这时你在文件中是看不到写入的内容的。<br>如果文件打开模式带b ，那写入文件内容时， str （参数）要用encode 方法转为bytes 形式，否则报<br>错： TypeError: a bytes-like object is required, not ‘str’ 。</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token builtin\">str</span> <span class=\"token operator\">=</span> <span class=\"token string\">'...'</span>\n<span class=\"token comment\"># 文本 = Unicode字符序列</span>\n<span class=\"token comment\"># 相当于 string 类型</span>\n<span class=\"token builtin\">str</span> <span class=\"token operator\">=</span> <span class=\"token string\">b'...'</span>\n<span class=\"token comment\"># 文本 = 八位序列(0到255之间的整数)</span>\n<span class=\"token comment\"># 字节文字总是以‘b’或‘B’作为前缀；它们产生一个字节类型的实例，而不是str类型。</span>\n<span class=\"token comment\"># 相当于 byte[]</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p><strong>fileObject.writelines(sequence)</strong> 向文件写入一个序列字符串列表，如果需要换行则要自己加入每行的换行<br>符\\n 。</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">f <span class=\"token operator\">=</span> <span class=\"token builtin\">open</span><span class=\"token punctuation\">(</span><span class=\"token string\">'test.txt'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'w+'</span><span class=\"token punctuation\">)</span>\nseq <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'小马的程序人生\\n'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'老马的程序人生'</span><span class=\"token punctuation\">]</span>\nf<span class=\"token punctuation\">.</span>writelines<span class=\"token punctuation\">(</span>seq<span class=\"token punctuation\">)</span>\nf<span class=\"token punctuation\">.</span>seek<span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">for</span> each <span class=\"token keyword\">in</span> f<span class=\"token punctuation\">:</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>each<span class=\"token punctuation\">)</span>\n<span class=\"token comment\"># 小马的程序人生</span>\n<span class=\"token comment\"># 老马的程序人生</span>\nf<span class=\"token punctuation\">.</span>close<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h3 id=\"15-3-简洁的-with-语句\"><a href=\"#15-3-简洁的-with-语句\" class=\"headerlink\" title=\"15.3 简洁的 with 语句\"></a>15.3 简洁的 with 语句</h3><p>一些对象定义了标准的清理行为，无论系统是否成功的使用了它，一旦不需要它了，那么这个标准的清理行为就会执行。关键词 with 语句就可以保证诸如文件之类的对象在使用完之后一定会正确的执行它的清理方法。</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token keyword\">try</span><span class=\"token punctuation\">:</span>\nf <span class=\"token operator\">=</span> <span class=\"token builtin\">open</span><span class=\"token punctuation\">(</span><span class=\"token string\">'myfile.txt'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'w'</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">for</span> line <span class=\"token keyword\">in</span> f<span class=\"token punctuation\">:</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>line<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">except</span> OSError <span class=\"token keyword\">as</span> error<span class=\"token punctuation\">:</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'出错啦!%s'</span> <span class=\"token operator\">%</span> <span class=\"token builtin\">str</span><span class=\"token punctuation\">(</span>error<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">finally</span><span class=\"token punctuation\">:</span>\nf<span class=\"token punctuation\">.</span>close<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\"># 出错啦!not readable</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token keyword\">try</span><span class=\"token punctuation\">:</span>\n<span class=\"token keyword\">with</span> <span class=\"token builtin\">open</span><span class=\"token punctuation\">(</span><span class=\"token string\">'myfile.txt'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'w'</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">as</span> f<span class=\"token punctuation\">:</span>\n<span class=\"token keyword\">for</span> line <span class=\"token keyword\">in</span> f<span class=\"token punctuation\">:</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>line<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">except</span> OSError <span class=\"token keyword\">as</span> error<span class=\"token punctuation\">:</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'出错啦!%s'</span> <span class=\"token operator\">%</span> <span class=\"token builtin\">str</span><span class=\"token punctuation\">(</span>error<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\"># 出错啦!not readable</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h2 id=\"16-OS\"><a href=\"#16-OS\" class=\"headerlink\" title=\"16 OS\"></a>16 OS</h2><p>我们所知道常用的操作系统就有：Windows，Mac OS，Linu，Unix等，这些操作系统底层对于文件系统的访问工作原理是<br>不一样的，因此你可能就要针对不同的系统来考虑使用哪些文件系统模块……，这样的做法是非常不友好且麻烦的，因为<br>这样就意味着当你的程序运行环境一改变，你就要相应的去修改大量的代码来应对。<br>有了OS（Operation System）模块，我们不需要关心什么操作系统下使用什么模块，OS模块会帮你选择正确的模块并调<br>用。</p>\n<ol>\n<li>os.getcwd() 用于返回当前工作目录。</li>\n<li>os.chdir(path) 用于改变当前工作目录到指定的路径。</li>\n</ol>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token keyword\">import</span> os\npath <span class=\"token operator\">=</span> <span class=\"token string\">'C:\\\\'</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"当前工作目录 : %s\"</span> <span class=\"token operator\">%</span> os<span class=\"token punctuation\">.</span>getcwd<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\"># 当前工作目录 : C:\\Users\\Administrator\\PycharmProjects\\untitled1</span>\nos<span class=\"token punctuation\">.</span>chdir<span class=\"token punctuation\">(</span>path<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"目录修改成功 : %s\"</span> <span class=\"token operator\">%</span> os<span class=\"token punctuation\">.</span>getcwd<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\"># 目录修改成功 : C:\\</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>listdir (path=’.’) 返回path 指定的文件夹包含的文件或文件夹的名字的列表。</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token keyword\">import</span> os\ndirs <span class=\"token operator\">=</span> os<span class=\"token punctuation\">.</span>listdir<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">for</span> item <span class=\"token keyword\">in</span> dirs<span class=\"token punctuation\">:</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>item<span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n<p>os.mkdir(path) 创建单层目录，如果该目录已存在抛出异常。</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token keyword\">import</span> os\n<span class=\"token keyword\">if</span> os<span class=\"token punctuation\">.</span>path<span class=\"token punctuation\">.</span>isdir<span class=\"token punctuation\">(</span><span class=\"token string\">r'.\\b'</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">is</span> <span class=\"token boolean\">False</span><span class=\"token punctuation\">:</span>\n    os<span class=\"token punctuation\">.</span>mkdir<span class=\"token punctuation\">(</span><span class=\"token string\">r'.\\B'</span><span class=\"token punctuation\">)</span>\n    os<span class=\"token punctuation\">.</span>mkdir<span class=\"token punctuation\">(</span><span class=\"token string\">r'.\\B\\A'</span><span class=\"token punctuation\">)</span>\nos<span class=\"token punctuation\">.</span>mkdir<span class=\"token punctuation\">(</span><span class=\"token string\">r'.\\C\\A'</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># FileNotFoundError</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>os.makedirs(path) 用于递归创建多层目录，如果该目录已存在抛出异常。</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token keyword\">import</span> os\nos<span class=\"token punctuation\">.</span>makedirs<span class=\"token punctuation\">(</span><span class=\"token string\">r'.\\E\\A'</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n<p>os.remove(path) 用于删除指定路径的文件。如果指定的路径是一个目录，将抛出 OSError 。</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token keyword\">import</span> os\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"目录为: %s\"</span> <span class=\"token operator\">%</span> os<span class=\"token punctuation\">.</span>listdir<span class=\"token punctuation\">(</span><span class=\"token string\">r'.\\E\\A'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\nos<span class=\"token punctuation\">.</span>remove<span class=\"token punctuation\">(</span><span class=\"token string\">r'.\\E\\A\\test.txt'</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"目录为: %s\"</span> <span class=\"token operator\">%</span> os<span class=\"token punctuation\">.</span>listdir<span class=\"token punctuation\">(</span><span class=\"token string\">r'.\\E\\A'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n<p>os.rmdir(path) 用于删除单层目录。仅当这文件夹是空的才可以, 否则, 抛出 OSError 。</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token keyword\">import</span> os\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"目录为: %s\"</span> <span class=\"token operator\">%</span> os<span class=\"token punctuation\">.</span>listdir<span class=\"token punctuation\">(</span><span class=\"token string\">r'.\\E'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\nos<span class=\"token punctuation\">.</span>rmdir<span class=\"token punctuation\">(</span><span class=\"token string\">r'.\\E\\A'</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"目录为: %s\"</span> <span class=\"token operator\">%</span> os<span class=\"token punctuation\">.</span>listdir<span class=\"token punctuation\">(</span><span class=\"token string\">r'.\\E'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n<p>os.removedirs(path) 递归删除目录，从子目录到父目录逐层尝试删除，遇到目录非空则抛出异常。</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token keyword\">import</span> os\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"目录为: %s\"</span> <span class=\"token operator\">%</span> os<span class=\"token punctuation\">.</span>listdir<span class=\"token punctuation\">(</span>os<span class=\"token punctuation\">.</span>getcwd<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\nos<span class=\"token punctuation\">.</span>removedirs<span class=\"token punctuation\">(</span><span class=\"token string\">r'.\\E\\A'</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># 先删除A 然后删除E</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"目录为: %s\"</span> <span class=\"token operator\">%</span> os<span class=\"token punctuation\">.</span>listdir<span class=\"token punctuation\">(</span>os<span class=\"token punctuation\">.</span>getcwd<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n<p>os.rename(src, dst) 方法用于命名文件或目录，从 src 到 dst ，如果 dst 是一个存在的目录, 将抛出<br>OSError </p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token keyword\">import</span> os\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"目录为: %s\"</span> <span class=\"token operator\">%</span> os<span class=\"token punctuation\">.</span>listdir<span class=\"token punctuation\">(</span>os<span class=\"token punctuation\">.</span>getcwd<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\nos<span class=\"token punctuation\">.</span>rename<span class=\"token punctuation\">(</span><span class=\"token string\">\"test.txt\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"test2.txt\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"重命名成功。\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"目录为: %s\"</span> <span class=\"token operator\">%</span> os<span class=\"token punctuation\">.</span>listdir<span class=\"token punctuation\">(</span>os<span class=\"token punctuation\">.</span>getcwd<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>os.system(command) 运行系统的shell命令（将字符串转化成命令）</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token keyword\">import</span> os\npath <span class=\"token operator\">=</span> os<span class=\"token punctuation\">.</span>getcwd<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token string\">'\\\\a.py'</span>\na <span class=\"token operator\">=</span> os<span class=\"token punctuation\">.</span>system<span class=\"token punctuation\">(</span><span class=\"token string\">r'python %s'</span> <span class=\"token operator\">%</span> path<span class=\"token punctuation\">)</span>\nos<span class=\"token punctuation\">.</span>system<span class=\"token punctuation\">(</span><span class=\"token string\">'calc'</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># 打开计算器</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n<ol>\n<li>os.curdir 指代当前目录（ . ）</li>\n<li>os.pardir 指代上一级目录（ .. ）</li>\n<li>os.sep 输出操作系统特定的路径分隔符（win下为\\\\ ，Linux下为/ ）</li>\n<li>os.linesep 当前平台使用的行终止符（win下为\\r\\n ，Linux下为\\n ）</li>\n<li>os.name 指代当前使用的操作系统（包括：’mac’，’nt’）</li>\n</ol>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token keyword\">import</span> os\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>os<span class=\"token punctuation\">.</span>curdir<span class=\"token punctuation\">)</span> <span class=\"token comment\"># .</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>os<span class=\"token punctuation\">.</span>pardir<span class=\"token punctuation\">)</span> <span class=\"token comment\"># ..</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>os<span class=\"token punctuation\">.</span>sep<span class=\"token punctuation\">)</span> <span class=\"token comment\"># \\</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>os<span class=\"token punctuation\">.</span>linesep<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>os<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">)</span> <span class=\"token comment\"># nt</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<ol>\n<li>os.path.basename(path) 去掉目录路径，单独返回文件名</li>\n<li>os.path.dirname(path) 去掉文件名，单独返回目录路径</li>\n<li>os.path.join(path1[, path2[, …]]) 将 path1 ， path2 各部分组合成一个路径名</li>\n<li>os.path.split(path) 分割文件名与路径，返回(f_path,f_name) 元组。如果完全使用目录，它会将最后一个目<br>录作为文件名分离，且不会判断文件或者目录是否存在。</li>\n<li>os.path.splitext(path) 分离文件名与扩展名，返回(f_path,f_name) 元组。</li>\n</ol>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token keyword\">import</span> os\n<span class=\"token comment\"># 返回文件名</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>os<span class=\"token punctuation\">.</span>path<span class=\"token punctuation\">.</span>basename<span class=\"token punctuation\">(</span><span class=\"token string\">r'C:\\test\\lsgo.txt'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># lsgo.txt</span>\n<span class=\"token comment\"># 返回目录路径</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>os<span class=\"token punctuation\">.</span>path<span class=\"token punctuation\">.</span>dirname<span class=\"token punctuation\">(</span><span class=\"token string\">r'C:\\test\\lsgo.txt'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># C:\\test</span>\n<span class=\"token comment\"># 将目录和文件名合成一个路径</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>os<span class=\"token punctuation\">.</span>path<span class=\"token punctuation\">.</span>join<span class=\"token punctuation\">(</span><span class=\"token string\">'C:\\\\'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'test'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'lsgo.txt'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># C:\\test\\lsgo.txt</span>\n<span class=\"token comment\"># 分割文件名与路径</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>os<span class=\"token punctuation\">.</span>path<span class=\"token punctuation\">.</span>split<span class=\"token punctuation\">(</span><span class=\"token string\">r'C:\\test\\lsgo.txt'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># ('C:\\\\test', 'lsgo.txt')</span>\n<span class=\"token comment\"># 分离文件名与扩展名</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>os<span class=\"token punctuation\">.</span>path<span class=\"token punctuation\">.</span>splitext<span class=\"token punctuation\">(</span><span class=\"token string\">r'C:\\test\\lsgo.txt'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># ('C:\\\\test\\\\lsgo', '.txt')</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<ol>\n<li>os.path.getsize(file) 返回指定文件大小，单位是字节。</li>\n<li>os.path.getatime(file) 返回指定文件最近的访问时间</li>\n<li>os.path.getctime(file) 返回指定文件的创建时间</li>\n<li>os.path.getmtime(file) 返回指定文件的最新的修改时间</li>\n<li>浮点型秒数，可用time模块的gmtime() 或localtime() 函数换算</li>\n</ol>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token keyword\">import</span> os\n<span class=\"token keyword\">import</span> time\n<span class=\"token builtin\">file</span> <span class=\"token operator\">=</span> <span class=\"token string\">r'.\\lsgo.txt'</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>os<span class=\"token punctuation\">.</span>path<span class=\"token punctuation\">.</span>getsize<span class=\"token punctuation\">(</span><span class=\"token builtin\">file</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># 30</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>os<span class=\"token punctuation\">.</span>path<span class=\"token punctuation\">.</span>getatime<span class=\"token punctuation\">(</span><span class=\"token builtin\">file</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># 1565593737.347196</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>os<span class=\"token punctuation\">.</span>path<span class=\"token punctuation\">.</span>getctime<span class=\"token punctuation\">(</span><span class=\"token builtin\">file</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># 1565593737.347196</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>os<span class=\"token punctuation\">.</span>path<span class=\"token punctuation\">.</span>getmtime<span class=\"token punctuation\">(</span><span class=\"token builtin\">file</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># 1565593797.9298275</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>time<span class=\"token punctuation\">.</span>gmtime<span class=\"token punctuation\">(</span>os<span class=\"token punctuation\">.</span>path<span class=\"token punctuation\">.</span>getctime<span class=\"token punctuation\">(</span><span class=\"token builtin\">file</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\"># time.struct_time(tm_year=2019, tm_mon=8, tm_mday=12, tm_hour=7, tm_min=8, tm_sec=57, tm_wday=0,</span>\ntm_yday<span class=\"token operator\">=</span><span class=\"token number\">224</span><span class=\"token punctuation\">,</span> tm_isdst<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>time<span class=\"token punctuation\">.</span>localtime<span class=\"token punctuation\">(</span>os<span class=\"token punctuation\">.</span>path<span class=\"token punctuation\">.</span>getctime<span class=\"token punctuation\">(</span><span class=\"token builtin\">file</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\"># time.struct_time(tm_year=2019, tm_mon=8, tm_mday=12, tm_hour=15, tm_min=8, tm_sec=57, tm_wday=0,</span>\ntm_yday<span class=\"token operator\">=</span><span class=\"token number\">224</span><span class=\"token punctuation\">,</span> tm_isdst<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<ol>\n<li>os.path.exists(path) 判断指定路径（目录或文件）是否存在</li>\n<li>os.path.isabs(path) 判断指定路径是否为绝对路径</li>\n<li>os.path.isdir(path) 判断指定路径是否存在且是一个目录</li>\n<li>os.path.isfile(path) 判断指定路径是否存在且是一个文件</li>\n<li>os.path.islink(path) 判断指定路径是否存在且是一个符号链接</li>\n<li>os.path.ismount(path) 判断指定路径是否存在且是一个悬挂点</li>\n<li>os.path.samefile(path1,path2) 判断path1和path2两个路径是否指向同一个文件</li>\n</ol>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token keyword\">import</span> os\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>os<span class=\"token punctuation\">.</span>path<span class=\"token punctuation\">.</span>ismount<span class=\"token punctuation\">(</span><span class=\"token string\">'D:\\\\'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># True</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>os<span class=\"token punctuation\">.</span>path<span class=\"token punctuation\">.</span>ismount<span class=\"token punctuation\">(</span><span class=\"token string\">'D:\\\\Test'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># False</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n<h2 id=\"17-序列化与反序列化\"><a href=\"#17-序列化与反序列化\" class=\"headerlink\" title=\"17 序列化与反序列化\"></a>17 序列化与反序列化</h2><p>Python 的 pickle 模块实现了基本的数据序列和反序列化。</p>\n<ol>\n<li>通过 pickle 模块的序列化操作我们能够将程序中运行的对象信息保存到文件中去，永久存储。</li>\n<li>通过 pickle 模块的反序列化操作，我们能够从文件中创建上一次程序保存的对象。</li>\n</ol>\n<p>pickle模块中最常用的函数为：<br><strong>pickle.dump(obj, file, [,protocol])</strong> 将obj 对象序列化存入已经打开的file 中。</p>\n<ol>\n<li>obj ：想要序列化的obj 对象。</li>\n<li>file :文件名称。</li>\n<li>protocol ：序列化使用的协议。如果该项省略，则默认为0。如果为负值或HIGHEST_PROTOCOL ，则使用最高的协<br>议版本。</li>\n</ol>\n<p><strong>pickle.load(file)</strong> 将file 中的对象序列化读出。</p>\n<p>file ：文件名称。</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token keyword\">import</span> pickle\ndataList <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'yes'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n            <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'yes'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n            <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'no'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n            <span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'no'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n            <span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'no'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span>\ndataDic <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span><span class=\"token number\">0</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n            <span class=\"token number\">1</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">(</span><span class=\"token string\">'a'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'b'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n            <span class=\"token number\">2</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">&#123;</span><span class=\"token string\">'c'</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'yes'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'d'</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'no'</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">&#125;</span>\n<span class=\"token comment\"># 使用dump()将数据序列化到文件中</span>\nfw <span class=\"token operator\">=</span> <span class=\"token builtin\">open</span><span class=\"token punctuation\">(</span><span class=\"token string\">r'.\\dataFile.pkl'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'wb'</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\"># Pickle the list using the highest protocol available.</span>\npickle<span class=\"token punctuation\">.</span>dump<span class=\"token punctuation\">(</span>dataList<span class=\"token punctuation\">,</span> fw<span class=\"token punctuation\">,</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\"># Pickle dictionary using protocol 0.</span>\npickle<span class=\"token punctuation\">.</span>dump<span class=\"token punctuation\">(</span>dataDic<span class=\"token punctuation\">,</span> fw<span class=\"token punctuation\">)</span>\nfw<span class=\"token punctuation\">.</span>close<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\"># 使用load()将数据从文件中序列化读出</span>\nfr <span class=\"token operator\">=</span> <span class=\"token builtin\">open</span><span class=\"token punctuation\">(</span><span class=\"token string\">'dataFile.pkl'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'rb'</span><span class=\"token punctuation\">)</span>\ndata1 <span class=\"token operator\">=</span> pickle<span class=\"token punctuation\">.</span>load<span class=\"token punctuation\">(</span>fr<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>data1<span class=\"token punctuation\">)</span>\ndata2 <span class=\"token operator\">=</span> pickle<span class=\"token punctuation\">.</span>load<span class=\"token punctuation\">(</span>fr<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>data2<span class=\"token punctuation\">)</span>\nfr<span class=\"token punctuation\">.</span>close<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\"># [[1, 1, 'yes'], [1, 1, 'yes'], [1, 0, 'no'], [0, 1, 'no'], [0, 1, 'no']]</span>\n<span class=\"token comment\"># &#123;0: [1, 2, 3, 4], 1: ('a', 'b'), 2: &#123;'c': 'yes', 'd': 'no'&#125;&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n","text":" 天池Python训练营 Python基础1.变量、运算符与数据类型1.1 注释# 表示注释，作用于整行。 ‘’’ ‘’’ 或者 “”” “”” 表示区间注释，在三引号之间的所有内容被注释 # 这是一个注释 print(\"Hello world\") ''' 这是多行注释，用三个单...","link":"","photos":[],"count_time":{"symbolsCount":"62k","symbolsTime":"56 mins."},"categories":[{"name":"Python","slug":"Python","count":4,"path":"api/categories/Python.json"}],"tags":[],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#Python%E5%9F%BA%E7%A1%80\"><span class=\"toc-text\">Python基础</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#1-%E5%8F%98%E9%87%8F%E3%80%81%E8%BF%90%E7%AE%97%E7%AC%A6%E4%B8%8E%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B\"><span class=\"toc-text\">1.变量、运算符与数据类型</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#1-1-%E6%B3%A8%E9%87%8A\"><span class=\"toc-text\">1.1 注释</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#1-2-%E8%BF%90%E7%AE%97%E7%AC%A6\"><span class=\"toc-text\">1.2 运算符</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E4%BD%8D%E8%BF%90%E7%AE%97\"><span class=\"toc-text\">位运算</span></a></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#1-3-%E5%8F%98%E9%87%8F%E5%92%8C%E8%B5%8B%E5%80%BC\"><span class=\"toc-text\">1.3 变量和赋值</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#1-4-%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B%E4%B8%8E%E8%BD%AC%E6%8D%A2\"><span class=\"toc-text\">1.4 数据类型与转换</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#1-5-print-%E5%87%BD%E6%95%B0\"><span class=\"toc-text\">1.5 print() 函数</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#2-%E9%80%BB%E8%BE%91%E8%AF%AD%E5%8F%A5\"><span class=\"toc-text\">2 逻辑语句</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#2-1assert-%E5%85%B3%E9%94%AE%E8%AF%8D\"><span class=\"toc-text\">2.1assert 关键词</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#2-2-range-%E5%87%BD%E6%95%B0\"><span class=\"toc-text\">2.2 range() 函数</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#2-3-enumerate-%E5%87%BD%E6%95%B0\"><span class=\"toc-text\">2.3 enumerate()函数</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#2-4-%E6%8E%A8%E5%AF%BC%E5%BC%8F\"><span class=\"toc-text\">2.4 推导式</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E5%88%97%E8%A1%A8%E6%8E%A8%E5%AF%BC%E5%BC%8F\"><span class=\"toc-text\">列表推导式</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E5%85%83%E7%BB%84%E6%8E%A8%E5%AF%BC%E5%BC%8F\"><span class=\"toc-text\">元组推导式</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E5%AD%97%E5%85%B8%E6%8E%A8%E5%AF%BC%E5%BC%8F\"><span class=\"toc-text\">字典推导式</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E9%9B%86%E5%90%88%E6%8E%A8%E5%AF%BC%E5%BC%8F\"><span class=\"toc-text\">集合推导式</span></a></li></ol></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#3-%E5%BC%82%E5%B8%B8%E5%A4%84%E7%90%86\"><span class=\"toc-text\">3 异常处理</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#3-1-Python-%E6%A0%87%E5%87%86%E5%BC%82%E5%B8%B8%E6%80%BB%E7%BB%93\"><span class=\"toc-text\">3.1 Python 标准异常总结</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#3-2-Python%E6%A0%87%E5%87%86%E8%AD%A6%E5%91%8A%E6%80%BB%E7%BB%93\"><span class=\"toc-text\">3.2 Python标准警告总结</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#3-3-%E5%BC%82%E5%B8%B8%E5%A4%84%E7%90%86%E8%AF%AD%E5%8F%A5\"><span class=\"toc-text\">3.3 异常处理语句</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#try-except\"><span class=\"toc-text\">try - except</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#try-except-finally\"><span class=\"toc-text\">try - except - finally</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#try-except-else\"><span class=\"toc-text\">try - except - else</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#raise%E8%AF%AD%E5%8F%A5\"><span class=\"toc-text\">raise语句</span></a></li></ol></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#4-%E5%88%97%E8%A1%A8-list\"><span class=\"toc-text\">4 列表 list</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#4-1-%E5%88%97%E8%A1%A8%E7%9A%84%E5%AE%9A%E4%B9%89\"><span class=\"toc-text\">4.1 列表的定义</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#4-2-%E5%88%97%E8%A1%A8%E7%9A%84%E6%93%8D%E4%BD%9C\"><span class=\"toc-text\">4.2 列表的操作</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E6%B7%BB%E5%8A%A0%E5%85%83%E7%B4%A0\"><span class=\"toc-text\">添加元素</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E5%88%A0%E9%99%A4%E5%85%83%E7%B4%A0\"><span class=\"toc-text\">删除元素</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E8%8E%B7%E5%8F%96%E5%88%97%E8%A1%A8%E4%B8%AD%E7%9A%84%E5%85%83%E7%B4%A0\"><span class=\"toc-text\">获取列表中的元素</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E5%88%97%E8%A1%A8%E7%9A%84%E5%B8%B8%E7%94%A8%E6%93%8D%E4%BD%9C%E7%AC%A6\"><span class=\"toc-text\">列表的常用操作符</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E5%88%97%E8%A1%A8%E7%9A%84%E5%85%B6%E5%AE%83%E6%96%B9%E6%B3%95\"><span class=\"toc-text\">列表的其它方法</span></a></li></ol></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#5-%E5%85%83%E7%BB%84\"><span class=\"toc-text\">5 元组</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#5-1-%E5%88%9B%E5%BB%BA%E5%92%8C%E8%AE%BF%E9%97%AE%E4%B8%80%E4%B8%AA%E5%85%83%E7%BB%84\"><span class=\"toc-text\">5.1 创建和访问一个元组</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#5-2-%E6%9B%B4%E6%96%B0%E5%92%8C%E5%88%A0%E9%99%A4%E4%B8%80%E4%B8%AA%E5%85%83%E7%BB%84\"><span class=\"toc-text\">5.2 更新和删除一个元组</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#5-3-%E5%85%83%E7%BB%84%E7%9B%B8%E5%85%B3%E7%9A%84%E6%93%8D%E4%BD%9C%E7%AC%A6\"><span class=\"toc-text\">5.3 元组相关的操作符</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#5-4-%E5%86%85%E7%BD%AE%E6%96%B9%E6%B3%95\"><span class=\"toc-text\">5.4 内置方法</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#5-5-%E8%A7%A3%E5%8E%8B%E5%85%83%E7%BB%84\"><span class=\"toc-text\">5.5 解压元组</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#6-%E5%AD%97%E7%AC%A6%E4%B8%B2\"><span class=\"toc-text\">6 字符串</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#6-1-%E5%AD%97%E7%AC%A6%E4%B8%B2%E7%9A%84%E5%AE%9A%E4%B9%89\"><span class=\"toc-text\">6.1 字符串的定义</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#6-2-%E5%AD%97%E7%AC%A6%E4%B8%B2%E7%9A%84%E5%88%87%E7%89%87%E4%B8%8E%E6%8B%BC%E6%8E%A5\"><span class=\"toc-text\">6.2 字符串的切片与拼接</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#6-3-%E5%AD%97%E7%AC%A6%E4%B8%B2%E7%9A%84%E5%B8%B8%E7%94%A8%E5%86%85%E7%BD%AE%E6%96%B9%E6%B3%95\"><span class=\"toc-text\">6.3 字符串的常用内置方法</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#6-4-%E5%AD%97%E7%AC%A6%E4%B8%B2%E6%A0%BC%E5%BC%8F%E5%8C%96\"><span class=\"toc-text\">6.4 字符串格式化</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#7-%E5%AD%97%E5%85%B8\"><span class=\"toc-text\">7 字典</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#7-1-%E5%8F%AF%E5%8F%98%E7%B1%BB%E5%9E%8B%E4%B8%8E%E4%B8%8D%E5%8F%AF%E5%8F%98%E7%B1%BB%E5%9E%8B\"><span class=\"toc-text\">7.1 可变类型与不可变类型</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#7-2-%E5%AD%97%E5%85%B8%E7%9A%84%E5%AE%9A%E4%B9%89\"><span class=\"toc-text\">7.2 字典的定义</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#7-3-%E5%88%9B%E5%BB%BA%E5%92%8C%E8%AE%BF%E9%97%AE%E5%AD%97%E5%85%B8\"><span class=\"toc-text\">7.3 创建和访问字典</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#7-4-%E5%AD%97%E5%85%B8%E7%9A%84%E5%86%85%E7%BD%AE%E6%96%B9%E6%B3%95\"><span class=\"toc-text\">7.4 字典的内置方法</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#8-%E9%9B%86%E5%90%88\"><span class=\"toc-text\">8 集合</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#8-1-%E9%9B%86%E5%90%88%E7%9A%84%E5%88%9B%E5%BB%BA\"><span class=\"toc-text\">8.1 集合的创建</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#8-2-%E8%AE%BF%E9%97%AE%E9%9B%86%E5%90%88%E4%B8%AD%E7%9A%84%E5%80%BC\"><span class=\"toc-text\">8.2 访问集合中的值</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#8-3-%E9%9B%86%E5%90%88%E7%9A%84%E5%86%85%E7%BD%AE%E6%96%B9%E6%B3%95\"><span class=\"toc-text\">8.3 集合的内置方法</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#8-4-%E9%9B%86%E5%90%88%E7%9A%84%E8%BD%AC%E6%8D%A2\"><span class=\"toc-text\">8.4 集合的转换</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#8-5-%E4%B8%8D%E5%8F%AF%E5%8F%98%E9%9B%86%E5%90%88\"><span class=\"toc-text\">8.5 不可变集合</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#9-%E5%BA%8F%E5%88%97\"><span class=\"toc-text\">9 序列</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E9%92%88%E5%AF%B9%E5%BA%8F%E5%88%97%E7%9A%84%E5%86%85%E7%BD%AE%E5%87%BD%E6%95%B0\"><span class=\"toc-text\">针对序列的内置函数</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#10-%E5%87%BD%E6%95%B0%E4%B8%8ELambda%E8%A1%A8%E8%BE%BE%E5%BC%8F\"><span class=\"toc-text\">10 函数与Lambda表达式</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#10-1-%E5%87%BD%E6%95%B0\"><span class=\"toc-text\">10.1 函数</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E5%87%BD%E6%95%B0%E7%9A%84%E5%AE%9A%E4%B9%89\"><span class=\"toc-text\">函数的定义</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E5%87%BD%E6%95%B0%E5%8F%82%E6%95%B0\"><span class=\"toc-text\">函数参数</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E5%8F%98%E9%87%8F%E4%BD%9C%E7%94%A8%E5%9F%9F\"><span class=\"toc-text\">变量作用域</span></a></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#10-2-Lambda-%E8%A1%A8%E8%BE%BE%E5%BC%8F\"><span class=\"toc-text\">10.2 Lambda 表达式</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E5%8C%BF%E5%90%8D%E5%87%BD%E6%95%B0%E7%9A%84%E5%AE%9A%E4%B9%89\"><span class=\"toc-text\">匿名函数的定义</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E5%8C%BF%E5%90%8D%E5%87%BD%E6%95%B0%E7%9A%84%E5%BA%94%E7%94%A8\"><span class=\"toc-text\">匿名函数的应用</span></a></li></ol></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#11-%E7%B1%BB%E4%B8%8E%E5%AF%B9%E8%B1%A1\"><span class=\"toc-text\">11 类与对象</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#11-1-%E5%AF%B9%E8%B1%A1-%E5%B1%9E%E6%80%A7-%E6%96%B9%E6%B3%95\"><span class=\"toc-text\">11.1 对象 &#x3D; 属性 + 方法</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#11-2-self-%E6%98%AF%E4%BB%80%E4%B9%88%EF%BC%9F\"><span class=\"toc-text\">11.2 self 是什么？</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#11-3-Python-%E7%9A%84%E9%AD%94%E6%B3%95%E6%96%B9%E6%B3%95\"><span class=\"toc-text\">11.3 Python 的魔法方法</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#11-4-%E5%85%AC%E6%9C%89%E5%92%8C%E7%A7%81%E6%9C%89\"><span class=\"toc-text\">11.4 公有和私有</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#11-5-%E7%BB%A7%E6%89%BF\"><span class=\"toc-text\">11.5 继承</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#11-6-%E7%B1%BB%E3%80%81%E7%B1%BB%E5%AF%B9%E8%B1%A1%E5%92%8C%E5%AE%9E%E4%BE%8B%E5%AF%B9%E8%B1%A1\"><span class=\"toc-text\">11.6 类、类对象和实例对象</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#11-8-%E4%BB%80%E4%B9%88%E6%98%AF%E7%BB%91%E5%AE%9A%EF%BC%9F\"><span class=\"toc-text\">11.8 什么是绑定？</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#11-9-%E4%B8%80%E4%BA%9B%E7%9B%B8%E5%85%B3%E7%9A%84%E5%86%85%E7%BD%AE%E5%87%BD%E6%95%B0%EF%BC%88BIF%EF%BC%89\"><span class=\"toc-text\">11.9 一些相关的内置函数（BIF）</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#12-%E9%AD%94%E6%B3%95%E6%96%B9%E6%B3%95\"><span class=\"toc-text\">12 魔法方法</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#12-1-%E5%9F%BA%E6%9C%AC%E7%9A%84%E9%AD%94%E6%B3%95%E6%96%B9%E6%B3%95\"><span class=\"toc-text\">12.1 基本的魔法方法</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#12-2-%E7%AE%97%E6%9C%AF%E8%BF%90%E7%AE%97%E7%AC%A6\"><span class=\"toc-text\">12.2 算术运算符</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#12-3-%E5%8F%8D%E7%AE%97%E6%9C%AF%E8%BF%90%E7%AE%97%E7%AC%A6\"><span class=\"toc-text\">12.3 反算术运算符</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#12-4-%E5%A2%9E%E9%87%8F%E8%B5%8B%E5%80%BC%E8%BF%90%E7%AE%97%E7%AC%A6\"><span class=\"toc-text\">12.4 增量赋值运算符</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#12-5-%E4%B8%80%E5%85%83%E8%BF%90%E7%AE%97%E7%AC%A6\"><span class=\"toc-text\">12.5 一元运算符</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#12-6-%E5%B1%9E%E6%80%A7%E8%AE%BF%E9%97%AE\"><span class=\"toc-text\">12.6 属性访问</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#12-7-%E6%8F%8F%E8%BF%B0%E7%AC%A6\"><span class=\"toc-text\">12.7 描述符</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#12-8-%E5%AE%9A%E5%88%B6%E5%BA%8F%E5%88%97\"><span class=\"toc-text\">12.8 定制序列</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#12-9-%E8%BF%AD%E4%BB%A3%E5%99%A8\"><span class=\"toc-text\">12.9 迭代器</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#12-10-%E7%94%9F%E6%88%90%E5%99%A8\"><span class=\"toc-text\">12.10 生成器</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#13-%E6%A8%A1%E5%9D%97\"><span class=\"toc-text\">13 模块</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#13-1-%E4%BB%80%E4%B9%88%E6%98%AF%E6%A8%A1%E5%9D%97\"><span class=\"toc-text\">13.1 什么是模块</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#13-2-%E5%91%BD%E5%90%8D%E7%A9%BA%E9%97%B4\"><span class=\"toc-text\">13.2 命名空间</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#13-3-%E5%AF%BC%E5%85%A5%E6%A8%A1%E5%9D%97\"><span class=\"toc-text\">13.3 导入模块</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#13-4-if-name-%E2%80%98-main-%E2%80%99\"><span class=\"toc-text\">13.4 if __name &#x3D;&#x3D; ‘\\main__’</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#13-5-%E6%90%9C%E7%B4%A2%E8%B7%AF%E5%BE%84\"><span class=\"toc-text\">13.5 搜索路径</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#13-6-%E5%8C%85%EF%BC%88package%EF%BC%89\"><span class=\"toc-text\">13.6 包（package）</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#14-datetime%E6%A8%A1%E5%9D%97\"><span class=\"toc-text\">14 datetime模块</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#14-1-datetime%E7%B1%BB\"><span class=\"toc-text\">14.1 datetime类</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#14-2-date%E7%B1%BB\"><span class=\"toc-text\">14.2 date类</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#14-3-time%E7%B1%BB\"><span class=\"toc-text\">14.3 time类</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#14-4-timedelta%E7%B1%BB\"><span class=\"toc-text\">14.4 timedelta类</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#15-%E6%96%87%E4%BB%B6%E4%B8%8E%E6%96%87%E4%BB%B6%E7%B3%BB%E7%BB%9F\"><span class=\"toc-text\">15 文件与文件系统</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#15-1-%E6%89%93%E5%BC%80%E6%96%87%E4%BB%B6\"><span class=\"toc-text\">15.1 打开文件</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#15-2-%E6%96%87%E4%BB%B6%E5%AF%B9%E8%B1%A1%E6%96%B9%E6%B3%95\"><span class=\"toc-text\">15.2 文件对象方法</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#15-3-%E7%AE%80%E6%B4%81%E7%9A%84-with-%E8%AF%AD%E5%8F%A5\"><span class=\"toc-text\">15.3 简洁的 with 语句</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#16-OS\"><span class=\"toc-text\">16 OS</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#17-%E5%BA%8F%E5%88%97%E5%8C%96%E4%B8%8E%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96\"><span class=\"toc-text\">17 序列化与反序列化</span></a></li></ol></li></ol>","author":{"name":"YFR718","slug":"blog-author","avatar":"https://avatars.githubusercontent.com/u/47553658?s=400&u=5e0a85700c66d7a2661c5664ec5f24d94e5ed01a&v=4","link":"/","description":"大数据萌新","socials":{"github":"https://github.com/YFR718","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"d","csdn":"","juejin":"","customs":{}}},"mapped":true,"prev_post":{"title":"Hexo 个人博客搭建","uid":"07213b6ca5497f88ac351468e0325797","slug":"0.Hexo个人博客搭建","date":"2021-11-02T09:47:00.000Z","updated":"2021-11-04T07:12:25.084Z","comments":true,"path":"api/articles/0.Hexo个人博客搭建.json","keywords":null,"cover":"https://gimg2.baidu.com/image_search/src=http%3A%2F%2Fpic1.zhimg.com%2Fv2-2398dbd26ae17898697afeb738e9a0c0_1440w.jpg%3Fsource%3D172ae18b&refer=http%3A%2F%2Fpic1.zhimg.com&app=2002&size=f9999,10000&q=a80&n=0&g=0n&fmt=jpeg?sec=1638533210&t=db3cbdc1afe1acfd02b16bf8bba82cb2","text":"Hexo 个人博客搭建安装步骤 github创建yfr718.github.io项目 安装git、设置用户名和邮箱、ssh连接github git config --global user.name &quot;你的GitHub用户名&quot; git config --glo...","link":"","photos":[],"count_time":{"symbolsCount":"1.1k","symbolsTime":"1 mins."},"categories":[{"name":"前端","slug":"前端","count":1,"path":"api/categories/前端.json"}],"tags":[{"name":"hexo","slug":"hexo","count":1,"path":"api/tags/hexo.json"}],"author":{"name":"YFR718","slug":"blog-author","avatar":"https://avatars.githubusercontent.com/u/47553658?s=400&u=5e0a85700c66d7a2661c5664ec5f24d94e5ed01a&v=4","link":"/","description":"大数据萌新","socials":{"github":"https://github.com/YFR718","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"d","csdn":"","juejin":"","customs":{}}}},"next_post":{}}