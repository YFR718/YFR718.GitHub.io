{"title":"MySQL基础","uid":"4a207b7e885fdbcca8129599135e5f2e","slug":"B1-MySQL基础","date":"2021-11-10T12:30:04.000Z","updated":"2021-11-25T11:58:23.673Z","comments":true,"path":"api/articles/B1-MySQL基础.json","keywords":null,"cover":"https://img-blog.csdnimg.cn/8a799b9a11d1488288d2b34beffa2209.jpg?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBAWUZSNzE4,size_20,color_FFFFFF,t_70,g_se,x_16#pic_center","content":"<h1 id=\"1-MySQL概述\"><a href=\"#1-MySQL概述\" class=\"headerlink\" title=\"1 MySQL概述\"></a>1 MySQL概述</h1><h2 id=\"1-1-数据库概述\"><a href=\"#1-1-数据库概述\" class=\"headerlink\" title=\"1.1 数据库概述\"></a>1.1 数据库概述</h2><h3 id=\"数据库的好处\"><a href=\"#数据库的好处\" class=\"headerlink\" title=\"数据库的好处\"></a>数据库的好处</h3><p>持久化数据到本地<br>可以实现结构化查询，方便管理</p>\n<h3 id=\"数据库相关概念\"><a href=\"#数据库相关概念\" class=\"headerlink\" title=\"数据库相关概念\"></a>数据库相关概念</h3><p>DB：数据库，保存一组有组织的数据的容器<br>DBMS：数据库管理系统，又称为数据库软件（产品），用于管理DB中的数据<br>SQL:结构化查询语言，用于和DBMS通信的语言</p>\n<h3 id=\"数据库存储数据的特点\"><a href=\"#数据库存储数据的特点\" class=\"headerlink\" title=\"数据库存储数据的特点\"></a>数据库存储数据的特点</h3><ol>\n<li>将数据放到表中，表再放到库中</li>\n<li>一个数据库中可以有多个表，每个表都有一个的名字，用来标识自己。表名具有唯一性。</li>\n<li>表具有一些特性，这些特性定义了数据在表中如何存储，类似java中 “类”的设计。</li>\n<li>表由列组成，我们也称为字段。所有表都是由一个或多个列组成的，每一列类似java 中的”属性”</li>\n<li>表中的数据是按行存储的，每一行类似于java中的“对象”。</li>\n</ol>\n<h2 id=\"1-2-MySQL的背景\"><a href=\"#1-2-MySQL的背景\" class=\"headerlink\" title=\"1.2 MySQL的背景\"></a>1.2 MySQL的背景</h2><p>前身属于瑞典的一家公司，MySQL AB</p>\n<p>08年被sun公司收购</p>\n<p>09年sun被oracle收购</p>\n<p><strong>MySQL优点</strong></p>\n<p>1、开源、免费、成本低</p>\n<p>2、性能高、移植性也好</p>\n<p>3、体积小，便于安装</p>\n<h2 id=\"1-3-MySQL产品的介绍和安装\"><a href=\"#1-3-MySQL产品的介绍和安装\" class=\"headerlink\" title=\"1.3 MySQL产品的介绍和安装\"></a>1.3 MySQL产品的介绍和安装</h2><h3 id=\"MySQL服务的启动和停止\"><a href=\"#MySQL服务的启动和停止\" class=\"headerlink\" title=\"MySQL服务的启动和停止\"></a>MySQL服务的启动和停止</h3><p>方式一：计算机——右击管理——服务<br>方式二：通过管理员身份运行</p>\n<pre class=\"line-numbers language-mysql\" data-language=\"mysql\"><code class=\"language-mysql\">net start 服务名（启动服务）\nnet stop 服务名（停止服务）<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n<h3 id=\"MySQL服务的登录和退出\"><a href=\"#MySQL服务的登录和退出\" class=\"headerlink\" title=\"MySQL服务的登录和退出\"></a>MySQL服务的登录和退出</h3><p>  方式一：通过mysql自带的客户端（只限于root用户）</p>\n<p>  方式二：通过windows自带的客户端</p>\n<pre class=\"line-numbers language-mysql\" data-language=\"mysql\"><code class=\"language-mysql\">#登录：\nmysql 【-h主机名 -P端口号 】-u用户名 -p密码\n#退出：\nexit或ctrl+C<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n<h2 id=\"1-4SQL语言的规则与规范\"><a href=\"#1-4SQL语言的规则与规范\" class=\"headerlink\" title=\"1.4SQL语言的规则与规范\"></a>1.4SQL语言的规则与规范</h2><h3 id=\"基本规则\"><a href=\"#基本规则\" class=\"headerlink\" title=\"基本规则\"></a>基本规则</h3><ul>\n<li>SQL 可以写在一行或者多行。为了提高可读性，各子句分行写，必要时使用缩进</li>\n<li>每条命令以 ; 或 \\g 或 \\G 结束</li>\n<li>关键字不能被缩写也不能分行</li>\n<li>关于标点符号<ul>\n<li>必须保证所有的()、单引号、双引号是成对结束的</li>\n<li>必须使用英文状态下的半角输入方式</li>\n<li>字符串型和日期时间类型的数据可以使用单引号（’ ‘）表示</li>\n<li>列的别名，尽量使用双引号（” “），而且不建议省略as</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"SQL大小写规范-（建议遵守）\"><a href=\"#SQL大小写规范-（建议遵守）\" class=\"headerlink\" title=\"SQL大小写规范 （建议遵守）\"></a>SQL大小写规范 （建议遵守）</h3><ul>\n<li><strong>MySQL 在 Windows 环境下是大小写不敏感的</strong></li>\n<li><strong>MySQL 在 Linux 环境下是大小写敏感的</strong><ul>\n<li>数据库名、表名、表的别名、变量名是严格区分大小写的</li>\n<li>关键字、函数名、列名(或字段名)、列的别名(字段的别名) 是忽略大小写的。</li>\n</ul>\n</li>\n<li><strong>推荐采用统一的书写规范：</strong><ul>\n<li>数据库名、表名、表别名、字段名、字段别名等都小写</li>\n<li>SQL 关键字、函数名、绑定变量等都大写</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"注-释\"><a href=\"#注-释\" class=\"headerlink\" title=\"注 释\"></a>注 释</h3><p>可以使用如下格式的注释结构</p>\n<pre class=\"line-numbers language-mysql\" data-language=\"mysql\"><code class=\"language-mysql\">单行注释：#注释文字(MySQL特有的方式)\n单行注释：-- 注释文字(--后面必须包含一个空格。)\n多行注释：/* 注释文字  */<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n<h3 id=\"命名规则（暂时了解）\"><a href=\"#命名规则（暂时了解）\" class=\"headerlink\" title=\"命名规则（暂时了解）\"></a>命名规则（暂时了解）</h3><ul>\n<li>数据库、表名不得超过30个字符，变量名限制为29个</li>\n<li>必须只能包含 A–Z, a–z, 0–9, _共63个字符</li>\n<li>数据库名、表名、字段名等对象名中间不要包含空格</li>\n<li>同一个MySQL软件中，数据库不能同名；同一个库中，表不能重名；同一个表中，字段不能重名</li>\n<li>必须保证你的字段没有和保留字、数据库系统或常用方法冲突。如果坚持使用，请在SQL语句中使用`（着重号）引起来</li>\n<li>保持字段名和类型的一致性，在命名字段并为其指定数据类型的时候一定要保证一致性。假如数据类型在一个表里是整数，那在另一个表里可就别变成字符型了</li>\n</ul>\n<p>举例：</p>\n<pre class=\"line-numbers language-mysql\" data-language=\"mysql\"><code class=\"language-mysql\">#以下两句是一样的，不区分大小写\nshow databases;\nSHOW DATABASES;\n\n#创建表格\n#create table student info(...); #表名错误，因为表名有空格\ncreate table student_info(...); \n\n#其中order使用``飘号，因为order和系统关键字或系统函数名等预定义标识符重名了\nCREATE TABLE `order`(\n    id INT,\n    lname VARCHAR(20)\n);\n\nselect id as \"编号\", `name` as \"姓名\" from t_stu; #起别名时，as都可以省略\nselect id as 编号, `name` as 姓名 from t_stu; #如果字段别名中没有空格，那么可以省略\"\"\nselect id as 编 号, `name` as 姓 名 from t_stu; #错误，如果字段别名中有空格，那么不能省略\"\"<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h1 id=\"2-基本操作\"><a href=\"#2-基本操作\" class=\"headerlink\" title=\"2. 基本操作\"></a>2. 基本操作</h1><p><strong>存储过程：创建数据库=&gt;确认字段=&gt;创建数据表=&gt;插入数据</strong></p>\n<h3 id=\"创建数据库\"><a href=\"#创建数据库\" class=\"headerlink\" title=\"创建数据库\"></a>创建数据库</h3><pre class=\"line-numbers language-mysql\" data-language=\"mysql\"><code class=\"language-mysql\"># 展示数据库\nmysql&gt; SHOW DATABASES;\n+--------------------+\n| Database           |\n+--------------------+\n| information_schema |\n| mysql              |\n| performance_schema |\n| sakila             |\n| sys                |\n| world              |\n+--------------------+\n# 打开指定的库\nmysql&gt; use 库名\n# 创建数据库\nmysql&gt; CREATE DATABASE demo;\n# 删除数据库\nmysql&gt; DROP DATABASE demo;\n# 查看服务器的版本\n#方式一：登录到mysql服务端\nmysql&gt; select version();\n#方式二：没有登录到mysql服务端\nmysql --version\n或\nmysql --V<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>●”information_schema”是MySQL系统自带的数据库,主要保存MySQL数据库服务器的系统信息，比如数据库的名称、数据表的名称、字段名称、存取权限、数据文件所在的文件夹和系统使用的文件夹，等等。<br>●”performance_ schema”是MySQL系统自带的数据库，可以用来监控MySQL的各类性能指标。<br>●“sys” 数据库是MySQL系统自带的数据库，主要作用是，以一种更容易被理解的方式展示MySQL数据库服务器的各类性能指标，帮助系统管理员和开发人员监控MySQL的技术性能。<br>●”mysql”数据库保存了MySQL数据库服务器运行时需要的系统信息，比如数据文件夹、当前使用的字符集、约束检查信息，等等。</p>\n<h3 id=\"确认字段\"><a href=\"#确认字段\" class=\"headerlink\" title=\"确认字段\"></a>确认字段</h3><p>MySQL数据表由行与列组成，一行就是一条数据记录， 每一条数据记录都被分成许多列，一列就叫一个字段。每个字段都需要定义数据类型，这个数据类型叫做字段类型。</p>\n<h3 id=\"创建数据表\"><a href=\"#创建数据表\" class=\"headerlink\" title=\"创建数据表\"></a>创建数据表</h3><pre class=\"line-numbers language-mysql\" data-language=\"mysql\"><code class=\"language-mysql\">#展示数据表\nmysql&gt; SHOW TABLES;\n+----------------+\n| Tables_in_demo |\n+----------------+\n| test           |\n+----------------+\n# 查看其它库的所有表\nmysql&gt; show tables from 库名;\n#创建数据表\nmysql&gt; CREATE TABLE demo.test(barcode text,goodname text,price int);\n# 查看表结构\nmysql&gt; desc 表名;\nmysql&gt; show columns from actor;\nmysql&gt; DESCRIBE demo.test;\n+----------+---------+------+-----+---------+-------+\n| Field    | Type    | Null | Key | Default | Extra |\n+----------+---------+------+-----+---------+-------+\n| barcode  | text    | YES  |     | NULL    |       |\n| goodname | text    | YES  |     | NULL    |       |\n| price    | int(11) | YES  |     | NULL    |       |\n+----------+---------+------+-----+---------+-------+<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>●Field: 表示字段名称。<br>●Type: 表示字段类型。<br>●Null: 表示这个字段是否允许是空值(NULL) 。在MySQL里面,空值不等于空字符串。一个空字符串的长度是0,而一个空值的长度是空。而且，在MySQL里面，空值是占用空间的。<br>●Key:我们暂时把它叫做键。<br>●Default: 表示默认值。我们导入的表的所有的字段都允许是空，默认值都是NULL。<br>●Extra:表示附加信息。</p>\n<pre class=\"line-numbers language-mysql\" data-language=\"mysql\"><code class=\"language-mysql\">#其他show语句\n❑ SHOW STATUS，用于显示广泛的服务器状态信息；\n❑ SHOW CREATE DATABASE和SHOW CREATE TABLE，分别用来显示创建特定数据库或表的MySQL语句；\n❑ SHOW GRANTS，用来显示授予用户（所有用户或特定用户）的安全权限；\n❑ SHOW ERRORS 和 SHOW WARNINGS，用来显示服务器错误或警告消息。<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h3 id=\"插入数据\"><a href=\"#插入数据\" class=\"headerlink\" title=\"插入数据\"></a>插入数据</h3><pre class=\"line-numbers language-mysql\" data-language=\"mysql\"><code class=\"language-mysql\">#添加主键\nALTER TABLE demo. test\nADD COLUMN itemnumber int PRIMARY KEY AUTO_INCREMENT ;\n#向表中添加数据\nINSERT INTO demo.test\n(barcode, goodsname,price)\nVALUES ('0001','本' ,3);\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h2 id=\"SQL的语言分类\"><a href=\"#SQL的语言分类\" class=\"headerlink\" title=\"SQL的语言分类\"></a>SQL的语言分类</h2><p>SQL语言在功能上主要分为如下3大类：</p>\n<ul>\n<li><p><strong>DDL（Data Definition Languages、数据定义语言）</strong>，这些语句定义了不同的数据库、表、视图、索引等数据库对象，还可以用来创建、删除、修改数据库和数据表的结构。</p>\n<ul>\n<li>主要的语句关键字包括<code>CREATE</code>、<code>DROP</code>、<code>ALTER</code>等。</li>\n</ul>\n</li>\n<li><p><strong>DML（Data Manipulation Language、数据操作语言）</strong>，用于添加、删除、更新和查询数据库记录，并检查数据完整性。</p>\n<ul>\n<li>主要的语句关键字包括<code>INSERT</code>、<code>DELETE</code>、<code>UPDATE</code>、<code>SELECT</code>等。</li>\n<li><strong>SELECT是SQL语言的基础，最为重要。</strong></li>\n</ul>\n</li>\n<li><p><strong>DCL（Data Control Language、数据控制语言）</strong>，用于定义数据库、表、字段、用户的访问权限和安全级别。</p>\n<ul>\n<li>主要的语句关键字包括<code>GRANT</code>、<code>REVOKE</code>、<code>COMMIT</code>、<code>ROLLBACK</code>、<code>SAVEPOINT</code>等。</li>\n</ul>\n</li>\n</ul>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>因为查询语句使用的非常的频繁，所以很多人把查询语句单拎出来一类：DQL（数据查询语言）。</p>\n<p>还有单独将<code>COMMIT</code>、<code>ROLLBACK</code> 取出来称为TCL （Transaction Control Language，事务控制语言）。</p></blockquote>\n<h1 id=\"3-DQL语言\"><a href=\"#3-DQL语言\" class=\"headerlink\" title=\"3. DQL语言\"></a>3. DQL语言</h1><p>数据查询语言：select </p>\n<pre class=\"line-numbers language-mysql\" data-language=\"mysql\"><code class=\"language-mysql\">/*\n类似于Java中 :System.out.println(要打印的东西);\n特点：\n①通过select查询完的结果 ，是一个虚拟的表格，不是真实存在\n② 要查询的东西 可以是常量值、可以是表达式、可以是字段、可以是函数*/\n\n#检索单个列\nmysql&gt; SELECT 列名 FROM 表名;\n#检索多个列\nmysql&gt; SELECT 列名,列名... FROM 表名;\n#检索所有列\nmysql&gt; SELECT * FROM 表名;\n#使用完全限定的名字\nmysql&gt; SELECT 表名.列名 FROM 数据库.表名;\n#拼接计算字段\nmysql&gt; SELECT CONCAT(列名，列名) FROM 表名;\n#计算字段运算\nmysql&gt; SELECT 列名*5 FROM 表名;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<div class=\"table-container\">\n<table>\n<thead>\n<tr>\n<th>子句</th>\n<th>功能</th>\n<th>示例</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>DISTINCT</td>\n<td>去重</td>\n<td>SELECT DISTINCT 列名 FROM 表名;</td>\n</tr>\n<tr>\n<td>LIMIT</td>\n<td>限制行数</td>\n<td>SELECT 列名 FROM 表名 LIMIT 10;<br>SELECT 列名 FROM 表名 LIMIT 10,3; #从行10开始取3行</td>\n</tr>\n<tr>\n<td>ORDER BY</td>\n<td>排序</td>\n<td>SELECT 列名 FROM 表名 ORDER BY 列名 LIMIT 10;   //先排序再取10<br>SELECT 列名 FROM 表名 ORDER BY 列名,列名..;     //按多个列排序</td>\n</tr>\n<tr>\n<td>DESC</td>\n<td>降序排</td>\n<td>SELECT 列名 FROM 表名 ORDER BY 列名 DESC;</td>\n</tr>\n<tr>\n<td>ASC</td>\n<td>升序排</td>\n<td>与不加相同</td>\n</tr>\n<tr>\n<td>WHERE</td>\n<td>数据过滤</td>\n<td>SELECT 列名 FROM 表名 WHERE 条件;</td>\n</tr>\n<tr>\n<td>GROUP BY</td>\n<td>分组数据</td>\n<td>SELECT 列名 FROM 表名 GROUP BY 列名;</td>\n</tr>\n<tr>\n<td>HAVING</td>\n<td>过滤基于分组值</td>\n<td>SELECT 列名 FROM 表名 GROUP BY 列名 HAVING COUNT(*)&gt;=2;;</td>\n</tr>\n<tr>\n<td>UNION (ALL)</td>\n<td>组合查询</td>\n<td>执行多条SELECT语句，并将结果作为单个查询结果集返回</td>\n</tr>\n</tbody>\n</table>\n</div>\n<h2 id=\"SELECT子句顺序\"><a href=\"#SELECT子句顺序\" class=\"headerlink\" title=\"SELECT子句顺序\"></a>SELECT子句顺序</h2><div class=\"table-container\">\n<table>\n<thead>\n<tr>\n<th>子句</th>\n<th>说明</th>\n<th>是否必须使用</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>SELECT</td>\n<td>要返回的列</td>\n<td>是</td>\n</tr>\n<tr>\n<td>FROM</td>\n<td>要检索的表</td>\n<td>仅在表中选择数据</td>\n</tr>\n<tr>\n<td>WHERE</td>\n<td>行过滤</td>\n<td>否</td>\n</tr>\n<tr>\n<td>GROUP BY</td>\n<td>分组说明</td>\n<td>仅在按组计算聚集时</td>\n</tr>\n<tr>\n<td>HAVING</td>\n<td>组过滤</td>\n<td>否</td>\n</tr>\n<tr>\n<td>ORDER BY</td>\n<td>排序</td>\n<td>否</td>\n</tr>\n<tr>\n<td>LIMIT</td>\n<td>要检索的行数</td>\n<td>否</td>\n</tr>\n</tbody>\n</table>\n</div>\n<p>SELECT 语句的执行顺序**（在 MySQL 和 Oracle 中，SELECT 执行顺序基本相同）：</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">FROM -&gt; WHERE -&gt; GROUP BY -&gt; HAVING -&gt; SELECT 的字段 -&gt; DISTINCT -&gt; ORDER BY -&gt; LIMIT<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>比如你写了一个 SQL 语句，那么它的关键字顺序和执行顺序是下面这样的：</p>\n<pre class=\"line-numbers language-mysql\" data-language=\"mysql\"><code class=\"language-mysql\">SELECT DISTINCT player_id, player_name, count(*) as num # 顺序 5\nFROM player JOIN team ON player.team_id = team.team_id # 顺序 1\nWHERE height &gt; 1.80 # 顺序 2\nGROUP BY player.team_id # 顺序 3\nHAVING num &gt; 2 # 顺序 4\nORDER BY num DESC # 顺序 6\nLIMIT 2 # 顺序 7<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>在 SELECT 语句执行这些步骤的时候，每个步骤都会产生一个<code>虚拟表</code>，然后将这个虚拟表传入下一个步骤中作为输入。需要注意的是，这些步骤隐含在 SQL 的执行过程中，对于我们来说是不可见的。</p>\n<h3 id=\"SQL-的执行原理\"><a href=\"#SQL-的执行原理\" class=\"headerlink\" title=\"SQL 的执行原理\"></a>SQL 的执行原理</h3><p>SELECT 是先执行 FROM 这一步的。在这个阶段，如果是多张表联查，还会经历下面的几个步骤：</p>\n<ol>\n<li>首先先通过 CROSS JOIN 求笛卡尔积，相当于得到虚拟表 vt（virtual table）1-1；</li>\n<li>通过 ON 进行筛选，在虚拟表 vt1-1 的基础上进行筛选，得到虚拟表 vt1-2；</li>\n<li>添加外部行。如果我们使用的是左连接、右链接或者全连接，就会涉及到外部行，也就是在虚拟表 vt1-2 的基础上增加外部行，得到虚拟表 vt1-3。</li>\n</ol>\n<p>当然如果我们操作的是两张以上的表，还会重复上面的步骤，直到所有表都被处理完为止。这个过程得到是我们的原始数据。</p>\n<p>当我们拿到了查询数据表的原始数据，也就是最终的虚拟表 <code>vt1</code>，就可以在此基础上再进行 <code>WHERE 阶段</code>。在这个阶段中，会根据 vt1 表的结果进行筛选过滤，得到虚拟表 <code>vt2</code>。</p>\n<p>然后进入第三步和第四步，也就是 <code>GROUP 和 HAVING 阶段</code>。在这个阶段中，实际上是在虚拟表 vt2 的基础上进行分组和分组过滤，得到中间的虚拟表 <code>vt3</code> 和 <code>vt4</code>。</p>\n<p>当我们完成了条件筛选部分之后，就可以筛选表中提取的字段，也就是进入到 <code>SELECT 和 DISTINCT 阶段</code>。</p>\n<p>首先在 SELECT 阶段会提取想要的字段，然后在 DISTINCT 阶段过滤掉重复的行，分别得到中间的虚拟表 <code>vt5-1</code> 和 <code>vt5-2</code>。</p>\n<p>当我们提取了想要的字段数据之后，就可以按照指定的字段进行排序，也就是 <code>ORDER BY 阶段</code>，得到虚拟表 <code>vt6</code>。</p>\n<p>最后在 vt6 的基础上，取出指定行的记录，也就是 <code>LIMIT 阶段</code>，得到最终的结果，对应的是虚拟表 <code>vt7</code>。</p>\n<p>当然我们在写 SELECT 语句的时候，不一定存在所有的关键字，相应的阶段就会省略。</p>\n<p>同时因为 SQL 是一门类似英语的结构化查询语言，所以我们在写 SELECT 语句的时候，还要注意相应的关键字顺序，<strong>所谓底层运行的原理，就是我们刚才讲到的执行顺序。</strong></p>\n<h2 id=\"WHERE子句操作符\"><a href=\"#WHERE子句操作符\" class=\"headerlink\" title=\"WHERE子句操作符\"></a>WHERE子句操作符</h2><div class=\"table-container\">\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">操作符</th>\n<th style=\"text-align:center\">说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">=</td>\n<td style=\"text-align:center\">等于</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">&lt;&gt;或!=</td>\n<td style=\"text-align:center\">不等于</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">&lt;,&lt;=,&gt;,&gt;=</td>\n<td style=\"text-align:center\">小于大于</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">NOT、！</td>\n<td style=\"text-align:center\">与</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">AND、&amp;&amp;</td>\n<td style=\"text-align:center\">或</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">OR、\\</td>\n<td style=\"text-align:center\">\\</td>\n<td></td>\n<td>非</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">XOR</td>\n<td style=\"text-align:center\">异或</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">&amp;、\\</td>\n<td style=\"text-align:center\">、^、~、&gt;&gt;、&lt;&lt;</td>\n<td>位运算</td>\n</tr>\n</tbody>\n</table>\n</div>\n<p>优先级：<strong>AND&gt;OR</strong></p>\n<p>安全等于运算符（&lt;=&gt;）与等于运算符（=）的作用是相似的，<code>唯一的区别</code>是‘&lt;=&gt;’可以用来对NULL进行判断。在两个操作数均为NULL时，其返回值为1，而不为NULL；当一个操作数为NULL时，其返回值为0，而不为NULL。</p>\n<pre class=\"line-numbers language-mysql\" data-language=\"mysql\"><code class=\"language-mysql\">mysql&gt; SELECT 1 &lt;=&gt; '1', 1 &lt;=&gt; 0, 'a' &lt;=&gt; 'a', (5 + 3) &lt;=&gt; (2 + 6), '' &lt;=&gt; NULL,NULL &lt;=&gt; NULL FROM dual;\n+-----------+---------+-------------+---------------------+-------------+---------------+\n| 1 &lt;=&gt; '1' | 1 &lt;=&gt; 0 | 'a' &lt;=&gt; 'a' | (5 + 3) &lt;=&gt; (2 + 6) | '' &lt;=&gt; NULL | NULL &lt;=&gt; NULL |\n+-----------+---------+-------------+---------------------+-------------+---------------+\n|         1 |       0 |           1 |                   1 |           0 |             1 |\n+-----------+---------+-------------+---------------------+-------------+---------------+\n1 row in set (0.00 sec)<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<pre class=\"line-numbers language-mysql\" data-language=\"mysql\"><code class=\"language-mysql\">#查询commission_pct等于0.40\nSELECT employee_id,commission_pct FROM employees WHERE commission_pct = 0.40;\n\nSELECT employee_id,commission_pct FROM employees WHERE commission_pct &lt;=&gt; 0.40;\n\n#如果把0.40改成 NULL 呢？<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<div class=\"table-container\">\n<table>\n<thead>\n<tr>\n<th>非符号类型的运算符</th>\n<th>名称</th>\n<th>作用</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>IS NULL</td>\n<td>为空运算符</td>\n<td>判断值、字符串或表达式是否为空</td>\n</tr>\n<tr>\n<td>IS NOTNULL</td>\n<td>不为空运算符</td>\n<td>判断值、字符串或表达式是否不为空</td>\n</tr>\n<tr>\n<td>LEAST</td>\n<td>最小值运算符</td>\n<td>在多个值中返回最小值</td>\n</tr>\n<tr>\n<td>GREATEST</td>\n<td>最大值运算符</td>\n<td>在多个值中返回最大值</td>\n</tr>\n<tr>\n<td>BETWEEN AND</td>\n<td>两值之间的运算符</td>\n<td>判断一个值是否在两个值之间</td>\n</tr>\n<tr>\n<td>ISNULL</td>\n<td>为空运算符</td>\n<td>判断一个值、字符串或表达式是否为空</td>\n</tr>\n<tr>\n<td>IN</td>\n<td>属于运算符</td>\n<td>判断一个值是否为列表中的任意一个值</td>\n</tr>\n<tr>\n<td>NOT IN</td>\n<td>不属于运算符</td>\n<td>判断一个值是否不是一个列表中的任意一个值</td>\n</tr>\n<tr>\n<td>LIKE</td>\n<td>模糊匹配运算符</td>\n<td>判断一个值是否符合模糊匹配规则</td>\n</tr>\n<tr>\n<td>REGEXP</td>\n<td>正则表达式运算符</td>\n<td>判断一个值是否符合正则表达式的规则</td>\n</tr>\n<tr>\n<td>RLIKE</td>\n<td>正则表达式运算符</td>\n<td>判断一个值是否符合正则表达式的规则</td>\n</tr>\n</tbody>\n</table>\n</div>\n<h2 id=\"通配符LIKE用法\"><a href=\"#通配符LIKE用法\" class=\"headerlink\" title=\"通配符LIKE用法\"></a>通配符LIKE用法</h2><div class=\"table-container\">\n<table>\n<thead>\n<tr>\n<th>通配符</th>\n<th>含义</th>\n<th>示例</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>%</td>\n<td>任何字符出现任意次数</td>\n<td>WHERE 列名 LIKE ‘yfr%’：</td>\n</tr>\n<tr>\n<td>_</td>\n<td>只匹配单个字符</td>\n<td>WHERE 列名 LIKE ‘yfr_’：</td>\n</tr>\n</tbody>\n</table>\n</div>\n<h3 id=\"正则表达式\"><a href=\"#正则表达式\" class=\"headerlink\" title=\"正则表达式\"></a>正则表达式</h3><div class=\"table-container\">\n<table>\n<thead>\n<tr>\n<th>关键字</th>\n<th>含义</th>\n<th>示例</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>REGEXP</td>\n<td>包含</td>\n<td>where 列名 REGEXP ‘400’;</td>\n</tr>\n<tr>\n<td>BINARY</td>\n<td>不区分大小匹配</td>\n<td>where 列名 REGEXP BINARY  ‘AS’;</td>\n</tr>\n<tr>\n<td>\\</td>\n<td></td>\n<td>OR匹配</td>\n<td>where 列名 REGEXP ‘400\\</td>\n<td>500’;</td>\n</tr>\n<tr>\n<td>[123]</td>\n<td>匹配几个字符之一</td>\n<td>where 列名 REGEXP ‘[123]400’;</td>\n</tr>\n<tr>\n<td><sup><a href=\"#fn_123\" id=\"reffn_123\">123</a></sup></td>\n<td>匹配几个字符之外所有</td>\n<td>where 列名 REGEXP ‘[\\^123]400’;</td>\n</tr>\n<tr>\n<td>[0-9]</td>\n<td>范围匹配</td>\n<td>where 列名 REGEXP ‘[0-9]400’;</td>\n</tr>\n<tr>\n<td><span>\\</span><span>\\</span></td>\n<td>匹配特殊字符．、[]、</td>\n<td>和-where 列名 REGEXP ‘<span>\\</span><mjx-container class=\"MathJax\" jax=\"SVG\" display=\"true\"><svg style=\"vertical-align: 0\" xmlns=\"http://www.w3.org/2000/svg\" width=\"0.036ex\" height=\"0.036ex\" role=\"img\" focusable=\"false\" viewBox=\"0 0 16 16\"><g stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"scale(1,-1)\"><g data-mml-node=\"math\"><g data-mml-node=\"mspace\"></g></g></g></svg></mjx-container>400’;</td>\n</tr>\n<tr>\n<td>字符类</td>\n<td>匹配字符类</td>\n<td>[ :alpha: ] [:blank:]等等</td>\n</tr>\n<tr>\n<td>{n,m}</td>\n<td>匹配数目范围</td>\n<td>where 列名 REGEXP ‘[0-9]{1,}’;匹配一次以上</td>\n</tr>\n<tr>\n<td>[[:&lt;:]]、[[:&gt;:]]、$、^</td>\n<td>定位符：词的开始/尾，文本的开始/尾</td>\n<td>where 列名 REGEXP ‘^[0-9]’;</td>\n</tr>\n</tbody>\n</table>\n</div>\n<h2 id=\"单行函数\"><a href=\"#单行函数\" class=\"headerlink\" title=\"单行函数\"></a>单行函数</h2><h3 id=\"基本函数\"><a href=\"#基本函数\" class=\"headerlink\" title=\"基本函数\"></a>基本函数</h3><div class=\"table-container\">\n<table>\n<thead>\n<tr>\n<th>函数</th>\n<th>用法</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>ABS(x)</td>\n<td>返回x的绝对值</td>\n</tr>\n<tr>\n<td>SIGN(X)</td>\n<td>返回X的符号。正数返回1，负数返回-1，0返回0</td>\n</tr>\n<tr>\n<td>PI()</td>\n<td>返回圆周率的值</td>\n</tr>\n<tr>\n<td>CEIL(x)，CEILING(x)</td>\n<td>返回大于或等于某个值的最小整数</td>\n</tr>\n<tr>\n<td>FLOOR(x)</td>\n<td>返回小于或等于某个值的最大整数</td>\n</tr>\n<tr>\n<td>LEAST(e1,e2,e3…)</td>\n<td>返回列表中的最小值</td>\n</tr>\n<tr>\n<td>GREATEST(e1,e2,e3…)</td>\n<td>返回列表中的最大值</td>\n</tr>\n<tr>\n<td>MOD(x,y)</td>\n<td>返回X除以Y后的余数</td>\n</tr>\n<tr>\n<td>RAND()</td>\n<td>返回0~1的随机值</td>\n</tr>\n<tr>\n<td>RAND(x)</td>\n<td>返回0~1的随机值，其中x的值用作种子值，相同的X值会产生相同的随机数</td>\n</tr>\n<tr>\n<td>ROUND(x)</td>\n<td>返回一个对x的值进行四舍五入后，最接近于X的整数</td>\n</tr>\n<tr>\n<td>ROUND(x,y)</td>\n<td>返回一个对x的值进行四舍五入后最接近X的值，并保留到小数点后面Y位</td>\n</tr>\n<tr>\n<td>TRUNCATE(x,y)</td>\n<td>返回数字x截断为y位小数的结果</td>\n</tr>\n<tr>\n<td>SQRT(x)</td>\n<td>返回x的平方根。当X的值为负数时，返回NULL</td>\n</tr>\n</tbody>\n</table>\n</div>\n<h3 id=\"字符串函数\"><a href=\"#字符串函数\" class=\"headerlink\" title=\"字符串函数\"></a>字符串函数</h3><div class=\"table-container\">\n<table>\n<thead>\n<tr>\n<th>函数</th>\n<th>用法</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>ASCII(S)</td>\n<td>返回字符串S中的第一个字符的ASCII码值</td>\n</tr>\n<tr>\n<td>CHAR_LENGTH(s)</td>\n<td>返回字符串s的字符数。作用与CHARACTER_LENGTH(s)相同</td>\n</tr>\n<tr>\n<td>LENGTH(s)</td>\n<td>返回字符串s的字节数，和字符集有关</td>\n</tr>\n<tr>\n<td>CONCAT(s1,s2,……,sn)</td>\n<td>连接s1,s2,……,sn为一个字符串</td>\n</tr>\n<tr>\n<td>CONCAT_WS(x, s1,s2,……,sn)</td>\n<td>同CONCAT(s1,s2,…)函数，但是每个字符串之间要加上x</td>\n</tr>\n<tr>\n<td>INSERT(str, idx, len, replacestr)</td>\n<td>将字符串str从第idx位置开始，len个字符长的子串替换为字符串replacestr</td>\n</tr>\n<tr>\n<td>REPLACE(str, a, b)</td>\n<td>用字符串b替换字符串str中所有出现的字符串a</td>\n</tr>\n<tr>\n<td>UPPER(s) 或 UCASE(s)</td>\n<td>将字符串s的所有字母转成大写字母</td>\n</tr>\n<tr>\n<td>LOWER(s)  或LCASE(s)</td>\n<td>将字符串s的所有字母转成小写字母</td>\n</tr>\n<tr>\n<td>LEFT(str,n)</td>\n<td>返回字符串str最左边的n个字符</td>\n</tr>\n<tr>\n<td>RIGHT(str,n)</td>\n<td>返回字符串str最右边的n个字符</td>\n</tr>\n<tr>\n<td>LPAD(str, len, pad)</td>\n<td>用字符串pad对str最左边进行填充，直到str的长度为len个字符</td>\n</tr>\n<tr>\n<td>RPAD(str ,len, pad)</td>\n<td>用字符串pad对str最右边进行填充，直到str的长度为len个字符</td>\n</tr>\n<tr>\n<td>LTRIM(s)</td>\n<td>去掉字符串s左侧的空格</td>\n</tr>\n<tr>\n<td>RTRIM(s)</td>\n<td>去掉字符串s右侧的空格</td>\n</tr>\n<tr>\n<td>TRIM(s)</td>\n<td>去掉字符串s开始与结尾的空格</td>\n</tr>\n<tr>\n<td>TRIM(s1 FROM s)</td>\n<td>去掉字符串s开始与结尾的s1</td>\n</tr>\n<tr>\n<td>TRIM(LEADING s1 FROM s)</td>\n<td>去掉字符串s开始处的s1</td>\n</tr>\n<tr>\n<td>TRIM(TRAILING s1 FROM s)</td>\n<td>去掉字符串s结尾处的s1</td>\n</tr>\n<tr>\n<td>REPEAT(str, n)</td>\n<td>返回str重复n次的结果</td>\n</tr>\n<tr>\n<td>SPACE(n)</td>\n<td>返回n个空格</td>\n</tr>\n<tr>\n<td>STRCMP(s1,s2)</td>\n<td>比较字符串s1,s2的ASCII码值的大小</td>\n</tr>\n<tr>\n<td>SUBSTR(s,index,len)</td>\n<td>返回从字符串s的index位置其len个字符，作用与SUBSTRING(s,n,len)、MID(s,n,len)相同</td>\n</tr>\n<tr>\n<td>LOCATE(substr,str)</td>\n<td>返回字符串substr在字符串str中首次出现的位置，作用于POSITION(substr IN str)、INSTR(str,substr)相同。未找到，返回0</td>\n</tr>\n<tr>\n<td>ELT(m,s1,s2,…,sn)</td>\n<td>返回指定位置的字符串，如果m=1，则返回s1，如果m=2，则返回s2，如果m=n，则返回sn</td>\n</tr>\n<tr>\n<td>FIELD(s,s1,s2,…,sn)</td>\n<td>返回字符串s在字符串列表中第一次出现的位置</td>\n</tr>\n<tr>\n<td>FIND_IN_SET(s1,s2)</td>\n<td>返回字符串s1在字符串s2中出现的位置。其中，字符串s2是一个以逗号分隔的字符串</td>\n</tr>\n<tr>\n<td>REVERSE(s)</td>\n<td>返回s反转后的字符串</td>\n</tr>\n<tr>\n<td>NULLIF(value1,value2)</td>\n<td>比较两个字符串，如果value1与value2相等，则返回NULL，否则返回value1</td>\n</tr>\n</tbody>\n</table>\n</div>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>注意：MySQL中，字符串的位置是从1开始的。</p></blockquote>\n<h3 id=\"日期时间处理函数\"><a href=\"#日期时间处理函数\" class=\"headerlink\" title=\"日期时间处理函数\"></a>日期时间处理函数</h3><h4 id=\"获取日期、时间\"><a href=\"#获取日期、时间\" class=\"headerlink\" title=\"获取日期、时间\"></a>获取日期、时间</h4><div class=\"table-container\">\n<table>\n<thead>\n<tr>\n<th>函数</th>\n<th>用法</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><strong>CURDATE()</strong> ，CURRENT_DATE()</td>\n<td>返回当前日期，只包含年、月、日</td>\n</tr>\n<tr>\n<td><strong>CURTIME()</strong> ， CURRENT_TIME()</td>\n<td>返回当前时间，只包含时、分、秒</td>\n</tr>\n<tr>\n<td><strong>NOW()</strong> / SYSDATE() / CURRENT_TIMESTAMP() / LOCALTIME() / LOCALTIMESTAMP()</td>\n<td>返回当前系统日期和时间</td>\n</tr>\n<tr>\n<td>UTC_DATE()</td>\n<td>返回UTC（世界标准时间）日期</td>\n</tr>\n<tr>\n<td>UTC_TIME()</td>\n<td>返回UTC（世界标准时间）时间</td>\n</tr>\n</tbody>\n</table>\n</div>\n<h4 id=\"日期与时间戳的转换\"><a href=\"#日期与时间戳的转换\" class=\"headerlink\" title=\"日期与时间戳的转换\"></a>日期与时间戳的转换</h4><div class=\"table-container\">\n<table>\n<thead>\n<tr>\n<th>函数</th>\n<th>用法</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>UNIX_TIMESTAMP()</td>\n<td>以UNIX时间戳的形式返回当前时间。SELECT UNIX_TIMESTAMP() -&gt;1634348884</td>\n</tr>\n<tr>\n<td>UNIX_TIMESTAMP(date)</td>\n<td>将时间date以UNIX时间戳的形式返回。</td>\n</tr>\n<tr>\n<td>FROM_UNIXTIME(timestamp)</td>\n<td>将UNIX时间戳的时间转换为普通格式的时间</td>\n</tr>\n</tbody>\n</table>\n</div>\n<h4 id=\"获取月份、星期、星期数、天数等函数\"><a href=\"#获取月份、星期、星期数、天数等函数\" class=\"headerlink\" title=\"获取月份、星期、星期数、天数等函数\"></a>获取月份、星期、星期数、天数等函数</h4><div class=\"table-container\">\n<table>\n<thead>\n<tr>\n<th>函数</th>\n<th>用法</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>YEAR(date) / MONTH(date) / DAY(date)</td>\n<td>返回具体的日期值</td>\n</tr>\n<tr>\n<td>HOUR(time) / MINUTE(time) / SECOND(time)</td>\n<td>返回具体的时间值</td>\n</tr>\n<tr>\n<td>MONTHNAME(date)</td>\n<td>返回月份：January，…</td>\n</tr>\n<tr>\n<td>DAYNAME(date)</td>\n<td>返回星期几：MONDAY，TUESDAY…..SUNDAY</td>\n</tr>\n<tr>\n<td>WEEKDAY(date)</td>\n<td>返回周几，注意，周1是0，周2是1，。。。周日是6</td>\n</tr>\n<tr>\n<td>QUARTER(date)</td>\n<td>返回日期对应的季度，范围为1～4</td>\n</tr>\n<tr>\n<td>WEEK(date) ， WEEKOFYEAR(date)</td>\n<td>返回一年中的第几周</td>\n</tr>\n<tr>\n<td>DAYOFYEAR(date)</td>\n<td>返回日期是一年中的第几天</td>\n</tr>\n<tr>\n<td>DAYOFMONTH(date)</td>\n<td>返回日期位于所在月份的第几天</td>\n</tr>\n<tr>\n<td>DAYOFWEEK(date)</td>\n<td>返回周几，注意：周日是1，周一是2，。。。周六是7</td>\n</tr>\n</tbody>\n</table>\n</div>\n<h4 id=\"日期的操作函数\"><a href=\"#日期的操作函数\" class=\"headerlink\" title=\"日期的操作函数\"></a>日期的操作函数</h4><div class=\"table-container\">\n<table>\n<thead>\n<tr>\n<th>函数</th>\n<th>用法</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>EXTRACT(type FROM date)</td>\n<td>返回指定日期中特定的部分，type指定返回的值</td>\n</tr>\n</tbody>\n</table>\n</div>\n<div class=\"table-container\">\n<table>\n<thead>\n<tr>\n<th>type取值</th>\n<th>含义</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>MICROS ECONDtype取值</td>\n<td>返回毫秒数</td>\n</tr>\n<tr>\n<td>SECONDMICROS ECOND</td>\n<td>返回秒数</td>\n</tr>\n<tr>\n<td>MINUTE .SECOND</td>\n<td>返回分钟数</td>\n</tr>\n<tr>\n<td>HOURMINUTE</td>\n<td>返回小时数</td>\n</tr>\n<tr>\n<td>DAYHOUR</td>\n<td>返回天数.</td>\n</tr>\n<tr>\n<td>WEEKDAY</td>\n<td>返回日期在一年中的第几个星期</td>\n</tr>\n<tr>\n<td>MONTHWEEK</td>\n<td>返回日期在一年中的第几个月</td>\n</tr>\n<tr>\n<td>QUARTERMONTH</td>\n<td>返回日期在一年中的第几个季度</td>\n</tr>\n<tr>\n<td>YEARQUARTER</td>\n<td>返回日期的年份</td>\n</tr>\n<tr>\n<td>SECOND MICROSECONDYEAR</td>\n<td>返回秒和毫秒值</td>\n</tr>\n<tr>\n<td>MINUTE MICROSECONDSECOND MICROSECOND</td>\n<td>返回分钟和毫秒值</td>\n</tr>\n<tr>\n<td>MINUTE SECONDMINUTE MICROSECOND</td>\n<td>返回分钟和秒值</td>\n</tr>\n<tr>\n<td>HOUR MICROSECONDMINUTE SECOND</td>\n<td>返回小时和毫秒值</td>\n</tr>\n<tr>\n<td>HOUR SECONDHOUR MICROSECOND</td>\n<td>返回小时和秒值</td>\n</tr>\n<tr>\n<td>HOUR_ MINUTEHOUR SECOND</td>\n<td>返回小时和分钟值</td>\n</tr>\n<tr>\n<td>DAY MICROSECONDHOUR_ MINUTE</td>\n<td>返回天和毫秒值</td>\n</tr>\n<tr>\n<td>DAY_ SECONDDAY_ MICROSECOND</td>\n<td>返回天和秒值</td>\n</tr>\n<tr>\n<td>DAY_ MINUTEDAY_ SECOND</td>\n<td>返回天和分钟值</td>\n</tr>\n<tr>\n<td>DAY_ HOURDAY_ MINUTE</td>\n<td>返回天和小时</td>\n</tr>\n<tr>\n<td>YEAR MONTHDAY_ HOUR</td>\n<td>返回年和月</td>\n</tr>\n</tbody>\n</table>\n</div>\n<pre class=\"line-numbers language-mysql\" data-language=\"mysql\"><code class=\"language-mysql\">SELECT EXTRACT(MINUTE FROM NOW()),EXTRACT( WEEK FROM NOW()),\nEXTRACT( QUARTER FROM NOW()),EXTRACT( MINUTE_SECOND FROM NOW())\nFROM DUAL;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n<h4 id=\"时间和秒钟转换的函数\"><a href=\"#时间和秒钟转换的函数\" class=\"headerlink\" title=\"时间和秒钟转换的函数\"></a>时间和秒钟转换的函数</h4><div class=\"table-container\">\n<table>\n<thead>\n<tr>\n<th>函数</th>\n<th>用法</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>TIME_TO_SEC(time)</td>\n<td>将 time 转化为秒并返回结果值。转化的公式为：<code>小时*3600+分钟*60+秒</code></td>\n</tr>\n<tr>\n<td>SEC_TO_TIME(seconds)</td>\n<td>将 seconds 描述转化为包含小时、分钟和秒的时间</td>\n</tr>\n</tbody>\n</table>\n</div>\n<h4 id=\"计算日期和时间的函数\"><a href=\"#计算日期和时间的函数\" class=\"headerlink\" title=\"计算日期和时间的函数\"></a>计算日期和时间的函数</h4><p><strong>第1组：</strong></p>\n<div class=\"table-container\">\n<table>\n<thead>\n<tr>\n<th>函数</th>\n<th>用法</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>DATE_ADD(datetime, INTERVAL  expr type)，ADDDATE(date,INTERVAL expr type)</td>\n<td>返回与给定日期时间相差INTERVAL时间段的日期时间</td>\n</tr>\n<tr>\n<td>DATE_SUB(date,INTERVAL expr type)，SUBDATE(date,INTERVAL expr type)</td>\n<td>返回与date相差INTERVAL时间间隔的日期</td>\n</tr>\n</tbody>\n</table>\n</div>\n<p><strong>第2组：</strong></p>\n<div class=\"table-container\">\n<table>\n<thead>\n<tr>\n<th>函数</th>\n<th>用法</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>ADDTIME(time1,time2)</td>\n<td>返回time1加上time2的时间。当time2为一个数字时，代表的是<code>秒</code>，可以为负数</td>\n</tr>\n<tr>\n<td>SUBTIME(time1,time2)</td>\n<td>返回time1减去time2后的时间。当time2为一个数字时，代表的是<code>秒</code>，可以为负数</td>\n</tr>\n<tr>\n<td>DATEDIFF(date1,date2)</td>\n<td>返回date1 - date2的日期间隔天数</td>\n</tr>\n<tr>\n<td>TIMEDIFF(time1, time2)</td>\n<td>返回time1 - time2的时间间隔</td>\n</tr>\n<tr>\n<td>FROM_DAYS(N)</td>\n<td>返回从0000年1月1日起，N天以后的日期</td>\n</tr>\n<tr>\n<td>TO_DAYS(date)</td>\n<td>返回日期date距离0000年1月1日的天数</td>\n</tr>\n<tr>\n<td>LAST_DAY(date)</td>\n<td>返回date所在月份的最后一天的日期</td>\n</tr>\n<tr>\n<td>MAKEDATE(year,n)</td>\n<td>针对给定年份与所在年份中的天数返回一个日期</td>\n</tr>\n<tr>\n<td>MAKETIME(hour,minute,second)</td>\n<td>将给定的小时、分钟和秒组合成时间并返回</td>\n</tr>\n<tr>\n<td>PERIOD_ADD(time,n)</td>\n<td>返回time加上n后的时间</td>\n</tr>\n</tbody>\n</table>\n</div>\n<h4 id=\"日期的格式化与解析\"><a href=\"#日期的格式化与解析\" class=\"headerlink\" title=\"日期的格式化与解析\"></a>日期的格式化与解析</h4><div class=\"table-container\">\n<table>\n<thead>\n<tr>\n<th>函数</th>\n<th>用法</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>DATE_FORMAT(date,fmt)</td>\n<td>按照字符串fmt格式化日期date值</td>\n</tr>\n<tr>\n<td>TIME_FORMAT(time,fmt)</td>\n<td>按照字符串fmt格式化时间time值</td>\n</tr>\n<tr>\n<td>GET_FORMAT(date_type,format_type)</td>\n<td>返回日期字符串的显示格式</td>\n</tr>\n<tr>\n<td>STR_TO_DATE(str, fmt)</td>\n<td>按照字符串fmt对str进行解析，解析为一个日期</td>\n</tr>\n</tbody>\n</table>\n</div>\n<p>上述<code>非GET_FORMAT</code>函数中fmt参数常用的格式符：</p>\n<div class=\"table-container\">\n<table>\n<thead>\n<tr>\n<th>格式符</th>\n<th>说明</th>\n<th>格式符</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>%Y</td>\n<td>4位数字表示年份</td>\n<td>%y</td>\n<td>表示两位数字表示年份</td>\n</tr>\n<tr>\n<td>%M</td>\n<td>月名表示月份（January,….）</td>\n<td>%m</td>\n<td>两位数字表示月份（01,02,03。。。）</td>\n</tr>\n<tr>\n<td>%b</td>\n<td>缩写的月名（Jan.，Feb.，….）</td>\n<td>%c</td>\n<td>数字表示月份（1,2,3,…）</td>\n</tr>\n<tr>\n<td>%D</td>\n<td>英文后缀表示月中的天数（1st,2nd,3rd,…）</td>\n<td>%d</td>\n<td>两位数字表示月中的天数(01,02…)</td>\n</tr>\n<tr>\n<td>%e</td>\n<td>数字形式表示月中的天数（1,2,3,4,5…..）</td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>%H</td>\n<td>两位数字表示小数，24小时制（01,02..）</td>\n<td>%h和%I</td>\n<td>两位数字表示小时，12小时制（01,02..）</td>\n</tr>\n<tr>\n<td>%k</td>\n<td>数字形式的小时，24小时制(1,2,3)</td>\n<td>%l</td>\n<td>数字形式表示小时，12小时制（1,2,3,4….）</td>\n</tr>\n<tr>\n<td>%i</td>\n<td>两位数字表示分钟（00,01,02）</td>\n<td>%S和%s</td>\n<td>两位数字表示秒(00,01,02…)</td>\n</tr>\n<tr>\n<td>%W</td>\n<td>一周中的星期名称（Sunday…）</td>\n<td>%a</td>\n<td>一周中的星期缩写（Sun.，Mon.,Tues.，..）</td>\n</tr>\n<tr>\n<td>%w</td>\n<td>以数字表示周中的天数(0=Sunday,1=Monday….)</td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>%j</td>\n<td>以3位数字表示年中的天数(001,002…)</td>\n<td>%U</td>\n<td>以数字表示年中的第几周，（1,2,3。。）其中Sunday为周中第一天</td>\n</tr>\n<tr>\n<td>%u</td>\n<td>以数字表示年中的第几周，（1,2,3。。）其中Monday为周中第一天</td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>%T</td>\n<td>24小时制</td>\n<td>%r</td>\n<td>12小时制</td>\n</tr>\n<tr>\n<td>%p</td>\n<td>AM或PM</td>\n<td>%%</td>\n<td>表示%</td>\n</tr>\n</tbody>\n</table>\n</div>\n<h3 id=\"三角函数\"><a href=\"#三角函数\" class=\"headerlink\" title=\"三角函数\"></a>三角函数</h3><div class=\"table-container\">\n<table>\n<thead>\n<tr>\n<th>函数</th>\n<th>用法</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>SIN(x)</td>\n<td>返回x的正弦值，其中，参数x为弧度值</td>\n</tr>\n<tr>\n<td>ASIN(x)</td>\n<td>返回x的反正弦值，即获取正弦为x的值。如果x的值不在-1到1之间，则返回NULL</td>\n</tr>\n<tr>\n<td>COS(x)</td>\n<td>返回x的余弦值，其中，参数x为弧度值</td>\n</tr>\n<tr>\n<td>ACOS(x)</td>\n<td>返回x的反余弦值，即获取余弦为x的值。如果x的值不在-1到1之间，则返回NULL</td>\n</tr>\n<tr>\n<td>TAN(x)</td>\n<td>返回x的正切值，其中，参数x为弧度值</td>\n</tr>\n<tr>\n<td>ATAN(x)</td>\n<td>返回x的反正切值，即返回正切值为x的值</td>\n</tr>\n<tr>\n<td>ATAN2(m,n)</td>\n<td>返回两个参数的反正切值</td>\n</tr>\n<tr>\n<td>COT(x)</td>\n<td>返回x的余切值，其中，X为弧度值</td>\n</tr>\n</tbody>\n</table>\n</div>\n<h3 id=\"指数与对数\"><a href=\"#指数与对数\" class=\"headerlink\" title=\"指数与对数\"></a>指数与对数</h3><div class=\"table-container\">\n<table>\n<thead>\n<tr>\n<th>函数</th>\n<th>用法</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>POW(x,y)，POWER(X,Y)</td>\n<td>返回x的y次方</td>\n</tr>\n<tr>\n<td>EXP(X)</td>\n<td>返回e的X次方，其中e是一个常数，2.718281828459045</td>\n</tr>\n<tr>\n<td>LN(X)，LOG(X)</td>\n<td>返回以e为底的X的对数，当X &lt;= 0 时，返回的结果为NULL</td>\n</tr>\n<tr>\n<td>LOG10(X)</td>\n<td>返回以10为底的X的对数，当X &lt;= 0 时，返回的结果为NULL</td>\n</tr>\n<tr>\n<td>LOG2(X)</td>\n<td>返回以2为底的X的对数，当X &lt;= 0 时，返回NULL</td>\n</tr>\n</tbody>\n</table>\n</div>\n<h3 id=\"进制间的转换\"><a href=\"#进制间的转换\" class=\"headerlink\" title=\"进制间的转换\"></a>进制间的转换</h3><div class=\"table-container\">\n<table>\n<thead>\n<tr>\n<th>函数</th>\n<th>用法</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>BIN(x)</td>\n<td>返回x的二进制编码</td>\n</tr>\n<tr>\n<td>HEX(x)</td>\n<td>返回x的十六进制编码</td>\n</tr>\n<tr>\n<td>OCT(x)</td>\n<td>返回x的八进制编码</td>\n</tr>\n<tr>\n<td>CONV(x,f1,f2)</td>\n<td>返回f1进制数变成f2进制数</td>\n</tr>\n</tbody>\n</table>\n</div>\n<h3 id=\"流程控制函数\"><a href=\"#流程控制函数\" class=\"headerlink\" title=\"流程控制函数\"></a>流程控制函数</h3><p>流程处理函数可以根据不同的条件，执行不同的处理流程，可以在SQL语句中实现不同的条件选择。MySQL中的流程处理函数主要包括IF()、IFNULL()和CASE()函数。</p>\n<div class=\"table-container\">\n<table>\n<thead>\n<tr>\n<th>函数</th>\n<th>用法</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>IF(value,value1,value2)</td>\n<td>如果value的值为TRUE，返回value1，否则返回value2</td>\n</tr>\n<tr>\n<td>IFNULL(value1, value2)</td>\n<td>如果value1不为NULL，返回value1，否则返回value2</td>\n</tr>\n<tr>\n<td>CASE WHEN 条件1 THEN 结果1 WHEN 条件2 THEN 结果2 …. [ELSE resultn] END</td>\n<td>相当于Java的if…else if…else…</td>\n</tr>\n<tr>\n<td>CASE  expr WHEN 常量值1 THEN 值1 WHEN 常量值1 THEN 值1 …. [ELSE 值n] END</td>\n<td>相当于Java的switch…case…</td>\n</tr>\n</tbody>\n</table>\n</div>\n<h3 id=\"加密与解密函数\"><a href=\"#加密与解密函数\" class=\"headerlink\" title=\"加密与解密函数\"></a>加密与解密函数</h3><p>加密与解密函数主要用于对数据库中的数据进行加密和解密处理，以防止数据被他人窃取。这些函数在保证数据库安全时非常有用。</p>\n<div class=\"table-container\">\n<table>\n<thead>\n<tr>\n<th>函数</th>\n<th>用法</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>PASSWORD(str)</td>\n<td>返回字符串str的加密版本，41位长的字符串。加密结果<code>不可逆</code>，常用于用户的密码加密</td>\n</tr>\n<tr>\n<td>MD5(str)</td>\n<td>返回字符串str的md5加密后的值，也是一种加密方式。若参数为NULL，则会返回NULL</td>\n</tr>\n<tr>\n<td>SHA(str)</td>\n<td>从原明文密码str计算并返回加密后的密码字符串，当参数为NULL时，返回NULL。<code>SHA加密算法比MD5更加安全</code>。</td>\n</tr>\n<tr>\n<td>ENCODE(value,password_seed)</td>\n<td>返回使用password_seed作为加密密码加密value</td>\n</tr>\n<tr>\n<td>DECODE(value,password_seed)</td>\n<td>返回使用password_seed作为加密密码解密value</td>\n</tr>\n</tbody>\n</table>\n</div>\n<p>可以看到，ENCODE(value,password_seed)函数与DECODE(value,password_seed)函数互为反函数。</p>\n<h3 id=\"MySQL信息函数\"><a href=\"#MySQL信息函数\" class=\"headerlink\" title=\"MySQL信息函数\"></a>MySQL信息函数</h3><p>MySQL中内置了一些可以查询MySQL信息的函数，这些函数主要用于帮助数据库开发或运维人员更好地对数据库进行维护工作。</p>\n<div class=\"table-container\">\n<table>\n<thead>\n<tr>\n<th>函数</th>\n<th>用法</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>VERSION()</td>\n<td>返回当前MySQL的版本号</td>\n</tr>\n<tr>\n<td>CONNECTION_ID()</td>\n<td>返回当前MySQL服务器的连接数</td>\n</tr>\n<tr>\n<td>DATABASE()，SCHEMA()</td>\n<td>返回MySQL命令行当前所在的数据库</td>\n</tr>\n<tr>\n<td>USER()，CURRENT_USER()、SYSTEM_USER()，SESSION_USER()</td>\n<td>返回当前连接MySQL的用户名，返回结果格式为“主机名@用户名”</td>\n</tr>\n<tr>\n<td>CHARSET(value)</td>\n<td>返回字符串value自变量的字符集</td>\n</tr>\n<tr>\n<td>COLLATION(value)</td>\n<td>返回字符串value的比较规则</td>\n</tr>\n</tbody>\n</table>\n</div>\n<h3 id=\"其他函数\"><a href=\"#其他函数\" class=\"headerlink\" title=\"其他函数\"></a>其他函数</h3><p>MySQL中有些函数无法对其进行具体的分类，但是这些函数在MySQL的开发和运维过程中也是不容忽视的。</p>\n<div class=\"table-container\">\n<table>\n<thead>\n<tr>\n<th>函数</th>\n<th>用法</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>FORMAT(value,n)</td>\n<td>返回对数字value进行格式化后的结果数据。n表示<code>四舍五入</code>后保留到小数点后n位</td>\n</tr>\n<tr>\n<td>CONV(value,from,to)</td>\n<td>将value的值进行不同进制之间的转换</td>\n</tr>\n<tr>\n<td>INET_ATON(ipvalue)</td>\n<td>将以点分隔的IP地址转化为一个数字</td>\n</tr>\n<tr>\n<td>INET_NTOA(value)</td>\n<td>将数字形式的IP地址转化为以点分隔的IP地址</td>\n</tr>\n<tr>\n<td>BENCHMARK(n,expr)</td>\n<td>将表达式expr重复执行n次。用于测试MySQL处理expr表达式所耗费的时间</td>\n</tr>\n<tr>\n<td>CONVERT(value USING char_code)</td>\n<td>将value所使用的字符编码修改为char_code</td>\n</tr>\n</tbody>\n</table>\n</div>\n<h2 id=\"SQL聚集函数\"><a href=\"#SQL聚集函数\" class=\"headerlink\" title=\"SQL聚集函数\"></a>SQL聚集函数</h2><div class=\"table-container\">\n<table>\n<thead>\n<tr>\n<th>函数</th>\n<th></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>AVG()</td>\n<td>mysql&gt; SELECT AVG(列名) from 表名;</td>\n</tr>\n<tr>\n<td>COUNT()</td>\n<td>mysql&gt; SELECT COUNT(列名) from 表名;</td>\n</tr>\n<tr>\n<td>MAX()</td>\n<td>mysql&gt; SELECT MAX(列名) from 表名;</td>\n</tr>\n<tr>\n<td>MIN()</td>\n<td>mysql&gt; SELECT MIN(列名) from 表名;</td>\n</tr>\n<tr>\n<td>SUM()</td>\n<td>mysql&gt; SELECT SUM(列名) from 表名;</td>\n</tr>\n</tbody>\n</table>\n</div>\n<pre><code>特点：\n1、以上五个分组函数都忽略null值，除了count(*)\n2、sum和avg一般用于处理数值型\n    max、min、count可以处理任何数据类型\n3、都可以搭配distinct使用，用于统计去重后的结果\n4、count的参数可以支持：\n    字段、*、常量值，一般放1\n\n   建议使用 count(*)\n</code></pre><h2 id=\"GROUP-BY\"><a href=\"#GROUP-BY\" class=\"headerlink\" title=\"GROUP BY\"></a>GROUP BY</h2><p><strong>可以使用GROUP BY子句将表中的数据分成若干组</strong></p>\n<pre class=\"line-numbers language-sql\" data-language=\"sql\"><code class=\"language-sql\"><span class=\"token keyword\">SELECT</span> <span class=\"token keyword\">column</span><span class=\"token punctuation\">,</span> group_function<span class=\"token punctuation\">(</span><span class=\"token keyword\">column</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">FROM</span> <span class=\"token keyword\">table</span>\n<span class=\"token punctuation\">[</span><span class=\"token keyword\">WHERE</span>\tcondition<span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">[</span><span class=\"token keyword\">GROUP</span> <span class=\"token keyword\">BY</span>\tgroup_by_expression<span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">[</span><span class=\"token keyword\">ORDER</span> <span class=\"token keyword\">BY</span>\t<span class=\"token keyword\">column</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p><strong>使用多个列分组</strong></p>\n<pre class=\"line-numbers language-sql\" data-language=\"sql\"><code class=\"language-sql\"><span class=\"token keyword\">SELECT</span>   department_id dept_id<span class=\"token punctuation\">,</span> job_id<span class=\"token punctuation\">,</span> <span class=\"token function\">SUM</span><span class=\"token punctuation\">(</span>salary<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">FROM</span>     employees\n<span class=\"token keyword\">GROUP</span> <span class=\"token keyword\">BY</span> department_id<span class=\"token punctuation\">,</span> job_id <span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n<h2 id=\"HAVING\"><a href=\"#HAVING\" class=\"headerlink\" title=\"HAVING\"></a>HAVING</h2><p><strong>过滤分组：HAVING子句</strong></p>\n<ol>\n<li>行已经被分组。</li>\n<li>使用了聚合函数。</li>\n<li>满足HAVING 子句中条件的分组将被显示。</li>\n<li>HAVING 不能单独使用，必须要跟 GROUP BY 一起使用。</li>\n</ol>\n<pre class=\"line-numbers language-sql\" data-language=\"sql\"><code class=\"language-sql\"><span class=\"token keyword\">SELECT</span>   department_id<span class=\"token punctuation\">,</span> <span class=\"token function\">MAX</span><span class=\"token punctuation\">(</span>salary<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">FROM</span>     employees\n<span class=\"token keyword\">GROUP</span> <span class=\"token keyword\">BY</span> department_id\n<span class=\"token keyword\">HAVING</span>   <span class=\"token function\">MAX</span><span class=\"token punctuation\">(</span>salary<span class=\"token punctuation\">)</span><span class=\"token operator\">&gt;</span><span class=\"token number\">10000</span> <span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n<h3 id=\"WHERE和HAVING的对比\"><a href=\"#WHERE和HAVING的对比\" class=\"headerlink\" title=\"WHERE和HAVING的对比\"></a>WHERE和HAVING的对比</h3><p><strong>区别1：WHERE 可以直接使用表中的字段作为筛选条件，但不能使用分组中的计算函数作为筛选条件；HAVING 必须要与 GROUP BY 配合使用，可以把分组计算的函数和分组字段作为筛选条件。</strong> </p>\n<p>这决定了，在需要对数据进行分组统计的时候，HAVING 可以完成 WHERE 不能完成的任务。这是因为，在查询语法结构中，WHERE 在 GROUP BY 之前，所以无法对分组结果进行筛选。HAVING 在 GROUP BY 之后，可以使用分组字段和分组中的计算函数，对分组的结果集进行筛选，这个功能是 WHERE 无法完成的。另外，WHERE排除的记录不再包括在分组中。</p>\n<p><strong>区别2：如果需要通过连接从关联表中获取需要的数据，WHERE 是先筛选后连接，而 HAVING 是先连接后筛选。</strong> 这一点，就决定了在关联查询中，WHERE 比 HAVING 更高效。因为 WHERE 可以先筛选，用一个筛选后的较小数据集和关联表进行连接，这样占用的资源比较少，执行效率也比较高。HAVING 则需要先把结果集准备好，也就是用未被筛选的数据集进行关联，然后对这个大的数据集进行筛选，这样占用的资源就比较多，执行效率也较低。 </p>\n<p>小结如下：</p>\n<div class=\"table-container\">\n<table>\n<thead>\n<tr>\n<th></th>\n<th>优点</th>\n<th>缺点</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>WHERE</td>\n<td>先筛选数据再关联，执行效率高</td>\n<td>不能使用分组中的计算函数进行筛选</td>\n</tr>\n<tr>\n<td>HAVING</td>\n<td>可以使用分组中的计算函数</td>\n<td>在最后的结果集中进行筛选，执行效率较低</td>\n</tr>\n</tbody>\n</table>\n</div>\n<p><strong>开发中的选择：</strong></p>\n<p>WHERE 和 HAVING 也不是互相排斥的，我们可以在一个查询里面同时使用 WHERE 和 HAVING。包含分组统计函数的条件用 HAVING，普通条件用 WHERE。这样，我们就既利用了 WHERE 条件的高效快速，又发挥了 HAVING 可以使用包含分组统计函数的查询条件的优点。当数据量特别大的时候，运行效率会有很大的差别。</p>\n<h2 id=\"连接表jion\"><a href=\"#连接表jion\" class=\"headerlink\" title=\"连接表jion\"></a>连接表jion</h2><p>联结是一种机制，用来在一条SELECT语句中关联表，因此称之为联结。使用特殊的语法，可以联结多个表返回一组输出，联结在运行时关联表中正确的行。</p>\n<pre class=\"line-numbers language-mysql\" data-language=\"mysql\"><code class=\"language-mysql\">#等值联结（equijoin）\nSELECT *\nFROM A,B\nWHERE A.c=B.c;\n\n1.等值连接的结果 = 多个表的交集\n2.n表连接，至少需要n-1个连接条件\n3.多个表不分主次，没有顺序要求\n4.一般为表起别名，提高阅读性和性能\n\n#内部联结\nSELECT *\nFROM A INNER JOIN B\nWHERE A.c=B.c;\n#自然联结\nSELECT *\nFROM A AS a,A AS b\nWHERE a.c=b.c;\n#外部联结\nSELECT *\nFROM A OUTER JOIN B\nWHERE A.c=B.c;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>性能考虑 MySQL在运行时关联指定的每个表以处理联结。这种处理可能是非常耗费资源的，因此应该仔细，不要联结不必要的表。联结的表越多，性能下降越厉害。</p>\n<ul>\n<li>自然联结：无论何时对表进行联结，应该至少有一个列出现在不止一个表中（被联结的列）。自然联结排除多次出现，使每个列只返回一次。</li>\n<li>外部联结：许多联结将一个表中的行与另一个表中的行相关联。但有时候会需要包含没有关联行的那些行。</li>\n</ul>\n<h3 id=\"sql99语法：通过join关键字实现连接\"><a href=\"#sql99语法：通过join关键字实现连接\" class=\"headerlink\" title=\"sql99语法：通过join关键字实现连接\"></a>sql99语法：通过join关键字实现连接</h3><pre class=\"line-numbers language-mysql\" data-language=\"mysql\"><code class=\"language-mysql\">含义：1999年推出的sql语法\n支持：\n等值连接、非等值连接 （内连接）\n外连接\n交叉连接\n\n语法：\n\nselect 字段，...\nfrom 表1\n【inner|left outer|right outer|cross】join 表2 on  连接条件\n【inner|left outer|right outer|cross】join 表3 on  连接条件\n【where 筛选条件】\n【group by 分组字段】\n【having 分组后的筛选条件】\n【order by 排序的字段或表达式】\n\n好处：语句上，连接条件和筛选条件实现了分离，简洁明了！<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h3 id=\"别名\"><a href=\"#别名\" class=\"headerlink\" title=\"别名\"></a>别名</h3><p>AS:别名简化编码</p>\n<pre class=\"line-numbers language-mysql\" data-language=\"mysql\"><code class=\"language-mysql\">SELECT name as n\nFROM papa as p,Baba as b\nWHERE p.c=b.c;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n<h4 id=\"满外连接-FULL-OUTER-JOIN\"><a href=\"#满外连接-FULL-OUTER-JOIN\" class=\"headerlink\" title=\"满外连接(FULL OUTER JOIN)\"></a>满外连接(FULL OUTER JOIN)</h4><ul>\n<li>满外连接的结果 = 左右表匹配的数据 + 左表没有匹配到的数据 + 右表没有匹配到的数据。</li>\n<li>SQL99是支持满外连接的。使用FULL JOIN 或 FULL OUTER JOIN来实现。</li>\n<li>需要注意的是，MySQL不支持FULL JOIN，但是可以用 LEFT JOIN <strong>UNION</strong> RIGHT join代替。</li>\n</ul>\n<h3 id=\"UNION的使用\"><a href=\"#UNION的使用\" class=\"headerlink\" title=\"UNION的使用\"></a>UNION的使用</h3><p><strong>合并查询结果</strong><br>利用UNION关键字，可以给出多条SELECT语句，并将它们的结果组合成单个结果集。合并时，两个表对应的列数和数据类型必须相同，并且相互对应。各个SELECT语句之间使用UNION或UNION ALL关键字分隔。</p>\n<p>语法格式：</p>\n<pre class=\"line-numbers language-mysql\" data-language=\"mysql\"><code class=\"language-mysql\">SELECT column,... FROM table1\nUNION [ALL]\nSELECT column,... FROM table2<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n<p>UNION 操作符返回两个查询的结果集的并集，去除重复记录。</p>\n<p>UNION ALL操作符返回两个查询的结果集的并集。对于两个结果集的重复部分，不去重。</p>\n<p><img src=\"https://img-blog.csdnimg.cn/ead65dafabac4f6c930818e2ccc26142.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBAWUZSNzE4,size_20,color_FFFFFF,t_70,g_se,x_16\" alt=\"\"></p>\n<h3 id=\"代码实现\"><a href=\"#代码实现\" class=\"headerlink\" title=\"代码实现\"></a>代码实现</h3><pre class=\"line-numbers language-mysql\" data-language=\"mysql\"><code class=\"language-mysql\">#中图：内连接 A∩B\nSELECT employee_id,last_name,department_name\nFROM employees e JOIN departments d\nON e.`department_id` = d.`department_id`;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n<pre class=\"line-numbers language-mysql\" data-language=\"mysql\"><code class=\"language-mysql\">#左上图：左外连接\nSELECT employee_id,last_name,department_name\nFROM employees e LEFT JOIN departments d\nON e.`department_id` = d.`department_id`;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n<pre class=\"line-numbers language-mysql\" data-language=\"mysql\"><code class=\"language-mysql\">#右上图：右外连接\nSELECT employee_id,last_name,department_name\nFROM employees e RIGHT JOIN departments d\nON e.`department_id` = d.`department_id`;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n<pre class=\"line-numbers language-mysql\" data-language=\"mysql\"><code class=\"language-mysql\">#左中图：A - A∩B\nSELECT employee_id,last_name,department_name\nFROM employees e LEFT JOIN departments d\nON e.`department_id` = d.`department_id`\nWHERE d.`department_id` IS NULL<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<pre class=\"line-numbers language-mysql\" data-language=\"mysql\"><code class=\"language-mysql\">#右中图：B-A∩B\nSELECT employee_id,last_name,department_name\nFROM employees e RIGHT JOIN departments d\nON e.`department_id` = d.`department_id`\nWHERE e.`department_id` IS NULL<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<pre class=\"line-numbers language-mysql\" data-language=\"mysql\"><code class=\"language-mysql\">#左下图：满外连接\n# 左中图 + 右上图  A∪B\nSELECT employee_id,last_name,department_name\nFROM employees e LEFT JOIN departments d\nON e.`department_id` = d.`department_id`\nWHERE d.`department_id` IS NULL\nUNION ALL  #没有去重操作，效率高\nSELECT employee_id,last_name,department_name\nFROM employees e RIGHT JOIN departments d\nON e.`department_id` = d.`department_id`;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<pre class=\"line-numbers language-mysql\" data-language=\"mysql\"><code class=\"language-mysql\">#右下图\n#左中图 + 右中图  A ∪B- A∩B 或者 (A -  A∩B) ∪ （B - A∩B）\nSELECT employee_id,last_name,department_name\nFROM employees e LEFT JOIN departments d\nON e.`department_id` = d.`department_id`\nWHERE d.`department_id` IS NULL\nUNION ALL\nSELECT employee_id,last_name,department_name\nFROM employees e RIGHT JOIN departments d\nON e.`department_id` = d.`department_id`\nWHERE e.`department_id` IS NULL<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h3 id=\"SQL99语法新特性\"><a href=\"#SQL99语法新特性\" class=\"headerlink\" title=\"SQL99语法新特性\"></a>SQL99语法新特性</h3><h3 id=\"自然连接\"><a href=\"#自然连接\" class=\"headerlink\" title=\"自然连接\"></a>自然连接</h3><p>SQL99 在 SQL92 的基础上提供了一些特殊语法，比如 <code>NATURAL JOIN</code> 用来表示自然连接。我们可以把自然连接理解为 SQL92 中的等值连接。它会帮你自动查询两张连接表中<code>所有相同的字段</code>，然后进行<code>等值连接</code>。</p>\n<p>在SQL92标准中：</p>\n<pre class=\"line-numbers language-mysql\" data-language=\"mysql\"><code class=\"language-mysql\">SELECT employee_id,last_name,department_name\nFROM employees e JOIN departments d\nON e.`department_id` = d.`department_id`\nAND e.`manager_id` = d.`manager_id`;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n<p>在 SQL99 中你可以写成：</p>\n<pre class=\"line-numbers language-mysql\" data-language=\"mysql\"><code class=\"language-mysql\">SELECT employee_id,last_name,department_name\nFROM employees e NATURAL JOIN departments d;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n<h3 id=\"USING连接\"><a href=\"#USING连接\" class=\"headerlink\" title=\"USING连接\"></a>USING连接</h3><p>当我们进行连接的时候，SQL99还支持使用 USING 指定数据表里的<code>同名字段</code>进行等值连接。但是只能配合JOIN一起使用。比如：</p>\n<pre class=\"line-numbers language-mysql\" data-language=\"mysql\"><code class=\"language-mysql\">SELECT employee_id,last_name,department_name\nFROM employees e JOIN departments d\nUSING (department_id);<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n<p>你能看出与自然连接 NATURAL JOIN 不同的是，USING 指定了具体的相同的字段名称，你需要在 USING 的括号 () 中填入要指定的同名字段。同时使用 <code>JOIN...USING</code> 可以简化 JOIN ON 的等值连接。它与下面的 SQL 查询结果是相同的：</p>\n<pre class=\"line-numbers language-mysql\" data-language=\"mysql\"><code class=\"language-mysql\">SELECT employee_id,last_name,department_name\nFROM employees e ,departments d\nWHERE e.department_id = d.department_id;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n<h2 id=\"\"><a href=\"#\" class=\"headerlink\" title=\" \"></a> </h2><h2 id=\"分页查询Limit\"><a href=\"#分页查询Limit\" class=\"headerlink\" title=\"分页查询Limit\"></a>分页查询Limit</h2><p>应用场景：实际的web项目中需要根据用户的需求提交对应的分页查询的sql语句</p>\n<pre class=\"line-numbers language-mysql\" data-language=\"mysql\"><code class=\"language-mysql\">select 字段|表达式,...\nfrom 表\n【where 条件】\n【group by 分组字段】\n【having 条件】\n【order by 排序的字段】\nlimit 【起始的条目索引，】条目数;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>特点：</p>\n<pre><code>1.起始条目索引从0开始\n\n2.limit子句放在查询语句的最后\n\n3.公式：select * from  表 limit （page-1）*sizePerPage,sizePerPage\n假如:\n每页显示条目数sizePerPage\n要显示的页数 page\n</code></pre><h2 id=\"子查询\"><a href=\"#子查询\" class=\"headerlink\" title=\"子查询\"></a>子查询</h2><p>子查询指一个查询语句嵌套在另一个查询语句内部的查询，这个特性从MySQL 4.1开始引入。</p>\n<p>SQL 中子查询的使用大大增强了 SELECT 查询的能力，因为很多时候查询需要从结果集中获取数据，或者需要从同一个表中先计算得出一个数据结果，然后与这个数据结果（可能是某个标量，也可能是某个集合）进行比较。</p>\n<pre class=\"line-numbers language-mysql\" data-language=\"mysql\"><code class=\"language-mysql\">SELECT cust_id\nFROM orders\nWHERE order_num IN (SELECT order_num\n                     FROM orderitems\n                     WHERE prod_id = 'TNT2');\n/*\n1、子查询都放在小括号内\n2、子查询可以放在from后面、select后面、where后面、having后面，但一般放在条件的右侧\n3、子查询优先于主查询执行，主查询使用了子查询的执行结果\n4、子查询根据查询结果的行数不同分为以下两类：\n① 单行子查询\n\t结果集只有一行\n\t一般搭配单行操作符使用：&gt; &lt; = &lt;&gt; &gt;= &lt;= \n\t非法使用子查询的情况：\n\ta、子查询的结果为一组值\n\tb、子查询的结果为空\n\t\n② 多行子查询\n\t结果集有多行\n\t一般搭配多行操作符使用：any、all、in、not in\n\tin： 属于子查询结果中的任意一个就行\n\tany和all往往可以用其他查询代替\n\t*/<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h3 id=\"单行子查询\"><a href=\"#单行子查询\" class=\"headerlink\" title=\"单行子查询\"></a>单行子查询</h3><div class=\"table-container\">\n<table>\n<thead>\n<tr>\n<th>单行比较操作符</th>\n<th>含义</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>=</td>\n<td>equal to</td>\n</tr>\n<tr>\n<td>&gt;</td>\n<td>greater than</td>\n</tr>\n<tr>\n<td>&gt;=</td>\n<td>greater than or equal to</td>\n</tr>\n<tr>\n<td>&lt;</td>\n<td>less than</td>\n</tr>\n<tr>\n<td>&lt;=</td>\n<td>less than or equal to</td>\n</tr>\n<tr>\n<td>&lt;&gt;</td>\n<td>not equal to</td>\n</tr>\n</tbody>\n</table>\n</div>\n<pre class=\"line-numbers language-mysql\" data-language=\"mysql\"><code class=\"language-mysql\">返回job_id与141号员工相同，salary比143号员工多的员工姓名，job_id和工资**\n\n```sql\nSELECT last_name, job_id, salary\nFROM   employees\nWHERE  job_id =  \n                (SELECT job_id\n                 FROM   employees\n                 WHERE  employee_id = 141)\nAND    salary &gt;\n                (SELECT salary\n                 FROM   employees\n                 WHERE  employee_id = 143);\n```\n\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h3 id=\"多行子查询\"><a href=\"#多行子查询\" class=\"headerlink\" title=\"多行子查询\"></a>多行子查询</h3><ul>\n<li>也称为集合比较子查询</li>\n<li>内查询返回多行</li>\n<li>使用多行比较操作符</li>\n</ul>\n<h3 id=\"-1\"><a href=\"#-1\" class=\"headerlink\" title=\" \"></a> </h3><div class=\"table-container\">\n<table>\n<thead>\n<tr>\n<th>多行比较操作符</th>\n<th>含义</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>IN</td>\n<td>等于列表中的<strong>任意一个</strong></td>\n</tr>\n<tr>\n<td>ANY</td>\n<td>需要和单行比较操作符一起使用，和子查询返回的<strong>某一个</strong>值比较</td>\n</tr>\n<tr>\n<td>ALL</td>\n<td>需要和单行比较操作符一起使用，和子查询返回的<strong>所有</strong>值比较</td>\n</tr>\n<tr>\n<td>SOME</td>\n<td>实际上是ANY的别名，作用相同，一般常使用ANY</td>\n</tr>\n</tbody>\n</table>\n</div>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>体会 ANY 和 ALL 的区别</p></blockquote>\n<p>查询平均工资最低的部门id**</p>\n<pre class=\"line-numbers language-mysql\" data-language=\"mysql\"><code class=\"language-mysql\">#方式1：\nSELECT department_id\nFROM employees\nGROUP BY department_id\nHAVING AVG(salary) = (\n\t\t\tSELECT MIN(avg_sal)\n\t\t\tFROM (\n\t\t\t\tSELECT AVG(salary) avg_sal\n\t\t\t\tFROM employees\n\t\t\t\tGROUP BY department_id\n\t\t\t\t) dept_avg_sal\n\t\t\t)<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<pre class=\"line-numbers language-mysql\" data-language=\"mysql\"><code class=\"language-mysql\">#方式2：\nSELECT department_id\nFROM employees\nGROUP BY department_id\nHAVING AVG(salary) &lt;= ALL (\n\t\t\t\tSELECT AVG(salary) avg_sal\n\t\t\t\tFROM employees\n\t\t\t\tGROUP BY department_id\n)<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h3 id=\"相关子查询\"><a href=\"#相关子查询\" class=\"headerlink\" title=\"相关子查询\"></a>相关子查询</h3><h4 id=\"相关子查询执行流程\"><a href=\"#相关子查询执行流程\" class=\"headerlink\" title=\"相关子查询执行流程\"></a>相关子查询执行流程</h4><p>如果子查询的执行依赖于外部查询，通常情况下都是因为子查询中的表用到了外部的表，并进行了条件关联，因此每执行一次外部查询，子查询都要重新计算一次，这样的子查询就称之为<code>关联子查询</code>。</p>\n<p>相关子查询按照一行接一行的顺序执行，主查询的每一行都执行一次子查询。</p>\n<p><img src=\"D:\\极客时间\\尚硅谷大数据学科全套教程（总185.88GB）\\1.尚硅谷大数据学科--核心基础\\MYSQL\\课件md版\\01_课件\\images\\1554992898234.png\" alt=\"1554992898234\" style=\"zoom:80%;\"></p>\n<p><img src=\"D:\\极客时间\\尚硅谷大数据学科全套教程（总185.88GB）\\1.尚硅谷大数据学科--核心基础\\MYSQL\\课件md版\\01_课件\\images\\1554992925281.png\" alt=\"1554992925281\" style=\"zoom:80%;\"></p>\n<p>说明：<strong>子查询中使用主查询中的列</strong></p>\n<h4 id=\"代码示例\"><a href=\"#代码示例\" class=\"headerlink\" title=\"代码示例\"></a>代码示例</h4><p><strong>题目：查询员工中工资大于本部门平均工资的员工的last_name,salary和其department_id</strong></p>\n<p><strong>方式一：相关子查询</strong></p>\n<p><img src=\"D:\\极客时间\\尚硅谷大数据学科全套教程（总185.88GB）\\1.尚硅谷大数据学科--核心基础\\MYSQL\\课件md版\\01_课件\\images\\1554992986225.png\" alt=\"1554992986225\"></p>\n<p><strong>方式二：在 FROM 中使用子查询</strong></p>\n<pre class=\"line-numbers language-sql\" data-language=\"sql\"><code class=\"language-sql\"><span class=\"token keyword\">SELECT</span> last_name<span class=\"token punctuation\">,</span>salary<span class=\"token punctuation\">,</span>e1<span class=\"token punctuation\">.</span>department_id\n<span class=\"token keyword\">FROM</span> employees e1<span class=\"token punctuation\">,</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">SELECT</span> department_id<span class=\"token punctuation\">,</span><span class=\"token function\">AVG</span><span class=\"token punctuation\">(</span>salary<span class=\"token punctuation\">)</span> dept_avg_sal <span class=\"token keyword\">FROM</span> employees <span class=\"token keyword\">GROUP</span> <span class=\"token keyword\">BY</span> department_id<span class=\"token punctuation\">)</span> e2\n<span class=\"token keyword\">WHERE</span> e1<span class=\"token punctuation\">.</span><span class=\"token punctuation\">`</span>department_id<span class=\"token punctuation\">`</span> <span class=\"token operator\">=</span> e2<span class=\"token punctuation\">.</span>department_id\n<span class=\"token operator\">AND</span> e2<span class=\"token punctuation\">.</span>dept_avg_sal <span class=\"token operator\">&lt;</span> e1<span class=\"token punctuation\">.</span><span class=\"token punctuation\">`</span>salary<span class=\"token punctuation\">`</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>from型的子查询：子查询是作为from的一部分，子查询要用()引起来，并且要给这个子查询取别名，<br>把它当成一张“临时的虚拟的表”来使用。</p></blockquote>\n<p>在ORDER BY 中使用子查询：</p>\n<p><strong>题目：查询员工的id,salary,按照department_name 排序</strong></p>\n<pre class=\"line-numbers language-sql\" data-language=\"sql\"><code class=\"language-sql\"><span class=\"token keyword\">SELECT</span> employee_id<span class=\"token punctuation\">,</span>salary\n<span class=\"token keyword\">FROM</span> employees e\n<span class=\"token keyword\">ORDER</span> <span class=\"token keyword\">BY</span> <span class=\"token punctuation\">(</span>\n\t  <span class=\"token keyword\">SELECT</span> department_name\n\t  <span class=\"token keyword\">FROM</span> departments d\n\t  <span class=\"token keyword\">WHERE</span> e<span class=\"token punctuation\">.</span><span class=\"token punctuation\">`</span>department_id<span class=\"token punctuation\">`</span> <span class=\"token operator\">=</span> d<span class=\"token punctuation\">.</span><span class=\"token punctuation\">`</span>department_id<span class=\"token punctuation\">`</span>\n\t<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p><strong>题目：若employees表中employee_id与job_history表中employee_id相同的数目不小于2，输出这些相同id的员工的employee_id,last_name和其job_id</strong></p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">SELECT e.employee_id, last_name,e.job_id\nFROM   employees e \nWHERE  2 &lt;= (SELECT COUNT(*)\n             FROM   job_history \n             WHERE  employee_id = e.employee_id);<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h4 id=\"EXISTS-与-NOT-EXISTS关键字\"><a href=\"#EXISTS-与-NOT-EXISTS关键字\" class=\"headerlink\" title=\"EXISTS 与 NOT EXISTS关键字\"></a>EXISTS 与 NOT EXISTS关键字</h4><ul>\n<li>关联子查询通常也会和 EXISTS操作符一起来使用，用来检查在子查询中是否存在满足条件的行。</li>\n<li><strong>如果在子查询中不存在满足条件的行：</strong><ul>\n<li>条件返回 FALSE</li>\n<li>继续在子查询中查找</li>\n</ul>\n</li>\n<li><strong>如果在子查询中存在满足条件的行：</strong><ul>\n<li>不在子查询中继续查找</li>\n<li>条件返回 TRUE</li>\n</ul>\n</li>\n<li>NOT EXISTS关键字表示如果不存在某种条件，则返回TRUE，否则返回FALSE。</li>\n</ul>\n<p><strong>题目：查询公司管理者的employee_id，last_name，job_id，department_id信息</strong></p>\n<p>方式一：</p>\n<pre class=\"line-numbers language-sql\" data-language=\"sql\"><code class=\"language-sql\"><span class=\"token keyword\">SELECT</span> employee_id<span class=\"token punctuation\">,</span> last_name<span class=\"token punctuation\">,</span> job_id<span class=\"token punctuation\">,</span> department_id\n<span class=\"token keyword\">FROM</span>   employees e1\n<span class=\"token keyword\">WHERE</span>  <span class=\"token keyword\">EXISTS</span> <span class=\"token punctuation\">(</span> <span class=\"token keyword\">SELECT</span> <span class=\"token operator\">*</span>\n                 <span class=\"token keyword\">FROM</span>   employees e2\n                 <span class=\"token keyword\">WHERE</span>  e2<span class=\"token punctuation\">.</span>manager_id <span class=\"token operator\">=</span> \n                        e1<span class=\"token punctuation\">.</span>employee_id<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>方式二：自连接</p>\n<pre class=\"line-numbers language-sql\" data-language=\"sql\"><code class=\"language-sql\"><span class=\"token keyword\">SELECT</span> <span class=\"token keyword\">DISTINCT</span> e1<span class=\"token punctuation\">.</span>employee_id<span class=\"token punctuation\">,</span> e1<span class=\"token punctuation\">.</span>last_name<span class=\"token punctuation\">,</span> e1<span class=\"token punctuation\">.</span>job_id<span class=\"token punctuation\">,</span> e1<span class=\"token punctuation\">.</span>department_id\n<span class=\"token keyword\">FROM</span>   employees e1 <span class=\"token keyword\">JOIN</span> employees e2\n<span class=\"token keyword\">WHERE</span> e1<span class=\"token punctuation\">.</span>employee_id <span class=\"token operator\">=</span> e2<span class=\"token punctuation\">.</span>manager_id<span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n<p>方式三：</p>\n<pre class=\"line-numbers language-sql\" data-language=\"sql\"><code class=\"language-sql\"><span class=\"token keyword\">SELECT</span> employee_id<span class=\"token punctuation\">,</span>last_name<span class=\"token punctuation\">,</span>job_id<span class=\"token punctuation\">,</span>department_id\n<span class=\"token keyword\">FROM</span> employees\n<span class=\"token keyword\">WHERE</span> employee_id <span class=\"token operator\">IN</span> <span class=\"token punctuation\">(</span>\n\t\t     <span class=\"token keyword\">SELECT</span> <span class=\"token keyword\">DISTINCT</span> manager_id\n\t\t     <span class=\"token keyword\">FROM</span> employees\n\t\t     \n\t\t     <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p><strong>题目：查询departments表中，不存在于employees表中的部门的department_id和department_name</strong></p>\n<pre class=\"line-numbers language-sql\" data-language=\"sql\"><code class=\"language-sql\"><span class=\"token keyword\">SELECT</span> department_id<span class=\"token punctuation\">,</span> department_name\n<span class=\"token keyword\">FROM</span> departments d\n<span class=\"token keyword\">WHERE</span> <span class=\"token operator\">NOT</span> <span class=\"token keyword\">EXISTS</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">SELECT</span> <span class=\"token string\">'X'</span>\n                  <span class=\"token keyword\">FROM</span>   employees\n                  <span class=\"token keyword\">WHERE</span>  department_id <span class=\"token operator\">=</span> d<span class=\"token punctuation\">.</span>department_id<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p><img src=\"D:\\极客时间\\尚硅谷大数据学科全套教程（总185.88GB）\\1.尚硅谷大数据学科--核心基础\\MYSQL\\课件md版\\01_课件\\images\\1554993169269.png\" alt=\"1554993169269\"></p>\n<h4 id=\"相关更新\"><a href=\"#相关更新\" class=\"headerlink\" title=\"相关更新\"></a>相关更新</h4><pre class=\"line-numbers language-sql\" data-language=\"sql\"><code class=\"language-sql\"><span class=\"token keyword\">UPDATE</span> table1 alias1\n<span class=\"token keyword\">SET</span>    <span class=\"token keyword\">column</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">SELECT</span> expression\n                 <span class=\"token keyword\">FROM</span>   table2 alias2\n                 <span class=\"token keyword\">WHERE</span>  alias1<span class=\"token punctuation\">.</span><span class=\"token keyword\">column</span> <span class=\"token operator\">=</span> alias2<span class=\"token punctuation\">.</span><span class=\"token keyword\">column</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n<p>使用相关子查询依据一个表中的数据更新另一个表的数据。</p>\n<p><strong>题目：在employees中增加一个department_name字段，数据为员工对应的部门名称</strong></p>\n<pre class=\"line-numbers language-mysql\" data-language=\"mysql\"><code class=\"language-mysql\"># 1）\nALTER TABLE employees\nADD(department_name VARCHAR2(14));\n\n# 2）\nUPDATE employees e\nSET department_name =  (SELECT department_name \n\t                       FROM   departments d\n\t                       WHERE  e.department_id = d.department_id);\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h4 id=\"相关删除\"><a href=\"#相关删除\" class=\"headerlink\" title=\"相关删除\"></a>相关删除</h4><pre class=\"line-numbers language-sql\" data-language=\"sql\"><code class=\"language-sql\"><span class=\"token keyword\">DELETE</span> <span class=\"token keyword\">FROM</span> table1 alias1\n<span class=\"token keyword\">WHERE</span> <span class=\"token keyword\">column</span> operator <span class=\"token punctuation\">(</span><span class=\"token keyword\">SELECT</span> expression\n                       <span class=\"token keyword\">FROM</span>   table2 alias2\n                       <span class=\"token keyword\">WHERE</span>  alias1<span class=\"token punctuation\">.</span><span class=\"token keyword\">column</span> <span class=\"token operator\">=</span> alias2<span class=\"token punctuation\">.</span><span class=\"token keyword\">column</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n<p>使用相关子查询依据一个表中的数据删除另一个表的数据。</p>\n<p><strong>题目：删除表employees中，其与emp_history表皆有的数据</strong></p>\n<pre class=\"line-numbers language-sql\" data-language=\"sql\"><code class=\"language-sql\"><span class=\"token keyword\">DELETE</span> <span class=\"token keyword\">FROM</span> employees e\n<span class=\"token keyword\">WHERE</span> employee_id <span class=\"token operator\">in</span>  \n           <span class=\"token punctuation\">(</span><span class=\"token keyword\">SELECT</span> employee_id\n            <span class=\"token keyword\">FROM</span>   emp_history \n            <span class=\"token keyword\">WHERE</span>  employee_id <span class=\"token operator\">=</span> e<span class=\"token punctuation\">.</span>employee_id<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h2 id=\"-2\"><a href=\"#-2\" class=\"headerlink\" title=\" \"></a> </h2><h1 id=\"4-DML语言\"><a href=\"#4-DML语言\" class=\"headerlink\" title=\"4. DML语言\"></a>4. DML语言</h1><p>数据操作语言：insert、update、delete</p>\n<h2 id=\"4-1-插入\"><a href=\"#4-1-插入\" class=\"headerlink\" title=\"4.1 插入\"></a>4.1 插入</h2><p>语法：</p>\n<pre class=\"line-numbers language-mysql\" data-language=\"mysql\"><code class=\"language-mysql\">insert into 表名(字段名，...)\nvalues(值1，...);\n\n# 支持一次插入多行，语法如下：\ninsert into 表名【(字段名,..)】 values(值，..),(值，...),...;\n\n#支持子查询，语法如下：\ninsert into 表名 查询语句;\n\ninsert into 表名 set 字段=值,字段=值,...;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>特点：</p>\n<ol>\n<li>字段类型和值类型一致或兼容，而且一一对应</li>\n<li>可以为空的字段，可以不用插入值，或用null填充</li>\n<li>不可以为空的字段，必须插入值</li>\n<li>字段个数和值的个数必须一致</li>\n<li>字段可以省略，但默认所有字段，并且顺序和表中的存储顺序一致</li>\n</ol>\n<h2 id=\"4-2-更新数据\"><a href=\"#4-2-更新数据\" class=\"headerlink\" title=\"4.2 更新数据\"></a>4.2 更新数据</h2><p>修改单表语法：</p>\n<pre class=\"line-numbers language-mysql\" data-language=\"mysql\"><code class=\"language-mysql\">update 表名 set 字段=新值,字段=新值\n【where 条件】<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n<p>修改多表语法：</p>\n<pre class=\"line-numbers language-mysql\" data-language=\"mysql\"><code class=\"language-mysql\">update 表1 别名1,表2 别名2\nset 字段=新值，字段=新值\nwhere 连接条件\nand 筛选条件<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n<h2 id=\"4-3-删除\"><a href=\"#4-3-删除\" class=\"headerlink\" title=\"4.3 删除\"></a>4.3 删除</h2><h3 id=\"方式1：delete语句\"><a href=\"#方式1：delete语句\" class=\"headerlink\" title=\"方式1：delete语句\"></a>方式1：delete语句</h3><p>单表的删除： ★</p>\n<pre class=\"line-numbers language-mysql\" data-language=\"mysql\"><code class=\"language-mysql\">delete from 表名 【where 筛选条件】<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>多表的删除：<br>    delete 别名1，别名2<br>    from 表1 别名1，表2 别名2<br>    where 连接条件<br>    and 筛选条件;</p>\n<h3 id=\"方式2：truncate语句\"><a href=\"#方式2：truncate语句\" class=\"headerlink\" title=\"方式2：truncate语句\"></a>方式2：truncate语句</h3><pre><code>truncate table 表名\n</code></pre><p>两种方式的区别【面试题】</p>\n<pre><code>#1.truncate不能加where条件，而delete可以加where条件\n\n#2.truncate的效率高一丢丢\n\n#3.truncate 删除带自增长的列的表后，如果再插入数据，数据从1开始\n#delete 删除带自增长列的表后，如果再插入数据，数据从上一次的断点处开始\n\n#4.truncate删除不能回滚，delete删除可以回滚\n</code></pre><h2 id=\"MySQL8新特性：计算列\"><a href=\"#MySQL8新特性：计算列\" class=\"headerlink\" title=\"MySQL8新特性：计算列\"></a>MySQL8新特性：计算列</h2><p>什么叫计算列呢？简单来说就是某一列的值是通过别的列计算得来的。例如，a列值为1、b列值为2，c列不需要手动插入，定义a+b的结果为c的值，那么c就是计算列，是通过别的列计算得来的。</p>\n<p>在MySQL 8.0中，CREATE TABLE 和 ALTER TABLE 中都支持增加计算列。下面以CREATE TABLE为例进行讲解。</p>\n<p>举例：定义数据表tb1，然后定义字段id、字段a、字段b和字段c，其中字段c为计算列，用于计算a+b的值。<br>首先创建测试表tb1，语句如下：</p>\n<pre class=\"line-numbers language-mysql\" data-language=\"mysql\"><code class=\"language-mysql\">CREATE TABLE tb1(\nid INT,\na INT,\nb INT,\nc INT GENERATED ALWAYS AS (a + b) VIRTUAL\n);<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>插入演示数据，语句如下：</p>\n<pre class=\"line-numbers language-mysql\" data-language=\"mysql\"><code class=\"language-mysql\">INSERT INTO tb1(a,b) VALUES (100,200);<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>查询数据表tb1中的数据，结果如下：</p>\n<pre class=\"line-numbers language-mysql\" data-language=\"mysql\"><code class=\"language-mysql\">mysql&gt; SELECT * FROM tb1;\n+------+------+------+------+\n| id   | a    | b    | c    |\n+------+------+------+------+\n| NULL |  100 |  200 |  300 |\n+------+------+------+------+\n1 row in set (0.00 sec)<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>更新数据中的数据，语句如下：</p>\n<pre class=\"line-numbers language-mysql\" data-language=\"mysql\"><code class=\"language-mysql\">mysql&gt; UPDATE tb1 SET a = 500;\nQuery OK, 0 rows affected (0.00 sec)\nRows matched: 1  Changed: 0  Warnings: 0<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n<h1 id=\"5-DDL语言\"><a href=\"#5-DDL语言\" class=\"headerlink\" title=\"5. DDL语言\"></a>5. DDL语言</h1><p>数据定义语言：create、drop、alter</p>\n<h2 id=\"5-1创建数据库\"><a href=\"#5-1创建数据库\" class=\"headerlink\" title=\"5.1创建数据库\"></a>5.1创建数据库</h2><ul>\n<li>方式1：创建数据库</li>\n</ul>\n<pre class=\"line-numbers language-mysql\" data-language=\"mysql\"><code class=\"language-mysql\">CREATE DATABASE 数据库名; <span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<ul>\n<li>方式2：创建数据库并指定字符集</li>\n</ul>\n<pre class=\"line-numbers language-mysql\" data-language=\"mysql\"><code class=\"language-mysql\">CREATE DATABASE 数据库名 CHARACTER SET 字符集;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<ul>\n<li>方式3：判断数据库是否已经存在，不存在则创建数据库（<code>推荐</code>）</li>\n</ul>\n<pre class=\"line-numbers language-mysql\" data-language=\"mysql\"><code class=\"language-mysql\">CREATE DATABASE IF NOT EXISTS 数据库名; <span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>如果MySQL中已经存在相关的数据库，则忽略创建语句，不再创建数据库。</p>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>注意：DATABASE 不能改名。一些可视化工具可以改名，它是建新库，把所有表复制到新库，再删旧库完成的。</p></blockquote>\n<h3 id=\"使用数据库\"><a href=\"#使用数据库\" class=\"headerlink\" title=\"使用数据库\"></a>使用数据库</h3><ul>\n<li>查看当前所有的数据库</li>\n</ul>\n<pre class=\"line-numbers language-mysql\" data-language=\"mysql\"><code class=\"language-mysql\">SHOW DATABASES; #有一个S，代表多个数据库<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<ul>\n<li>查看当前正在使用的数据库</li>\n</ul>\n<pre class=\"line-numbers language-mysql\" data-language=\"mysql\"><code class=\"language-mysql\">SELECT DATABASE();  #使用的一个 mysql 中的全局函数<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<ul>\n<li>查看指定库下所有的表</li>\n</ul>\n<pre class=\"line-numbers language-mysql\" data-language=\"mysql\"><code class=\"language-mysql\">SHOW TABLES FROM 数据库名;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<ul>\n<li>查看数据库的创建信息</li>\n</ul>\n<pre class=\"line-numbers language-mysql\" data-language=\"mysql\"><code class=\"language-mysql\">SHOW CREATE DATABASE 数据库名;\n或者：\nSHOW CREATE DATABASE 数据库名\\G<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n<ul>\n<li>使用/切换数据库</li>\n</ul>\n<pre class=\"line-numbers language-mysql\" data-language=\"mysql\"><code class=\"language-mysql\">USE 数据库名;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>注意：要操作表格和数据之前必须先说明是对哪个数据库进行操作，否则就要对所有对象加上“数据库名.”。</p></blockquote>\n<h3 id=\"修改数据库\"><a href=\"#修改数据库\" class=\"headerlink\" title=\"修改数据库\"></a>修改数据库</h3><ul>\n<li>更改数据库字符集</li>\n</ul>\n<pre class=\"line-numbers language-mysql\" data-language=\"mysql\"><code class=\"language-mysql\">ALTER DATABASE 数据库名 CHARACTER SET 字符集;  #比如：gbk、utf8等<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<h3 id=\"删除数据库\"><a href=\"#删除数据库\" class=\"headerlink\" title=\"删除数据库\"></a>删除数据库</h3><ul>\n<li>方式1：删除指定的数据库</li>\n</ul>\n<pre class=\"line-numbers language-mysql\" data-language=\"mysql\"><code class=\"language-mysql\">DROP DATABASE 数据库名;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<ul>\n<li>方式2：删除指定的数据库（<code>推荐</code>）</li>\n</ul>\n<pre class=\"line-numbers language-mysql\" data-language=\"mysql\"><code class=\"language-mysql\">DROP DATABASE IF EXISTS 数据库名;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<h2 id=\"5-2-创建表-create\"><a href=\"#5-2-创建表-create\" class=\"headerlink\" title=\"5.2 创建表 create\"></a>5.2 创建表 create</h2><p>create table 表名(</p>\n<p>  字段名 字段类型 not null,#非空</p>\n<p>  字段名 字段类型 primary key,#主键</p>\n<p>  字段名 字段类型 unique,#唯一</p>\n<p>  字段名 字段类型 default 值,#默认</p>\n<p>  constraint 约束名 foreign key(字段名) references 主表（被引用列）</p>\n<p>)</p>\n<pre class=\"line-numbers language-mysql\" data-language=\"mysql\"><code class=\"language-mysql\">CREATE TABLE IF NOT EXISTS stuinfo(\n\tstuId INT,\n\tstuName VARCHAR(20),\n\tgender CHAR,\n\tbornDate DATETIME\n);\nDESC studentinfo;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<div class=\"table-container\">\n<table>\n<thead>\n<tr>\n<th></th>\n<th>支持类型</th>\n<th>可以起约束名</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>列级约束</td>\n<td>除了外键</td>\n<td>不可以</td>\n</tr>\n<tr>\n<td>表级约束</td>\n<td>除了非空和默认</td>\n<td>可以，但对主键无效</td>\n</tr>\n</tbody>\n</table>\n</div>\n<p>列级约束可以在一个字段上追加多个，中间用空格隔开，没有顺序要求</p>\n<h3 id=\"标识符命名规则\"><a href=\"#标识符命名规则\" class=\"headerlink\" title=\"标识符命名规则\"></a>标识符命名规则</h3><ul>\n<li>数据库名、表名不得超过30个字符，变量名限制为29个</li>\n<li>必须只能包含 A–Z, a–z, 0–9, _共63个字符</li>\n<li>数据库名、表名、字段名等对象名中间不要包含空格</li>\n<li>同一个MySQL软件中，数据库不能同名；同一个库中，表不能重名；同一个表中，字段不能重名</li>\n<li>必须保证你的字段没有和保留字、数据库系统或常用方法冲突。如果坚持使用，请在SQL语句中使用`（着重号）引起来</li>\n<li>保持字段名和类型的一致性：在命名字段并为其指定数据类型的时候一定要保证一致性，假如数据类型在一个表里是整数，那在另一个表里可就别变成字符型了</li>\n</ul>\n<h3 id=\"MySQL中的数据类型\"><a href=\"#MySQL中的数据类型\" class=\"headerlink\" title=\"MySQL中的数据类型\"></a>MySQL中的数据类型</h3><div class=\"table-container\">\n<table>\n<thead>\n<tr>\n<th>类型</th>\n<th>类型举例</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>整数类型</td>\n<td>TINYINT、SMALLINT、MEDIUMINT、<strong>INT(或INTEGER)</strong>、BIGINT</td>\n</tr>\n<tr>\n<td>浮点类型</td>\n<td>FLOAT、DOUBLE</td>\n</tr>\n<tr>\n<td>定点数类型</td>\n<td><strong>DECIMAL</strong></td>\n</tr>\n<tr>\n<td>位类型</td>\n<td>BIT</td>\n</tr>\n<tr>\n<td>日期时间类型</td>\n<td>YEAR、TIME、<strong>DATE</strong>、DATETIME、TIMESTAMP</td>\n</tr>\n<tr>\n<td>文本字符串类型</td>\n<td>CHAR、<strong>VARCHAR</strong>、TINYTEXT、TEXT、MEDIUMTEXT、LONGTEXT</td>\n</tr>\n<tr>\n<td>枚举类型</td>\n<td>ENUM</td>\n</tr>\n<tr>\n<td>集合类型</td>\n<td>SET</td>\n</tr>\n<tr>\n<td>二进制字符串类型</td>\n<td>BINARY、VARBINARY、TINYBLOB、BLOB、MEDIUMBLOB、LONGBLOB</td>\n</tr>\n<tr>\n<td>JSON类型</td>\n<td>JSON对象、JSON数组</td>\n</tr>\n<tr>\n<td>空间数据类型</td>\n<td>单值：GEOMETRY、POINT、LINESTRING、POLYGON；<br>集合：MULTIPOINT、MULTILINESTRING、MULTIPOLYGON、GEOMETRYCOLLECTION</td>\n</tr>\n</tbody>\n</table>\n</div>\n<p>其中，常用的几类类型介绍如下：</p>\n<div class=\"table-container\">\n<table>\n<thead>\n<tr>\n<th>数据类型</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>INT</td>\n<td>从-2^31到2^31-1的整型数据。存储大小为 4个字节</td>\n</tr>\n<tr>\n<td>CHAR(size)</td>\n<td>定长字符数据。若未指定，默认为1个字符，最大长度255</td>\n</tr>\n<tr>\n<td>VARCHAR(size)</td>\n<td>可变长字符数据，根据字符串实际长度保存，<strong>必须指定长度</strong></td>\n</tr>\n<tr>\n<td>FLOAT(M,D)</td>\n<td>单精度，占用4个字节，M=整数位+小数位，D=小数位。 D&lt;=M&lt;=255,0&lt;=D&lt;=30，默认M+D&lt;=6</td>\n</tr>\n<tr>\n<td>DOUBLE(M,D)</td>\n<td>双精度，占用8个字节，D&lt;=M&lt;=255,0&lt;=D&lt;=30，默认M+D&lt;=15</td>\n</tr>\n<tr>\n<td>DECIMAL(M,D)</td>\n<td>高精度小数，占用M+2个字节，D&lt;=M&lt;=65，0&lt;=D&lt;=30，最大取值范围与DOUBLE相同。</td>\n</tr>\n<tr>\n<td>DATE</td>\n<td>日期型数据，格式’YYYY-MM-DD’</td>\n</tr>\n<tr>\n<td>BLOB</td>\n<td>二进制形式的长文本数据，最大可达4G</td>\n</tr>\n<tr>\n<td>TEXT</td>\n<td>长文本数据，最大可达4G</td>\n</tr>\n</tbody>\n</table>\n</div>\n<p><strong>常见约束</strong></p>\n<p>NOT NULL：非空，该字段的值必填</p>\n<p>UNIQUE：唯一，该字段的值不可重复</p>\n<p>DEFAULT：默认，该字段的值不用手动插入有默认值</p>\n<p>CHECK：检查，mysql不支持</p>\n<p>PRIMARY KEY：主键，该字段的值不可重复并且非空 unique+not null</p>\n<p>FOREIGN KEY：外键，该字段的值引用了另外的表的字段</p>\n<p><strong>主键和唯一</strong></p>\n<p>1、区别：</p>\n<p>①、一个表至多有一个主键，但可以有多个唯一</p>\n<p>②、主键不允许为空，唯一可以为空</p>\n<p>2、相同点</p>\n<p>都具有唯一性，都支持组合键，但不推荐</p>\n<p><strong>外键：</strong></p>\n<ol>\n<li>用于限制两个表的关系，从表的字段值引用了主表的某字段值</li>\n<li>外键列和主表的被引用列要求类型一致，意义一样，名称无要求</li>\n<li>主表的被引用列要求是一个key（一般就是主键）</li>\n<li>插入数据，先插入主表，删除数据，先删除从表</li>\n</ol>\n<p><strong>可以通过以下两种方式来删除主表的记录</strong></p>\n<pre class=\"line-numbers language-mysql\" data-language=\"mysql\"><code class=\"language-mysql\">#方式一：级联删除\nALTER TABLE stuinfo ADD CONSTRAINT fk_stu_major FOREIGN KEY(majorid) REFERENCES major(id) ON DELETE CASCADE;\n\n#方式二：级联置空\nALTER TABLE stuinfo ADD CONSTRAINT fk_stu_major FOREIGN KEY(majorid) REFERENCES major(id) ON DELETE SET NULL;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h4 id=\"自增长列\"><a href=\"#自增长列\" class=\"headerlink\" title=\"自增长列\"></a><strong>自增长列</strong></h4><p>特点：</p>\n<ol>\n<li>不用手动插入值，可以自动提供序列值，默认从1开始，步长为1</li>\n</ol>\n<p>如果要更改起始值：手动插入值</p>\n<p>如果要更改步长：更改系统变量</p>\n<p>set auto_increment_increment=值;</p>\n<ol>\n<li><p>一个表至多有一个自增长列</p>\n</li>\n<li><p>自增长列只能支持数值型</p>\n</li>\n<li><p>自增长列必须为一个key</p>\n</li>\n</ol>\n<p><strong>创建表时设置自增长列</strong></p>\n<pre class=\"line-numbers language-mysql\" data-language=\"mysql\"><code class=\"language-mysql\">create table 表(\n\t字段名 字段类型 约束 auto_increment\n)<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n<p><strong>修改表时设置自增长列</strong></p>\n<pre class=\"line-numbers language-mysql\" data-language=\"mysql\"><code class=\"language-mysql\">alter table 表 modify column 字段名 字段类型 约束 auto_increment<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p><strong>删除自增长列</strong></p>\n<pre class=\"line-numbers language-mysql\" data-language=\"mysql\"><code class=\"language-mysql\">alter table 表 modify column 字段名 字段类型 约束 <span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<h2 id=\"5-3-修改表-alter\"><a href=\"#5-3-修改表-alter\" class=\"headerlink\" title=\"5.3 修改表 alter\"></a>5.3 修改表 alter</h2><pre class=\"line-numbers language-mysql\" data-language=\"mysql\"><code class=\"language-mysql\">语法：ALTER TABLE 表名 ADD|MODIFY|DROP|CHANGE COLUMN 字段名 【字段类型】;\n\n#修改字段名\nALTER TABLE studentinfo CHANGE  COLUMN sex gender CHAR;\n\n#修改表名\nALTER TABLE stuinfo RENAME [TO]  studentinfo;\n\n#修改字段类型和列级约束\nALTER TABLE studentinfo MODIFY COLUMN borndate DATE ;\n\n#添加字段\nALTER TABLE studentinfo ADD COLUMN email VARCHAR(20) first;\n\n#删除字段\nALTER TABLE studentinfo DROP COLUMN email;\n\n#添加列\nalter table 表名 add column 列名 类型 【first|after 字段名】;\n\n#修改列名\nalter table 表名 change column 旧列名 新列名 类型;\n\n#删除列\nalter table 表名 drop column 列名;\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p><strong>修改表时添加或删除约束</strong></p>\n<pre class=\"line-numbers language-mysql\" data-language=\"mysql\"><code class=\"language-mysql\">1、非空\n添加非空\nalter table 表名 modify column 字段名 字段类型 not null;\n删除非空\nalter table 表名 modify column 字段名 字段类型 ;\n\n2、默认\n添加默认\nalter table 表名 modify column 字段名 字段类型 default 值;\n删除默认\nalter table 表名 modify column 字段名 字段类型 ;\n3、主键\n添加主键\nalter table 表名 add【 constraint 约束名】 primary key(字段名);\n删除主键\nalter table 表名 drop primary key;\n\n4、唯一\n添加唯一\nalter table 表名 add【 constraint 约束名】 unique(字段名);\n删除唯一\nalter table 表名 drop index 索引名;\n5、外键\n添加外键\nalter table 表名 add【 constraint 约束名】 foreign key(字段名) references 主表（被引用列）;\n删除外键\nalter table 表名 drop foreign key 约束名;\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h3 id=\"5-4-删除表\"><a href=\"#5-4-删除表\" class=\"headerlink\" title=\"5.4 删除表\"></a>5.4 删除表</h3><pre class=\"line-numbers language-mysql\" data-language=\"mysql\"><code class=\"language-mysql\">DROP TABLE [IF EXISTS] studentinfo;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p><strong>复制表</strong></p>\n<ol>\n<li>复制表的结构<br>create table 表名 like 旧表;</li>\n<li>复制表的结构+数据<br>create table 表名<br>select 查询列表 from 旧表【where 筛选】;</li>\n</ol>\n<h1 id=\"6-TCL语言\"><a href=\"#6-TCL语言\" class=\"headerlink\" title=\"6. TCL语言\"></a>6. TCL语言</h1><p>事务控制语言：commit、rollback</p>\n<h2 id=\"6-1-数据库事务\"><a href=\"#6-1-数据库事务\" class=\"headerlink\" title=\"6.1 数据库事务\"></a>6.1 数据库事务</h2><p><strong>含义</strong>：通过一组逻辑操作单元（一组DML——sql语句），将数据从一种状态切换到另外一种状态</p>\n<p><strong>特点（ACID）：</strong></p>\n<ol>\n<li>原子性：要么都执行，要么都回滚</li>\n<li>一致性：保证数据的状态操作前和操作后保持一致</li>\n<li>隔离性：多个事务同时操作相同数据库的同一个数据时，一个事务的执行不受另外一个事务的干扰</li>\n<li>持久性：一个事务一旦提交，则数据将持久化到本地，除非其他事务对其进行修改</li>\n</ol>\n<h3 id=\"相关步骤：\"><a href=\"#相关步骤：\" class=\"headerlink\" title=\"相关步骤：\"></a>相关步骤：</h3><ol>\n<li>开启事务</li>\n<li>编写事务的一组逻辑操作单元（多条sql语句）</li>\n<li>提交事务或回滚事务</li>\n</ol>\n<h3 id=\"事务的分类：\"><a href=\"#事务的分类：\" class=\"headerlink\" title=\"事务的分类：\"></a>事务的分类：</h3><p><strong>隐式事务</strong>，没有明显的开启和结束事务的标志，比如 insert、update、delete语句本身就是一个事务</p>\n<p><strong>显式事务</strong>，具有明显的开启和结束事务的标志</p>\n<pre class=\"line-numbers language-mysql\" data-language=\"mysql\"><code class=\"language-mysql\">1、开启事务\n取消自动提交事务的功能\n\n2、编写事务的一组逻辑操作单元（多条sql语句）\ninsert\nupdate\ndelete\n\n3、提交事务或回滚事务<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h3 id=\"使用到的关键字\"><a href=\"#使用到的关键字\" class=\"headerlink\" title=\"使用到的关键字\"></a>使用到的关键字</h3><pre class=\"line-numbers language-mysql\" data-language=\"mysql\"><code class=\"language-mysql\">set autocommit=0;\nstart transaction;\ncommit;\nrollback;\n\nsavepoint  断点\ncommit to 断点\nrollback to 断点<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h3 id=\"事务的隔离级别\"><a href=\"#事务的隔离级别\" class=\"headerlink\" title=\"事务的隔离级别:\"></a>事务的隔离级别:</h3><p>事务并发问题如何发生？</p>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>当多个事务同时操作同一个数据库的相同数据时</p></blockquote>\n<p>事务的并发问题有哪些？</p>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p><strong>脏读</strong>：一个事务读取到了另外一个事务未提交的数据<br><strong>不可重复读</strong>：同一个事务中，多次读取到的数据不一致<br><strong>幻读</strong>：一个事务读取数据时，另外一个事务进行更新，导致第一个事务读取到了没有更新的数据</p></blockquote>\n<p>如何避免事务的并发问题？</p>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>通过设置事务的隔离级别<br>1、READ UNCOMMITTED<br>2、READ COMMITTED 可以避免脏读<br>3、REPEATABLE READ 可以避免脏读、不可重复读和一部分幻读<br>4、SERIALIZABLE可以避免脏读、不可重复读和幻读</p></blockquote>\n<p>设置隔离级别：</p>\n<pre class=\"line-numbers language-mysql\" data-language=\"mysql\"><code class=\"language-mysql\">set session|global  transaction isolation level 隔离级别名;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>查看隔离级别：</p>\n<pre class=\"line-numbers language-mysql\" data-language=\"mysql\"><code class=\"language-mysql\">select @@tx_isolation;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<h1 id=\"7-视图\"><a href=\"#7-视图\" class=\"headerlink\" title=\"7. 视图\"></a>7. 视图</h1><p>含义：理解成一张虚拟的表</p>\n<p>视图和表的区别：</p>\n<div class=\"table-container\">\n<table>\n<thead>\n<tr>\n<th></th>\n<th>使用方式</th>\n<th>占用物理空间</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>视图</td>\n<td>完全相同</td>\n<td>占用物理空间</td>\n</tr>\n<tr>\n<td>表</td>\n<td>完全相同</td>\n<td>占用</td>\n</tr>\n<tr>\n<td></td>\n<td></td>\n</tr>\n</tbody>\n</table>\n</div>\n<p>视图的好处：</p>\n<ol>\n<li>sql语句提高重用性，效率高</li>\n<li>和表实现了分离，提高了安全性</li>\n</ol>\n<p><strong>常见的数据库对象</strong></p>\n<div class=\"table-container\">\n<table>\n<thead>\n<tr>\n<th>对象</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>表(TABLE)</td>\n<td>表是存储数据的逻辑单元，以行和列的形式存在，列就是字段，行就是记录</td>\n</tr>\n<tr>\n<td>数据字典</td>\n<td>就是系统表，存放数据库相关信息的表。系统表的数据通常由数据库系统维护，程序员通常不应该修改，只可查看</td>\n</tr>\n<tr>\n<td>约束(CONSTRAINT)</td>\n<td>执行数据校验的规则，用于保证数据完整性的规则</td>\n</tr>\n<tr>\n<td>视图(VIEW)</td>\n<td>一个或者多个数据表里的数据的逻辑显示，视图并不存储数据</td>\n</tr>\n<tr>\n<td>索引(INDEX)</td>\n<td>用于提高查询性能，相当于书的目录</td>\n</tr>\n<tr>\n<td>存储过程(PROCEDURE)</td>\n<td>用于完成一次完整的业务处理，没有返回值，但可通过传出参数将多个值传给调用环境</td>\n</tr>\n<tr>\n<td>存储函数(FUNCTION)</td>\n<td>用于完成一次特定的计算，具有一个返回值</td>\n</tr>\n<tr>\n<td>触发器(TRIGGER)</td>\n<td>相当于一个事件监听器，当数据库发生特定事件后，触发器被触发，完成相应的处理</td>\n</tr>\n</tbody>\n</table>\n</div>\n<h2 id=\"-3\"><a href=\"#-3\" class=\"headerlink\" title=\" \"></a> </h2><h2 id=\"7-1-视图的创建、删除、查看\"><a href=\"#7-1-视图的创建、删除、查看\" class=\"headerlink\" title=\"7.1 视图的创建、删除、查看\"></a>7.1 视图的创建、删除、查看</h2><pre class=\"line-numbers language-mysql\" data-language=\"mysql\"><code class=\"language-mysql\">CREATE VIEW  视图名\nAS\n查询语句;\n\n#视图的删除\nDROP VIEW test_v1,test_v2,test_v3;\n\n#视图查看\nSHOW TABLES;\n\n###视图结构的查看\t\nDESC test_v7;\nSHOW CREATE VIEW test_v7;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h2 id=\"7-2-视图的增删改查\"><a href=\"#7-2-视图的增删改查\" class=\"headerlink\" title=\"7.2 视图的增删改查\"></a>7.2 视图的增删改查</h2><pre class=\"line-numbers language-mysql\" data-language=\"mysql\"><code class=\"language-mysql\">1、查看视图的数据 ★\nSELECT * FROM my_v4;\nSELECT * FROM my_v1 WHERE last_name='Partners';\n\n2、插入视图的数据\nINSERT INTO my_v4(last_name,department_id) VALUES('虚竹',90);\n\n3、修改视图的数据\nUPDATE my_v4 SET last_name ='梦姑' WHERE last_name='虚竹';\n\n4、删除视图的数据\nDELETE FROM my_v4;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>​    </p>\n<h2 id=\"7-3-某些视图不能更新\"><a href=\"#7-3-某些视图不能更新\" class=\"headerlink\" title=\"7.3 某些视图不能更新\"></a>7.3 某些视图不能更新</h2><p>​    包含以下关键字的sql语句：</p>\n<ul>\n<li>分组函数、distinct、group  by、having、union或者union all</li>\n<li>常量视图</li>\n<li>Select中包含子查询</li>\n<li>join</li>\n<li>from一个不能更新的视图</li>\n<li>where子句的子查询引用了from子句中的表</li>\n<li></li>\n</ul>\n<h2 id=\"7-4-视图逻辑的更新\"><a href=\"#7-4-视图逻辑的更新\" class=\"headerlink\" title=\"7.4 视图逻辑的更新\"></a>7.4 视图逻辑的更新</h2><pre class=\"line-numbers language-mysql\" data-language=\"mysql\"><code class=\"language-mysql\">#方式一：\nCREATE OR REPLACE VIEW test_v7\nAS\nSELECT last_name FROM employees\nWHERE employee_id&gt;100;\n\n#方式二:\nALTER VIEW test_v7\nAS\nSELECT employee_id FROM employees;\n\nSELECT * FROM test_v7;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h3 id=\"视图优点\"><a href=\"#视图优点\" class=\"headerlink\" title=\"视图优点\"></a>视图优点</h3><p><strong>1. 操作简单</strong></p>\n<p>将经常使用的查询操作定义为视图，可以使开发人员不需要关心视图对应的数据表的结构、表与表之间的关联关系，也不需要关心数据表之间的业务逻辑和查询条件，而只需要简单地操作视图即可，极大简化了开发人员对数据库的操作。</p>\n<p><strong>2. 减少数据冗余</strong></p>\n<p>视图跟实际数据表不一样，它存储的是查询语句。所以，在使用的时候，我们要通过定义视图的查询语句来获取结果集。而视图本身不存储数据，不占用数据存储的资源，减少了数据冗余。</p>\n<p><strong>3. 数据安全</strong></p>\n<p>MySQL将用户对数据的<code>访问限制</code>在某些数据的结果集上，而这些数据的结果集可以使用视图来实现。用户不必直接查询或操作数据表。这也可以理解为视图具有<code>隔离性</code>。视图相当于在用户和实际的数据表之间加了一层虚拟表。</p>\n<p>同时，MySQL可以根据权限将用户对数据的访问限制在某些视图上，<strong>用户不需要查询数据表，可以直接通过视图获取数据表中的信息</strong>。这在一定程度上保障了数据表中数据的安全性。</p>\n<p><strong>4. 适应灵活多变的需求</strong><br>当业务系统的需求发生变化后，如果需要改动数据表的结构，则工作量相对较大，可以使用视图来减少改动的工作量。这种方式在实际工作中使用得比较多。</p>\n<p><strong>5. 能够分解复杂的查询逻辑</strong><br>数据库中如果存在复杂的查询逻辑，则可以将问题进行分解，创建多个视图获取数据，再将创建的多个视图结合起来，完成复杂的查询逻辑。</p>\n<h3 id=\"视图不足\"><a href=\"#视图不足\" class=\"headerlink\" title=\"视图不足\"></a>视图不足</h3><p>如果我们在实际数据表的基础上创建了视图，那么，<strong>如果实际数据表的结构变更了，我们就需要及时对相关的视图进行相应的维护</strong>。特别是嵌套的视图（就是在视图的基础上创建视图），维护会变得比较复杂，<code>可读性不好</code>，容易变成系统的潜在隐患。因为创建视图的 SQL 查询可能会对字段重命名，也可能包含复杂的逻辑，这些都会增加维护的成本。</p>\n<p>实际项目中，如果视图过多，会导致数据库维护成本的问题。</p>\n<p>所以，在创建视图的时候，你要结合实际项目需求，综合考虑视图的优点和不足，这样才能正确使用视图，使系统整体达到最优。</p>\n<h1 id=\"8-存储过程\"><a href=\"#8-存储过程\" class=\"headerlink\" title=\"8 存储过程\"></a>8 存储过程</h1><p>含义：一组经过预先编译的sql语句的集合<br>好处：</p>\n<ol>\n<li>提高了sql语句的重用性，减少了开发程序员的压力</li>\n<li>提高了效率</li>\n<li>减少了传输次数</li>\n</ol>\n<p>分类：</p>\n<p>1、无返回无参<br>2、仅仅带in类型，无返回有参<br>3、仅仅带out类型，有返回无参<br>4、既带in又带out，有返回有参<br>5、带inout，有返回有参<br>注意：in、out、inout都可以在一个存储过程中带多个</p>\n<p><strong>和视图、函数的对比</strong>：</p>\n<p>它和视图有着同样的优点，清晰、安全，还可以减少网络传输量。不过它和视图不同，视图是<code>虚拟表</code>，通常不对底层数据表直接操作，而存储过程是程序化的 SQL，可以<code>直接操作底层数据表</code>，相比于面向集合的操作方式，能够实现一些更复杂的数据处理。</p>\n<p>一旦存储过程被创建出来，使用它就像使用函数一样简单，我们直接通过调用存储过程名即可。相较于函数，存储过程是<code>没有返回值</code>的。</p>\n<h2 id=\"8-1-创建存储过程\"><a href=\"#8-1-创建存储过程\" class=\"headerlink\" title=\"8.1 创建存储过程\"></a>8.1 创建存储过程</h2><p>语法：</p>\n<pre class=\"line-numbers language-mysql\" data-language=\"mysql\"><code class=\"language-mysql\">create procedure 存储过程名(in|out|inout 参数名  参数类型,...)\nbegin\n\t存储过程体\nend<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n<p>类似于方法：</p>\n<pre class=\"line-numbers language-mysql\" data-language=\"mysql\"><code class=\"language-mysql\">修饰符 返回类型 方法名(参数类型 参数名,...){\n\n\t方法体;\n}<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n<p>说明：</p>\n<p>1、参数前面的符号的意思</p>\n<ul>\n<li><p><code>IN</code>：当前参数为输入参数，也就是表示入参；</p>\n<p>存储过程只是读取这个参数的值。如果没有定义参数种类，<code>默认就是 IN</code>，表示输入参数。</p>\n</li>\n<li><p><code>OUT</code>：当前参数为输出参数，也就是表示出参；</p>\n<p>执行完成之后，调用这个存储过程的客户端或者应用程序就可以读取这个参数返回的值了。</p>\n</li>\n<li><p><code>INOUT</code>：当前参数既可以为输入参数，也可以为输出参数。</p>\n</li>\n</ul>\n<p>2、形参类型可以是 MySQL数据库中的任意类型。</p>\n<p>3、<code>characteristics</code> 表示创建存储过程时指定的对存储过程的约束条件，其取值信息如下：</p>\n<pre class=\"line-numbers language-mysql\" data-language=\"mysql\"><code class=\"language-mysql\">LANGUAGE SQL\n| [NOT] DETERMINISTIC\n| { CONTAINS SQL | NO SQL | READS SQL DATA | MODIFIES SQL DATA }\n| SQL SECURITY { DEFINER | INVOKER }\n| COMMENT 'string'<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<ul>\n<li><code>LANGUAGE SQL</code>：说明存储过程执行体是由SQL语句组成的，当前系统支持的语言为SQL。</li>\n<li><code>[NOT] DETERMINISTIC</code>：指明存储过程执行的结果是否确定。DETERMINISTIC表示结果是确定的。每次执行存储过程时，相同的输入会得到相同的输出。NOT DETERMINISTIC表示结果是不确定的，相同的输入可能得到不同的输出。如果没有指定任意一个值，默认为NOT DETERMINISTIC。</li>\n<li><code>{ CONTAINS SQL | NO SQL | READS SQL DATA | MODIFIES SQL DATA }</code>：指明子程序使用SQL语句的限制。<ul>\n<li>CONTAINS SQL表示当前存储过程的子程序包含SQL语句，但是并不包含读写数据的SQL语句；</li>\n<li>NO SQL表示当前存储过程的子程序中不包含任何SQL语句；</li>\n<li>READS SQL DATA表示当前存储过程的子程序中包含读数据的SQL语句；</li>\n<li>MODIFIES SQL DATA表示当前存储过程的子程序中包含写数据的SQL语句。</li>\n<li>默认情况下，系统会指定为CONTAINS SQL。</li>\n</ul>\n</li>\n<li><code>SQL SECURITY { DEFINER | INVOKER }</code>：执行当前存储过程的权限，即指明哪些用户能够执行当前存储过程。<ul>\n<li><code>DEFINER</code>表示只有当前存储过程的创建者或者定义者才能执行当前存储过程；</li>\n<li><code>INVOKER</code>表示拥有当前存储过程的访问权限的用户能够执行当前存储过程。</li>\n<li>如果没有设置相关的值，则MySQL默认指定值为DEFINER。</li>\n</ul>\n</li>\n<li><code>COMMENT 'string'</code>：注释信息，可以用来描述存储过程。</li>\n</ul>\n<p>4、存储过程体中可以有多条 SQL 语句，如果仅仅一条SQL 语句，则可以省略 BEGIN 和 END</p>\n<p>编写存储过程并不是一件简单的事情，可能存储过程中需要复杂的 SQL 语句。</p>\n<pre class=\"line-numbers language-mysql\" data-language=\"mysql\"><code class=\"language-mysql\">1. BEGIN…END：BEGIN…END 中间包含了多个语句，每个语句都以（;）号为结束符。\n2. DECLARE：DECLARE 用来声明变量，使用的位置在于 BEGIN…END 语句中间，而且需要在其他语句使用之前进行变量的声明。\n3. SET：赋值语句，用于对变量进行赋值。\n4. SELECT… INTO：把从数据表中查询的结果存放到变量中，也就是为变量赋值。<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n<p>5、需要设置新的结束标记</p>\n<pre class=\"line-numbers language-mysql\" data-language=\"mysql\"><code class=\"language-mysql\">DELIMITER 新的结束标记<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>因为MySQL默认的语句结束符号为分号‘;’。为了避免与存储过程中SQL语句结束符相冲突，需要使用DELIMITER改变存储过程的结束符。</p>\n<p>比如：“DELIMITER //”语句的作用是将MySQL的结束符设置为//，并以“END //”结束存储过程。存储过程定义完毕之后再使用“DELIMITER ;”恢复默认结束符。DELIMITER也可以指定其他符号作为结束符。</p>\n<p>当使用DELIMITER命令时，应该避免使用反斜杠（‘\\’）字符，因为反斜线是MySQL的转义字符。</p>\n<p>示例：</p>\n<pre class=\"line-numbers language-mysql\" data-language=\"mysql\"><code class=\"language-mysql\">DELIMITER $\n\nCREATE PROCEDURE 存储过程名(IN|OUT|INOUT 参数名  参数类型,...)\n[characteristics ...]\nBEGIN\n\tsql语句1;\n\tsql语句2;\n\nEND $<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h3 id=\"8-2-调用存储过程\"><a href=\"#8-2-调用存储过程\" class=\"headerlink\" title=\"8.2 调用存储过程\"></a>8.2 调用存储过程</h3><p>call 存储过程名(实参列表)</p>\n<p>学过的函数：LENGTH、SUBSTR、CONCAT等<br>语法：</p>\n<pre class=\"line-numbers language-mysql\" data-language=\"mysql\"><code class=\"language-mysql\">CREATE FUNCTION 函数名(参数名 参数类型,...) RETURNS 返回类型\nBEGIN\n\t函数体\n\nEND<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p><strong>格式：</strong></p>\n<p>1、调用in模式的参数：</p>\n<pre class=\"line-numbers language-mysql\" data-language=\"mysql\"><code class=\"language-mysql\">CALL sp1('值');<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>2、调用out模式的参数：</p>\n<pre class=\"line-numbers language-mysql\" data-language=\"mysql\"><code class=\"language-mysql\">SET @name;\nCALL sp1(@name);\nSELECT @name;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n<p>3、调用inout模式的参数：</p>\n<pre class=\"line-numbers language-mysql\" data-language=\"mysql\"><code class=\"language-mysql\">SET @name=值;\nCALL sp1(@name);\nSELECT @name;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n<h3 id=\"-4\"><a href=\"#-4\" class=\"headerlink\" title=\" \"></a> </h3><p><strong>调用函数</strong>：SELECT 函数名（实参列表）</p>\n<p>函数和存储过程的区别</p>\n<div class=\"table-container\">\n<table>\n<thead>\n<tr>\n<th></th>\n<th>关键字</th>\n<th>调用语法</th>\n<th>返回值</th>\n<th>应用场景</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>函数</td>\n<td>FUNCTION</td>\n<td>SELECT</td>\n<td>只能是一个</td>\n<td>一般用于查询结果为一个值并返回时，当有返回值而且仅仅一个</td>\n</tr>\n<tr>\n<td>存储过程</td>\n<td>PROCEDURE</td>\n<td>CALL</td>\n<td>可以有0个或多个</td>\n<td>一般用于更新</td>\n</tr>\n</tbody>\n</table>\n</div>\n<h2 id=\"8-3-查看存储过程\"><a href=\"#8-3-查看存储过程\" class=\"headerlink\" title=\"8.3 查看存储过程\"></a>8.3 查看存储过程</h2><p>show create procedure 存储过程名;</p>\n<h2 id=\"8-4-删除\"><a href=\"#8-4-删除\" class=\"headerlink\" title=\"8.4 删除\"></a><strong>8.4 删除</strong></h2><p>drop procedure 存储过程名;</p>\n<h3 id=\"关于存储过程使用的争议\"><a href=\"#关于存储过程使用的争议\" class=\"headerlink\" title=\"关于存储过程使用的争议\"></a>关于存储过程使用的争议</h3><p>尽管存储过程有诸多优点，但是对于存储过程的使用，<strong>一直都存在着很多争议</strong>，比如有些公司对于大型项目要求使用存储过程，而有些公司在手册中明确禁止使用存储过程，为什么这些公司对存储过程的使用需求差别这么大呢？</p>\n<h3 id=\"6-1-优点\"><a href=\"#6-1-优点\" class=\"headerlink\" title=\"6.1 优点\"></a>6.1 优点</h3><p><strong>1、存储过程可以一次编译多次使用。</strong>存储过程只在创建时进行编译，之后的使用都不需要重新编译，这就提升了 SQL 的执行效率。</p>\n<p><strong>2、可以减少开发工作量。</strong>将代码<code>封装</code>成模块，实际上是编程的核心思想之一，这样可以把复杂的问题拆解成不同的模块，然后模块之间可以<code>重复使用</code>，在减少开发工作量的同时，还能保证代码的结构清晰。</p>\n<p><strong>3、存储过程的安全性强。</strong>我们在设定存储过程的时候可以<code>设置对用户的使用权限</code>，这样就和视图一样具有较强的安全性。</p>\n<p><strong>4、可以减少网络传输量。</strong>因为代码封装到存储过程中，每次使用只需要调用存储过程即可，这样就减少了网络传输量。</p>\n<p><strong>5、良好的封装性。</strong>在进行相对复杂的数据库操作时，原本需要使用一条一条的 SQL 语句，可能要连接多次数据库才能完成的操作，现在变成了一次存储过程，只需要<code>连接一次即可</code>。</p>\n<h3 id=\"6-2-缺点\"><a href=\"#6-2-缺点\" class=\"headerlink\" title=\"6.2 缺点\"></a>6.2 缺点</h3><p>基于上面这些优点，不少大公司都要求大型项目使用存储过程，比如微软、IBM 等公司。但是国内的阿里并不推荐开发人员使用存储过程，这是为什么呢？</p>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><h4 id=\"-5\"><a href=\"#-5\" class=\"headerlink\" title=\" \"></a> </h4></blockquote>\n<h1 id=\"第13章-约束\"><a href=\"#第13章-约束\" class=\"headerlink\" title=\"第13章_约束\"></a>第13章_约束</h1><p>讲师：尚硅谷-宋红康（江湖人称：康师傅）</p>\n<p>官网：<a href=\"http://www.atguigu.com/\">http://www.atguigu.com</a></p>\n<hr>\n<h2 id=\"1-约束-constraint-概述\"><a href=\"#1-约束-constraint-概述\" class=\"headerlink\" title=\"1. 约束(constraint)概述\"></a>1. 约束(constraint)概述</h2><h3 id=\"1-1-为什么需要约束\"><a href=\"#1-1-为什么需要约束\" class=\"headerlink\" title=\"1.1 为什么需要约束\"></a>1.1 为什么需要约束</h3><p>数据完整性（Data Integrity）是指数据的精确性（Accuracy）和可靠性（Reliability）。它是防止数据库中存在不符合语义规定的数据和防止因错误信息的输入输出造成无效操作或错误信息而提出的。</p>\n<p>为了保证数据的完整性，SQL规范以约束的方式对<strong>表数据进行额外的条件限制</strong>。从以下四个方面考虑：</p>\n<ul>\n<li><code>实体完整性（Entity Integrity）</code>：例如，同一个表中，不能存在两条完全相同无法区分的记录</li>\n<li><code>域完整性（Domain Integrity）</code>：例如：年龄范围0-120，性别范围“男/女”</li>\n<li><code>引用完整性（Referential Integrity）</code>：例如：员工所在部门，在部门表中要能找到这个部门</li>\n<li><code>用户自定义完整性（User-defined Integrity）</code>：例如：用户名唯一、密码不能为空等，本部门经理的工资不得高于本部门职工的平均工资的5倍。</li>\n</ul>\n<h3 id=\"1-2-什么是约束\"><a href=\"#1-2-什么是约束\" class=\"headerlink\" title=\"1.2 什么是约束\"></a>1.2 什么是约束</h3><p>约束是表级的强制规定。</p>\n<p>可以在<strong>创建表时规定约束（通过 CREATE TABLE 语句）</strong>，或者在<strong>表创建之后通过 ALTER TABLE 语句规定约束</strong>。</p>\n<h3 id=\"1-3-约束的分类\"><a href=\"#1-3-约束的分类\" class=\"headerlink\" title=\"1.3 约束的分类\"></a>1.3 约束的分类</h3><ul>\n<li><strong>根据约束数据列的限制，</strong>约束可分为：<ul>\n<li><strong>单列约束</strong>：每个约束只约束一列</li>\n<li><strong>多列约束</strong>：每个约束可约束多列数据</li>\n</ul>\n</li>\n<li><strong>根据约束的作用范围</strong>，约束可分为：<ul>\n<li><strong>列级约束</strong>：只能作用在一个列上，跟在列的定义后面</li>\n<li><strong>表级约束</strong>：可以作用在多个列上，不与列一起，而是单独定义</li>\n</ul>\n</li>\n</ul>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">\t\t\t位置\t\t\t支持的约束类型\t\t\t\t\t是否可以起约束名\n列级约束：\t列的后面\t\t语法都支持，但外键没有效果\t\t不可以\n表级约束：\t所有列的下面\t   默认和非空不支持，其他支持\t   可以（主键没有效果）<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n<ul>\n<li><strong>根据约束起的作用</strong>，约束可分为：<ul>\n<li><strong>NOT NULL</strong> <strong>非空约束，规定某个字段不能为空</strong></li>\n<li><strong>UNIQUE</strong>  <strong>唯一约束</strong>，<strong>规定某个字段在整个表中是唯一的</strong></li>\n<li><strong>PRIMARY KEY  主键(非空且唯一)约束</strong></li>\n<li><strong>FOREIGN KEY</strong>  <strong>外键约束</strong></li>\n<li><strong>CHECK</strong>  <strong>检查约束</strong></li>\n<li><strong>DEFAULT</strong>  <strong>默认值约束</strong></li>\n</ul>\n</li>\n</ul>\n<blockquote>\n<p>注意： MySQL不支持check约束，但可以使用check约束，而没有任何效果</p></blockquote>\n<ul>\n<li>查看某个表已有的约束</li>\n</ul>\n<pre class=\"line-numbers language-mysql\" data-language=\"mysql\"><code class=\"language-mysql\">#information_schema数据库名（系统库）\n#table_constraints表名称（专门存储各个表的约束）\nSELECT * FROM information_schema.table_constraints \nWHERE table_name = '表名称';<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n<h2 id=\"2-非空约束\"><a href=\"#2-非空约束\" class=\"headerlink\" title=\"2. 非空约束\"></a>2. 非空约束</h2><h3 id=\"2-1-作用\"><a href=\"#2-1-作用\" class=\"headerlink\" title=\"2.1 作用\"></a>2.1 作用</h3><p>限定某个字段/某列的值不允许为空</p>\n<p><img src=\"D:\\极客时间\\尚硅谷大数据学科全套教程（总185.88GB）\\1.尚硅谷大数据学科--核心基础\\MYSQL\\课件md版\\01_课件\\images\\1555426972098.png\" alt=\"1555426972098\"></p>\n<h3 id=\"2-2-关键字\"><a href=\"#2-2-关键字\" class=\"headerlink\" title=\"2.2 关键字\"></a>2.2 关键字</h3><p>NOT NULL</p>\n<h3 id=\"2-3-特点\"><a href=\"#2-3-特点\" class=\"headerlink\" title=\"2.3 特点\"></a>2.3 特点</h3><ul>\n<li>默认，所有的类型的值都可以是NULL，包括INT、FLOAT等数据类型</li>\n<li><p>非空约束只能出现在表对象的列上，只能某个列单独限定非空，不能组合非空</p>\n</li>\n<li><p>一个表可以有很多列都分别限定了非空</p>\n</li>\n<li><p>空字符串’’不等于NULL，0也不等于NULL</p>\n</li>\n</ul>\n<h3 id=\"2-4-添加非空约束\"><a href=\"#2-4-添加非空约束\" class=\"headerlink\" title=\"2.4 添加非空约束\"></a>2.4 添加非空约束</h3><p>（1）建表时</p>\n<pre class=\"line-numbers language-mysql\" data-language=\"mysql\"><code class=\"language-mysql\">CREATE TABLE 表名称(\n\t字段名  数据类型,\n    字段名  数据类型 NOT NULL,  \n    字段名  数据类型 NOT NULL\n);<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>举例：</p>\n<pre class=\"line-numbers language-mysql\" data-language=\"mysql\"><code class=\"language-mysql\">CREATE TABLE emp(\nid INT(10) NOT NULL,\nNAME VARCHAR(20) NOT NULL,\nsex CHAR NULL\n);<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<pre class=\"line-numbers language-mysql\" data-language=\"mysql\"><code class=\"language-mysql\">CREATE TABLE student(\n\tsid int,\n    sname varchar(20) not null,\n    tel char(11) ,\n    cardid char(18) not null\n);<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<pre class=\"line-numbers language-mysql\" data-language=\"mysql\"><code class=\"language-mysql\">insert into student values(1,'张三','13710011002','110222198912032545'); #成功\n\ninsert into student values(2,'李四','13710011002',null);#身份证号为空\nERROR 1048 (23000): Column 'cardid' cannot be null\n\ninsert into student values(2,'李四',null,'110222198912032546');#成功，tel允许为空\n\ninsert into student values(3,null,null,'110222198912032547');#失败\nERROR 1048 (23000): Column 'sname' cannot be null<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>（2）建表后</p>\n<pre class=\"line-numbers language-mysql\" data-language=\"mysql\"><code class=\"language-mysql\">alter table 表名称 modify 字段名 数据类型 not null;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>举例：</p>\n<pre class=\"line-numbers language-mysql\" data-language=\"mysql\"><code class=\"language-mysql\">ALTER TABLE emp\nMODIFY sex VARCHAR(30) NOT NULL;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n<pre class=\"line-numbers language-mysql\" data-language=\"mysql\"><code class=\"language-mysql\">alter table student modify sname varchar(20) not null;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<h3 id=\"2-5-删除非空约束\"><a href=\"#2-5-删除非空约束\" class=\"headerlink\" title=\"2.5 删除非空约束\"></a>2.5 删除非空约束</h3><pre class=\"line-numbers language-mysql\" data-language=\"mysql\"><code class=\"language-mysql\">alter table 表名称 modify 字段名 数据类型 NULL;#去掉not null，相当于修改某个非注解字段，该字段允许为空\n\n或 \n\nalter table 表名称 modify 字段名 数据类型;#去掉not null，相当于修改某个非注解字段，该字段允许为空<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>举例：</p>\n<pre class=\"line-numbers language-mysql\" data-language=\"mysql\"><code class=\"language-mysql\">ALTER TABLE emp\nMODIFY sex VARCHAR(30) NULL;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n<pre class=\"line-numbers language-mysql\" data-language=\"mysql\"><code class=\"language-mysql\">ALTER TABLE emp\nMODIFY NAME VARCHAR(15) DEFAULT 'abc' NULL;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n<h2 id=\"3-唯一性约束\"><a href=\"#3-唯一性约束\" class=\"headerlink\" title=\"3. 唯一性约束\"></a>3. 唯一性约束</h2><h3 id=\"3-1-作用\"><a href=\"#3-1-作用\" class=\"headerlink\" title=\"3.1 作用\"></a>3.1 作用</h3><p>用来限制某个字段/某列的值不能重复。</p>\n<p> <img src=\"D:\\极客时间\\尚硅谷大数据学科全套教程（总185.88GB）\\1.尚硅谷大数据学科--核心基础\\MYSQL\\课件md版\\01_课件\\images\\1555427198811.png\" alt=\"1555427198811\"></p>\n<h3 id=\"3-2-关键字\"><a href=\"#3-2-关键字\" class=\"headerlink\" title=\"3.2 关键字\"></a>3.2 关键字</h3><p>UNIQUE</p>\n<h3 id=\"3-3-特点\"><a href=\"#3-3-特点\" class=\"headerlink\" title=\"3.3 特点\"></a>3.3 特点</h3><ul>\n<li>同一个表可以有多个唯一约束。</li>\n<li>唯一约束可以是某一个列的值唯一，也可以多个列组合的值唯一。</li>\n<li>唯一性约束允许列值为空。</li>\n<li>在创建唯一约束的时候，如果不给唯一约束命名，就默认和列名相同。</li>\n<li><strong>MySQL会给唯一约束的列上默认创建一个唯一索引。</strong></li>\n</ul>\n<h3 id=\"3-4-添加唯一约束\"><a href=\"#3-4-添加唯一约束\" class=\"headerlink\" title=\"3.4 添加唯一约束\"></a>3.4 添加唯一约束</h3><p>（1）建表时</p>\n<pre class=\"line-numbers language-mysql\" data-language=\"mysql\"><code class=\"language-mysql\">create table 表名称(\n\t字段名  数据类型,\n    字段名  数据类型  unique,  \n    字段名  数据类型  unique key,\n    字段名  数据类型\n);\ncreate table 表名称(\n\t字段名  数据类型,\n    字段名  数据类型,  \n    字段名  数据类型,\n    [constraint 约束名] unique key(字段名)\n);<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>举例：</p>\n<pre class=\"line-numbers language-mysql\" data-language=\"mysql\"><code class=\"language-mysql\">create table student(\n\tsid int,\n    sname varchar(20),\n    tel char(11) unique,\n    cardid char(18) unique key\n);<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<pre class=\"line-numbers language-mysql\" data-language=\"mysql\"><code class=\"language-mysql\">CREATE TABLE t_course(\n\tcid INT UNIQUE,\n\tcname VARCHAR(100) UNIQUE,\n\tdescription VARCHAR(200)\n);\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<pre class=\"line-numbers language-mysql\" data-language=\"mysql\"><code class=\"language-mysql\">CREATE TABLE USER(\n id INT NOT NULL,\n NAME VARCHAR(25),\n PASSWORD VARCHAR(16),\n -- 使用表级约束语法\n CONSTRAINT uk_name_pwd UNIQUE(NAME,PASSWORD)\n);<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>表示用户名和密码组合不能重复</p></blockquote>\n<pre class=\"line-numbers language-mysql\" data-language=\"mysql\"><code class=\"language-mysql\">insert into student values(1,'张三','13710011002','101223199012015623');\ninsert into student values(2,'李四','13710011003','101223199012015624');<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n<pre class=\"line-numbers language-mysql\" data-language=\"mysql\"><code class=\"language-mysql\">mysql&gt; select * from student;\n+-----+-------+-------------+--------------------+\n| sid | sname | tel         | cardid             |\n+-----+-------+-------------+--------------------+\n|   1 | 张三  | 13710011002 | 101223199012015623 |\n|   2 | 李四  | 13710011003 | 101223199012015624 |\n+-----+-------+-------------+--------------------+\n2 rows in set (0.00 sec)<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<pre class=\"line-numbers language-mysql\" data-language=\"mysql\"><code class=\"language-mysql\">insert into student values(3,'王五','13710011004','101223199012015624'); #身份证号重复\nERROR 1062 (23000): Duplicate entry '101223199012015624' for key 'cardid'\n\ninsert into student values(3,'王五','13710011003','101223199012015625'); \nERROR 1062 (23000): Duplicate entry '13710011003' for key 'tel'<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>（2）建表后指定唯一键约束</p>\n<pre class=\"line-numbers language-mysql\" data-language=\"mysql\"><code class=\"language-mysql\">#字段列表中如果是一个字段，表示该列的值唯一。如果是两个或更多个字段，那么复合唯一，即多个字段的组合是唯一的\n#方式1：\nalter table 表名称 add unique key(字段列表); <span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n<pre class=\"line-numbers language-mysql\" data-language=\"mysql\"><code class=\"language-mysql\">#方式2：\nalter table 表名称 modify 字段名 字段类型 unique;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n<p>举例：</p>\n<pre class=\"line-numbers language-mysql\" data-language=\"mysql\"><code class=\"language-mysql\">ALTER TABLE USER \nADD UNIQUE(NAME,PASSWORD);<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n<pre class=\"line-numbers language-mysql\" data-language=\"mysql\"><code class=\"language-mysql\">ALTER TABLE USER \nADD CONSTRAINT uk_name_pwd UNIQUE(NAME,PASSWORD);<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n<pre class=\"line-numbers language-mysql\" data-language=\"mysql\"><code class=\"language-mysql\">ALTER TABLE USER \nMODIFY NAME VARCHAR(20) UNIQUE;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n<p>举例：</p>\n<pre class=\"line-numbers language-mysql\" data-language=\"mysql\"><code class=\"language-mysql\">create table student(\n\tsid int primary key,\n    sname varchar(20),\n    tel char(11) ,\n    cardid char(18) \n);<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<pre class=\"line-numbers language-mysql\" data-language=\"mysql\"><code class=\"language-mysql\">alter table student add unique key(tel);\nalter table student add unique key(cardid);<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n<h3 id=\"3-5-关于复合唯一约束\"><a href=\"#3-5-关于复合唯一约束\" class=\"headerlink\" title=\"3.5 关于复合唯一约束\"></a>3.5 关于复合唯一约束</h3><pre class=\"line-numbers language-mysql\" data-language=\"mysql\"><code class=\"language-mysql\">create table 表名称(\n\t字段名  数据类型,\n    字段名  数据类型,  \n    字段名  数据类型,\n    unique key(字段列表) #字段列表中写的是多个字段名，多个字段名用逗号分隔，表示那么是复合唯一，即多个字段的组合是唯一的\n);<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<pre class=\"line-numbers language-mysql\" data-language=\"mysql\"><code class=\"language-mysql\">#学生表\ncreate table student(\n\tsid int,\t#学号\n    sname varchar(20),\t\t\t#姓名\n    tel char(11) unique key,  #电话\n    cardid char(18) unique key #身份证号\n);\n\n#课程表\ncreate table course(\n\tcid int,  #课程编号\n    cname varchar(20)     #课程名称\n);\n\n#选课表\ncreate table student_course(\n    id int,\n\tsid int,\n    cid int,\n    score int,\n    unique key(sid,cid)  #复合唯一\n);<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<pre class=\"line-numbers language-mysql\" data-language=\"mysql\"><code class=\"language-mysql\">insert into student values(1,'张三','13710011002','101223199012015623');#成功\ninsert into student values(2,'李四','13710011003','101223199012015624');#成功\ninsert into course values(1001,'Java'),(1002,'MySQL');#成功<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n<pre class=\"line-numbers language-mysql\" data-language=\"mysql\"><code class=\"language-mysql\">mysql&gt; select * from student;\n+-----+-------+-------------+--------------------+\n| sid | sname | tel         | cardid             |\n+-----+-------+-------------+--------------------+\n|   1 | 张三  | 13710011002 | 101223199012015623 |\n|   2 | 李四  | 13710011003 | 101223199012015624 |\n+-----+-------+-------------+--------------------+\n2 rows in set (0.00 sec)\n\nmysql&gt; select * from course;\n+------+-------+\n| cid  | cname |\n+------+-------+\n| 1001 | Java  |\n| 1002 | MySQL |\n+------+-------+\n2 rows in set (0.00 sec)<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<pre class=\"line-numbers language-mysql\" data-language=\"mysql\"><code class=\"language-mysql\">insert into student_course values\n(1, 1, 1001, 89),\n(2, 1, 1002, 90),\n(3, 2, 1001, 88),\n(4, 2, 1002, 56);#成功<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<pre class=\"line-numbers language-mysql\" data-language=\"mysql\"><code class=\"language-mysql\">mysql&gt; select * from student_course;\n+----+------+------+-------+\n| id | sid  | cid  | score |\n+----+------+------+-------+\n|  1 |    1 | 1001 |    89 |\n|  2 |    1 | 1002 |    90 |\n|  3 |    2 | 1001 |    88 |\n|  4 |    2 | 1002 |    56 |\n+----+------+------+-------+\n4 rows in set (0.00 sec)<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<pre class=\"line-numbers language-mysql\" data-language=\"mysql\"><code class=\"language-mysql\">insert into student_course values (5, 1, 1001, 88);#失败\n\n#ERROR 1062 (23000): Duplicate entry '1-1001' for key 'sid'   违反sid-cid的复合唯一<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n<h3 id=\"3-5-删除唯一约束\"><a href=\"#3-5-删除唯一约束\" class=\"headerlink\" title=\"3.5 删除唯一约束\"></a>3.5 删除唯一约束</h3><ul>\n<li>添加唯一性约束的列上也会自动创建唯一索引。</li>\n<li>删除唯一约束只能通过删除唯一索引的方式删除。</li>\n<li>删除时需要指定唯一索引名，唯一索引名就和唯一约束名一样。</li>\n<li>如果创建唯一约束时未指定名称，如果是单列，就默认和列名相同；如果是组合列，那么默认和()中排在第一个的列名相同。也可以自定义唯一性约束名。</li>\n</ul>\n<pre class=\"line-numbers language-mysql\" data-language=\"mysql\"><code class=\"language-mysql\">SELECT * FROM information_schema.table_constraints WHERE table_name = '表名'; #查看都有哪些约束<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<pre class=\"line-numbers language-mysql\" data-language=\"mysql\"><code class=\"language-mysql\">ALTER TABLE USER \nDROP INDEX uk_name_pwd;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>注意：可以通过 <code>show index from 表名称;</code>查看表的索引</p></blockquote>\n<h2 id=\"4-PRIMARY-KEY-约束\"><a href=\"#4-PRIMARY-KEY-约束\" class=\"headerlink\" title=\"4. PRIMARY KEY 约束\"></a>4. PRIMARY KEY 约束</h2><h3 id=\"4-1-作用\"><a href=\"#4-1-作用\" class=\"headerlink\" title=\"4.1 作用\"></a>4.1 作用</h3><p>用来唯一标识表中的一行记录。</p>\n<h3 id=\"4-2-关键字\"><a href=\"#4-2-关键字\" class=\"headerlink\" title=\"4.2 关键字\"></a>4.2 关键字</h3><p>primary key</p>\n<h3 id=\"4-3-特点\"><a href=\"#4-3-特点\" class=\"headerlink\" title=\"4.3 特点\"></a>4.3 特点</h3><ul>\n<li>主键约束相当于<strong>唯一约束+非空约束的组合</strong>，主键约束列不允许重复，也不允许出现空值。</li>\n</ul>\n<p><img src=\"D:\\极客时间\\尚硅谷大数据学科全套教程（总185.88GB）\\1.尚硅谷大数据学科--核心基础\\MYSQL\\课件md版\\01_课件\\images\\1555427492244.png\" alt=\"1555427492244\"></p>\n<ul>\n<li>一个表最多只能有一个主键约束，建立主键约束可以在列级别创建，也可以在表级别上创建。</li>\n</ul>\n<ul>\n<li>主键约束对应着表中的一列或者多列（复合主键）</li>\n<li>如果是多列组合的复合主键约束，那么这些列都不允许为空值，并且组合的值不允许重复。</li>\n<li><p><strong>MySQL的主键名总是PRIMARY</strong>，就算自己命名了主键约束名也没用。</p>\n</li>\n<li><p>当创建主键约束时，系统默认会在所在的列或列组合上建立对应的<strong>主键索引</strong>（能够根据主键查询的，就根据主键查询，效率更高）。如果删除主键约束了，主键约束对应的索引就自动删除了。</p>\n</li>\n</ul>\n<ul>\n<li>需要注意的一点是，不要修改主键字段的值。因为主键是数据记录的唯一标识，如果修改了主键的值，就有可能会破坏数据的完整性。</li>\n</ul>\n<h3 id=\"4-4-添加主键约束\"><a href=\"#4-4-添加主键约束\" class=\"headerlink\" title=\"4.4 添加主键约束\"></a>4.4 添加主键约束</h3><p>（1）建表时指定主键约束</p>\n<pre class=\"line-numbers language-mysql\" data-language=\"mysql\"><code class=\"language-mysql\">create table 表名称(\n\t字段名  数据类型  primary key, #列级模式\n    字段名  数据类型,  \n    字段名  数据类型  \n);\ncreate table 表名称(\n\t字段名  数据类型,\n    字段名  数据类型,  \n    字段名  数据类型,\n    [constraint 约束名] primary key(字段名) #表级模式\n);<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>举例：</p>\n<pre class=\"line-numbers language-mysql\" data-language=\"mysql\"><code class=\"language-mysql\">create table temp(\n\tid int primary key,\n    name varchar(20)\n);<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n<pre class=\"line-numbers language-mysql\" data-language=\"mysql\"><code class=\"language-mysql\">mysql&gt; desc temp;\n+-------+-------------+------+-----+---------+-------+\n| Field | Type        | Null | Key | Default | Extra |\n+-------+-------------+------+-----+---------+-------+\n| id    | int(11)     | NO   | PRI | NULL    |       |\n| name  | varchar(20) | YES  |     | NULL    |       |\n+-------+-------------+------+-----+---------+-------+\n2 rows in set (0.00 sec)<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<pre class=\"line-numbers language-mysql\" data-language=\"mysql\"><code class=\"language-mysql\">insert into temp values(1,'张三');#成功\ninsert into temp values(2,'李四');#成功<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n<pre class=\"line-numbers language-mysql\" data-language=\"mysql\"><code class=\"language-mysql\">mysql&gt; select * from temp;\n+----+------+\n| id | name |\n+----+------+\n|  1 | 张三 |\n|  2 | 李四 |\n+----+------+\n2 rows in set (0.00 sec)<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<pre class=\"line-numbers language-mysql\" data-language=\"mysql\"><code class=\"language-mysql\">insert into temp values(1,'张三');#失败\nERROR 1062 (23000): Duplicate（重复） entry（键入，输入） '1' for key 'PRIMARY'\n\n\ninsert into temp values(1,'王五');#失败\nERROR 1062 (23000): Duplicate entry '1' for key 'PRIMARY'\n\ninsert into temp values(3,'张三');#成功<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<pre class=\"line-numbers language-mysql\" data-language=\"mysql\"><code class=\"language-mysql\">mysql&gt; select * from temp;\n+----+------+\n| id | name |\n+----+------+\n|  1 | 张三 |\n|  2 | 李四 |\n|  3 | 张三 |\n+----+------+\n3 rows in set (0.00 sec)<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<pre class=\"line-numbers language-mysql\" data-language=\"mysql\"><code class=\"language-mysql\">insert into temp values(4,null);#成功\n\n\ninsert into temp values(null,'李琦');#失败\nERROR 1048 (23000): Column 'id' cannot be null<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<pre class=\"line-numbers language-mysql\" data-language=\"mysql\"><code class=\"language-mysql\">mysql&gt; select * from temp;\n+----+------+\n| id | name |\n+----+------+\n|  1 | 张三 |\n|  2 | 李四 |\n|  3 | 张三 |\n|  4 | NULL |\n+----+------+\n4 rows in set (0.00 sec)<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<pre class=\"line-numbers language-mysql\" data-language=\"mysql\"><code class=\"language-mysql\">#演示一个表建立两个主键约束\ncreate table temp(\n\tid int primary key,\n    name varchar(20) primary key\n);\nERROR 1068 (42000): Multiple（多重的） primary key defined（定义）<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>再举例：</p>\n<ul>\n<li>列级约束</li>\n</ul>\n<pre class=\"line-numbers language-mysql\" data-language=\"mysql\"><code class=\"language-mysql\">CREATE TABLE emp4(\nid INT PRIMARY KEY AUTO_INCREMENT ,\nNAME VARCHAR(20)\n);<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n<ul>\n<li>表级约束</li>\n</ul>\n<pre class=\"line-numbers language-mysql\" data-language=\"mysql\"><code class=\"language-mysql\">CREATE TABLE emp5(\nid INT NOT NULL AUTO_INCREMENT,\nNAME VARCHAR(20),\npwd VARCHAR(15),\nCONSTRAINT emp5_id_pk PRIMARY KEY(id)\n);<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>（2）建表后增加主键约束</p>\n<pre class=\"line-numbers language-mysql\" data-language=\"mysql\"><code class=\"language-mysql\">ALTER TABLE 表名称 ADD PRIMARY KEY(字段列表); #字段列表可以是一个字段，也可以是多个字段，如果是多个字段的话，是复合主键<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<pre class=\"line-numbers language-mysql\" data-language=\"mysql\"><code class=\"language-mysql\">ALTER TABLE student ADD PRIMARY KEY (sid);<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<pre class=\"line-numbers language-mysql\" data-language=\"mysql\"><code class=\"language-mysql\">ALTER TABLE emp5 ADD PRIMARY KEY(NAME,pwd);<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<h3 id=\"4-5-关于复合主键\"><a href=\"#4-5-关于复合主键\" class=\"headerlink\" title=\"4.5 关于复合主键\"></a>4.5 关于复合主键</h3><pre class=\"line-numbers language-mysql\" data-language=\"mysql\"><code class=\"language-mysql\">create table 表名称(\n\t字段名  数据类型,\n    字段名  数据类型,  \n    字段名  数据类型,\n    primary key(字段名1,字段名2)  #表示字段1和字段2的组合是唯一的，也可以有更多个字段\n);<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<pre class=\"line-numbers language-mysql\" data-language=\"mysql\"><code class=\"language-mysql\">#学生表\ncreate table student(\n\tsid int primary key,  #学号\n    sname varchar(20)     #学生姓名\n);\n\n#课程表\ncreate table course(\n\tcid int primary key,  #课程编号\n    cname varchar(20)     #课程名称\n);\n\n#选课表\ncreate table student_course(\n\tsid int,\n    cid int,\n    score int,\n    primary key(sid,cid)  #复合主键\n);<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<pre class=\"line-numbers language-mysql\" data-language=\"mysql\"><code class=\"language-mysql\">insert into student values(1,'张三'),(2,'李四');\ninsert into course values(1001,'Java'),(1002,'MySQL');<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n<pre class=\"line-numbers language-mysql\" data-language=\"mysql\"><code class=\"language-mysql\">mysql&gt; select * from student;\n+-----+-------+\n| sid | sname |\n+-----+-------+\n|   1 | 张三  |\n|   2 | 李四  |\n+-----+-------+\n2 rows in set (0.00 sec)\n\nmysql&gt; select * from course;\n+------+-------+\n| cid  | cname |\n+------+-------+\n| 1001 | Java  |\n| 1002 | MySQL |\n+------+-------+\n2 rows in set (0.00 sec)<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<pre class=\"line-numbers language-mysql\" data-language=\"mysql\"><code class=\"language-mysql\">insert into student_course values(1, 1001, 89),(1,1002,90),(2,1001,88),(2,1002,56);<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<pre class=\"line-numbers language-mysql\" data-language=\"mysql\"><code class=\"language-mysql\">mysql&gt; select * from student_course;\n+-----+------+-------+\n| sid | cid  | score |\n+-----+------+-------+\n|   1 | 1001 |    89 |\n|   1 | 1002 |    90 |\n|   2 | 1001 |    88 |\n|   2 | 1002 |    56 |\n+-----+------+-------+\n4 rows in set (0.00 sec)<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<pre class=\"line-numbers language-mysql\" data-language=\"mysql\"><code class=\"language-mysql\">insert into student_course values(1, 1001, 100);\nERROR 1062 (23000): Duplicate entry '1-1001' for key 'PRIMARY'<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n<pre class=\"line-numbers language-mysql\" data-language=\"mysql\"><code class=\"language-mysql\">mysql&gt; desc student_course;\n+-------+---------+------+-----+---------+-------+\n| Field | Type    | Null | Key | Default | Extra |\n+-------+---------+------+-----+---------+-------+\n| sid   | int(11) | NO   | PRI | NULL    |       |\n| cid   | int(11) | NO   | PRI | NULL    |       |\n| score | int(11) | YES  |     | NULL    |       |\n+-------+---------+------+-----+---------+-------+\n3 rows in set (0.00 sec)<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<ul>\n<li>再举例</li>\n</ul>\n<pre class=\"line-numbers language-mysql\" data-language=\"mysql\"><code class=\"language-mysql\">CREATE TABLE emp6(\nid INT NOT NULL,\nNAME VARCHAR(20),\npwd VARCHAR(15),\nCONSTRAINT emp7_pk PRIMARY KEY(NAME,pwd)\n);<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h3 id=\"4-6-删除主键约束\"><a href=\"#4-6-删除主键约束\" class=\"headerlink\" title=\"4.6 删除主键约束\"></a>4.6 删除主键约束</h3><pre class=\"line-numbers language-mysql\" data-language=\"mysql\"><code class=\"language-mysql\">alter table 表名称 drop primary key;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>举例：</p>\n<pre class=\"line-numbers language-mysql\" data-language=\"mysql\"><code class=\"language-mysql\">ALTER TABLE student DROP PRIMARY KEY;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<pre class=\"line-numbers language-mysql\" data-language=\"mysql\"><code class=\"language-mysql\">ALTER TABLE emp5 DROP PRIMARY KEY;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>说明：删除主键约束，不需要指定主键名，因为一个表只有一个主键，删除主键约束后，非空还存在。</p></blockquote>\n<h2 id=\"5-自增列：AUTO-INCREMENT\"><a href=\"#5-自增列：AUTO-INCREMENT\" class=\"headerlink\" title=\"5. 自增列：AUTO_INCREMENT\"></a>5. 自增列：AUTO_INCREMENT</h2><h3 id=\"5-1-作用\"><a href=\"#5-1-作用\" class=\"headerlink\" title=\"5.1 作用\"></a>5.1 作用</h3><p>某个字段的值自增</p>\n<h3 id=\"5-2-关键字\"><a href=\"#5-2-关键字\" class=\"headerlink\" title=\"5.2 关键字\"></a>5.2 关键字</h3><p>auto_increment</p>\n<h3 id=\"5-3-特点和要求\"><a href=\"#5-3-特点和要求\" class=\"headerlink\" title=\"5.3 特点和要求\"></a>5.3 特点和要求</h3><p>（1）一个表最多只能有一个自增长列</p>\n<p>（2）当需要产生唯一标识符或顺序值时，可设置自增长</p>\n<p>（3）自增长列约束的列必须是键列（主键列，唯一键列）</p>\n<p>（4）自增约束的列的数据类型必须是整数类型</p>\n<p>（5）如果自增列指定了 0 和 null，会在当前最大值的基础上自增；如果自增列手动指定了具体值，直接赋值为具体值。</p>\n<p>错误演示：</p>\n<pre class=\"line-numbers language-mysql\" data-language=\"mysql\"><code class=\"language-mysql\">create table employee(\n\teid int auto_increment,\n    ename varchar(20)\n);\n# ERROR 1075 (42000): Incorrect table definition; there can be only one auto column and it must be defined as a key   <span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<pre class=\"line-numbers language-mysql\" data-language=\"mysql\"><code class=\"language-mysql\">create table employee(\n\teid int primary key,\n    ename varchar(20) unique key auto_increment\n);\n# ERROR 1063 (42000): Incorrect column specifier for column 'ename'  因为ename不是整数类型<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h3 id=\"5-4-如何指定自增约束\"><a href=\"#5-4-如何指定自增约束\" class=\"headerlink\" title=\"5.4 如何指定自增约束\"></a>5.4 如何指定自增约束</h3><p><strong>（1）建表时</strong></p>\n<pre class=\"line-numbers language-mysql\" data-language=\"mysql\"><code class=\"language-mysql\">create table 表名称(\n\t字段名  数据类型  primary key auto_increment,\n    字段名  数据类型  unique key not null,  \n    字段名  数据类型  unique key,\n    字段名  数据类型  not null default 默认值, \n);\ncreate table 表名称(\n\t字段名  数据类型 default 默认值 ,\n    字段名  数据类型 unique key auto_increment,  \n    字段名  数据类型 not null default 默认值,,\n    primary key(字段名)\n);<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<pre class=\"line-numbers language-mysql\" data-language=\"mysql\"><code class=\"language-mysql\">create table employee(\n\teid int primary key auto_increment,\n    ename varchar(20)\n);<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n<pre class=\"line-numbers language-mysql\" data-language=\"mysql\"><code class=\"language-mysql\">mysql&gt; desc employee;\n+-------+-------------+------+-----+---------+----------------+\n| Field | Type        | Null | Key | Default | Extra          |\n+-------+-------------+------+-----+---------+----------------+\n| eid   | int(11)     | NO   | PRI | NULL    | auto_increment |\n| ename | varchar(20) | YES  |     | NULL    |                |\n+-------+-------------+------+-----+---------+----------------+\n2 rows in set (0.00 sec)<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p><strong>（2）建表后</strong></p>\n<pre class=\"line-numbers language-mysql\" data-language=\"mysql\"><code class=\"language-mysql\">alter table 表名称 modify 字段名 数据类型 auto_increment;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>例如：</p>\n<pre class=\"line-numbers language-mysql\" data-language=\"mysql\"><code class=\"language-mysql\">create table employee(\n\teid int primary key ,\n    ename varchar(20)\n);<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n<pre class=\"line-numbers language-mysql\" data-language=\"mysql\"><code class=\"language-mysql\">alter table employee modify eid int auto_increment;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<pre class=\"line-numbers language-mysql\" data-language=\"mysql\"><code class=\"language-mysql\">mysql&gt; desc employee;\n+-------+-------------+------+-----+---------+----------------+\n| Field | Type        | Null | Key | Default | Extra          |\n+-------+-------------+------+-----+---------+----------------+\n| eid   | int(11)     | NO   | PRI | NULL    | auto_increment |\n| ename | varchar(20) | YES  |     | NULL    |                |\n+-------+-------------+------+-----+---------+----------------+\n2 rows in set (0.00 sec)<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h3 id=\"5-5-如何删除自增约束\"><a href=\"#5-5-如何删除自增约束\" class=\"headerlink\" title=\"5.5 如何删除自增约束\"></a>5.5 如何删除自增约束</h3><pre class=\"line-numbers language-mysql\" data-language=\"mysql\"><code class=\"language-mysql\">#alter table 表名称 modify 字段名 数据类型 auto_increment;#给这个字段增加自增约束\n\nalter table 表名称 modify 字段名 数据类型; #去掉auto_increment相当于删除<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n<pre class=\"line-numbers language-mysql\" data-language=\"mysql\"><code class=\"language-mysql\">alter table employee modify eid int;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<pre class=\"line-numbers language-mysql\" data-language=\"mysql\"><code class=\"language-mysql\">mysql&gt; desc employee;\n+-------+-------------+------+-----+---------+-------+\n| Field | Type        | Null | Key | Default | Extra |\n+-------+-------------+------+-----+---------+-------+\n| eid   | int(11)     | NO   | PRI | NULL    |       |\n| ename | varchar(20) | YES  |     | NULL    |       |\n+-------+-------------+------+-----+---------+-------+\n2 rows in set (0.00 sec)<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h3 id=\"5-6-MySQL-8-0新特性—自增变量的持久化\"><a href=\"#5-6-MySQL-8-0新特性—自增变量的持久化\" class=\"headerlink\" title=\"5.6 MySQL 8.0新特性—自增变量的持久化\"></a>5.6 MySQL 8.0新特性—自增变量的持久化</h3><p>在MySQL 8.0之前，自增主键AUTO_INCREMENT的值如果大于max(primary key)+1，在MySQL重启后，会重置AUTO_INCREMENT=max(primary key)+1，这种现象在某些情况下会导致业务主键冲突或者其他难以发现的问题。<br>下面通过案例来对比不同的版本中自增变量是否持久化。<br>在MySQL 5.7版本中，测试步骤如下：<br>创建的数据表中包含自增主键的id字段，语句如下：</p>\n<pre class=\"line-numbers language-mysql\" data-language=\"mysql\"><code class=\"language-mysql\">CREATE TABLE test1(\nid INT PRIMARY KEY AUTO_INCREMENT\n);<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n<p>插入4个空值，执行如下：</p>\n<pre class=\"line-numbers language-mysql\" data-language=\"mysql\"><code class=\"language-mysql\">INSERT INTO test1\nVALUES(0),(0),(0),(0);<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n<p>查询数据表test1中的数据，结果如下：</p>\n<pre class=\"line-numbers language-mysql\" data-language=\"mysql\"><code class=\"language-mysql\">mysql&gt; SELECT * FROM test1;\n+----+\n| id |\n+----+\n|  1 |\n|  2 |\n|  3 |\n|  4 |\n+----+\n4 rows in set (0.00 sec)<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>删除id为4的记录，语句如下：</p>\n<pre class=\"line-numbers language-mysql\" data-language=\"mysql\"><code class=\"language-mysql\">DELETE FROM test1 WHERE id = 4;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>再次插入一个空值，语句如下：</p>\n<pre class=\"line-numbers language-mysql\" data-language=\"mysql\"><code class=\"language-mysql\">INSERT INTO test1 VALUES(0);<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>查询此时数据表test1中的数据，结果如下：</p>\n<pre class=\"line-numbers language-mysql\" data-language=\"mysql\"><code class=\"language-mysql\">mysql&gt; SELECT * FROM test1;\n+----+\n| id |\n+----+\n|  1 |\n|  2 |\n|  3 |\n|  5 |\n+----+\n4 rows in set (0.00 sec)<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>从结果可以看出，虽然删除了id为4的记录，但是再次插入空值时，并没有重用被删除的4，而是分配了5。<br>删除id为5的记录，结果如下：</p>\n<pre class=\"line-numbers language-mysql\" data-language=\"mysql\"><code class=\"language-mysql\">DELETE FROM test1 where id=5;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p><strong>重启数据库</strong>，重新插入一个空值。</p>\n<pre class=\"line-numbers language-mysql\" data-language=\"mysql\"><code class=\"language-mysql\">INSERT INTO test1 values(0);<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>再次查询数据表test1中的数据，结果如下：</p>\n<pre class=\"line-numbers language-mysql\" data-language=\"mysql\"><code class=\"language-mysql\">mysql&gt; SELECT * FROM test1;\n+----+\n| id |\n+----+\n|  1 |\n|  2 |\n|  3 |\n|  4 |\n+----+\n4 rows in set (0.00 sec)<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>从结果可以看出，新插入的0值分配的是4，按照重启前的操作逻辑，此处应该分配6。出现上述结果的主要原因是自增主键没有持久化。<br>在MySQL 5.7系统中，对于自增主键的分配规则，是由InnoDB数据字典内部一个<code>计数器</code>来决定的，而该计数器只在<code>内存中维护</code>，并不会持久化到磁盘中。当数据库重启时，该计数器会被初始化。</p>\n<p>在MySQL 8.0版本中，上述测试步骤最后一步的结果如下：</p>\n<pre class=\"line-numbers language-mysql\" data-language=\"mysql\"><code class=\"language-mysql\">mysql&gt; SELECT * FROM test1;\n+----+\n| id |\n+----+\n|  1 |\n|  2 |\n|  3 |\n|  6 |\n+----+\n4 rows in set (0.00 sec)<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>从结果可以看出，自增变量已经持久化了。</p>\n<p>MySQL 8.0将自增主键的计数器持久化到<code>重做日志</code>中。每次计数器发生改变，都会将其写入重做日志中。如果数据库重启，InnoDB会根据重做日志中的信息来初始化计数器的内存值。</p>\n<h2 id=\"6-FOREIGN-KEY-约束\"><a href=\"#6-FOREIGN-KEY-约束\" class=\"headerlink\" title=\"6. FOREIGN KEY 约束\"></a>6. FOREIGN KEY 约束</h2><h3 id=\"6-1-作用\"><a href=\"#6-1-作用\" class=\"headerlink\" title=\"6.1 作用\"></a>6.1 作用</h3><p>限定某个表的某个字段的引用完整性。</p>\n<p>比如：员工表的员工所在部门的选择，必须在部门表能找到对应的部分。</p>\n<p><img src=\"D:\\极客时间\\尚硅谷大数据学科全套教程（总185.88GB）\\1.尚硅谷大数据学科--核心基础\\MYSQL\\课件md版\\01_课件\\images\\1555428214706.png\" alt=\"1555428214706\"></p>\n<h3 id=\"6-2-关键字\"><a href=\"#6-2-关键字\" class=\"headerlink\" title=\"6.2 关键字\"></a>6.2 关键字</h3><p>FOREIGN KEY</p>\n<h3 id=\"6-3-主表和从表-父表和子表\"><a href=\"#6-3-主表和从表-父表和子表\" class=\"headerlink\" title=\"6.3 主表和从表/父表和子表\"></a>6.3 主表和从表/父表和子表</h3><p>主表（父表）：被引用的表，被参考的表</p>\n<p>从表（子表）：引用别人的表，参考别人的表</p>\n<p>例如：员工表的员工所在部门这个字段的值要参考部门表：部门表是主表，员工表是从表。</p>\n<p>例如：学生表、课程表、选课表：选课表的学生和课程要分别参考学生表和课程表，学生表和课程表是主表，选课表是从表。</p>\n<h3 id=\"6-4-特点\"><a href=\"#6-4-特点\" class=\"headerlink\" title=\"6.4 特点\"></a>6.4 特点</h3><p>（1）从表的外键列，必须引用/参考主表的主键或唯一约束的列</p>\n<p>​          为什么？因为被依赖/被参考的值必须是唯一的</p>\n<p>（2）在创建外键约束时，如果不给外键约束命名，<strong>默认名不是列名，而是自动产生一个外键名</strong>（例如 student_ibfk_1;），也可以指定外键约束名。</p>\n<p>（3）创建(CREATE)表时就指定外键约束的话，先创建主表，再创建从表</p>\n<p>（4）删表时，先删从表（或先删除外键约束），再删除主表</p>\n<p>（5）当主表的记录被从表参照时，主表的记录将不允许删除，如果要删除数据，需要先删除从表中依赖该记录的数据，然后才可以删除主表的数据</p>\n<p>（6）在“从表”中指定外键约束，并且一个表可以建立多个外键约束</p>\n<p>（7）从表的外键列与主表被参照的列名字可以不相同，但是数据类型必须一样，逻辑意义一致。如果类型不一样，创建子表时，就会出现错误“ERROR 1005 (HY000): Can’t create table’database.tablename’(errno: 150)”。</p>\n<p>​          例如：都是表示部门编号，都是int类型。</p>\n<p>（8）<strong>当创建外键约束时，系统默认会在所在的列上建立对应的普通索引</strong>。但是索引名是外键的约束名。（根据外键查询效率很高）</p>\n<p>（9）删除外键约束后，必须<code>手动</code>删除对应的索引</p>\n<h3 id=\"6-5-添加外键约束\"><a href=\"#6-5-添加外键约束\" class=\"headerlink\" title=\"6.5 添加外键约束\"></a>6.5 添加外键约束</h3><p>（1）建表时</p>\n<pre class=\"line-numbers language-mysql\" data-language=\"mysql\"><code class=\"language-mysql\">create table 主表名称(\n\t字段1  数据类型  primary key,\n    字段2  数据类型\n);\n\ncreate table 从表名称(\n\t字段1  数据类型  primary key,\n    字段2  数据类型,\n    [CONSTRAINT &lt;外键约束名称&gt;] FOREIGN KEY（从表的某个字段) references 主表名(被参考字段)\n);\n#(从表的某个字段)的数据类型必须与主表名(被参考字段)的数据类型一致，逻辑意义也一样\n#(从表的某个字段)的字段名可以与主表名(被参考字段)的字段名一样，也可以不一样\n\n-- FOREIGN KEY: 在表级指定子表中的列\n-- REFERENCES: 标示在父表中的列<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<pre class=\"line-numbers language-mysql\" data-language=\"mysql\"><code class=\"language-mysql\">create table dept( #主表\n\tdid int primary key,\t\t#部门编号\n    dname varchar(50)\t\t\t#部门名称\n);\n\ncreate table emp(#从表\n\teid int primary key,  #员工编号\n    ename varchar(5),     #员工姓名\n    deptid int,\t\t\t\t#员工所在的部门\n    foreign key (deptid) references dept(did)   #在从表中指定外键约束\n    #emp表的deptid和和dept表的did的数据类型一致，意义都是表示部门的编号\n);\n\n说明：\n（1）主表dept必须先创建成功，然后才能创建emp表，指定外键成功。\n（2）删除表时，先删除从表emp，再删除主表dept<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>（2）建表后</p>\n<p>一般情况下，表与表的关联都是提前设计好了的，因此，会在创建表的时候就把外键约束定义好。不过，如果需要修改表的设计（比如添加新的字段，增加新的关联关系），但没有预先定义外键约束，那么，就要用修改表的方式来补充定义。</p>\n<p>格式：</p>\n<pre class=\"line-numbers language-mysql\" data-language=\"mysql\"><code class=\"language-mysql\">ALTER TABLE 从表名 ADD [CONSTRAINT 约束名] FOREIGN KEY (从表的字段) REFERENCES 主表名(被引用字段) [on update xx][on delete xx];<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>举例：</p>\n<pre class=\"line-numbers language-mysql\" data-language=\"mysql\"><code class=\"language-mysql\">ALTER TABLE emp1\nADD [CONSTRAINT emp_dept_id_fk] FOREIGN KEY(dept_id) REFERENCES dept(dept_id);<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n<p>举例：</p>\n<pre class=\"line-numbers language-mysql\" data-language=\"mysql\"><code class=\"language-mysql\">create table dept(\n\tdid int primary key,\t\t#部门编号\n    dname varchar(50)\t\t\t#部门名称\n);\n\ncreate table emp(\n\teid int primary key,  #员工编号\n    ename varchar(5),     #员工姓名\n    deptid int\t\t\t\t#员工所在的部门\n);\n#这两个表创建时，没有指定外键的话，那么创建顺序是随意<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<pre class=\"line-numbers language-mysql\" data-language=\"mysql\"><code class=\"language-mysql\">alter table emp add foreign key (deptid) references dept(did);<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<h3 id=\"6-6-演示问题\"><a href=\"#6-6-演示问题\" class=\"headerlink\" title=\"6.6 演示问题\"></a>6.6 演示问题</h3><p>（1）失败：不是键列</p>\n<pre class=\"line-numbers language-mysql\" data-language=\"mysql\"><code class=\"language-mysql\">create table dept(\n\tdid int ,\t\t#部门编号\n    dname varchar(50)\t\t\t#部门名称\n);\n\ncreate table emp(\n\teid int primary key,  #员工编号\n    ename varchar(5),     #员工姓名\n    deptid int,\t\t\t\t#员工所在的部门\n    foreign key (deptid) references dept(did)\n);\n#ERROR 1215 (HY000): Cannot add foreign key constraint  原因是dept的did不是键列<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>（2）失败：数据类型不一致</p>\n<pre class=\"line-numbers language-mysql\" data-language=\"mysql\"><code class=\"language-mysql\">create table dept(\n\tdid int primary key,\t\t#部门编号\n    dname varchar(50)\t\t\t#部门名称\n);\n\ncreate table emp(\n\teid int primary key,  #员工编号\n    ename varchar(5),     #员工姓名\n    deptid char,\t\t\t\t#员工所在的部门\n    foreign key (deptid) references dept(did)\n);\n#ERROR 1215 (HY000): Cannot add foreign key constraint  原因是从表的deptid字段和主表的did字段的数据类型不一致，并且要它俩的逻辑意义一致<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>（3）成功，两个表字段名一样</p>\n<pre class=\"line-numbers language-mysql\" data-language=\"mysql\"><code class=\"language-mysql\">create table dept(\n\tdid int primary key,\t\t#部门编号\n    dname varchar(50)\t\t\t#部门名称\n);\n\ncreate table emp(\n\teid int primary key,  #员工编号\n    ename varchar(5),     #员工姓名\n    did int,\t\t\t\t#员工所在的部门\n    foreign key (did) references dept(did)  \n    #emp表的deptid和和dept表的did的数据类型一致，意义都是表示部门的编号\n    #是否重名没问题，因为两个did在不同的表中\n);<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>（4）添加、删除、修改问题</p>\n<pre class=\"line-numbers language-mysql\" data-language=\"mysql\"><code class=\"language-mysql\">create table dept(\n\tdid int primary key,\t\t#部门编号\n    dname varchar(50)\t\t\t#部门名称\n);\n\ncreate table emp(\n\teid int primary key,  #员工编号\n    ename varchar(5),     #员工姓名\n    deptid int,\t\t\t\t#员工所在的部门\n    foreign key (deptid) references dept(did)  \n    #emp表的deptid和和dept表的did的数据类型一致，意义都是表示部门的编号\n);<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<pre class=\"line-numbers language-mysql\" data-language=\"mysql\"><code class=\"language-mysql\">insert into dept values(1001,'教学部');\ninsert into dept values(1003, '财务部');\n\ninsert into emp values(1,'张三',1001); #添加从表记录成功，在添加这条记录时，要求部门表有1001部门\n\ninsert into emp values(2,'李四',1005);#添加从表记录失败\nERROR 1452 (23000): Cannot add（添加） or update（修改） a child row: a foreign key constraint fails (`atguigudb`.`emp`, CONSTRAINT `emp_ibfk_1` FOREIGN KEY (`deptid`) REFERENCES `dept` (`did`)) 从表emp添加记录失败，因为主表dept没有1005部门<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<pre class=\"line-numbers language-mysql\" data-language=\"mysql\"><code class=\"language-mysql\">mysql&gt; select * from dept;\n+------+--------+\n| did  | dname  |\n+------+--------+\n| 1001 | 教学部  |\n| 1003 | 财务部  |\n+------+--------+\n2 rows in set (0.00 sec)\n\nmysql&gt; select * from emp;\n+-----+-------+--------+\n| eid | ename | deptid |\n+-----+-------+--------+\n|   1 | 张三   |   1001 |\n+-----+-------+--------+\n1 row in set (0.00 sec)<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<pre class=\"line-numbers language-mysql\" data-language=\"mysql\"><code class=\"language-mysql\">update emp set deptid = 1002 where eid = 1;#修改从表失败 \nERROR 1452 (23000): Cannot add（添加） or update（修改） a child row（子表的记录）: a foreign key constraint fails（外键约束失败） (`atguigudb`.`emp`, CONSTRAINT `emp_ibfk_1` FOREIGN KEY (`deptid`) REFERENCES `dept` (`did`))  #部门表did字段现在没有1002的值，所以员工表中不能修改员工所在部门deptid为1002\n\nupdate dept set did = 1002 where did = 1001;#修改主表失败\nERROR 1451 (23000): Cannot delete（删除） or update（修改） a parent row（父表的记录）: a foreign key constraint fails (`atguigudb`.`emp`, CONSTRAINT `emp_ibfk_1` FOREIGN KEY (`deptid`) REFERENCES `dept` (`did`)) #部门表did的1001字段已经被emp引用了，所以部门表的1001字段就不能修改了。\n\nupdate dept set did = 1002 where did = 1003;#修改主表成功  因为部门表的1003部门没有被emp表引用，所以可以修改<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<pre class=\"line-numbers language-mysql\" data-language=\"mysql\"><code class=\"language-mysql\">delete from dept where did=1001; #删除主表失败\nERROR 1451 (23000): Cannot delete（删除） or update（修改） a parent row（父表记录）: a foreign key constraint fails (`atguigudb`.`emp`, CONSTRAINT `emp_ibfk_1` FOREIGN KEY (`deptid`) REFERENCES `dept` (`did`))  #因为部门表did的1001字段已经被emp引用了，所以部门表的1001字段对应的记录就不能被删除<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n<p>总结：约束关系是针对双方的</p>\n<ul>\n<li><p>添加了外键约束后，主表的修改和删除数据受约束</p>\n</li>\n<li><p>添加了外键约束后，从表的添加和修改数据受约束</p>\n</li>\n<li>在从表上建立外键，要求主表必须存在</li>\n<li>删除主表时，要求从表从表先删除，或将从表中外键引用该主表的关系先删除</li>\n</ul>\n<h3 id=\"6-7-约束等级\"><a href=\"#6-7-约束等级\" class=\"headerlink\" title=\"6.7 约束等级\"></a>6.7 约束等级</h3><ul>\n<li><p><code>Cascade方式</code>：在父表上update/delete记录时，同步update/delete掉子表的匹配记录 </p>\n</li>\n<li><p><code>Set null方式</code>：在父表上update/delete记录时，将子表上匹配记录的列设为null，但是要注意子表的外键列不能为not null  </p>\n</li>\n<li><p><code>No action方式</code>：如果子表中有匹配的记录，则不允许对父表对应候选键进行update/delete操作  </p>\n</li>\n<li><p><code>Restrict方式</code>：同no action， 都是立即检查外键约束</p>\n</li>\n<li><p><code>Set default方式</code>（在可视化工具SQLyog中可能显示空白）：父表有变更时，子表将外键列设置成一个默认的值，但Innodb不能识别</p>\n</li>\n</ul>\n<p>如果没有指定等级，就相当于Restrict方式。</p>\n<p>对于外键约束，最好是采用: <code>ON UPDATE CASCADE ON DELETE RESTRICT</code> 的方式。</p>\n<p>（1）演示1：on update cascade on delete set null</p>\n<pre class=\"line-numbers language-mysql\" data-language=\"mysql\"><code class=\"language-mysql\">create table dept(\n\tdid int primary key,\t\t#部门编号\n    dname varchar(50)\t\t\t#部门名称\n);\n\ncreate table emp(\n\teid int primary key,  #员工编号\n    ename varchar(5),     #员工姓名\n    deptid int,\t\t\t\t#员工所在的部门\n    foreign key (deptid) references dept(did)  on update cascade on delete set null\n    #把修改操作设置为级联修改等级，把删除操作设置为set null等级\n);<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<pre class=\"line-numbers language-mysql\" data-language=\"mysql\"><code class=\"language-mysql\">insert into dept values(1001,'教学部');\ninsert into dept values(1002, '财务部');\ninsert into dept values(1003, '咨询部');\n\n\ninsert into emp values(1,'张三',1001); #在添加这条记录时，要求部门表有1001部门\ninsert into emp values(2,'李四',1001);\ninsert into emp values(3,'王五',1002);\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<pre class=\"line-numbers language-mysql\" data-language=\"mysql\"><code class=\"language-mysql\">mysql&gt; select * from dept;\n\nmysql&gt; select * from emp;\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n<pre class=\"line-numbers language-mysql\" data-language=\"mysql\"><code class=\"language-mysql\">#修改主表成功，从表也跟着修改，修改了主表被引用的字段1002为1004，从表的引用字段就跟着修改为1004了\nmysql&gt; update dept set did = 1004 where did = 1002;\nQuery OK, 1 row affected (0.00 sec)\nRows matched: 1  Changed: 1  Warnings: 0\n\nmysql&gt; select * from dept;\n+------+--------+\n| did  | dname  |\n+------+--------+\n| 1001 | 教学部 |\n| 1003 | 咨询部 |\n| 1004 | 财务部 | #原来是1002，修改为1004\n+------+--------+\n3 rows in set (0.00 sec)\n\nmysql&gt; select * from emp;\n+-----+-------+--------+\n| eid | ename | deptid |\n+-----+-------+--------+\n|   1 | 张三  |   1001 |\n|   2 | 李四  |   1001 |\n|   3 | 王五  |   1004 | #原来是1002，跟着修改为1004\n+-----+-------+--------+\n3 rows in set (0.00 sec)<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<pre class=\"line-numbers language-mysql\" data-language=\"mysql\"><code class=\"language-mysql\">#删除主表的记录成功，从表对应的字段的值被修改为null\nmysql&gt; delete from dept where did = 1001;\nQuery OK, 1 row affected (0.01 sec)\n\nmysql&gt; select * from dept;\n+------+--------+\n| did  | dname  | #记录1001部门被删除了\n+------+--------+\n| 1003 | 咨询部  |\n| 1004 | 财务部  |\n+------+--------+\n2 rows in set (0.00 sec)\n\nmysql&gt; select * from emp;\n+-----+-------+--------+\n| eid | ename | deptid |\n+-----+-------+--------+\n|   1 | 张三  |   NULL | #原来引用1001部门的员工，deptid字段变为null\n|   2 | 李四  |   NULL |\n|   3 | 王五  |   1004 |\n+-----+-------+--------+\n3 rows in set (0.00 sec)<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>（2）演示2：on update set null on delete cascade</p>\n<pre class=\"line-numbers language-mysql\" data-language=\"mysql\"><code class=\"language-mysql\">create table dept(\n\tdid int primary key,\t\t#部门编号\n    dname varchar(50)\t\t\t#部门名称\n);\n\ncreate table emp(\n\teid int primary key,  #员工编号\n    ename varchar(5),     #员工姓名\n    deptid int,\t\t\t\t#员工所在的部门\n    foreign key (deptid) references dept(did)  on update set null on delete cascade\n    #把修改操作设置为set null等级，把删除操作设置为级联删除等级\n);<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<pre class=\"line-numbers language-mysql\" data-language=\"mysql\"><code class=\"language-mysql\">insert into dept values(1001,'教学部');\ninsert into dept values(1002, '财务部');\ninsert into dept values(1003, '咨询部');\n\ninsert into emp values(1,'张三',1001); #在添加这条记录时，要求部门表有1001部门\ninsert into emp values(2,'李四',1001);\ninsert into emp values(3,'王五',1002);<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<pre class=\"line-numbers language-mysql\" data-language=\"mysql\"><code class=\"language-mysql\">mysql&gt; select * from dept;\n+------+--------+\n| did  | dname  |\n+------+--------+\n| 1001 | 教学部 |\n| 1002 | 财务部 |\n| 1003 | 咨询部 |\n+------+--------+\n3 rows in set (0.00 sec)\n\nmysql&gt; select * from emp;\n+-----+-------+--------+\n| eid | ename | deptid |\n+-----+-------+--------+\n|   1 | 张三  |   1001 |\n|   2 | 李四  |   1001 |\n|   3 | 王五  |   1002 |\n+-----+-------+--------+\n3 rows in set (0.00 sec)<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<pre class=\"line-numbers language-mysql\" data-language=\"mysql\"><code class=\"language-mysql\">#修改主表，从表对应的字段设置为null\nmysql&gt; update dept set did = 1004 where did = 1002;\nQuery OK, 1 row affected (0.00 sec)\nRows matched: 1  Changed: 1  Warnings: 0\n\nmysql&gt; select * from dept;\n+------+--------+\n| did  | dname  |\n+------+--------+\n| 1001 | 教学部 |\n| 1003 | 咨询部 |\n| 1004 | 财务部 | #原来did是1002\n+------+--------+\n3 rows in set (0.00 sec)\n\nmysql&gt; select * from emp;\n+-----+-------+--------+\n| eid | ename | deptid |\n+-----+-------+--------+\n|   1 | 张三  |   1001 |\n|   2 | 李四  |   1001 |\n|   3 | 王五  |   NULL | #原来deptid是1002，因为部门表1002被修改了，1002没有对应的了，就设置为null\n+-----+-------+--------+\n3 rows in set (0.00 sec)<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<pre class=\"line-numbers language-mysql\" data-language=\"mysql\"><code class=\"language-mysql\">#删除主表的记录成功，主表的1001行被删除了，从表相应的记录也被删除了\nmysql&gt; delete from dept where did=1001;\nQuery OK, 1 row affected (0.00 sec)\n\nmysql&gt; select * from dept;\n+------+--------+\n| did  | dname  | #部门表中1001部门被删除\n+------+--------+\n| 1003 | 咨询部 |\n| 1004 | 财务部 |\n+------+--------+\n2 rows in set (0.00 sec)\n\nmysql&gt; select * from emp;\n+-----+-------+--------+\n| eid | ename | deptid |#原来1001部门的员工也被删除了\n+-----+-------+--------+\n|   3 | 王五  |   NULL |\n+-----+-------+--------+\n1 row in set (0.00 sec)\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>（3）演示：on update cascade on delete cascade</p>\n<pre class=\"line-numbers language-mysql\" data-language=\"mysql\"><code class=\"language-mysql\">create table dept(\n\tdid int primary key,\t\t#部门编号\n    dname varchar(50)\t\t\t#部门名称\n);\n\ncreate table emp(\n\teid int primary key,  #员工编号\n    ename varchar(5),     #员工姓名\n    deptid int,\t\t\t\t#员工所在的部门\n    foreign key (deptid) references dept(did)  on update cascade on delete cascade\n    #把修改操作设置为级联修改等级，把删除操作也设置为级联删除等级\n);<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<pre class=\"line-numbers language-mysql\" data-language=\"mysql\"><code class=\"language-mysql\">insert into dept values(1001,'教学部');\ninsert into dept values(1002, '财务部');\ninsert into dept values(1003, '咨询部');\n\ninsert into emp values(1,'张三',1001); #在添加这条记录时，要求部门表有1001部门\ninsert into emp values(2,'李四',1001);\ninsert into emp values(3,'王五',1002);<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<pre class=\"line-numbers language-mysql\" data-language=\"mysql\"><code class=\"language-mysql\">mysql&gt; select * from dept;\n+------+--------+\n| did  | dname  |\n+------+--------+\n| 1001 | 教学部 |\n| 1002 | 财务部 |\n| 1003 | 咨询部 |\n+------+--------+\n3 rows in set (0.00 sec)\n\nmysql&gt; select * from emp;\n+-----+-------+--------+\n| eid | ename | deptid |\n+-----+-------+--------+\n|   1 | 张三  |   1001 |\n|   2 | 李四  |   1001 |\n|   3 | 王五  |   1002 |\n+-----+-------+--------+\n3 rows in set (0.00 sec)<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<pre class=\"line-numbers language-mysql\" data-language=\"mysql\"><code class=\"language-mysql\">#修改主表，从表对应的字段自动修改\nmysql&gt; update dept set did = 1004 where did = 1002;\nQuery OK, 1 row affected (0.00 sec)\nRows matched: 1  Changed: 1  Warnings: 0\n\nmysql&gt; select * from dept;\n+------+--------+\n| did  | dname  |\n+------+--------+\n| 1001 | 教学部 |\n| 1003 | 咨询部 |\n| 1004 | 财务部 | #部门1002修改为1004\n+------+--------+\n3 rows in set (0.00 sec)\n\nmysql&gt; select * from emp;\n+-----+-------+--------+\n| eid | ename | deptid |\n+-----+-------+--------+\n|   1 | 张三  |   1001 |\n|   2 | 李四  |   1001 |\n|   3 | 王五  |   1004 | #级联修改\n+-----+-------+--------+\n3 rows in set (0.00 sec)<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<pre class=\"line-numbers language-mysql\" data-language=\"mysql\"><code class=\"language-mysql\">#删除主表的记录成功，主表的1001行被删除了，从表相应的记录也被删除了\nmysql&gt; delete from dept where did=1001;\nQuery OK, 1 row affected (0.00 sec)\n\nmysql&gt; select * from dept;\n+------+--------+\n| did  | dname  | #1001部门被删除了\n+------+--------+\n| 1003 | 咨询部 |\n| 1004 | 财务部 | \n+------+--------+\n2 rows in set (0.00 sec)\n\nmysql&gt; select * from emp;\n+-----+-------+--------+\n| eid | ename | deptid |  #1001部门的员工也被删除了\n+-----+-------+--------+\n|   3 | 王五  |   1004 |\n+-----+-------+--------+\n1 row in set (0.00 sec)<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h3 id=\"6-8-删除外键约束\"><a href=\"#6-8-删除外键约束\" class=\"headerlink\" title=\"6.8 删除外键约束\"></a>6.8 删除外键约束</h3><p>流程如下：</p>\n<pre class=\"line-numbers language-mysql\" data-language=\"mysql\"><code class=\"language-mysql\">(1)第一步先查看约束名和删除外键约束\nSELECT * FROM information_schema.table_constraints WHERE table_name = '表名称';#查看某个表的约束名\n\nALTER TABLE 从表名 DROP FOREIGN KEY 外键约束名;\n\n（2）第二步查看索引名和删除索引。（注意，只能手动删除）\nSHOW INDEX FROM 表名称; #查看某个表的索引名\n\nALTER TABLE 从表名 DROP INDEX 索引名;\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>举例：</p>\n<pre class=\"line-numbers language-mysql\" data-language=\"mysql\"><code class=\"language-mysql\">mysql&gt; SELECT * FROM information_schema.table_constraints WHERE table_name = 'emp';\n\nmysql&gt; alter table emp drop foreign key emp_ibfk_1;\nQuery OK, 0 rows affected (0.02 sec)\nRecords: 0  Duplicates: 0  Warnings: 0\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<pre class=\"line-numbers language-mysql\" data-language=\"mysql\"><code class=\"language-mysql\">mysql&gt; show index from emp;\n\nmysql&gt; alter table emp drop index deptid;\nQuery OK, 0 rows affected (0.01 sec)\nRecords: 0  Duplicates: 0  Warnings: 0\n\nmysql&gt;  show index from emp;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h3 id=\"6-9-开发场景\"><a href=\"#6-9-开发场景\" class=\"headerlink\" title=\"6.9 开发场景\"></a>6.9 开发场景</h3><p><strong>问题1：如果两个表之间有关系（一对一、一对多），比如：员工表和部门表（一对多），它们之间是否一定要建外键约束？</strong></p>\n<p>答：不是的</p>\n<p><strong>问题2：建和不建外键约束有什么区别？</strong></p>\n<p>答：建外键约束，你的操作（创建表、删除表、添加、修改、删除）会受到限制，从语法层面受到限制。例如：在员工表中不可能添加一个员工信息，它的部门的值在部门表中找不到。</p>\n<p>不建外键约束，你的操作（创建表、删除表、添加、修改、删除）不受限制，要保证数据的<code>引用完整性</code>，只能依<code>靠程序员的自觉</code>，或者是<code>在Java程序中进行限定</code>。例如：在员工表中，可以添加一个员工的信息，它的部门指定为一个完全不存在的部门。</p>\n<p><strong>问题3：那么建和不建外键约束和查询有没有关系？</strong></p>\n<p>答：没有</p>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>在 MySQL 里，外键约束是有成本的，需要消耗系统资源。对于大并发的 SQL 操作，有可能会不适合。比如大型网站的中央数据库，可能会<code>因为外键约束的系统开销而变得非常慢</code>。所以， MySQL 允许你不使用系统自带的外键约束，在<code>应用层面</code>完成检查数据一致性的逻辑。也就是说，即使你不用外键约束，也要想办法通过应用层面的附加逻辑，来实现外键约束的功能，确保数据的一致性。</p></blockquote>\n<h3 id=\"6-10-阿里开发规范\"><a href=\"#6-10-阿里开发规范\" class=\"headerlink\" title=\"6.10 阿里开发规范\"></a>6.10 阿里开发规范</h3><p>【<code>强制</code>】不得使用外键与级联，一切外键概念必须在应用层解决。 </p>\n<p>说明：（概念解释）学生表中的 student_id 是主键，那么成绩表中的 student_id 则为外键。如果更新学生表中的 student_id，同时触发成绩表中的 student_id 更新，即为级联更新。外键与级联更新适用于<code>单机低并发</code>，不适合<code>分布式</code>、<code>高并发集群</code>；级联更新是强阻塞，存在数据库<code>更新风暴</code>的风险；外键影响数据库的<code>插入速度</code>。</p>\n<h2 id=\"7-CHECK-约束\"><a href=\"#7-CHECK-约束\" class=\"headerlink\" title=\"7. CHECK 约束\"></a>7. CHECK 约束</h2><h3 id=\"7-1-作用\"><a href=\"#7-1-作用\" class=\"headerlink\" title=\"7.1 作用\"></a>7.1 作用</h3><p>检查某个字段的值是否符号xx要求，一般指的是值的范围</p>\n<h3 id=\"2、关键字\"><a href=\"#2、关键字\" class=\"headerlink\" title=\"2、关键字\"></a>2、关键字</h3><p>CHECK</p>\n<h3 id=\"3、说明：MySQL-5-7-不支持\"><a href=\"#3、说明：MySQL-5-7-不支持\" class=\"headerlink\" title=\"3、说明：MySQL 5.7 不支持\"></a>3、说明：MySQL 5.7 不支持</h3><p>MySQL5.7 可以使用check约束，但check约束对数据验证没有任何作用。添加数据时，没有任何错误或警告</p>\n<p>但是<strong>MySQL 8.0中可以使用check约束了</strong>。</p>\n<pre class=\"line-numbers language-mysql\" data-language=\"mysql\"><code class=\"language-mysql\">create table employee(\n\teid int primary key,\n    ename varchar(5),\n    gender char check ('男' or '女')\n);<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<pre class=\"line-numbers language-mysql\" data-language=\"mysql\"><code class=\"language-mysql\">insert into employee values(1,'张三','妖');<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<pre class=\"line-numbers language-mysql\" data-language=\"mysql\"><code class=\"language-mysql\">mysql&gt; select * from employee;\n+-----+-------+--------+\n| eid | ename | gender |\n+-----+-------+--------+\n|   1 | 张三   | 妖     |\n+-----+-------+--------+\n1 row in set (0.00 sec)<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<ul>\n<li>再举例</li>\n</ul>\n<pre class=\"line-numbers language-mysql\" data-language=\"mysql\"><code class=\"language-mysql\">CREATE TABLE temp(\nid INT AUTO_INCREMENT,\nNAME VARCHAR(20),\nage INT CHECK(age &gt; 20),\nPRIMARY KEY(id)\n);<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<ul>\n<li>再举例</li>\n</ul>\n<pre class=\"line-numbers language-mysql\" data-language=\"mysql\"><code class=\"language-mysql\">age tinyint check(age &gt;20) 或 sex char(2) check(sex in(‘男’,’女’))<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<ul>\n<li>再举例</li>\n</ul>\n<pre class=\"line-numbers language-mysql\" data-language=\"mysql\"><code class=\"language-mysql\">CHECK(height&gt;=0 AND height&lt;3)<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<h2 id=\"8-DEFAULT约束\"><a href=\"#8-DEFAULT约束\" class=\"headerlink\" title=\"8. DEFAULT约束\"></a>8. DEFAULT约束</h2><h3 id=\"8-1-作用\"><a href=\"#8-1-作用\" class=\"headerlink\" title=\"8.1 作用\"></a>8.1 作用</h3><p>给某个字段/某列指定默认值，一旦设置默认值，在插入数据时，如果此字段没有显式赋值，则赋值为默认值。</p>\n<h3 id=\"8-2-关键字\"><a href=\"#8-2-关键字\" class=\"headerlink\" title=\"8.2 关键字\"></a>8.2 关键字</h3><p>DEFAULT</p>\n<h3 id=\"8-3-如何给字段加默认值\"><a href=\"#8-3-如何给字段加默认值\" class=\"headerlink\" title=\"8.3 如何给字段加默认值\"></a>8.3 如何给字段加默认值</h3><p>（1）建表时</p>\n<pre class=\"line-numbers language-mysql\" data-language=\"mysql\"><code class=\"language-mysql\">create table 表名称(\n\t字段名  数据类型  primary key,\n    字段名  数据类型  unique key not null,  \n    字段名  数据类型  unique key,\n    字段名  数据类型  not null default 默认值, \n);\ncreate table 表名称(\n\t字段名  数据类型 default 默认值 ,\n    字段名  数据类型 not null default 默认值,  \n    字段名  数据类型 not null default 默认值,\n    primary key(字段名),\n    unique key(字段名)\n);\n\n说明：默认值约束一般不在唯一键和主键列上加<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<pre class=\"line-numbers language-mysql\" data-language=\"mysql\"><code class=\"language-mysql\">create table employee(\n\teid int primary key,\n    ename varchar(20) not null,\n    gender char default '男',\n    tel char(11) not null default '' #默认是空字符串\n);<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<pre class=\"line-numbers language-mysql\" data-language=\"mysql\"><code class=\"language-mysql\">mysql&gt; desc employee;\n+--------+-------------+------+-----+---------+-------+\n| Field  | Type        | Null | Key | Default | Extra |\n+--------+-------------+------+-----+---------+-------+\n| eid    | int(11)     | NO   | PRI | NULL    |       |\n| ename  | varchar(20) | NO   |     | NULL    |       |\n| gender | char(1)     | YES  |     | 男      |       |\n| tel    | char(11)    | NO   |     |         |       |\n+--------+-------------+------+-----+---------+-------+\n4 rows in set (0.00 sec)<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<pre class=\"line-numbers language-mysql\" data-language=\"mysql\"><code class=\"language-mysql\">insert into employee values(1,'汪飞','男','13700102535'); #成功<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<pre class=\"line-numbers language-mysql\" data-language=\"mysql\"><code class=\"language-mysql\">mysql&gt; select * from employee;\n+-----+-------+--------+-------------+\n| eid | ename | gender | tel         |\n+-----+-------+--------+-------------+\n|   1 | 汪飞  | 男     | 13700102535 |\n+-----+-------+--------+-------------+\n1 row in set (0.00 sec)<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<pre class=\"line-numbers language-mysql\" data-language=\"mysql\"><code class=\"language-mysql\">insert into employee(eid,ename) values(2,'天琪'); #成功<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<pre class=\"line-numbers language-mysql\" data-language=\"mysql\"><code class=\"language-mysql\">mysql&gt; select * from employee;\n+-----+-------+--------+-------------+\n| eid | ename | gender | tel         |\n+-----+-------+--------+-------------+\n|   1 | 汪飞  | 男     | 13700102535 |\n|   2 | 天琪  | 男     |             |\n+-----+-------+--------+-------------+\n2 rows in set (0.00 sec)<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<pre class=\"line-numbers language-mysql\" data-language=\"mysql\"><code class=\"language-mysql\">insert into employee(eid,ename) values(3,'二虎');\n#ERROR 1062 (23000): Duplicate entry '' for key 'tel'  \n#如果tel有唯一性约束的话会报错，如果tel没有唯一性约束，可以添加成功<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n<p>再举例：</p>\n<pre class=\"line-numbers language-mysql\" data-language=\"mysql\"><code class=\"language-mysql\">CREATE TABLE myemp(\nid INT AUTO_INCREMENT PRIMARY KEY,\nNAME VARCHAR(15),\nsalary DOUBLE(10,2) DEFAULT 2000\n);<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>（2）建表后</p>\n<pre class=\"line-numbers language-mysql\" data-language=\"mysql\"><code class=\"language-mysql\">alter table 表名称 modify 字段名 数据类型 default 默认值;\n\n#如果这个字段原来有非空约束，你还保留非空约束，那么在加默认值约束时，还得保留非空约束，否则非空约束就被删除了\n#同理，在给某个字段加非空约束也一样，如果这个字段原来有默认值约束，你想保留，也要在modify语句中保留默认值约束，否则就删除了\nalter table 表名称 modify 字段名 数据类型 default 默认值 not null;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<pre class=\"line-numbers language-mysql\" data-language=\"mysql\"><code class=\"language-mysql\">create table employee(\n\teid int primary key,\n    ename varchar(20),\n    gender char,\n    tel char(11) not null\n);<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<pre class=\"line-numbers language-mysql\" data-language=\"mysql\"><code class=\"language-mysql\">mysql&gt; desc employee;\n+--------+-------------+------+-----+---------+-------+\n| Field  | Type        | Null | Key | Default | Extra |\n+--------+-------------+------+-----+---------+-------+\n| eid    | int(11)     | NO   | PRI | NULL    |       |\n| ename  | varchar(20) | YES  |     | NULL    |       |\n| gender | char(1)     | YES  |     | NULL    |       |\n| tel    | char(11)    | NO   |     | NULL    |       |\n+--------+-------------+------+-----+---------+-------+\n4 rows in set (0.00 sec)<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<pre class=\"line-numbers language-mysql\" data-language=\"mysql\"><code class=\"language-mysql\">alter table employee modify gender char default '男';  #给gender字段增加默认值约束\nalter table employee modify tel char(11) default ''; #给tel字段增加默认值约束<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n<pre class=\"line-numbers language-mysql\" data-language=\"mysql\"><code class=\"language-mysql\">mysql&gt; desc employee;\n+--------+-------------+------+-----+---------+-------+\n| Field  | Type        | Null | Key | Default | Extra |\n+--------+-------------+------+-----+---------+-------+\n| eid    | int(11)     | NO   | PRI | NULL    |       |\n| ename  | varchar(20) | YES  |     | NULL    |       |\n| gender | char(1)     | YES  |     | 男      |       |\n| tel    | char(11)    | YES  |     |         |       |\n+--------+-------------+------+-----+---------+-------+\n4 rows in set (0.00 sec)<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<pre class=\"line-numbers language-mysql\" data-language=\"mysql\"><code class=\"language-mysql\">alter table employee modify tel char(11) default ''  not null;#给tel字段增加默认值约束，并保留非空约束<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<pre class=\"line-numbers language-mysql\" data-language=\"mysql\"><code class=\"language-mysql\">mysql&gt; desc employee;\n+--------+-------------+------+-----+---------+-------+\n| Field  | Type        | Null | Key | Default | Extra |\n+--------+-------------+------+-----+---------+-------+\n| eid    | int(11)     | NO   | PRI | NULL    |       |\n| ename  | varchar(20) | YES  |     | NULL    |       |\n| gender | char(1)     | YES  |     | 男      |       |\n| tel    | char(11)    | NO   |     |         |       |\n+--------+-------------+------+-----+---------+-------+\n4 rows in set (0.00 sec)<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h3 id=\"8-4-如何删除默认值约束\"><a href=\"#8-4-如何删除默认值约束\" class=\"headerlink\" title=\"8.4 如何删除默认值约束\"></a>8.4 如何删除默认值约束</h3><pre class=\"line-numbers language-mysql\" data-language=\"mysql\"><code class=\"language-mysql\">alter table 表名称 modify 字段名 数据类型 ;#删除默认值约束，也不保留非空约束\n\nalter table 表名称 modify 字段名 数据类型  not null; #删除默认值约束，保留非空约束<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n<pre class=\"line-numbers language-mysql\" data-language=\"mysql\"><code class=\"language-mysql\">alter table employee modify gender char; #删除gender字段默认值约束，如果有非空约束，也一并删除\nalter table employee modify tel char(11)  not null;#删除tel字段默认值约束，保留非空约束<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n<pre class=\"line-numbers language-mysql\" data-language=\"mysql\"><code class=\"language-mysql\">mysql&gt; desc employee;\n+--------+-------------+------+-----+---------+-------+\n| Field  | Type        | Null | Key | Default | Extra |\n+--------+-------------+------+-----+---------+-------+\n| eid    | int(11)     | NO   | PRI | NULL    |       |\n| ename  | varchar(20) | YES  |     | NULL    |       |\n| gender | char(1)     | YES  |     | NULL    |       |\n| tel    | char(11)    | NO   |     | NULL    |       |\n+--------+-------------+------+-----+---------+-------+\n4 rows in set (0.00 sec)<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h2 id=\"9-面试\"><a href=\"#9-面试\" class=\"headerlink\" title=\"9. 面试\"></a>9. 面试</h2><p><strong>面试1、为什么建表时，加 not null default ‘’ 或 default 0</strong></p>\n<p>答：不想让表中出现null值。</p>\n<p><strong>面试2、为什么不想要 null 的值</strong></p>\n<p>答:（1）不好比较。null是一种特殊值，比较时只能用专门的is null 和 is not null来比较。碰到运算符，通常返回null。</p>\n<p>​     （2）效率不高。影响提高索引效果。因此，我们往往在建表时 not null default ‘’ 或 default 0</p>\n<p><strong>面试3、带AUTO_INCREMENT约束的字段值是从1开始的吗？</strong><br>在MySQL中，默认AUTO_INCREMENT的初始值是1，每新增一条记录，字段值自动加1。设置自增属性（AUTO_INCREMENT）的时候，还可以指定第一条插入记录的自增字段的值，这样新插入的记录的自增字段值从初始值开始递增，如在表中插入第一条记录，同时指定id值为5，则以后插入的记录的id值就会从6开始往上增加。添加主键约束时，往往需要设置字段自动增加属性。</p>\n<p><strong>面试4、并不是每个表都可以任意选择存储引擎？</strong><br>外键约束（FOREIGN KEY）不能跨引擎使用。</p>\n<p>MySQL支持多种存储引擎，每一个表都可以指定一个不同的存储引擎，需要注意的是：外键约束是用来保证数据的参照完整性的，如果表之间需要关联外键，却指定了不同的存储引擎，那么这些表之间是不能创建外键约束的。所以说，存储引擎的选择也不完全是随意的。</p>\n<h1 id=\"第16章-变量、流程控制与游标\"><a href=\"#第16章-变量、流程控制与游标\" class=\"headerlink\" title=\"第16章_变量、流程控制与游标\"></a>第16章_变量、流程控制与游标</h1><p>在MySQL数据库的存储过程和函数中，可以使用变量来存储查询或计算的中间结果数据，或者输出最终的结果数据。</p>\n<p>在 MySQL 数据库中，变量分为<code>系统变量</code>以及<code>用户自定义变量</code>。</p>\n<h3 id=\"1-1-系统变量\"><a href=\"#1-1-系统变量\" class=\"headerlink\" title=\"1.1 系统变量\"></a>1.1 系统变量</h3><h4 id=\"1-1-1-系统变量分类\"><a href=\"#1-1-1-系统变量分类\" class=\"headerlink\" title=\"1.1.1 系统变量分类\"></a>1.1.1 系统变量分类</h4><p>变量由系统定义，不是用户定义，属于<code>服务器</code>层面。启动MySQL服务，生成MySQL服务实例期间，MySQL将为MySQL服务器内存中的系统变量赋值，这些系统变量定义了当前MySQL服务实例的属性、特征。这些系统变量的值要么是<code>编译MySQL时参数</code>的默认值，要么是<code>配置文件</code>（例如my.ini等）中的参数值。大家可以通过网址 <code>https://dev.mysql.com/doc/refman/8.0/en/server-system-variables.html</code> 查看MySQL文档的系统变量。</p>\n<p>系统变量分为全局系统变量（需要添加<code>global</code> 关键字）以及会话系统变量（需要添加 <code>session</code> 关键字），有时也把全局系统变量简称为全局变量，有时也把会话系统变量称为local变量。<strong>如果不写，默认会话级别。</strong>静态变量（在 MySQL 服务实例运行期间它们的值不能使用 set 动态修改）属于特殊的全局系统变量。</p>\n<p>每一个MySQL客户机成功连接MySQL服务器后，都会产生与之对应的会话。会话期间，MySQL服务实例会在MySQL服务器内存中生成与该会话对应的会话系统变量，这些会话系统变量的初始值是全局系统变量值的复制。如下图：</p>\n<p><img src=\"D:\\极客时间\\尚硅谷大数据学科全套教程（总185.88GB）\\1.尚硅谷大数据学科--核心基础\\MYSQL\\课件md版\\01_课件\\images\\image-20211108114846634.png\" alt=\"image-20211108114846634\"></p>\n<ul>\n<li>全局系统变量针对于所有会话（连接）有效，但<code>不能跨重启</code></li>\n<li>会话系统变量仅针对于当前会话（连接）有效。会话期间，当前会话对某个会话系统变量值的修改，不会影响其他会话同一个会话系统变量的值。</li>\n<li>会话1对某个全局系统变量值的修改会导致会话2中同一个全局系统变量值的修改。</li>\n</ul>\n<p>在MySQL中有些系统变量只能是全局的，例如 max_connections 用于限制服务器的最大连接数；有些系统变量作用域既可以是全局又可以是会话，例如 character_set_client 用于设置客户端的字符集；有些系统变量的作用域只能是当前会话，例如 pseudo_thread_id 用于标记当前会话的 MySQL 连接 ID。</p>\n<h4 id=\"1-1-2-查看系统变量\"><a href=\"#1-1-2-查看系统变量\" class=\"headerlink\" title=\"1.1.2 查看系统变量\"></a>1.1.2 查看系统变量</h4><ul>\n<li><strong>查看所有或部分系统变量</strong></li>\n</ul>\n<pre class=\"line-numbers language-mysql\" data-language=\"mysql\"><code class=\"language-mysql\">#查看所有全局变量\nSHOW GLOBAL VARIABLES;\n\n#查看所有会话变量\nSHOW SESSION VARIABLES;\n或\nSHOW VARIABLES;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<pre class=\"line-numbers language-mysql\" data-language=\"mysql\"><code class=\"language-mysql\">#查看满足条件的部分系统变量。\nSHOW GLOBAL VARIABLES LIKE '%标识符%';\n\n#查看满足条件的部分会话变量\nSHOW SESSION VARIABLES LIKE '%标识符%';<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>举例：</p>\n<pre class=\"line-numbers language-mysql\" data-language=\"mysql\"><code class=\"language-mysql\">SHOW GLOBAL VARIABLES LIKE 'admin_%';<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<ul>\n<li><strong>查看指定系统变量</strong></li>\n</ul>\n<p>作为 MySQL 编码规范，MySQL 中的系统变量以<code>两个“@”</code>开头，其中“@@global”仅用于标记全局系统变量，“@@session”仅用于标记会话系统变量。“@@”首先标记会话系统变量，如果会话系统变量不存在，则标记全局系统变量。</p>\n<pre class=\"line-numbers language-mysql\" data-language=\"mysql\"><code class=\"language-mysql\">#查看指定的系统变量的值\nSELECT @@global.变量名;\n\n#查看指定的会话变量的值\nSELECT @@session.变量名;\n#或者\nSELECT @@变量名;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<ul>\n<li><strong>修改系统变量的值</strong></li>\n</ul>\n<p>有些时候，数据库管理员需要修改系统变量的默认值，以便修改当前会话或者MySQL服务实例的属性、特征。具体方法：</p>\n<p>方式1：修改MySQL<code>配置文件</code>，继而修改MySQL系统变量的值（该方法需要重启MySQL服务）</p>\n<p>方式2：在MySQL服务运行期间，使用“set”命令重新设置系统变量的值</p>\n<pre class=\"line-numbers language-mysql\" data-language=\"mysql\"><code class=\"language-mysql\">#为某个系统变量赋值\n#方式1：\nSET @@global.变量名=变量值;\n#方式2：\nSET GLOBAL 变量名=变量值;\n\n\n#为某个会话变量赋值\n#方式1：\nSET @@session.变量名=变量值;\n#方式2：\nSET SESSION 变量名=变量值;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>举例：</p>\n<pre class=\"line-numbers language-mysql\" data-language=\"mysql\"><code class=\"language-mysql\">SELECT @@global.autocommit;\nSET GLOBAL autocommit=0;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n<pre class=\"line-numbers language-mysql\" data-language=\"mysql\"><code class=\"language-mysql\">SELECT @@session.tx_isolation;\nSET @@session.tx_isolation='read-uncommitted';<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n<pre class=\"line-numbers language-mysql\" data-language=\"mysql\"><code class=\"language-mysql\">SET GLOBAL max_connections = 1000;\nSELECT @@global.max_connections;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n<h3 id=\"1-2-用户变量\"><a href=\"#1-2-用户变量\" class=\"headerlink\" title=\"1.2 用户变量\"></a>1.2 用户变量</h3><h4 id=\"1-2-1-用户变量分类\"><a href=\"#1-2-1-用户变量分类\" class=\"headerlink\" title=\"1.2.1 用户变量分类\"></a>1.2.1 用户变量分类</h4><p>用户变量是用户自己定义的，作为 MySQL 编码规范，MySQL 中的用户变量以<code>一个“@”</code>开头。根据作用范围不同，又分为<code>会话用户变量</code>和<code>局部变量</code>。</p>\n<ul>\n<li><p>会话用户变量：作用域和会话变量一样，只对<code>当前连接</code>会话有效。</p>\n</li>\n<li><p>局部变量：只在 BEGIN 和 END 语句块中有效。局部变量只能在<code>存储过程和函数</code>中使用。</p>\n</li>\n</ul>\n<h4 id=\"1-2-2-会话用户变量\"><a href=\"#1-2-2-会话用户变量\" class=\"headerlink\" title=\"1.2.2 会话用户变量\"></a>1.2.2 会话用户变量</h4><ul>\n<li>变量的定义</li>\n</ul>\n<pre class=\"line-numbers language-mysql\" data-language=\"mysql\"><code class=\"language-mysql\">#方式1：“=”或“:=”\nSET @用户变量 = 值;\nSET @用户变量 := 值;\n\n#方式2：“:=” 或 INTO关键字\nSELECT @用户变量 := 表达式 [FROM 等子句];\nSELECT 表达式 INTO @用户变量  [FROM 等子句];\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<ul>\n<li>查看用户变量的值 （查看、比较、运算等）</li>\n</ul>\n<pre class=\"line-numbers language-mysql\" data-language=\"mysql\"><code class=\"language-mysql\">SELECT @用户变量<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<ul>\n<li>举例</li>\n</ul>\n<pre class=\"line-numbers language-mysql\" data-language=\"mysql\"><code class=\"language-mysql\">SET @a = 1;\n\nSELECT @a;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n<pre class=\"line-numbers language-mysql\" data-language=\"mysql\"><code class=\"language-mysql\">SELECT @num := COUNT(*) FROM employees;\n\nSELECT @num;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n<pre class=\"line-numbers language-mysql\" data-language=\"mysql\"><code class=\"language-mysql\">SELECT AVG(salary) INTO @avgsalary FROM employees;\n\nSELECT @avgsalary;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n<pre class=\"line-numbers language-mysql\" data-language=\"mysql\"><code class=\"language-mysql\">SELECT @big;  #查看某个未声明的变量时，将得到NULL值<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<h4 id=\"1-2-3-局部变量\"><a href=\"#1-2-3-局部变量\" class=\"headerlink\" title=\"1.2.3 局部变量\"></a>1.2.3 局部变量</h4><p>定义：可以使用<code>DECLARE</code>语句定义一个局部变量</p>\n<p>作用域：仅仅在定义它的 BEGIN … END 中有效</p>\n<p>位置：只能放在 BEGIN … END 中，而且只能放在第一句</p>\n<pre class=\"line-numbers language-mysql\" data-language=\"mysql\"><code class=\"language-mysql\">BEGIN\n\t#声明局部变量\n\tDECLARE 变量名1 变量数据类型 [DEFAULT 变量默认值];\n\tDECLARE 变量名2,变量名3,... 变量数据类型 [DEFAULT 变量默认值];\n\n\t#为局部变量赋值\n\tSET 变量名1 = 值;\n\tSELECT 值 INTO 变量名2 [FROM 子句];\n\n\t#查看局部变量的值\n\tSELECT 变量1,变量2,变量3;\nEND\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p><strong>1.定义变量</strong></p>\n<pre class=\"line-numbers language-mysql\" data-language=\"mysql\"><code class=\"language-mysql\">DECLARE 变量名 类型 [default 值];  # 如果没有DEFAULT子句，初始值为NULL<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>举例：</p>\n<pre class=\"line-numbers language-mysql\" data-language=\"mysql\"><code class=\"language-mysql\">DECLARE　myparam　INT　DEFAULT 100;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p><strong>2.变量赋值</strong></p>\n<p>方式1：一般用于赋简单的值</p>\n<pre class=\"line-numbers language-mysql\" data-language=\"mysql\"><code class=\"language-mysql\">SET 变量名=值;\nSET 变量名:=值;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n<p>方式2：一般用于赋表中的字段值</p>\n<pre class=\"line-numbers language-mysql\" data-language=\"mysql\"><code class=\"language-mysql\">SELECT 字段名或表达式 INTO 变量名 FROM 表;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p><strong>3.使用变量</strong>（查看、比较、运算等）</p>\n<pre class=\"line-numbers language-mysql\" data-language=\"mysql\"><code class=\"language-mysql\">SELECT 局部变量名;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>举例1：声明局部变量，并分别赋值为employees表中employee_id为102的last_name和salary</p>\n<pre class=\"line-numbers language-mysql\" data-language=\"mysql\"><code class=\"language-mysql\">DELIMITER //\n\nCREATE PROCEDURE set_value()\nBEGIN\n\tDECLARE emp_name VARCHAR(25);\n\tDECLARE sal DOUBLE(10,2);\n\t\n\tSELECT last_name,salary INTO emp_name,sal\n\tFROM employees \n\tWHERE employee_id = 102;\n\t\n\tSELECT emp_name,sal;\nEND //\n\nDELIMITER ;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>举例2：声明两个变量，求和并打印 （分别使用会话用户变量、局部变量的方式实现）</p>\n<pre class=\"line-numbers language-mysql\" data-language=\"mysql\"><code class=\"language-mysql\">#方式1：使用用户变量\nSET @m=1;\nSET @n=1;\nSET @sum=@m+@n;\n\nSELECT @sum;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<pre class=\"line-numbers language-mysql\" data-language=\"mysql\"><code class=\"language-mysql\">#方式2：使用局部变量\nDELIMITER //\n\nCREATE PROCEDURE add_value()\nBEGIN\n\t#局部变量\n\tDECLARE m INT DEFAULT 1;\n\tDECLARE n INT DEFAULT 3;\n\tDECLARE SUM INT;\n\t\n\tSET SUM = m+n;\n\tSELECT SUM;\nEND //\n\nDELIMITER ;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>举例3：创建存储过程“different_salary”查询某员工和他领导的薪资差距，并用IN参数emp_id接收员工id，用OUT参数dif_salary输出薪资差距结果。</p>\n<pre class=\"line-numbers language-mysql\" data-language=\"mysql\"><code class=\"language-mysql\">#声明\nDELIMITER //\n\nCREATE PROCEDURE different_salary(IN emp_id INT,OUT dif_salary DOUBLE)\nBEGIN\n\t#声明局部变量\n\tDECLARE emp_sal,mgr_sal DOUBLE DEFAULT 0.0;\n\tDECLARE mgr_id INT;\n\t\n\tSELECT salary INTO emp_sal FROM employees WHERE employee_id = emp_id;\n\tSELECT manager_id INTO mgr_id FROM employees WHERE employee_id = emp_id;\n\tSELECT salary INTO mgr_sal FROM employees WHERE employee_id = mgr_id;\n\tSET dif_salary = mgr_sal - emp_sal;\n\nEND //\n\nDELIMITER ;\n\n#调用\nSET @emp_id = 102;\nCALL different_salary(@emp_id,@diff_sal);\n\n\n#查看\nSELECT @diff_sal;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h4 id=\"1-2-4-对比会话用户变量与局部变量\"><a href=\"#1-2-4-对比会话用户变量与局部变量\" class=\"headerlink\" title=\"1.2.4 对比会话用户变量与局部变量\"></a>1.2.4 对比会话用户变量与局部变量</h4><pre class=\"line-numbers language-none\"><code class=\"language-none\">\t\t\t  作用域\t\t\t\t\t定义位置\t\t\t\t  语法\n会话用户变量\t  当前会话\t\t\t\t   会话的任何地方\t\t\t\t加@符号，不用指定类型\n局部变量\t   定义它的BEGIN END中 \t\tBEGIN END的第一句话\t\t  一般不用加@,需要指定类型<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n<h2 id=\"2-定义条件与处理程序\"><a href=\"#2-定义条件与处理程序\" class=\"headerlink\" title=\"2. 定义条件与处理程序\"></a>2. 定义条件与处理程序</h2><p><code>定义条件</code>是事先定义程序执行过程中可能遇到的问题，<code>处理程序</code>定义了在遇到问题时应当采取的处理方式，并且保证存储过程或函数在遇到警告或错误时能继续执行。这样可以增强存储程序处理问题的能力，避免程序异常停止运行。</p>\n<p>说明：定义条件和处理程序在存储过程、存储函数中都是支持的。</p>\n<h3 id=\"2-1-案例分析\"><a href=\"#2-1-案例分析\" class=\"headerlink\" title=\"2.1 案例分析\"></a>2.1 案例分析</h3><p><strong>案例分析：</strong>创建一个名称为“UpdateDataNoCondition”的存储过程。代码如下：</p>\n<pre class=\"line-numbers language-mysql\" data-language=\"mysql\"><code class=\"language-mysql\">DELIMITER //\n\nCREATE PROCEDURE UpdateDataNoCondition()\n\tBEGIN\n\t\tSET @x = 1;\n\t\tUPDATE employees SET email = NULL WHERE last_name = 'Abel';\n\t\tSET @x = 2;\n\t\tUPDATE employees SET email = 'aabbel' WHERE last_name = 'Abel';\n\t\tSET @x = 3;\n\tEND //\n\nDELIMITER ;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>调用存储过程：</p>\n<pre class=\"line-numbers language-mysql\" data-language=\"mysql\"><code class=\"language-mysql\">mysql&gt; CALL UpdateDataNoCondition();\nERROR 1048 (23000): Column 'email' cannot be null\n\nmysql&gt; SELECT @x;\n+------+\n| @x   |\n+------+\n|   1  |\n+------+\n1 row in set (0.00 sec)\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>可以看到，此时@x变量的值为1。结合创建存储过程的SQL语句代码可以得出：在存储过程中未定义条件和处理程序，且当存储过程中执行的SQL语句报错时，MySQL数据库会抛出错误，并退出当前SQL逻辑，不再向下继续执行。</p>\n<h3 id=\"2-2-定义条件\"><a href=\"#2-2-定义条件\" class=\"headerlink\" title=\"2.2 定义条件\"></a>2.2 定义条件</h3><p>定义条件就是给MySQL中的错误码命名，这有助于存储的程序代码更清晰。它将一个<code>错误名字</code>和<code>指定的错误条件</code>关联起来。这个名字可以随后被用在定义处理程序的<code>DECLARE HANDLER</code>语句中。</p>\n<p>定义条件使用DECLARE语句，语法格式如下：</p>\n<pre class=\"line-numbers language-mysql\" data-language=\"mysql\"><code class=\"language-mysql\">DECLARE 错误名称 CONDITION FOR 错误码（或错误条件）<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>错误码的说明：</p>\n<ul>\n<li><code>MySQL_error_code</code>和<code>sqlstate_value</code>都可以表示MySQL的错误。<ul>\n<li>MySQL_error_code是数值类型错误代码。</li>\n<li>sqlstate_value是长度为5的字符串类型错误代码。</li>\n</ul>\n</li>\n<li>例如，在ERROR 1418 (HY000)中，1418是MySQL_error_code，’HY000’是sqlstate_value。</li>\n<li>例如，在ERROR 1142（42000）中，1142是MySQL_error_code，’42000’是sqlstate_value。</li>\n</ul>\n<p><strong>举例1：</strong>定义“Field_Not_Be_NULL”错误名与MySQL中违反非空约束的错误类型是“ERROR 1048 (23000)”对应。</p>\n<pre class=\"line-numbers language-mysql\" data-language=\"mysql\"><code class=\"language-mysql\">#使用MySQL_error_code\nDECLARE Field_Not_Be_NULL CONDITION FOR 1048;\n\n#使用sqlstate_value\nDECLARE Field_Not_Be_NULL CONDITION FOR SQLSTATE '23000';<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p><strong>举例2：</strong>定义”ERROR 1148(42000)”错误，名称为command_not_allowed。</p>\n<pre class=\"line-numbers language-mysql\" data-language=\"mysql\"><code class=\"language-mysql\">#使用MySQL_error_code\nDECLARE command_not_allowed CONDITION FOR 1148;\n\n#使用sqlstate_value\nDECLARE command_not_allowed CONDITION FOR SQLSTATE '42000';<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h3 id=\"2-3-定义处理程序\"><a href=\"#2-3-定义处理程序\" class=\"headerlink\" title=\"2.3 定义处理程序\"></a>2.3 定义处理程序</h3><p>可以为SQL执行过程中发生的某种类型的错误定义特殊的处理程序。定义处理程序时，使用DECLARE语句的语法如下：</p>\n<pre class=\"line-numbers language-mysql\" data-language=\"mysql\"><code class=\"language-mysql\">DECLARE 处理方式 HANDLER FOR 错误类型 处理语句<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<ul>\n<li><strong>处理方式</strong>：处理方式有3个取值：CONTINUE、EXIT、UNDO。<ul>\n<li><code>CONTINUE</code>：表示遇到错误不处理，继续执行。</li>\n<li><code>EXIT</code>：表示遇到错误马上退出。</li>\n<li><code>UNDO</code>：表示遇到错误后撤回之前的操作。MySQL中暂时不支持这样的操作。</li>\n</ul>\n</li>\n<li><strong>错误类型</strong>（即条件）可以有如下取值：<ul>\n<li><code>SQLSTATE '字符串错误码'</code>：表示长度为5的sqlstate_value类型的错误代码；</li>\n<li><code>MySQL_error_code</code>：匹配数值类型错误代码；</li>\n<li><code>错误名称</code>：表示DECLARE … CONDITION定义的错误条件名称。</li>\n<li><code>SQLWARNING</code>：匹配所有以01开头的SQLSTATE错误代码；</li>\n<li><code>NOT FOUND</code>：匹配所有以02开头的SQLSTATE错误代码；</li>\n<li><code>SQLEXCEPTION</code>：匹配所有没有被SQLWARNING或NOT FOUND捕获的SQLSTATE错误代码；</li>\n</ul>\n</li>\n<li><strong>处理语句</strong>：如果出现上述条件之一，则采用对应的处理方式，并执行指定的处理语句。语句可以是像“<code>SET 变量 = 值</code>”这样的简单语句，也可以是使用<code>BEGIN ... END</code>编写的复合语句。</li>\n</ul>\n<p>定义处理程序的几种方式，代码如下：</p>\n<pre class=\"line-numbers language-mysql\" data-language=\"mysql\"><code class=\"language-mysql\">#方法1：捕获sqlstate_value\nDECLARE CONTINUE HANDLER FOR SQLSTATE '42S02' SET @info = 'NO_SUCH_TABLE';\n\n#方法2：捕获mysql_error_value\nDECLARE CONTINUE HANDLER FOR 1146 SET @info = 'NO_SUCH_TABLE';\n\n#方法3：先定义条件，再调用\nDECLARE no_such_table CONDITION FOR 1146;\nDECLARE CONTINUE HANDLER FOR NO_SUCH_TABLE SET @info = 'NO_SUCH_TABLE';\n\n#方法4：使用SQLWARNING\nDECLARE EXIT HANDLER FOR SQLWARNING SET @info = 'ERROR';\n\n#方法5：使用NOT FOUND\nDECLARE EXIT HANDLER FOR NOT FOUND SET @info = 'NO_SUCH_TABLE';\n\n#方法6：使用SQLEXCEPTION\nDECLARE EXIT HANDLER FOR SQLEXCEPTION SET @info = 'ERROR';<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h3 id=\"2-4-案例解决\"><a href=\"#2-4-案例解决\" class=\"headerlink\" title=\"2.4 案例解决\"></a>2.4 案例解决</h3><p>在存储过程中，定义处理程序，捕获sqlstate_value值，当遇到MySQL_error_code值为1048时，执行CONTINUE操作，并且将@proc_value的值设置为-1。</p>\n<pre class=\"line-numbers language-mysql\" data-language=\"mysql\"><code class=\"language-mysql\">DELIMITER //\n\nCREATE PROCEDURE UpdateDataNoCondition()\n\tBEGIN\n\t\t#定义处理程序\n\t\tDECLARE CONTINUE HANDLER FOR 1048 SET @proc_value = -1;\n\t\t\n\t\tSET @x = 1;\n\t\tUPDATE employees SET email = NULL WHERE last_name = 'Abel';\n\t\tSET @x = 2;\n\t\tUPDATE employees SET email = 'aabbel' WHERE last_name = 'Abel';\n\t\tSET @x = 3;\n\tEND //\n\nDELIMITER ;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>调用过程：</p>\n<pre class=\"line-numbers language-mysql\" data-language=\"mysql\"><code class=\"language-mysql\">mysql&gt; CALL UpdateDataWithCondition();\nQuery OK, 0 rows affected (0.01 sec)\n\nmysql&gt; SELECT @x,@proc_value;\n+------+-------------+\n| @x   | @proc_value |\n+------+-------------+\n|    3 |       \t -1  |\n+------+-------------+\n1 row in set (0.00 sec)\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p><strong>举例：</strong></p>\n<p>创建一个名称为“InsertDataWithCondition”的存储过程，代码如下。</p>\n<p>在存储过程中，定义处理程序，捕获sqlstate_value值，当遇到sqlstate_value值为23000时，执行EXIT操作，并且将@proc_value的值设置为-1。</p>\n<pre class=\"line-numbers language-mysql\" data-language=\"mysql\"><code class=\"language-mysql\">#准备工作\nCREATE TABLE departments\nAS\nSELECT * FROM atguigudb.`departments`;\n\nALTER TABLE departments\nADD CONSTRAINT uk_dept_name UNIQUE(department_id);<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<pre class=\"line-numbers language-mysql\" data-language=\"mysql\"><code class=\"language-mysql\">DELIMITER //\n\nCREATE PROCEDURE InsertDataWithCondition()\n\tBEGIN\n\t\tDECLARE duplicate_entry CONDITION FOR SQLSTATE '23000' ;\n\t\tDECLARE EXIT HANDLER FOR duplicate_entry SET @proc_value = -1;\n\t\t\n\t\tSET @x = 1;\n\t\tINSERT INTO departments(department_name) VALUES('测试');\n\t\tSET @x = 2;\n\t\tINSERT INTO departments(department_name) VALUES('测试');\n\t\tSET @x = 3;\n\tEND //\n\nDELIMITER ;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>调用存储过程：</p>\n<pre class=\"line-numbers language-mysql\" data-language=\"mysql\"><code class=\"language-mysql\">mysql&gt; CALL InsertDataWithCondition();\nQuery OK, 0 rows affected (0.01 sec)\n\nmysql&gt; SELECT @x,@proc_value;\n+------+-------------+\n| @x   | @proc_value |\n+------+-------------+\n|    2 |       \t -1  |\n+------+-------------+\n1 row in set (0.00 sec)\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h2 id=\"3-流程控制\"><a href=\"#3-流程控制\" class=\"headerlink\" title=\"3. 流程控制\"></a>3. 流程控制</h2><p>解决复杂问题不可能通过一个 SQL 语句完成，我们需要执行多个 SQL 操作。流程控制语句的作用就是控制存储过程中 SQL 语句的执行顺序，是我们完成复杂操作必不可少的一部分。只要是执行的程序，流程就分为三大类：</p>\n<ul>\n<li><code>顺序结构</code>：程序从上往下依次执行</li>\n<li><code>分支结构</code>：程序按条件进行选择执行，从两条或多条路径中选择一条执行</li>\n<li><code>循环结构</code>：程序满足一定条件下，重复执行一组语句</li>\n</ul>\n<p>针对于MySQL 的流程控制语句主要有 3 类。注意：只能用于存储程序。</p>\n<ul>\n<li><code>条件判断语句</code>：IF 语句和 CASE 语句</li>\n<li><code>循环语句</code>：LOOP、WHILE 和 REPEAT 语句</li>\n<li><code>跳转语句</code>：ITERATE 和 LEAVE 语句</li>\n</ul>\n<h3 id=\"3-1-分支结构之-IF\"><a href=\"#3-1-分支结构之-IF\" class=\"headerlink\" title=\"3.1 分支结构之 IF\"></a>3.1 分支结构之 IF</h3><ul>\n<li>IF 语句的语法结构是：</li>\n</ul>\n<pre class=\"line-numbers language-mysql\" data-language=\"mysql\"><code class=\"language-mysql\">IF 表达式1 THEN 操作1\n[ELSEIF 表达式2 THEN 操作2]……\n[ELSE 操作N]\nEND IF<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n<p>根据表达式的结果为TRUE或FALSE执行相应的语句。这里“[]”中的内容是可选的。</p>\n<ul>\n<li><p>特点：① 不同的表达式对应不同的操作 ② 使用在begin end中</p>\n</li>\n<li><p><strong>举例1：</strong></p>\n<pre class=\"line-numbers language-mysql\" data-language=\"mysql\"><code class=\"language-mysql\">IF val IS NULL \n\tTHEN SELECT 'val is null';\nELSE SELECT 'val is not null';\n\nEND IF;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n</li>\n<li><p><strong>举例2：</strong>声明存储过程“update_salary_by_eid1”，定义IN参数emp_id，输入员工编号。判断该员工薪资如果低于8000元并且入职时间超过5年，就涨薪500元；否则就不变。</p>\n<pre class=\"line-numbers language-mysql\" data-language=\"mysql\"><code class=\"language-mysql\">DELIMITER //\n\nCREATE PROCEDURE update_salary_by_eid1(IN emp_id INT)\nBEGIN\n\tDECLARE emp_salary DOUBLE;\n\tDECLARE hire_year DOUBLE;\n\n\tSELECT salary INTO emp_salary FROM employees WHERE employee_id = emp_id;\n\n\tSELECT DATEDIFF(CURDATE(),hire_date)/365 INTO hire_year\n\tFROM employees WHERE employee_id = emp_id;\n\n\tIF emp_salary &lt; 8000 AND hire_year &gt; 5\n\tTHEN UPDATE employees SET salary = salary + 500 WHERE employee_id = emp_id;\n\tEND IF;\nEND //\n\n\nDELIMITER ;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n</li>\n<li><p><strong>举例3：</strong>声明存储过程“update_salary_by_eid2”，定义IN参数emp_id，输入员工编号。判断该员工薪资如果低于9000元并且入职时间超过5年，就涨薪500元；否则就涨薪100元。</p>\n<pre class=\"line-numbers language-mysql\" data-language=\"mysql\"><code class=\"language-mysql\">DELIMITER //\n\nCREATE PROCEDURE update_salary_by_eid2(IN emp_id INT)\nBEGIN\n\tDECLARE emp_salary DOUBLE;\n\tDECLARE hire_year DOUBLE;\n\n\tSELECT salary INTO emp_salary FROM employees WHERE employee_id = emp_id;\n\n\tSELECT DATEDIFF(CURDATE(),hire_date)/365 INTO hire_year\n\tFROM employees WHERE employee_id = emp_id;\n\n\tIF emp_salary &lt; 8000 AND hire_year &gt; 5\n\t\tTHEN UPDATE employees SET salary = salary + 500 WHERE employee_id = emp_id;\n\tELSE \n\t\tUPDATE employees SET salary = salary + 100 WHERE employee_id = emp_id;\n\tEND IF;\nEND //\n\n\nDELIMITER ;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n</li>\n<li><p><strong>举例4：</strong>声明存储过程“update_salary_by_eid3”，定义IN参数emp_id，输入员工编号。判断该员工薪资如果低于9000元，就更新薪资为9000元；薪资如果大于等于9000元且低于10000的，但是奖金比例为NULL的，就更新奖金比例为0.01；其他的涨薪100元。</p>\n<pre class=\"line-numbers language-mysql\" data-language=\"mysql\"><code class=\"language-mysql\">DELIMITER //\n\nCREATE PROCEDURE update_salary_by_eid3(IN emp_id INT)\nBEGIN\n\tDECLARE emp_salary DOUBLE;\n\tDECLARE bonus DECIMAL(3,2);\n\n\tSELECT salary INTO emp_salary FROM employees WHERE employee_id = emp_id;\n\tSELECT commission_pct INTO bonus FROM employees WHERE employee_id = emp_id;\n\n\tIF emp_salary &lt; 9000\n\t\tTHEN UPDATE employees SET salary = 9000 WHERE employee_id = emp_id;\n\tELSEIF emp_salary &lt; 10000 AND bonus IS NULL\n\t\tTHEN UPDATE employees SET commission_pct = 0.01 WHERE employee_id = emp_id;\n\tELSE\n\t\tUPDATE employees SET salary = salary + 100 WHERE employee_id = emp_id;\n\tEND IF;\nEND //\n\nDELIMITER ;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n</li>\n</ul>\n<h3 id=\"3-2-分支结构之-CASE\"><a href=\"#3-2-分支结构之-CASE\" class=\"headerlink\" title=\"3.2 分支结构之 CASE\"></a>3.2 分支结构之 CASE</h3><p>CASE 语句的语法结构1：</p>\n<pre class=\"line-numbers language-mysql\" data-language=\"mysql\"><code class=\"language-mysql\">#情况一：类似于switch\nCASE 表达式\nWHEN 值1 THEN 结果1或语句1(如果是语句，需要加分号) \nWHEN 值2 THEN 结果2或语句2(如果是语句，需要加分号)\n...\nELSE 结果n或语句n(如果是语句，需要加分号)\nEND [case]（如果是放在begin end中需要加上case，如果放在select后面不需要）<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>CASE 语句的语法结构2：</p>\n<pre class=\"line-numbers language-mysql\" data-language=\"mysql\"><code class=\"language-mysql\">#情况二：类似于多重if\nCASE \nWHEN 条件1 THEN 结果1或语句1(如果是语句，需要加分号) \nWHEN 条件2 THEN 结果2或语句2(如果是语句，需要加分号)\n...\nELSE 结果n或语句n(如果是语句，需要加分号)\nEND [case]（如果是放在begin end中需要加上case，如果放在select后面不需要）<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<ul>\n<li><strong>举例1：</strong></li>\n</ul>\n<p>使用CASE流程控制语句的第1种格式，判断val值等于1、等于2，或者两者都不等。</p>\n<pre class=\"line-numbers language-mysql\" data-language=\"mysql\"><code class=\"language-mysql\">CASE val\n　　　WHEN 1 THEN SELECT 'val is 1';\n　　　WHEN 2 THEN SELECT 'val is 2';\n　　　ELSE SELECT 'val is not 1 or 2';\nEND CASE;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<ul>\n<li><strong>举例2：</strong></li>\n</ul>\n<p>使用CASE流程控制语句的第2种格式，判断val是否为空、小于0、大于0或者等于0。</p>\n<pre class=\"line-numbers language-mysql\" data-language=\"mysql\"><code class=\"language-mysql\">CASE\n\tWHEN val IS NULL THEN SELECT 'val is null';\n\tWHEN val &lt; 0 THEN SELECT 'val is less than 0';\n\tWHEN val &gt; 0 THEN SELECT 'val is greater than 0';\n\tELSE SELECT 'val is 0';\nEND CASE;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<ul>\n<li><strong>举例3：</strong>声明存储过程“update_salary_by_eid4”，定义IN参数emp_id，输入员工编号。判断该员工薪资如果低于9000元，就更新薪资为9000元；薪资大于等于9000元且低于10000的，但是奖金比例为NULL的，就更新奖金比例为0.01；其他的涨薪100元。</li>\n</ul>\n<pre class=\"line-numbers language-mysql\" data-language=\"mysql\"><code class=\"language-mysql\">DELIMITER //\n\nCREATE PROCEDURE update_salary_by_eid4(IN emp_id INT)\nBEGIN\n\tDECLARE emp_sal DOUBLE;\n\tDECLARE bonus DECIMAL(3,2);\n\n\tSELECT salary INTO emp_sal FROM employees WHERE employee_id = emp_id;\n\tSELECT commission_pct INTO bonus FROM employees WHERE employee_id = emp_id;\n\n\tCASE\n\tWHEN emp_sal&lt;9000\n\t\tTHEN UPDATE employees SET salary=9000 WHERE employee_id = emp_id;\n\tWHEN emp_sal&lt;10000 AND bonus IS NULL\n\t\tTHEN UPDATE employees SET commission_pct=0.01 WHERE employee_id = emp_id;\n\tELSE\n\t\tUPDATE employees SET salary=salary+100 WHERE employee_id = emp_id;\n\tEND CASE;\nEND //\n\nDELIMITER ;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<ul>\n<li>举例4：声明存储过程update_salary_by_eid5，定义IN参数emp_id，输入员工编号。判断该员工的入职年限，如果是0年，薪资涨50；如果是1年，薪资涨100；如果是2年，薪资涨200；如果是3年，薪资涨300；如果是4年，薪资涨400；其他的涨薪500。</li>\n</ul>\n<pre class=\"line-numbers language-mysql\" data-language=\"mysql\"><code class=\"language-mysql\">DELIMITER //\n\nCREATE PROCEDURE update_salary_by_eid5(IN emp_id INT)\nBEGIN\n\tDECLARE emp_sal DOUBLE;\n\tDECLARE hire_year DOUBLE;\n\n\tSELECT salary INTO emp_sal FROM employees WHERE employee_id = emp_id;\n\t\n\tSELECT ROUND(DATEDIFF(CURDATE(),hire_date)/365) INTO hire_year FROM employees WHERE employee_id = emp_id;\n\n\tCASE hire_year\n\t\tWHEN 0 THEN UPDATE employees SET salary=salary+50 WHERE employee_id = emp_id;\n\t\tWHEN 1 THEN UPDATE employees SET salary=salary+100 WHERE employee_id = emp_id;\n\t\tWHEN 2 THEN UPDATE employees SET salary=salary+200 WHERE employee_id = emp_id;\n\t\tWHEN 3 THEN UPDATE employees SET salary=salary+300 WHERE employee_id = emp_id;\n\t\tWHEN 4 THEN UPDATE employees SET salary=salary+400 WHERE employee_id = emp_id;\n\t\tELSE UPDATE employees SET salary=salary+500 WHERE employee_id = emp_id;\n\tEND CASE;\nEND //\n\nDELIMITER ;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h3 id=\"3-3-循环结构之LOOP\"><a href=\"#3-3-循环结构之LOOP\" class=\"headerlink\" title=\"3.3 循环结构之LOOP\"></a>3.3 循环结构之LOOP</h3><p>LOOP循环语句用来重复执行某些语句。LOOP内的语句一直重复执行直到循环被退出（使用LEAVE子句），跳出循环过程。</p>\n<p>LOOP语句的基本格式如下：</p>\n<pre class=\"line-numbers language-mysql\" data-language=\"mysql\"><code class=\"language-mysql\">[loop_label:] LOOP\n\t循环执行的语句\nEND LOOP [loop_label]<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n<p>其中，loop_label表示LOOP语句的标注名称，该参数可以省略。</p>\n<p><strong>举例1：</strong></p>\n<p>使用LOOP语句进行循环操作，id值小于10时将重复执行循环过程。</p>\n<pre class=\"line-numbers language-mysql\" data-language=\"mysql\"><code class=\"language-mysql\">DECLARE id INT DEFAULT 0;\nadd_loop:LOOP\n\tSET id = id +1;\n\tIF id &gt;= 10 THEN LEAVE add_loop;\n\tEND IF;\n\nEND LOOP add_loop;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p><strong>举例2：</strong>当市场环境变好时，公司为了奖励大家，决定给大家涨工资。声明存储过程“update_salary_loop()”，声明OUT参数num，输出循环次数。存储过程中实现循环给大家涨薪，薪资涨为原来的1.1倍。直到全公司的平均薪资达到12000结束。并统计循环次数。</p>\n<pre class=\"line-numbers language-mysql\" data-language=\"mysql\"><code class=\"language-mysql\">DELIMITER //\n\nCREATE PROCEDURE update_salary_loop(OUT num INT)\nBEGIN\n\tDECLARE avg_salary DOUBLE;\n\tDECLARE loop_count INT DEFAULT 0;\n\t\n\tSELECT AVG(salary) INTO avg_salary FROM employees;\n\t\n\tlabel_loop:LOOP\n\t\tIF avg_salary &gt;= 12000 THEN LEAVE label_loop;\n\t\tEND IF;\n\t\t\n\t\tUPDATE employees SET salary = salary * 1.1;\n\t\tSET loop_count = loop_count + 1;\n\t\tSELECT AVG(salary) INTO avg_salary FROM employees;\n\tEND LOOP label_loop;\n\t\n\tSET num = loop_count;\n\nEND //\n\nDELIMITER ;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h3 id=\"3-4-循环结构之WHILE\"><a href=\"#3-4-循环结构之WHILE\" class=\"headerlink\" title=\"3.4 循环结构之WHILE\"></a>3.4 循环结构之WHILE</h3><p>WHILE语句创建一个带条件判断的循环过程。WHILE在执行语句执行时，先对指定的表达式进行判断，如果为真，就执行循环内的语句，否则退出循环。WHILE语句的基本格式如下：</p>\n<pre class=\"line-numbers language-mysql\" data-language=\"mysql\"><code class=\"language-mysql\">[while_label:] WHILE 循环条件  DO\n\t循环体\nEND WHILE [while_label];<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n<p>while_label为WHILE语句的标注名称；如果循环条件结果为真，WHILE语句内的语句或语句群被执行，直至循环条件为假，退出循环。</p>\n<p><strong>举例1：</strong></p>\n<p>WHILE语句示例，i值小于10时，将重复执行循环过程，代码如下：</p>\n<pre class=\"line-numbers language-mysql\" data-language=\"mysql\"><code class=\"language-mysql\">DELIMITER //\n\nCREATE PROCEDURE test_while()\nBEGIN\t\n\tDECLARE i INT DEFAULT 0;\n\t\n\tWHILE i &lt; 10 DO\n\t\tSET i = i + 1;\n\tEND WHILE;\n\t\n\tSELECT i;\nEND //\n\nDELIMITER ;\n#调用\nCALL test_while();<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p><strong>举例2：</strong>市场环境不好时，公司为了渡过难关，决定暂时降低大家的薪资。声明存储过程“update_salary_while()”，声明OUT参数num，输出循环次数。存储过程中实现循环给大家降薪，薪资降为原来的90%。直到全公司的平均薪资达到5000结束。并统计循环次数。</p>\n<pre class=\"line-numbers language-mysql\" data-language=\"mysql\"><code class=\"language-mysql\">DELIMITER //\n\nCREATE PROCEDURE update_salary_while(OUT num INT)\nBEGIN\n\tDECLARE avg_sal DOUBLE ;\n\tDECLARE while_count INT DEFAULT 0;\n\t\n\tSELECT AVG(salary) INTO avg_sal FROM employees;\n\t\n\tWHILE avg_sal &gt; 5000 DO\n\t\tUPDATE employees SET salary = salary * 0.9;\n\t\t\n\t\tSET while_count = while_count + 1;\n\t\t\n\t\tSELECT AVG(salary) INTO avg_sal FROM employees;\n\tEND WHILE;\n\t\n\tSET num = while_count;\n\nEND //\n\nDELIMITER ;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h3 id=\"3-5-循环结构之REPEAT\"><a href=\"#3-5-循环结构之REPEAT\" class=\"headerlink\" title=\"3.5 循环结构之REPEAT\"></a>3.5 循环结构之REPEAT</h3><p>REPEAT语句创建一个带条件判断的循环过程。与WHILE循环不同的是，REPEAT 循环首先会执行一次循环，然后在 UNTIL 中进行表达式的判断，如果满足条件就退出，即 END REPEAT；如果条件不满足，则会就继续执行循环，直到满足退出条件为止。</p>\n<p>REPEAT语句的基本格式如下：</p>\n<pre class=\"line-numbers language-mysql\" data-language=\"mysql\"><code class=\"language-mysql\">[repeat_label:] REPEAT\n　　　　循环体的语句\nUNTIL 结束循环的条件表达式\nEND REPEAT [repeat_label]<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n<p>repeat_label为REPEAT语句的标注名称，该参数可以省略；REPEAT语句内的语句或语句群被重复，直至expr_condition为真。</p>\n<p><strong>举例1：</strong></p>\n<pre class=\"line-numbers language-mysql\" data-language=\"mysql\"><code class=\"language-mysql\">DELIMITER //\n\nCREATE PROCEDURE test_repeat()\nBEGIN\t\n\tDECLARE i INT DEFAULT 0;\n\t\n\tREPEAT \n\t\tSET i = i + 1;\n\tUNTIL i &gt;= 10\n\tEND REPEAT;\n\t\n\tSELECT i;\nEND //\n\nDELIMITER ;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p><strong>举例2：</strong>当市场环境变好时，公司为了奖励大家，决定给大家涨工资。声明存储过程“update_salary_repeat()”，声明OUT参数num，输出循环次数。存储过程中实现循环给大家涨薪，薪资涨为原来的1.15倍。直到全公司的平均薪资达到13000结束。并统计循环次数。</p>\n<pre class=\"line-numbers language-mysql\" data-language=\"mysql\"><code class=\"language-mysql\">DELIMITER //\n\nCREATE PROCEDURE update_salary_repeat(OUT num INT)\nBEGIN\n\tDECLARE avg_sal DOUBLE ;\n\tDECLARE repeat_count INT DEFAULT 0;\n\t\n\tSELECT AVG(salary) INTO avg_sal FROM employees;\n\t\n\tREPEAT\n\t\tUPDATE employees SET salary = salary * 1.15;\n\t\t\n\t\tSET repeat_count = repeat_count + 1;\n\t\t\n\t\tSELECT AVG(salary) INTO avg_sal FROM employees;\n\tUNTIL avg_sal &gt;= 13000\n\tEND REPEAT;\n\t\n\tSET num = repeat_count;\n\t\t\nEND //\n\nDELIMITER ;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p><strong>对比三种循环结构：</strong></p>\n<p>1、这三种循环都可以省略名称，但如果循环中添加了循环控制语句（LEAVE或ITERATE）则必须添加名称。<br>2、<br>LOOP：一般用于实现简单的”死”循环<br>WHILE：先判断后执行<br>REPEAT：先执行后判断，无条件至少执行一次</p>\n<h3 id=\"3-6-跳转语句之LEAVE语句\"><a href=\"#3-6-跳转语句之LEAVE语句\" class=\"headerlink\" title=\"3.6 跳转语句之LEAVE语句\"></a>3.6 跳转语句之LEAVE语句</h3><p>LEAVE语句：可以用在循环语句内，或者以 BEGIN 和 END 包裹起来的程序体内，表示跳出循环或者跳出程序体的操作。如果你有面向过程的编程语言的使用经验，你可以把 LEAVE 理解为 break。</p>\n<p>基本格式如下：</p>\n<pre class=\"line-numbers language-mysql\" data-language=\"mysql\"><code class=\"language-mysql\">LEAVE 标记名<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>其中，label参数表示循环的标志。LEAVE和BEGIN … END或循环一起被使用。</p>\n<p><strong>举例1：</strong>创建存储过程 “leave_begin()”，声明INT类型的IN参数num。给BEGIN…END加标记名，并在BEGIN…END中使用IF语句判断num参数的值。</p>\n<ul>\n<li>如果num&lt;=0，则使用LEAVE语句退出BEGIN…END；</li>\n<li>如果num=1，则查询“employees”表的平均薪资；</li>\n<li>如果num=2，则查询“employees”表的最低薪资；</li>\n<li>如果num&gt;2，则查询“employees”表的最高薪资。</li>\n</ul>\n<p>IF语句结束后查询“employees”表的总人数。</p>\n<pre class=\"line-numbers language-mysql\" data-language=\"mysql\"><code class=\"language-mysql\">DELIMITER //\n\nCREATE PROCEDURE leave_begin(IN num INT)\n\n\tbegin_label: BEGIN\n\t\tIF num&lt;=0 \n\t\t\tTHEN LEAVE begin_label;\n\t\tELSEIF num=1 \n\t\t\tTHEN SELECT AVG(salary) FROM employees;\n\t\tELSEIF num=2 \n\t\t\tTHEN SELECT MIN(salary) FROM employees;\n\t\tELSE \n\t\t\tSELECT MAX(salary) FROM employees;\n\t\tEND IF;\n\t\t\n\t\tSELECT COUNT(*) FROM employees;\n\tEND //\n\n\nDELIMITER ;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p><strong>举例2：</strong></p>\n<p>当市场环境不好时，公司为了渡过难关，决定暂时降低大家的薪资。声明存储过程“leave_while()”，声明OUT参数num，输出循环次数，存储过程中使用WHILE循环给大家降低薪资为原来薪资的90%，直到全公司的平均薪资小于等于10000，并统计循环次数。</p>\n<pre class=\"line-numbers language-mysql\" data-language=\"mysql\"><code class=\"language-mysql\">DELIMITER //\nCREATE PROCEDURE leave_while(OUT num INT)\n\nBEGIN \n\t#\n\tDECLARE avg_sal DOUBLE;#记录平均工资\n\tDECLARE while_count INT DEFAULT 0; #记录循环次数\n\t\n\tSELECT AVG(salary) INTO avg_sal FROM employees; #① 初始化条件\n\t\n\twhile_label:WHILE TRUE DO  #② 循环条件\n\t\t\n\t\t#③ 循环体\n\t\tIF avg_sal &lt;= 10000 THEN\n\t\t\tLEAVE while_label;\n\t\tEND IF;\n\t\t\n\t\tUPDATE employees SET salary  = salary * 0.9;\n\t\tSET while_count = while_count + 1;\n\t\t\n\t\t#④ 迭代条件\n\t\tSELECT AVG(salary) INTO avg_sal FROM employees;\n\t\n\tEND WHILE;\n\t\n\t#赋值\n\tSET num = while_count;\n\nEND //\n\nDELIMITER ;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h3 id=\"3-7-跳转语句之ITERATE语句\"><a href=\"#3-7-跳转语句之ITERATE语句\" class=\"headerlink\" title=\"3.7 跳转语句之ITERATE语句\"></a>3.7 跳转语句之ITERATE语句</h3><p>ITERATE语句：只能用在循环语句（LOOP、REPEAT和WHILE语句）内，表示重新开始循环，将执行顺序转到语句段开头处。如果你有面向过程的编程语言的使用经验，你可以把 ITERATE 理解为 continue，意思为“再次循环”。</p>\n<p>语句基本格式如下：</p>\n<pre class=\"line-numbers language-mysql\" data-language=\"mysql\"><code class=\"language-mysql\">ITERATE label<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>label参数表示循环的标志。ITERATE语句必须跟在循环标志前面。</p>\n<p><strong>举例：</strong>  定义局部变量num，初始值为0。循环结构中执行num + 1操作。</p>\n<ul>\n<li>如果num &lt; 10，则继续执行循环；</li>\n<li>如果num &gt; 15，则退出循环结构；</li>\n</ul>\n<pre class=\"line-numbers language-mysql\" data-language=\"mysql\"><code class=\"language-mysql\">DELIMITER //\n\nCREATE PROCEDURE test_iterate()\n\nBEGIN\n\tDECLARE num INT DEFAULT 0;\n\t\n\tmy_loop:LOOP\n\t\tSET num = num + 1;\n\t\n\t\tIF num &lt; 10 \n\t\t\tTHEN ITERATE my_loop;\n\t\tELSEIF num &gt; 15 \n\t\t\tTHEN LEAVE my_loop;\n\t\tEND IF;\n\t\n\t\tSELECT '尚硅谷：让天下没有难学的技术';\n\t\n\tEND LOOP my_loop;\n\nEND //\n\nDELIMITER ;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h2 id=\"4-游标\"><a href=\"#4-游标\" class=\"headerlink\" title=\"4. 游标\"></a>4. 游标</h2><h3 id=\"4-1-什么是游标（或光标）\"><a href=\"#4-1-什么是游标（或光标）\" class=\"headerlink\" title=\"4.1 什么是游标（或光标）\"></a>4.1 什么是游标（或光标）</h3><p>虽然我们也可以通过筛选条件 WHERE 和 HAVING，或者是限定返回记录的关键字 LIMIT 返回一条记录，但是，却无法在结果集中像指针一样，向前定位一条记录、向后定位一条记录，或者是<code>随意定位到某一条记录</code>，并对记录的数据进行处理。</p>\n<p>这个时候，就可以用到游标。游标，提供了一种灵活的操作方式，让我们能够对结果集中的每一条记录进行定位，并对指向的记录中的数据进行操作的数据结构。<strong>游标让 SQL 这种面向集合的语言有了面向过程开发的能力。</strong></p>\n<p>在 SQL 中，游标是一种临时的数据库对象，可以指向存储在数据库表中的数据行指针。这里游标<code>充当了指针的作用</code>，我们可以通过操作游标来对数据行进行操作。</p>\n<p>MySQL中游标可以在存储过程和函数中使用。</p>\n<p>比如，我们查询了 employees 数据表中工资高于15000的员工都有哪些：</p>\n<pre class=\"line-numbers language-mysql\" data-language=\"mysql\"><code class=\"language-mysql\">SELECT employee_id,last_name,salary FROM employees\nWHERE salary &gt; 15000;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n<p> <img src=\"D:\\极客时间\\尚硅谷大数据学科全套教程（总185.88GB）\\1.尚硅谷大数据学科--核心基础\\MYSQL\\课件md版\\01_课件\\images\\image-20211111182656990.png\" alt=\"image-20211111182656990\"></p>\n<p>这里我们就可以通过游标来操作数据行，如图所示此时游标所在的行是“108”的记录，我们也可以在结果集上滚动游标，指向结果集中的任意一行。</p>\n<h3 id=\"4-2-使用游标步骤\"><a href=\"#4-2-使用游标步骤\" class=\"headerlink\" title=\"4.2 使用游标步骤\"></a>4.2 使用游标步骤</h3><p>游标必须在声明处理程序之前被声明，并且变量和条件还必须在声明游标或处理程序之前被声明。</p>\n<p>如果我们想要使用游标，一般需要经历四个步骤。不同的 DBMS 中，使用游标的语法可能略有不同。</p>\n<p><strong>第一步，声明游标</strong></p>\n<p>在MySQL中，使用DECLARE关键字来声明游标，其语法的基本形式如下：</p>\n<pre class=\"line-numbers language-mysql\" data-language=\"mysql\"><code class=\"language-mysql\">DECLARE cursor_name CURSOR FOR select_statement; <span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>这个语法适用于 MySQL，SQL Server，DB2 和 MariaDB。如果是用 Oracle 或者 PostgreSQL，需要写成：</p>\n<pre class=\"line-numbers language-mysql\" data-language=\"mysql\"><code class=\"language-mysql\">DECLARE cursor_name CURSOR IS select_statement;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>要使用 SELECT 语句来获取数据结果集，而此时还没有开始遍历数据，这里 select_statement 代表的是 SELECT 语句，返回一个用于创建游标的结果集。</p>\n<p>比如：</p>\n<pre class=\"line-numbers language-mysql\" data-language=\"mysql\"><code class=\"language-mysql\">DECLARE cur_emp CURSOR FOR \nSELECT employee_id,salary FROM employees;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n<pre class=\"line-numbers language-mysql\" data-language=\"mysql\"><code class=\"language-mysql\">DECLARE cursor_fruit CURSOR FOR \nSELECT f_name, f_price FROM fruits ;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n<p><strong>第二步，打开游标</strong></p>\n<p>打开游标的语法如下：</p>\n<pre class=\"line-numbers language-mysql\" data-language=\"mysql\"><code class=\"language-mysql\">OPEN cursor_name<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>当我们定义好游标之后，如果想要使用游标，必须先打开游标。打开游标的时候 SELECT 语句的查询结果集就会送到游标工作区，为后面游标的<code>逐条读取</code>结果集中的记录做准备。</p>\n<pre class=\"line-numbers language-mysql\" data-language=\"mysql\"><code class=\"language-mysql\">OPEN　cur_emp ;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p><strong>第三步，使用游标（从游标中取得数据）</strong></p>\n<p>语法如下：</p>\n<pre class=\"line-numbers language-mysql\" data-language=\"mysql\"><code class=\"language-mysql\">FETCH cursor_name INTO var_name [, var_name] ...<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>这句的作用是使用 cursor_name 这个游标来读取当前行，并且将数据保存到 var_name 这个变量中，游标指针指到下一行。如果游标读取的数据行有多个列名，则在 INTO 关键字后面赋值给多个变量名即可。</p>\n<p>注意：var_name必须在声明游标之前就定义好。</p>\n<pre class=\"line-numbers language-mysql\" data-language=\"mysql\"><code class=\"language-mysql\">FETCH　cur_emp INTO emp_id, emp_sal ;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>注意：<strong>游标的查询结果集中的字段数，必须跟 INTO 后面的变量数一致</strong>，否则，在存储过程执行的时候，MySQL 会提示错误。</p>\n<p><strong>第四步，关闭游标</strong></p>\n<pre class=\"line-numbers language-mysql\" data-language=\"mysql\"><code class=\"language-mysql\">CLOSE cursor_name<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>有 OPEN 就会有 CLOSE，也就是打开和关闭游标。当我们使用完游标后需要关闭掉该游标。因为游标会<code>占用系统资源</code>，如果不及时关闭，<strong>游标会一直保持到存储过程结束</strong>，影响系统运行的效率。而关闭游标的操作，会释放游标占用的系统资源。</p>\n<p>关闭游标之后，我们就不能再检索查询结果中的数据行，如果需要检索只能再次打开游标。</p>\n<pre class=\"line-numbers language-mysql\" data-language=\"mysql\"><code class=\"language-mysql\">CLOSE　cur_emp;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<h3 id=\"4-3-举例\"><a href=\"#4-3-举例\" class=\"headerlink\" title=\"4.3 举例\"></a>4.3 举例</h3><p>创建存储过程“get_count_by_limit_total_salary()”，声明IN参数 limit_total_salary，DOUBLE类型；声明OUT参数total_count，INT类型。函数的功能可以实现累加薪资最高的几个员工的薪资值，直到薪资总和达到limit_total_salary参数的值，返回累加的人数给total_count。</p>\n<pre class=\"line-numbers language-mysql\" data-language=\"mysql\"><code class=\"language-mysql\">DELIMITER //\n\nCREATE PROCEDURE get_count_by_limit_total_salary(IN limit_total_salary DOUBLE,OUT total_count INT)\n\nBEGIN\n\tDECLARE sum_salary DOUBLE DEFAULT 0;  #记录累加的总工资\n\tDECLARE cursor_salary DOUBLE DEFAULT 0; #记录某一个工资值\n\tDECLARE emp_count INT DEFAULT 0; #记录循环个数\n\t#定义游标\n\tDECLARE emp_cursor CURSOR FOR SELECT salary FROM employees ORDER BY salary DESC;\n\t#打开游标\n\tOPEN emp_cursor;\n\t\n\tREPEAT\n\t\t#使用游标（从游标中获取数据）\n\t\tFETCH emp_cursor INTO cursor_salary;\n\t\t\n\t\tSET sum_salary = sum_salary + cursor_salary;\n\t\tSET emp_count = emp_count + 1;\n\t\t\n\t\tUNTIL sum_salary &gt;= limit_total_salary\n\tEND REPEAT;\n\t\n\tSET total_count = emp_count;\n\t#关闭游标\n\tCLOSE emp_cursor;\n\t\nEND //\n\nDELIMITER ;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h3 id=\"4-5-小结\"><a href=\"#4-5-小结\" class=\"headerlink\" title=\"4.5 小结\"></a>4.5 小结</h3><p>游标是 MySQL 的一个重要的功能，为<code>逐条读取</code>结果集中的数据，提供了完美的解决方案。跟在应用层面实现相同的功能相比，游标可以在存储程序中使用，效率高，程序也更加简洁。</p>\n<p>但同时也会带来一些性能问题，比如在使用游标的过程中，会对数据行进行<code>加锁</code>，这样在业务并发量大的时候，不仅会影响业务之间的效率，还会<code>消耗系统资源</code>，造成内存不足，这是因为游标是在内存中进行的处理。</p>\n<p>建议：养成用完之后就关闭的习惯，这样才能提高系统的整体效率。</p>\n<h2 id=\"补充：MySQL-8-0的新特性—全局变量的持久化\"><a href=\"#补充：MySQL-8-0的新特性—全局变量的持久化\" class=\"headerlink\" title=\"补充：MySQL 8.0的新特性—全局变量的持久化\"></a>补充：MySQL 8.0的新特性—全局变量的持久化</h2><p>在MySQL数据库中，全局变量可以通过SET GLOBAL语句来设置。例如，设置服务器语句超时的限制，可以通过设置系统变量max_execution_time来实现：</p>\n<pre class=\"line-numbers language-mysql\" data-language=\"mysql\"><code class=\"language-mysql\">SET GLOBAL MAX_EXECUTION_TIME=2000;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>使用SET GLOBAL语句设置的变量值只会<code>临时生效</code>。<code>数据库重启</code>后，服务器又会从MySQL配置文件中读取变量的默认值。<br>MySQL 8.0版本新增了<code>SET PERSIST</code>命令。例如，设置服务器的最大连接数为1000：</p>\n<pre class=\"line-numbers language-mysql\" data-language=\"mysql\"><code class=\"language-mysql\">SET PERSIST global max_connections = 1000;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>MySQL会将该命令的配置保存到数据目录下的<code>mysqld-auto.cnf</code>文件中，下次启动时会读取该文件，用其中的配置来覆盖默认的配置文件。</p>\n<p>举例：</p>\n<p>查看全局变量max_connections的值，结果如下：</p>\n<pre class=\"line-numbers language-mysql\" data-language=\"mysql\"><code class=\"language-mysql\">mysql&gt; show variables like '%max_connections%';\n+------------------------+-------+\n| Variable_name          | Value |\n+------------------------+-------+\n| max_connections        | 151   |\n| mysqlx_max_connections | 100   |\n+------------------------+-------+\n2 rows in set, 1 warning (0.00 sec)<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>设置全局变量max_connections的值：</p>\n<pre class=\"line-numbers language-mysql\" data-language=\"mysql\"><code class=\"language-mysql\">mysql&gt; set persist max_connections=1000;\nQuery OK, 0 rows affected (0.00 sec)<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n<p><code>重启MySQL服务器</code>，再次查询max_connections的值：</p>\n<pre class=\"line-numbers language-mysql\" data-language=\"mysql\"><code class=\"language-mysql\">mysql&gt; show variables like '%max_connections%';\n+------------------------+-------+\n| Variable_name          | Value |\n+------------------------+-------+\n| max_connections        | 1000  |\n| mysqlx_max_connections | 100   |\n+------------------------+-------+\n2 rows in set, 1 warning (0.00 sec)<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h1 id=\"第17章-触发器\"><a href=\"#第17章-触发器\" class=\"headerlink\" title=\"第17章_触发器\"></a>第17章_触发器</h1><p>讲师：尚硅谷-宋红康（江湖人称：康师傅）</p>\n<p>官网：<a href=\"http://www.atguigu.com/\">http://www.atguigu.com</a></p>\n<hr>\n<p>在实际开发中，我们经常会遇到这样的情况：有 2 个或者多个相互关联的表，如<code>商品信息</code>和<code>库存信息</code>分别存放在 2 个不同的数据表中，我们在添加一条新商品记录的时候，为了保证数据的完整性，必须同时在库存表中添加一条库存记录。</p>\n<p>这样一来，我们就必须把这两个关联的操作步骤写到程序里面，而且要用<code>事务</code>包裹起来，确保这两个操作成为一个<code>原子操作</code>，要么全部执行，要么全部不执行。要是遇到特殊情况，可能还需要对数据进行手动维护，这样就很<code>容易忘记其中的一步</code>，导致数据缺失。</p>\n<p>这个时候，咱们可以使用触发器。<strong>你可以创建一个触发器，让商品信息数据的插入操作自动触发库存数据的插入操作。</strong>这样一来，就不用担心因为忘记添加库存数据而导致的数据缺失了。</p>\n<h2 id=\"1-触发器概述\"><a href=\"#1-触发器概述\" class=\"headerlink\" title=\"1. 触发器概述\"></a>1. 触发器概述</h2><p>MySQL从<code>5.0.2</code>版本开始支持触发器。MySQL的触发器和存储过程一样，都是嵌入到MySQL服务器的一段程序。</p>\n<p>触发器是由<code>事件来触发</code>某个操作，这些事件包括<code>INSERT</code>、<code>UPDATE</code>、<code>DELETE</code>事件。所谓事件就是指用户的动作或者触发某项行为。如果定义了触发程序，当数据库执行这些语句时候，就相当于事件发生了，就会<code>自动</code>激发触发器执行相应的操作。</p>\n<p>当对数据表中的数据执行插入、更新和删除操作，需要自动执行一些数据库逻辑时，可以使用触发器来实现。</p>\n<h2 id=\"2-触发器的创建\"><a href=\"#2-触发器的创建\" class=\"headerlink\" title=\"2. 触发器的创建\"></a>2. 触发器的创建</h2><h3 id=\"2-1-创建触发器语法\"><a href=\"#2-1-创建触发器语法\" class=\"headerlink\" title=\"2.1 创建触发器语法\"></a>2.1 创建触发器语法</h3><p>创建触发器的语法结构是：</p>\n<pre class=\"line-numbers language-mysql\" data-language=\"mysql\"><code class=\"language-mysql\">CREATE TRIGGER 触发器名称 \n{BEFORE|AFTER} {INSERT|UPDATE|DELETE} ON 表名 \nFOR EACH ROW \n触发器执行的语句块;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n<p>说明：</p>\n<ul>\n<li><code>表名</code>：表示触发器监控的对象。</li>\n<li><code>BEFORE|AFTER</code>：表示触发的时间。BEFORE 表示在事件之前触发；AFTER 表示在事件之后触发。</li>\n<li><code>INSERT|UPDATE|DELETE</code>：表示触发的事件。<ul>\n<li>INSERT 表示插入记录时触发；</li>\n<li>UPDATE 表示更新记录时触发；</li>\n<li>DELETE 表示删除记录时触发。</li>\n</ul>\n</li>\n</ul>\n<ul>\n<li><code>触发器执行的语句块</code>：可以是单条SQL语句，也可以是由BEGIN…END结构组成的复合语句块。</li>\n</ul>\n<h3 id=\"2-2-代码举例\"><a href=\"#2-2-代码举例\" class=\"headerlink\" title=\"2.2 代码举例\"></a>2.2 代码举例</h3><p><strong>举例1：</strong></p>\n<p>1、创建数据表：</p>\n<pre class=\"line-numbers language-mysql\" data-language=\"mysql\"><code class=\"language-mysql\">CREATE TABLE test_trigger (\nid INT PRIMARY KEY AUTO_INCREMENT,\nt_note VARCHAR(30)\n);\n\n\nCREATE TABLE test_trigger_log (\nid INT PRIMARY KEY AUTO_INCREMENT,\nt_log VARCHAR(30)\n);<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>2、创建触发器：创建名称为before_insert的触发器，向test_trigger数据表插入数据之前，向test_trigger_log数据表中插入before_insert的日志信息。</p>\n<pre class=\"line-numbers language-mysql\" data-language=\"mysql\"><code class=\"language-mysql\">DELIMITER //\n\nCREATE TRIGGER before_insert\nBEFORE INSERT ON test_trigger \nFOR EACH ROW\nBEGIN\n\tINSERT INTO test_trigger_log (t_log)\n\tVALUES('before_insert');\n\nEND //\n\nDELIMITER ;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>3、向test_trigger数据表中插入数据</p>\n<pre class=\"line-numbers language-mysql\" data-language=\"mysql\"><code class=\"language-mysql\">INSERT INTO test_trigger (t_note) VALUES ('测试 BEFORE INSERT 触发器');<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>4、查看test_trigger_log数据表中的数据</p>\n<pre class=\"line-numbers language-mysql\" data-language=\"mysql\"><code class=\"language-mysql\">mysql&gt; SELECT * FROM test_trigger_log;\n+----+---------------+\n| id | t_log         |\n+----+---------------+\n|  1 | before_insert |\n+----+---------------+\n1 row in set (0.00 sec)<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p><strong>举例2：</strong></p>\n<p>1、创建名称为after_insert的触发器，向test_trigger数据表插入数据之后，向test_trigger_log数据表中插入after_insert的日志信息。</p>\n<pre class=\"line-numbers language-mysql\" data-language=\"mysql\"><code class=\"language-mysql\">DELIMITER //\n\nCREATE TRIGGER after_insert\nAFTER INSERT ON test_trigger\nFOR EACH ROW\nBEGIN\n\tINSERT INTO test_trigger_log (t_log)\n\tVALUES('after_insert');\nEND //\n\nDELIMITER ;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>2、向test_trigger数据表中插入数据。</p>\n<pre class=\"line-numbers language-mysql\" data-language=\"mysql\"><code class=\"language-mysql\">INSERT INTO test_trigger (t_note) VALUES ('测试 AFTER INSERT 触发器');<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>3、查看test_trigger_log数据表中的数据</p>\n<pre class=\"line-numbers language-mysql\" data-language=\"mysql\"><code class=\"language-mysql\">mysql&gt; SELECT * FROM test_trigger_log;\n+----+---------------+\n| id | t_log         |\n+----+---------------+\n|  1 | before_insert |\n|  2 | before_insert |\n|  3 | after_insert  |\n+----+---------------+\n3 rows in set (0.00 sec)<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p><strong>举例3：</strong>定义触发器“salary_check_trigger”，基于员工表“employees”的INSERT事件，在INSERT之前检查将要添加的新员工薪资是否大于他领导的薪资，如果大于领导薪资，则报sqlstate_value为’HY000’的错误，从而使得添加失败。</p>\n<pre class=\"line-numbers language-mysql\" data-language=\"mysql\"><code class=\"language-mysql\">DELIMITER //\n\nCREATE TRIGGER salary_check_trigger\nBEFORE INSERT ON employees FOR EACH ROW\nBEGIN\n\tDECLARE mgrsalary DOUBLE;\n\tSELECT salary INTO mgrsalary FROM employees WHERE employee_id = NEW.manager_id;\n\n\tIF NEW.salary &gt; mgrsalary THEN\n\t\tSIGNAL SQLSTATE 'HY000' SET MESSAGE_TEXT = '薪资高于领导薪资错误';\n\tEND IF;\nEND //\n\nDELIMITER ;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>上面触发器声明过程中的NEW关键字代表INSERT添加语句的新记录。</p>\n<h2 id=\"3-查看、删除触发器\"><a href=\"#3-查看、删除触发器\" class=\"headerlink\" title=\"3. 查看、删除触发器\"></a>3. 查看、删除触发器</h2><h3 id=\"3-1-查看触发器\"><a href=\"#3-1-查看触发器\" class=\"headerlink\" title=\"3.1 查看触发器\"></a>3.1 查看触发器</h3><p>查看触发器是查看数据库中已经存在的触发器的定义、状态和语法信息等。</p>\n<p>方式1：查看当前数据库的所有触发器的定义</p>\n<pre class=\"line-numbers language-mysql\" data-language=\"mysql\"><code class=\"language-mysql\">SHOW TRIGGERS\\G<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>方式2：查看当前数据库中某个触发器的定义</p>\n<pre class=\"line-numbers language-mysql\" data-language=\"mysql\"><code class=\"language-mysql\">SHOW CREATE TRIGGER 触发器名<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>方式3：从系统库information_schema的TRIGGERS表中查询“salary_check_trigger”触发器的信息。</p>\n<pre class=\"line-numbers language-mysql\" data-language=\"mysql\"><code class=\"language-mysql\">SELECT * FROM information_schema.TRIGGERS;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<h3 id=\"3-2-删除触发器\"><a href=\"#3-2-删除触发器\" class=\"headerlink\" title=\"3.2 删除触发器\"></a>3.2 删除触发器</h3><p>触发器也是数据库对象，删除触发器也用DROP语句，语法格式如下：</p>\n<pre class=\"line-numbers language-mysql\" data-language=\"mysql\"><code class=\"language-mysql\">DROP TRIGGER  IF EXISTS 触发器名称;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<h2 id=\"4-触发器的优缺点\"><a href=\"#4-触发器的优缺点\" class=\"headerlink\" title=\"4. 触发器的优缺点\"></a>4. 触发器的优缺点</h2><h3 id=\"4-1-优点\"><a href=\"#4-1-优点\" class=\"headerlink\" title=\"4.1 优点\"></a>4.1 优点</h3><p><strong>1、触发器可以确保数据的完整性</strong>。</p>\n<p>假设我们用<code>进货单头表</code>（demo.importhead）来保存进货单的总体信息，包括进货单编号、供货商编号、仓库编号、总计进货数量、总计进货金额和验收日期。</p>\n<p> <img src=\"D:\\极客时间\\尚硅谷大数据学科全套教程（总185.88GB）\\1.尚硅谷大数据学科--核心基础\\MYSQL\\课件md版\\01_课件\\images\\image-20211010233336012.png\" alt=\"image-20211010233336012\"></p>\n<p>用<code>进货单明细表</code>（demo.importdetails）来保存进货商品的明细，包括进货单编号、商品编号、进货数量、进货价格和进货金额。</p>\n<p> <img src=\"D:\\极客时间\\尚硅谷大数据学科全套教程（总185.88GB）\\1.尚硅谷大数据学科--核心基础\\MYSQL\\课件md版\\01_课件\\images\\image-20211010233344125.png\" alt=\"image-20211010233344125\"></p>\n<p>每当我们录入、删除和修改一条进货单明细数据的时候，进货单明细表里的数据就会发生变动。这个时候，在进货单头表中的总计数量和总计金额就必须重新计算，否则，进货单头表中的总计数量和总计金额就不等于进货单明细表中数量合计和金额合计了，这就是数据不一致。</p>\n<p>为了解决这个问题，我们就可以使用触发器，<strong>规定每当进货单明细表有数据插入、修改和删除的操作时，自动触发 2 步操作：</strong></p>\n<p>1）重新计算进货单明细表中的数量合计和金额合计；</p>\n<p>2）用第一步中计算出来的值更新进货单头表中的合计数量与合计金额。</p>\n<p>这样一来，进货单头表中的合计数量与合计金额的值，就始终与进货单明细表中计算出来的合计数量与合计金额的值相同，数据就是一致的，不会互相矛盾。</p>\n<p><strong>2、触发器可以帮助我们记录操作日志。</strong></p>\n<p>利用触发器，可以具体记录什么时间发生了什么。比如，记录修改会员储值金额的触发器，就是一个很好的例子。这对我们还原操作执行时的具体场景，更好地定位问题原因很有帮助。</p>\n<p><strong>3、触发器还可以用在操作数据前，对数据进行合法性检查。</strong></p>\n<p>比如，超市进货的时候，需要库管录入进货价格。但是，人为操作很容易犯错误，比如说在录入数量的时候，把条形码扫进去了；录入金额的时候，看串了行，录入的价格远超售价，导致账面上的巨亏……这些都可以通过触发器，在实际插入或者更新操作之前，对相应的数据进行检查，及时提示错误，防止错误数据进入系统。</p>\n<h3 id=\"4-2-缺点\"><a href=\"#4-2-缺点\" class=\"headerlink\" title=\"4.2 缺点\"></a>4.2 缺点</h3><p><strong>1、触发器最大的一个问题就是可读性差。</strong></p>\n<p>因为触发器存储在数据库中，并且由事件驱动，这就意味着触发器有可能<code>不受应用层的控制</code>。这对系统维护是非常有挑战的。</p>\n<p>比如，创建触发器用于修改会员储值操作。如果触发器中的操作出了问题，会导致会员储值金额更新失败。我用下面的代码演示一下：</p>\n<pre class=\"line-numbers language-mysql\" data-language=\"mysql\"><code class=\"language-mysql\">mysql&gt; update demo.membermaster set memberdeposit=20 where memberid = 2;\nERROR 1054 (42S22): Unknown column 'aa' in 'field list'<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n<p>结果显示，系统提示错误，字段“aa”不存在。</p>\n<p>这是因为，触发器中的数据插入操作多了一个字段，系统提示错误。可是，如果你不了解这个触发器，很可能会认为是更新语句本身的问题，或者是会员信息表的结构出了问题。说不定你还会给会员信息表添加一个叫“aa”的字段，试图解决这个问题，结果只能是白费力。</p>\n<p><strong>2、相关数据的变更，可能会导致触发器出错。</strong></p>\n<p>特别是数据表结构的变更，都可能会导致触发器出错，进而影响数据操作的正常运行。这些都会由于触发器本身的隐蔽性，影响到应用中错误原因排查的效率。</p>\n<h3 id=\"4-3-注意点\"><a href=\"#4-3-注意点\" class=\"headerlink\" title=\"4.3 注意点\"></a>4.3 注意点</h3><p>注意，如果在子表中定义了外键约束，并且外键指定了ON UPDATE/DELETE CASCADE/SET NULL子句，此时修改父表被引用的键值或删除父表被引用的记录行时，也会引起子表的修改和删除操作，此时基于子表的UPDATE和DELETE语句定义的触发器并不会被激活。</p>\n<p>例如：基于子表员工表（t_employee）的DELETE语句定义了触发器t1，而子表的部门编号（did）字段定义了外键约束引用了父表部门表（t_department）的主键列部门编号（did），并且该外键加了“ON DELETE SET NULL”子句，那么如果此时删除父表部门表（t_department）在子表员工表（t_employee）有匹配记录的部门记录时，会引起子表员工表（t_employee）匹配记录的部门编号（did）修改为NULL，但是此时不会激活触发器t1。只有直接对子表员工表（t_employee）执行DELETE语句时才会激活触发器t1。</p>\n<h1 id=\"MySQL8新特性\"><a href=\"#MySQL8新特性\" class=\"headerlink\" title=\"MySQL8新特性\"></a>MySQL8新特性</h1><p><code>MySQL从5.7版本直接跳跃发布了8.0版本</code>，可见这是一个令人兴奋的里程碑版本。MySQL 8版本在功能上做了显著的改进与增强，开发者对MySQL的源代码进行了重构，最突出的一点是多MySQL Optimizer优化器进行了改进。不仅在速度上得到了改善，还为用户带来了更好的性能和更棒的体验。</p>\n<h2 id=\"1-新特性概述\"><a href=\"#1-新特性概述\" class=\"headerlink\" title=\"1. 新特性概述\"></a>1. 新特性概述</h2><h3 id=\"1-1-MySQL8-0-新增特性\"><a href=\"#1-1-MySQL8-0-新增特性\" class=\"headerlink\" title=\"1.1 MySQL8.0 新增特性\"></a>1.1 MySQL8.0 新增特性</h3><p><strong>1. 更简便的NoSQL支持</strong><br>NoSQL泛指非关系型数据库和数据存储。随着互联网平台的规模飞速发展，传统的关系型数据库已经越来越不能满足需求。从5.6版本开始，MySQL就开始支持简单的NoSQL存储功能。MySQL 8对这一功能做了优化，以更灵活的方式实现NoSQL功能，不再依赖模式（schema）。</p>\n<p><strong>2. 更好的索引</strong><br>在查询中，正确地使用索引可以提高查询的效率。MySQL 8中新增了<code>隐藏索引</code>和<code>降序索引</code>。隐藏索引可以用来测试去掉索引对查询性能的影响。在查询中混合存在多列索引时，使用降序索引可以提高查询的性能。</p>\n<p><strong>3.更完善的JSON支持</strong><br>MySQL从5.7开始支持原生JSON数据的存储，MySQL 8对这一功能做了优化，增加了聚合函数<code>JSON_ARRAYAGG()</code>和<code>JSON_OBJECTAGG()</code>，将参数聚合为JSON数组或对象，新增了行内操作符 -&gt;&gt;，是列路径运算符 -&gt;的增强，对JSON排序做了提升，并优化了JSON的更新操作。</p>\n<p><strong>4.安全和账户管理</strong><br>MySQL 8中新增了<code>caching_sha2_password</code> 授权插件、角色、密码历史记录和FIPS模式支持，这些特性提高了数据库的安全性和性能，使数据库管理员能够更灵活地进行账户管理工作。</p>\n<p><strong>5.InnoDB的变化</strong><br><code>InnoDB是MySQL默认的存储引擎</code>，是事务型数据库的首选引擎，支持事务安全表（ACID），支持行锁定和外键。在MySQL 8 版本中，InnoDB在自增、索引、加密、死锁、共享锁等方面做了大量的<code>改进和优化</code>，并且支持原子数据定义语言（DDL），提高了数据安全性，对事务提供更好的支持。</p>\n<p><strong>6.数据字典</strong><br>在之前的MySQL版本中，字典数据都存储在元数据文件和非事务表中。从MySQL 8开始新增了事务数据字典，在这个字典里存储着数据库对象信息，这些数据字典存储在内部事务表中。</p>\n<p><strong>7. 原子数据定义语句</strong><br>MySQL 8开始支持原子数据定义语句（Automic DDL），即<code>原子DDL</code>。目前，只有InnoDB存储引擎支持原子DDL。原子数据定义语句（DDL）将与DDL操作相关的数据字典更新、存储引擎操作、二进制日志写入结合到一个单独的原子事务中，这使得即使服务器崩溃，事务也会提交或回滚。<br>使用支持原子操作的存储引擎所创建的表，在执行DROP TABLE、CREATE TABLE、ALTER TABLE、 RENAME TABLE、TRUNCATE TABLE、CREATE TABLESPACE、DROP TABLESPACE等操作时，都支持原子操作，即事务要么完全操作成功，要么失败后回滚，不再进行部分提交。<br>对于从MySQL 5.7复制到MySQL 8 版本中的语句，可以添加<code>IF EXISTS</code>或<code>IF NOT EXISTS</code>语句来避免发生错误。</p>\n<p><strong>8.资源管理</strong><br>MySQL 8开始支持创建和管理资源组，允许将服务器内运行的线程分配给特定的分组，以便线程根据组内可用资源执行。组属性能够控制组内资源，启用或限制组内资源消耗。数据库管理员能够根据不同的工作负载适当地更改这些属性。<br>目前，CPU时间是可控资源，由“虚拟CPU”这个概念来表示，此术语包含CPU的核心数，超线程，硬件线程等等。服务器在启动时确定可用的虚拟CPU数量。拥有对应权限的数据库管理员可以将这些CPU与资源组关联，并为资源组分配线程。<br>资源组组件为MySQL中的资源组管理提供了SQL接口。资源组的属性用于定义资源组。MySQL中存在两个默认组，系统组和用户组，默认的组不能被删除，其属性也不能被更改。对于用户自定义的组，资源组创建时可初始化所有的属性，除去名字和类型，其他属性都可在创建之后进行更改。<br>在一些平台下，或进行了某些MySQL的配置时，资源管理的功能将受到限制，甚至不可用。例如，如果安装了线程池插件，或者使用的是macOS系统，资源管理将处于不可用状态。在FreeBSD和Solaris系统中，资源线程优先级将失效。在Linux系统中，只有配置了CAP_SYS_NICE属性，资源管理优先级才能发挥作用。</p>\n<p><strong>9.字符集支持</strong><br>MySQL 8中默认的字符集由<code>latin1</code>更改为<code>utf8mb4</code>，并首次增加了日语所特定使用的集合，utf8mb4_ja_0900_as_cs。</p>\n<p><strong>10.优化器增强</strong><br>MySQL优化器开始支持隐藏索引和降序索引。隐藏索引不会被优化器使用，验证索引的必要性时不需要删除索引，先将索引隐藏，如果优化器性能无影响就可以真正地删除索引。降序索引允许优化器对多个列进行排序，并且允许排序顺序不一致。</p>\n<p><strong>11.公用表表达式</strong><br>公用表表达式（Common Table Expressions）简称为CTE，MySQL现在支持递归和非递归两种形式的CTE。CTE通过在SELECT语句或其他特定语句前<code>使用WITH语句对临时结果集</code>进行命名。</p>\n<p>基础语法如下：</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">WITH cte_name (col_name1,col_name2 ...) AS (Subquery)\nSELECT * FROM cte_name;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n<p>Subquery代表子查询，子查询前使用WITH语句将结果集命名为cte_name，在后续的查询中即可使用cte_name进行查询。</p>\n<p><strong>12.窗口函数</strong><br>MySQL 8开始支持窗口函数。在之前的版本中已存在的大部分<code>聚合函数</code>在MySQL 8中也可以作为窗口函数来使用。</p>\n<p><img src=\"D:\\极客时间\\尚硅谷大数据学科全套教程（总185.88GB）\\1.尚硅谷大数据学科--核心基础\\MYSQL\\课件md版\\01_课件\\images\\image-20210730165317542.png\" alt=\"image-20210730165317542\"></p>\n<p><strong>13.正则表达式支持</strong><br>MySQL在8.0.4以后的版本中采用支持Unicode的国际化组件库实现正则表达式操作，这种方式不仅能提供完全的Unicode支持，而且是多字节安全编码。MySQL增加了REGEXP_LIKE()、EGEXP_INSTR()、REGEXP_REPLACE()和 REGEXP_SUBSTR()等函数来提升性能。另外，regexp_stack_limit和regexp_time_limit 系统变量能够通过匹配引擎来控制资源消耗。</p>\n<p><strong>14.内部临时表</strong><br><code>TempTable存储引擎取代MEMORY存储引擎成为内部临时表的默认存储引擎</code>。TempTable存储引擎为VARCHAR和VARBINARY列提供高效存储。internal_tmp_mem_storage_engine会话变量定义了内部临时表的存储引擎，可选的值有两个，TempTable和MEMORY，其中TempTable为默认的存储引擎。temptable_max_ram系统配置项定义了TempTable存储引擎可使用的最大内存数量。</p>\n<p><strong>15.日志记录</strong><br>在MySQL 8中错误日志子系统由一系列MySQL组件构成。这些组件的构成由系统变量log_error_services来配置，能够实现日志事件的过滤和写入。</p>\n<p><strong>16.备份锁</strong><br>新的备份锁允许在线备份期间执行数据操作语句，同时阻止可能造成快照不一致的操作。新备份锁由 LOCK INSTANCE FOR BACKUP 和 UNLOCK INSTANCE 语法提供支持，执行这些操作需要备份管理员特权。</p>\n<p><strong>17.增强的MySQL复制</strong><br>MySQL 8复制支持对<code>JSON文档</code>进行部分更新的<code>二进制日志记录</code>，该记录<code>使用紧凑的二进制格式</code>，从而节省记录完整JSON文档的空间。当使用基于语句的日志记录时，这种紧凑的日志记录会自动完成，并且可以通过将新的binlog_row_value_options系统变量值设置为PARTIAL_JSON来启用。</p>\n<h3 id=\"1-2-MySQL8-0移除的旧特性\"><a href=\"#1-2-MySQL8-0移除的旧特性\" class=\"headerlink\" title=\"1.2 MySQL8.0移除的旧特性\"></a>1.2 MySQL8.0移除的旧特性</h3><p>在MySQL 5.7版本上开发的应用程序如果使用了MySQL8.0 移除的特性，语句可能会失败，或者产生不同的执行结果。为了避免这些问题，对于使用了移除特性的应用，应当尽力修正避免使用这些特性，并尽可能使用替代方法。</p>\n<p><strong>1. 查询缓存</strong><br><code>查询缓存已被移除</code>，删除的项有：<br><strong>（1）语句：</strong>FLUSH QUERY CACHE和RESET QUERY CACHE。<br><strong>（2）系统变量：</strong>query_cache_limit、query_cache_min_res_unit、query_cache_size、query_cache_type、query_cache_wlock_invalidate。<br><strong>（3）状态变量：</strong>Qcache_free_blocks、Qcache_free_memory、Qcache_hits、Qcache_inserts、Qcache_lowmem_prunes、Qcache_not_cached、Qcache_queries_in_cache、Qcache_total_blocks。<br><strong>（4）线程状态：</strong>checking privileges on cached query、checking query cache for query、invalidating query cache entries、sending cached result to client、storing result in query cache、waiting for query cache lock。</p>\n<p><strong>2.加密相关</strong><br>删除的加密相关的内容有：ENCODE()、DECODE()、ENCRYPT()、DES_ENCRYPT()和DES_DECRYPT()函数，配置项des-key-file，系统变量have_crypt，FLUSH语句的DES_KEY_FILE选项，HAVE_CRYPT CMake选项。<br>对于移除的ENCRYPT()函数，考虑使用SHA2()替代，对于其他移除的函数，使用AES_ENCRYPT()和AES_DECRYPT()替代。</p>\n<p><strong>3.空间函数相关</strong><br>在MySQL 5.7版本中，多个空间函数已被标记为过时。这些过时函数在MySQL 8中都已被移除，只保留了对应的ST_和MBR函数。</p>\n<p><strong>4.\\N和NULL</strong><br>在SQL语句中，解析器不再将\\N视为NULL，所以在SQL语句中应使用NULL代替\\N。这项变化不会影响使用LOAD DATA INFILE或者SELECT…INTO OUTFILE操作文件的导入和导出。在这类操作中，NULL仍等同于\\N。</p>\n<p><strong>5. mysql_install_db</strong><br>在MySQL分布中，已移除了mysql_install_db程序，数据字典初始化需要调用带着—initialize或者—initialize-insecure选项的mysqld来代替实现。另外，—bootstrap和INSTALL_SCRIPTDIR CMake也已被删除。</p>\n<p><strong>6.通用分区处理程序</strong><br>通用分区处理程序已从MySQL服务中被移除。为了实现给定表分区，表所使用的存储引擎需要自有的分区处理程序。<br>提供本地分区支持的MySQL存储引擎有两个，即InnoDB和NDB，而在MySQL 8中只支持InnoDB。</p>\n<p><strong>7.系统和状态变量信息</strong><br>在INFORMATION_SCHEMA数据库中，对系统和状态变量信息不再进行维护。GLOBAL_VARIABLES、SESSION_VARIABLES、GLOBAL_STATUS、SESSION_STATUS表都已被删除。另外，系统变量show_compatibility_56也已被删除。被删除的状态变量有Slave_heartbeat_period、Slave_last_heartbeat,Slave_received_heartbeats、Slave_retried_transactions、Slave_running。以上被删除的内容都可使用性能模式中对应的内容进行替代。</p>\n<p><strong>8.mysql_plugin工具</strong><br>mysql_plugin工具用来配置MySQL服务器插件，现已被删除，可使用—plugin-load或—plugin-load-add选项在服务器启动时加载插件或者在运行时使用INSTALL PLUGIN语句加载插件来替代该工具。</p>\n<h2 id=\"2-新特性1：窗口函数\"><a href=\"#2-新特性1：窗口函数\" class=\"headerlink\" title=\"2. 新特性1：窗口函数\"></a>2. 新特性1：窗口函数</h2><h3 id=\"2-1-使用窗口函数前后对比\"><a href=\"#2-1-使用窗口函数前后对比\" class=\"headerlink\" title=\"2.1 使用窗口函数前后对比\"></a>2.1 使用窗口函数前后对比</h3><p>假设我现在有这样一个数据表，它显示了某购物网站在每个城市每个区的销售额：</p>\n<pre class=\"line-numbers language-mysql\" data-language=\"mysql\"><code class=\"language-mysql\">CREATE TABLE sales(\nid INT PRIMARY KEY AUTO_INCREMENT,\ncity VARCHAR(15),\ncounty VARCHAR(15),\nsales_value DECIMAL\n\n);\n\nINSERT INTO sales(city,county,sales_value)\nVALUES\n('北京','海淀',10.00),\n('北京','朝阳',20.00),\n('上海','黄埔',30.00),\n('上海','长宁',10.00);<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>查询：</p>\n<pre class=\"line-numbers language-mysql\" data-language=\"mysql\"><code class=\"language-mysql\">mysql&gt; SELECT * FROM sales;\n+----+------+--------+-------------+\n| id | city | county | sales_value |\n+----+------+--------+-------------+\n|  1 | 北京 | 海淀    |          10 |\n|  2 | 北京 | 朝阳    |          20 |\n|  3 | 上海 | 黄埔    |          30 |\n|  4 | 上海 | 长宁    |          10 |\n+----+------+--------+-------------+\n4 rows in set (0.00 sec)<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p><strong>需求：</strong>现在计算这个网站在每个城市的销售总额、在全国的销售总额、每个区的销售额占所在城市销售额中的比率，以及占总销售额中的比率。</p>\n<p>如果用分组和聚合函数，就需要分好几步来计算。</p>\n<p>第一步，计算总销售金额，并存入临时表 a：</p>\n<pre class=\"line-numbers language-mysql\" data-language=\"mysql\"><code class=\"language-mysql\">CREATE TEMPORARY TABLE a       -- 创建临时表\nSELECT SUM(sales_value) AS sales_value -- 计算总计金额\nFROM sales;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n<p>查看一下临时表 a ：</p>\n<pre class=\"line-numbers language-mysql\" data-language=\"mysql\"><code class=\"language-mysql\">mysql&gt; SELECT * FROM a;\n+-------------+\n| sales_value |\n+-------------+\n|          70 |\n+-------------+\n1 row in set (0.00 sec)<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>第二步，计算每个城市的销售总额并存入临时表 b：</p>\n<pre class=\"line-numbers language-mysql\" data-language=\"mysql\"><code class=\"language-mysql\">CREATE TEMPORARY TABLE b    -- 创建临时表\nSELECT city,SUM(sales_value) AS sales_value  -- 计算城市销售合计\nFROM sales\nGROUP BY city;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n<p>查看临时表 b ：</p>\n<pre class=\"line-numbers language-mysql\" data-language=\"mysql\"><code class=\"language-mysql\">mysql&gt; SELECT * FROM b;\n+------+-------------+\n| city | sales_value |\n+------+-------------+\n| 北京 |          30 |\n| 上海 |          40 |\n+------+-------------+\n2 rows in set (0.00 sec)<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>第三步，计算各区的销售占所在城市的总计金额的比例，和占全部销售总计金额的比例。我们可以通过下面的连接查询获得需要的结果：</p>\n<pre class=\"line-numbers language-mysql\" data-language=\"mysql\"><code class=\"language-mysql\">mysql&gt; SELECT s.city AS 城市,s.county AS 区,s.sales_value AS 区销售额,\n    -&gt; b.sales_value AS 市销售额,s.sales_value/b.sales_value AS 市比率,\n    -&gt; a.sales_value AS 总销售额,s.sales_value/a.sales_value AS 总比率\n    -&gt; FROM sales s\n    -&gt; JOIN b ON (s.city=b.city) -- 连接市统计结果临时表\n    -&gt; JOIN a                   -- 连接总计金额临时表\n    -&gt; ORDER BY s.city,s.county;\n+------+------+----------+----------+--------+----------+--------+\n| 城市  | 区   | 区销售额  | 市销售额   | 市比率  | 总销售额  | 总比率  |\n+------+------+----------+----------+--------+----------+--------+\n| 上海  | 长宁 |       10 |       40 | 0.2500 |       70 | 0.1429 |\n| 上海  | 黄埔 |       30 |       40 | 0.7500 |       70 | 0.4286 |\n| 北京  | 朝阳 |       20 |       30 | 0.6667 |       70 | 0.2857 |\n| 北京  | 海淀 |       10 |       30 | 0.3333 |       70 | 0.1429 |\n+------+------+----------+----------+--------+----------+--------+\n4 rows in set (0.00 sec)<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>结果显示：市销售金额、市销售占比、总销售金额、总销售占比都计算出来了。</p>\n<p>同样的查询，如果用窗口函数，就简单多了。我们可以用下面的代码来实现：</p>\n<pre class=\"line-numbers language-mysql\" data-language=\"mysql\"><code class=\"language-mysql\">mysql&gt; SELECT city AS 城市,county AS 区,sales_value AS 区销售额,\n    -&gt; SUM(sales_value) OVER(PARTITION BY city) AS 市销售额,  -- 计算市销售额\n    -&gt; sales_value/SUM(sales_value) OVER(PARTITION BY city) AS 市比率,\n    -&gt; SUM(sales_value) OVER() AS 总销售额,   -- 计算总销售额\n    -&gt; sales_value/SUM(sales_value) OVER() AS 总比率\n    -&gt; FROM sales\n    -&gt; ORDER BY city,county;\n+------+------+----------+----------+--------+----------+--------+\n| 城市  | 区   | 区销售额  | 市销售额   | 市比率  | 总销售额  | 总比率  |\n+------+------+----------+----------+--------+----------+--------+\n| 上海  | 长宁 |       10 |       40  | 0.2500 |       70 | 0.1429 |\n| 上海  | 黄埔 |       30 |       40  | 0.7500 |       70 | 0.4286 |\n| 北京  | 朝阳 |       20 |       30  | 0.6667 |       70 | 0.2857 |\n| 北京  | 海淀 |       10 |       30  | 0.3333 |       70 | 0.1429 |\n+------+------+----------+-----------+--------+----------+--------+\n4 rows in set (0.00 sec)<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>结果显示，我们得到了与上面那种查询同样的结果。</p>\n<p>使用窗口函数，只用了一步就完成了查询。而且，由于没有用到临时表，执行的效率也更高了。很显然，<strong>在这种需要用到分组统计的结果对每一条记录进行计算的场景下，使用窗口函数更好</strong>。</p>\n<h3 id=\"2-2-窗口函数分类\"><a href=\"#2-2-窗口函数分类\" class=\"headerlink\" title=\"2.2 窗口函数分类\"></a>2.2 窗口函数分类</h3><p>MySQL从8.0版本开始支持窗口函数。窗口函数的作用类似于在查询中对数据进行分组，不同的是，分组操作会把分组的结果聚合成一条记录，而窗口函数是将结果置于每一条数据记录中。</p>\n<p>窗口函数可以分为<code>静态窗口函数</code>和<code>动态窗口函数</code>。</p>\n<ul>\n<li>静态窗口函数的窗口大小是固定的，不会因为记录的不同而不同；</li>\n<li>动态窗口函数的窗口大小会随着记录的不同而变化。</li>\n</ul>\n<p>MySQL官方网站窗口函数的网址为<a href=\"https://dev.mysql.com/doc/refman/8.0/en/window-function-descriptions.html#function_row-number。\">https://dev.mysql.com/doc/refman/8.0/en/window-function-descriptions.html#function_row-number。</a></p>\n<p>窗口函数总体上可以分为序号函数、分布函数、前后函数、首尾函数和其他函数，如下表：</p>\n<p><img src=\"D:\\极客时间\\尚硅谷大数据学科全套教程（总185.88GB）\\1.尚硅谷大数据学科--核心基础\\MYSQL\\课件md版\\01_课件\\images\\image-20211012162944536.png\" alt=\"image-20211012162944536\"></p>\n<h3 id=\"2-3-语法结构\"><a href=\"#2-3-语法结构\" class=\"headerlink\" title=\"2.3 语法结构\"></a>2.3 语法结构</h3><p>窗口函数的语法结构是：</p>\n<pre class=\"line-numbers language-mysql\" data-language=\"mysql\"><code class=\"language-mysql\">函数 OVER（[PARTITION BY 字段名 ORDER BY 字段名 ASC|DESC]）<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>或者是：</p>\n<pre class=\"line-numbers language-mysql\" data-language=\"mysql\"><code class=\"language-mysql\">函数 OVER 窗口名 … WINDOW 窗口名 AS （[PARTITION BY 字段名 ORDER BY 字段名 ASC|DESC]）<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<ul>\n<li>OVER 关键字指定函数窗口的范围。<ul>\n<li>如果省略后面括号中的内容，则窗口会包含满足WHERE条件的所有记录，窗口函数会基于所有满足WHERE条件的记录进行计算。</li>\n<li>如果OVER关键字后面的括号不为空，则可以使用如下语法设置窗口。</li>\n</ul>\n</li>\n<li>窗口名：为窗口设置一个别名，用来标识窗口。</li>\n<li>PARTITION BY子句：指定窗口函数按照哪些字段进行分组。分组后，窗口函数可以在每个分组中分别执行。</li>\n<li>ORDER BY子句：指定窗口函数按照哪些字段进行排序。执行排序操作使窗口函数按照排序后的数据记录的顺序进行编号。</li>\n<li>FRAME子句：为分区中的某个子集定义规则，可以用来作为滑动窗口使用。</li>\n</ul>\n<h3 id=\"2-4-分类讲解\"><a href=\"#2-4-分类讲解\" class=\"headerlink\" title=\"2.4 分类讲解\"></a>2.4 分类讲解</h3><p>创建表：</p>\n<pre class=\"line-numbers language-mysql\" data-language=\"mysql\"><code class=\"language-mysql\">CREATE TABLE goods(\nid INT PRIMARY KEY AUTO_INCREMENT,\ncategory_id INT,\ncategory VARCHAR(15),\nNAME VARCHAR(30),\nprice DECIMAL(10,2),\nstock INT,\nupper_time DATETIME\n\n);<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>添加数据：</p>\n<pre class=\"line-numbers language-mysql\" data-language=\"mysql\"><code class=\"language-mysql\">INSERT INTO goods(category_id,category,NAME,price,stock,upper_time)\nVALUES\n(1, '女装/女士精品', 'T恤', 39.90, 1000, '2020-11-10 00:00:00'),\n(1, '女装/女士精品', '连衣裙', 79.90, 2500, '2020-11-10 00:00:00'),\n(1, '女装/女士精品', '卫衣', 89.90, 1500, '2020-11-10 00:00:00'),\n(1, '女装/女士精品', '牛仔裤', 89.90, 3500, '2020-11-10 00:00:00'),\n(1, '女装/女士精品', '百褶裙', 29.90, 500, '2020-11-10 00:00:00'),\n(1, '女装/女士精品', '呢绒外套', 399.90, 1200, '2020-11-10 00:00:00'),\n(2, '户外运动', '自行车', 399.90, 1000, '2020-11-10 00:00:00'),\n(2, '户外运动', '山地自行车', 1399.90, 2500, '2020-11-10 00:00:00'),\n(2, '户外运动', '登山杖', 59.90, 1500, '2020-11-10 00:00:00'),\n(2, '户外运动', '骑行装备', 399.90, 3500, '2020-11-10 00:00:00'),\n(2, '户外运动', '运动外套', 799.90, 500, '2020-11-10 00:00:00'),\n(2, '户外运动', '滑板', 499.90, 1200, '2020-11-10 00:00:00');<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>下面针对goods表中的数据来验证每个窗口函数的功能。</p>\n<h4 id=\"1-序号函数\"><a href=\"#1-序号函数\" class=\"headerlink\" title=\"1. 序号函数\"></a>1. 序号函数</h4><p><strong>1．ROW_NUMBER()函数</strong></p>\n<p>ROW_NUMBER()函数能够对数据中的序号进行顺序显示。</p>\n<p>举例：查询 goods 数据表中每个商品分类下价格降序排列的各个商品信息。</p>\n<pre class=\"line-numbers language-mysql\" data-language=\"mysql\"><code class=\"language-mysql\">mysql&gt; SELECT ROW_NUMBER() OVER(PARTITION BY category_id ORDER BY price DESC) AS row_num,\n    -&gt; id, category_id, category, NAME, price, stock\n    -&gt; FROM goods;\n+---------+----+-------------+---------------+------------+---------+-------+\n| row_num | id | category_id | category      | NAME       | price   | stock |\n+---------+----+-------------+---------------+------------+---------+-------+\n|       1 |  6 |           1 | 女装/女士精品   | 呢绒外套    |  399.90 |  1200 |\n|       2 |  3 |           1 | 女装/女士精品   | 卫衣        |   89.90 |  1500 |\n|       3 |  4 |           1 | 女装/女士精品   | 牛仔裤      |   89.90 |  3500 |\n|       4 |  2 |           1 | 女装/女士精品   | 连衣裙      |   79.90 |  2500 |\n|       5 |  1 |           1 | 女装/女士精品   | T恤        |   39.90 |  1000 |\n|       6 |  5 |           1 | 女装/女士精品   | 百褶裙      |   29.90 |   500 |\n|       1 |  8 |           2 | 户外运动       | 山地自行车   | 1399.90 |  2500 |\n|       2 | 11 |           2 | 户外运动       | 运动外套     |  799.90 |   500 |\n|       3 | 12 |           2 | 户外运动       | 滑板        |  499.90 |  1200 |\n|       4 |  7 |           2 | 户外运动       | 自行车      |  399.90 |  1000 |\n|       5 | 10 |           2 | 户外运动       | 骑行装备    |  399.90 |  3500 |\n|       6 |  9 |           2 | 户外运动       | 登山杖      |   59.90 |  1500 |\n+---------+----+-------------+---------------+------------+---------+-------+\n12 rows in set (0.00 sec)<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>举例：查询 goods 数据表中每个商品分类下价格最高的3种商品信息。</p>\n<pre class=\"line-numbers language-mysql\" data-language=\"mysql\"><code class=\"language-mysql\">mysql&gt; SELECT *\n    -&gt; FROM (\n    -&gt;  SELECT ROW_NUMBER() OVER(PARTITION BY category_id ORDER BY price DESC) AS row_num,\n    -&gt;  id, category_id, category, NAME, price, stock\n    -&gt;  FROM goods) t\n    -&gt; WHERE row_num &lt;= 3;\n+---------+----+-------------+---------------+------------+---------+-------+\n| row_num | id | category_id | category      | NAME       | price   | stock |\n+---------+----+-------------+---------------+------------+---------+-------+\n|       1 |  6 |           1 | 女装/女士精品   | 呢绒外套    |  399.90  |  1200 |\n|       2 |  3 |           1 | 女装/女士精品   | 卫衣        |   89.90 |  1500 |\n|       3 |  4 |           1 | 女装/女士精品   | 牛仔裤      |   89.90  |  3500 |\n|       1 |  8 |           2 | 户外运动       | 山地自行车   | 1399.90  |  2500 |\n|       2 | 11 |           2 | 户外运动       | 运动外套     |  799.90  |   500 |\n|       3 | 12 |           2 | 户外运动       | 滑板        |  499.90  |  1200 |\n+---------+----+-------------+---------------+------------+----------+-------+\n6 rows in set (0.00 sec)<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>在名称为“女装/女士精品”的商品类别中，有两款商品的价格为89.90元，分别是卫衣和牛仔裤。两款商品的序号都应该为2，而不是一个为2，另一个为3。此时，可以使用RANK()函数和DENSE_RANK()函数解决。</p>\n<p><strong>2．RANK()函数</strong></p>\n<p>使用RANK()函数能够对序号进行并列排序，并且会跳过重复的序号，比如序号为1、1、3。</p>\n<p>举例：使用RANK()函数获取 goods 数据表中各类别的价格从高到低排序的各商品信息。</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">mysql&gt; SELECT RANK() OVER(PARTITION BY category_id ORDER BY price DESC) AS row_num,\n    -&gt; id, category_id, category, NAME, price, stock\n    -&gt; FROM goods;\n+---------+----+-------------+---------------+------------+---------+-------+\n| row_num | id | category_id | category      | NAME       | price   | stock |\n+---------+----+-------------+---------------+------------+---------+-------+\n|       1 |  6 |           1 | 女装/女士精品   | 呢绒外套    |  399.90 |  1200 |\n|       2 |  3 |           1 | 女装/女士精品   | 卫衣        |   89.90 |  1500 |\n|       2 |  4 |           1 | 女装/女士精品   | 牛仔裤      |   89.90 |  3500 |\n|       4 |  2 |           1 | 女装/女士精品   | 连衣裙      |   79.90 |  2500 |\n|       5 |  1 |           1 | 女装/女士精品   | T恤         |   39.90 |  1000 |\n|       6 |  5 |           1 | 女装/女士精品   | 百褶裙      |   29.90 |   500 |\n|       1 |  8 |           2 | 户外运动       | 山地自行车   | 1399.90 |  2500 |\n|       2 | 11 |           2 | 户外运动       | 运动外套     |  799.90 |   500 |\n|       3 | 12 |           2 | 户外运动       | 滑板        |  499.90 |  1200 |\n|       4 |  7 |           2 | 户外运动       | 自行车      |  399.90 |  1000 |\n|       4 | 10 |           2 | 户外运动       | 骑行装备    |  399.90 |  3500 |\n|       6 |  9 |           2 | 户外运动       | 登山杖      |   59.90 |  1500 |\n+---------+----+-------------+---------------+------------+---------+-------+\n12 rows in set (0.00 sec)<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>举例：使用RANK()函数获取 goods 数据表中类别为“女装/女士精品”的价格最高的4款商品信息。</p>\n<pre class=\"line-numbers language-mysql\" data-language=\"mysql\"><code class=\"language-mysql\">mysql&gt; SELECT *\n    -&gt; FROM(\n    -&gt;  SELECT RANK() OVER(PARTITION BY category_id ORDER BY price DESC) AS row_num,\n    -&gt;  id, category_id, category, NAME, price, stock\n    -&gt;  FROM goods) t\n    -&gt; WHERE category_id = 1 AND row_num &lt;= 4;\n+---------+----+-------------+---------------+----------+--------+-------+\n| row_num | id | category_id | category      | NAME     | price  | stock |\n+---------+----+-------------+---------------+----------+--------+-------+\n|       1 |  6 |           1 | 女装/女士精品   | 呢绒外套  | 399.90 |  1200 |\n|       2 |  3 |           1 | 女装/女士精品   | 卫衣      |  89.90 |  1500 |\n|       2 |  4 |           1 | 女装/女士精品   | 牛仔裤    |  89.90 |  3500 |\n|       4 |  2 |           1 | 女装/女士精品   | 连衣裙    |  79.90 |  2500 |\n+---------+----+-------------+---------------+----------+--------+-------+\n4 rows in set (0.00 sec)<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>可以看到，使用RANK()函数得出的序号为1、2、2、4，相同价格的商品序号相同，后面的商品序号是不连续的，跳过了重复的序号。</p>\n<p><strong>3．DENSE_RANK()函数</strong></p>\n<p>DENSE_RANK()函数对序号进行并列排序，并且不会跳过重复的序号，比如序号为1、1、2。</p>\n<p>举例：使用DENSE_RANK()函数获取 goods 数据表中各类别的价格从高到低排序的各商品信息。</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">mysql&gt; SELECT DENSE_RANK() OVER(PARTITION BY category_id ORDER BY price DESC) AS row_num,\n    -&gt; id, category_id, category, NAME, price, stock\n    -&gt; FROM goods;\n+---------+----+-------------+---------------+------------+---------+-------+\n| row_num | id | category_id | category      | NAME       | price   | stock |\n+---------+----+-------------+---------------+------------+---------+-------+\n|       1 |  6 |           1 | 女装/女士精品   | 呢绒外套    |  399.90 |  1200 |\n|       2 |  3 |           1 | 女装/女士精品   | 卫衣        |   89.90 |  1500 |\n|       2 |  4 |           1 | 女装/女士精品   | 牛仔裤      |   89.90 |  3500 |\n|       3 |  2 |           1 | 女装/女士精品   | 连衣裙      |   79.90 |  2500 |\n|       4 |  1 |           1 | 女装/女士精品   | T恤        |   39.90 |  1000 |\n|       5 |  5 |           1 | 女装/女士精品   | 百褶裙      |   29.90 |   500 |\n|       1 |  8 |           2 | 户外运动       | 山地自行车   | 1399.90 |  2500 |\n|       2 | 11 |           2 | 户外运动       | 运动外套     |  799.90 |   500 |\n|       3 | 12 |           2 | 户外运动       | 滑板        |  499.90 |  1200 |\n|       4 |  7 |           2 | 户外运动       | 自行车       |  399.90 |  1000 |\n|       4 | 10 |           2 | 户外运动       | 骑行装备     |  399.90 |  3500 |\n|       5 |  9 |           2 | 户外运动       | 登山杖       |   59.90 |  1500 |\n+---------+----+-------------+---------------+------------+---------+-------+\n12 rows in set (0.00 sec)<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>举例：使用DENSE_RANK()函数获取 goods 数据表中类别为“女装/女士精品”的价格最高的4款商品信息。</p>\n<pre class=\"line-numbers language-mysql\" data-language=\"mysql\"><code class=\"language-mysql\">mysql&gt; SELECT *\n    -&gt; FROM(\n    -&gt;  SELECT DENSE_RANK() OVER(PARTITION BY category_id ORDER BY price DESC) AS row_num,\n    -&gt;  id, category_id, category, NAME, price, stock\n    -&gt;  FROM goods) t\n    -&gt; WHERE category_id = 1 AND row_num &lt;= 3;\n+---------+----+-------------+---------------+----------+--------+-------+\n| row_num | id | category_id | category      | NAME     | price  | stock |\n+---------+----+-------------+---------------+----------+--------+-------+\n|       1 |  6 |           1 | 女装/女士精品   | 呢绒外套  | 399.90 |  1200 |\n|       2 |  3 |           1 | 女装/女士精品   | 卫衣     |  89.90  |  1500 |\n|       2 |  4 |           1 | 女装/女士精品   | 牛仔裤    |  89.90 |  3500 |\n|       3 |  2 |           1 | 女装/女士精品   | 连衣裙    |  79.90 |  2500 |\n+---------+----+-------------+---------------+----------+--------+-------+\n4 rows in set (0.00 sec)<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>可以看到，使用DENSE_RANK()函数得出的行号为1、2、2、3，相同价格的商品序号相同，后面的商品序号是连续的，并且没有跳过重复的序号。</p>\n<h4 id=\"2-分布函数\"><a href=\"#2-分布函数\" class=\"headerlink\" title=\"2. 分布函数\"></a>2. 分布函数</h4><p><strong>1．PERCENT_RANK()函数</strong></p>\n<p>PERCENT_RANK()函数是等级值百分比函数。按照如下方式进行计算。</p>\n<pre class=\"line-numbers language-mysql\" data-language=\"mysql\"><code class=\"language-mysql\">(rank - 1) / (rows - 1)<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>其中，rank的值为使用RANK()函数产生的序号，rows的值为当前窗口的总记录数。</p>\n<p>举例：计算 goods 数据表中名称为“女装/女士精品”的类别下的商品的PERCENT_RANK值。</p>\n<pre class=\"line-numbers language-mysql\" data-language=\"mysql\"><code class=\"language-mysql\">#写法一：\nSELECT RANK() OVER (PARTITION BY category_id ORDER BY price DESC) AS r,\nPERCENT_RANK() OVER (PARTITION BY category_id ORDER BY price DESC) AS pr,\nid, category_id, category, NAME, price, stock\nFROM goods\nWHERE category_id = 1;\n\n#写法二：\nmysql&gt; SELECT RANK() OVER w AS r,\n    -&gt; PERCENT_RANK() OVER w AS pr,\n    -&gt; id, category_id, category, NAME, price, stock\n    -&gt; FROM goods\n    -&gt; WHERE category_id = 1 WINDOW w AS (PARTITION BY category_id ORDER BY price DESC);\n+---+-----+----+-------------+---------------+----------+--------+-------+\n| r | pr  | id | category_id | category      | NAME     | price  | stock |\n+---+-----+----+-------------+---------------+----------+--------+-------+\n| 1 |   0 |  6 |           1 | 女装/女士精品   | 呢绒外套  | 399.90 |  1200 |\n| 2 | 0.2 |  3 |           1 | 女装/女士精品   | 卫衣     |  89.90 |  1500 |\n| 2 | 0.2 |  4 |           1 | 女装/女士精品   | 牛仔裤   |  89.90 |  3500  |\n| 4 | 0.6 |  2 |           1 | 女装/女士精品   | 连衣裙   |  79.90 |  2500  |\n| 5 | 0.8 |  1 |           1 | 女装/女士精品   | T恤      |  39.90 |  1000 |\n| 6 |   1 |  5 |           1 | 女装/女士精品   | 百褶裙   |  29.90  |   500 |\n+---+-----+----+-------------+---------------+----------+--------+-------+\n6 rows in set (0.00 sec)<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p><strong>2．CUME_DIST()函数</strong></p>\n<p>CUME_DIST()函数主要用于查询小于或等于某个值的比例。</p>\n<p>举例：查询goods数据表中小于或等于当前价格的比例。</p>\n<pre class=\"line-numbers language-mysql\" data-language=\"mysql\"><code class=\"language-mysql\">mysql&gt; SELECT CUME_DIST() OVER(PARTITION BY category_id ORDER BY price ASC) AS cd,\n    -&gt; id, category, NAME, price\n    -&gt; FROM goods;\n+---------------------+----+---------------+------------+---------+\n| cd                  | id | category      | NAME       | price   |\n+---------------------+----+---------------+------------+---------+\n| 0.16666666666666666 |  5 | 女装/女士精品   | 百褶裙      |   29.90 |\n|  0.3333333333333333 |  1 | 女装/女士精品   | T恤        |   39.90 |\n|                 0.5 |  2 | 女装/女士精品   | 连衣裙      |   79.90 |\n|  0.8333333333333334 |  3 | 女装/女士精品   | 卫衣        |   89.90 |\n|  0.8333333333333334 |  4 | 女装/女士精品   | 牛仔裤      |   89.90 |\n|                   1 |  6 | 女装/女士精品   | 呢绒外套    |  399.90 |\n| 0.16666666666666666 |  9 | 户外运动       | 登山杖      |   59.90 |\n|                 0.5 |  7 | 户外运动       | 自行车      |  399.90 |\n|                 0.5 | 10 | 户外运动       | 骑行装备     |  399.90 |\n|  0.6666666666666666 | 12 | 户外运动       | 滑板        |  499.90 |\n|  0.8333333333333334 | 11 | 户外运动       | 运动外套    |  799.90 |\n|                   1 |  8 | 户外运动       | 山地自行车   | 1399.90 |\n+---------------------+----+---------------+------------+---------+\n12 rows in set (0.00 sec)<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h4 id=\"3-前后函数\"><a href=\"#3-前后函数\" class=\"headerlink\" title=\"3. 前后函数\"></a>3. 前后函数</h4><p><strong>1．LAG(expr,n)函数</strong></p>\n<p>LAG(expr,n)函数返回当前行的前n行的expr的值。</p>\n<p>举例：查询goods数据表中前一个商品价格与当前商品价格的差值。</p>\n<pre class=\"line-numbers language-mysql\" data-language=\"mysql\"><code class=\"language-mysql\">mysql&gt; SELECT id, category, NAME, price, pre_price, price - pre_price AS diff_price\n    -&gt; FROM (\n    -&gt;  SELECT  id, category, NAME, price,LAG(price,1) OVER w AS pre_price\n    -&gt;  FROM goods\n    -&gt;  WINDOW w AS (PARTITION BY category_id ORDER BY price)) t;\n+----+---------------+------------+---------+-----------+------------+\n| id | category      | NAME       | price   | pre_price | diff_price |\n+----+---------------+------------+---------+-----------+------------+\n|  5 | 女装/女士精品   | 百褶裙      |   29.90 |      NULL |       NULL |\n|  1 | 女装/女士精品   | T恤        |   39.90 |     29.90 |      10.00 |\n|  2 | 女装/女士精品   | 连衣裙      |   79.90 |     39.90 |      40.00 |\n|  3 | 女装/女士精品   | 卫衣       |   89.90 |     79.90 |      10.00 |\n|  4 | 女装/女士精品   | 牛仔裤      |   89.90 |     89.90 |       0.00 |\n|  6 | 女装/女士精品   | 呢绒外套    |  399.90 |     89.90 |     310.00 |\n|  9 | 户外运动       | 登山杖      |   59.90 |      NULL |       NULL |\n|  7 | 户外运动       | 自行车      |  399.90 |     59.90 |     340.00 |\n| 10 | 户外运动       | 骑行装备    |  399.90 |    399.90 |       0.00 |\n| 12 | 户外运动       | 滑板       |  499.90 |    399.90 |     100.00 |\n| 11 | 户外运动       | 运动外套    |  799.90 |    499.90 |     300.00 |\n|  8 | 户外运动       | 山地自行车  | 1399.90 |    799.90 |     600.00 |\n+----+---------------+------------+---------+-----------+------------+\n12 rows in set (0.00 sec)<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p><strong>2．LEAD(expr,n)函数</strong></p>\n<p>LEAD(expr,n)函数返回当前行的后n行的expr的值。</p>\n<p>举例：查询goods数据表中后一个商品价格与当前商品价格的差值。</p>\n<pre class=\"line-numbers language-mysql\" data-language=\"mysql\"><code class=\"language-mysql\">mysql&gt; SELECT id, category, NAME, behind_price, price,behind_price - price AS diff_price\n    -&gt; FROM(\n    -&gt;  SELECT id, category, NAME, price,LEAD(price, 1) OVER w AS behind_price\n    -&gt;  FROM goods WINDOW w AS (PARTITION BY category_id ORDER BY price)) t;\n+----+---------------+------------+--------------+---------+------------+\n| id | category      | NAME       | behind_price | price   | diff_price |\n+----+---------------+------------+--------------+---------+------------+\n|  5 | 女装/女士精品   | 百褶裙      |        39.90 |   29.90 |      10.00 |\n|  1 | 女装/女士精品   | T恤        |        79.90 |   39.90 |      40.00 |\n|  2 | 女装/女士精品   | 连衣裙      |        89.90 |   79.90 |      10.00 |\n|  3 | 女装/女士精品   | 卫衣        |        89.90 |   89.90 |       0.00 |\n|  4 | 女装/女士精品   | 牛仔裤      |       399.90 |   89.90 |     310.00 |\n|  6 | 女装/女士精品   | 呢绒外套     |         NULL |  399.90 |       NULL |\n|  9 | 户外运动       | 登山杖       |       399.90 |   59.90 |     340.00 |\n|  7 | 户外运动       | 自行车       |       399.90 |  399.90 |       0.00 |\n| 10 | 户外运动       | 骑行装备     |       499.90 |  399.90 |     100.00 |\n| 12 | 户外运动       | 滑板        |       799.90 |  499.90 |     300.00 |\n| 11 | 户外运动       | 运动外套     |      1399.90 |  799.90 |     600.00 |\n|  8 | 户外运动       | 山地自行车   |         NULL | 1399.90 |       NULL |\n+----+---------------+------------+--------------+---------+------------+\n12 rows in set (0.00 sec)<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h4 id=\"4-首尾函数\"><a href=\"#4-首尾函数\" class=\"headerlink\" title=\"4. 首尾函数\"></a>4. 首尾函数</h4><p><strong>1．FIRST_VALUE(expr)函数</strong></p>\n<p>FIRST_VALUE(expr)函数返回第一个expr的值。</p>\n<p>举例：按照价格排序，查询第1个商品的价格信息。</p>\n<pre class=\"line-numbers language-mysql\" data-language=\"mysql\"><code class=\"language-mysql\">mysql&gt; SELECT id, category, NAME, price, stock,FIRST_VALUE(price) OVER w AS first_price\n    -&gt; FROM goods WINDOW w AS (PARTITION BY category_id ORDER BY price);\n+----+---------------+------------+---------+-------+-------------+\n| id | category      | NAME       | price   | stock | first_price |\n+----+---------------+------------+---------+-------+-------------+\n|  5 | 女装/女士精品   | 百褶裙      |   29.90 |   500 |       29.90 |\n|  1 | 女装/女士精品   | T恤        |   39.90 |  1000 |       29.90 |\n|  2 | 女装/女士精品   | 连衣裙      |   79.90 |  2500 |       29.90 |\n|  3 | 女装/女士精品   | 卫衣       |   89.90 |  1500 |       29.90 |\n|  4 | 女装/女士精品   | 牛仔裤      |   89.90 |  3500 |       29.90 |\n|  6 | 女装/女士精品   | 呢绒外套    |  399.90 |  1200 |       29.90 |\n|  9 | 户外运动       | 登山杖      |   59.90 |  1500 |       59.90 |\n|  7 | 户外运动       | 自行车      |  399.90 |  1000 |       59.90 |\n| 10 | 户外运动       | 骑行装备    |  399.90 |  3500 |       59.90 |\n| 12 | 户外运动       | 滑板       |  499.90 |  1200 |       59.90 |\n| 11 | 户外运动       | 运动外套    |  799.90 |   500 |       59.90 |\n|  8 | 户外运动       | 山地自行车  | 1399.90 |  2500 |       59.90 |\n+----+---------------+------------+---------+-------+-------------+\n12 rows in set (0.00 sec)<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p><strong>2．LAST_VALUE(expr)函数</strong></p>\n<p>LAST_VALUE(expr)函数返回最后一个expr的值。</p>\n<p>举例：按照价格排序，查询最后一个商品的价格信息。</p>\n<pre class=\"line-numbers language-mysql\" data-language=\"mysql\"><code class=\"language-mysql\">mysql&gt; SELECT id, category, NAME, price, stock,LAST_VALUE(price) OVER w AS last_price\n    -&gt; FROM goods WINDOW w AS (PARTITION BY category_id ORDER BY price);\n+----+---------------+------------+---------+-------+------------+\n| id | category      | NAME       | price   | stock | last_price |\n+----+---------------+------------+---------+-------+------------+\n|  5 | 女装/女士精品   | 百褶裙     |   29.90 |   500 |      29.90 |\n|  1 | 女装/女士精品   | T恤        |   39.90 |  1000 |      39.90 |\n|  2 | 女装/女士精品   | 连衣裙     |   79.90 |  2500 |      79.90 |\n|  3 | 女装/女士精品   | 卫衣       |   89.90 |  1500 |      89.90 |\n|  4 | 女装/女士精品   | 牛仔裤     |   89.90 |  3500 |      89.90 |\n|  6 | 女装/女士精品   | 呢绒外套   |  399.90 |  1200 |     399.90 |\n|  9 | 户外运动       | 登山杖     |   59.90 |  1500 |      59.90 |\n|  7 | 户外运动       | 自行车     |  399.90 |  1000 |     399.90 |\n| 10 | 户外运动       | 骑行装备   |  399.90 |  3500 |     399.90 |\n| 12 | 户外运动       | 滑板       |  499.90 |  1200 |     499.90 |\n| 11 | 户外运动       | 运动外套   |  799.90 |   500 |     799.90 |\n|  8 | 户外运动       | 山地自行车 | 1399.90 |  2500 |    1399.90 |\n+----+---------------+------------+---------+-------+------------+\n12 rows in set (0.00 sec)<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h4 id=\"5-其他函数\"><a href=\"#5-其他函数\" class=\"headerlink\" title=\"5. 其他函数\"></a>5. 其他函数</h4><p><strong>1．NTH_VALUE(expr,n)函数</strong></p>\n<p>NTH_VALUE(expr,n)函数返回第n个expr的值。</p>\n<p>举例：查询goods数据表中排名第2和第3的价格信息。</p>\n<pre class=\"line-numbers language-mysql\" data-language=\"mysql\"><code class=\"language-mysql\">mysql&gt; SELECT id, category, NAME, price,NTH_VALUE(price,2) OVER w AS second_price,\n    -&gt; NTH_VALUE(price,3) OVER w AS third_price\n    -&gt; FROM goods WINDOW w AS (PARTITION BY category_id ORDER BY price);\n+----+---------------+------------+---------+--------------+-------------+\n| id | category      | NAME       | price   | second_price | third_price |\n+----+---------------+------------+---------+--------------+-------------+\n|  5 | 女装/女士精品   | 百褶裙     |   29.90 |         NULL |        NULL |\n|  1 | 女装/女士精品   | T恤        |   39.90 |        39.90 |        NULL |\n|  2 | 女装/女士精品   | 连衣裙     |   79.90 |        39.90 |       79.90 |\n|  3 | 女装/女士精品   | 卫衣       |   89.90 |        39.90 |       79.90 |\n|  4 | 女装/女士精品   | 牛仔裤     |   89.90 |        39.90 |       79.90 |\n|  6 | 女装/女士精品   | 呢绒外套   |  399.90 |        39.90 |       79.90 |\n|  9 | 户外运动       | 登山杖     |   59.90 |         NULL |        NULL |\n|  7 | 户外运动       | 自行车     |  399.90 |       399.90 |      399.90 |\n| 10 | 户外运动       | 骑行装备   |  399.90 |       399.90 |      399.90 |\n| 12 | 户外运动       | 滑板       |  499.90 |       399.90 |      399.90 |\n| 11 | 户外运动       | 运动外套   |  799.90 |       399.90 |      399.90 |\n|  8 | 户外运动       | 山地自行车 | 1399.90 |       399.90 |      399.90 |\n+----+---------------+------------+---------+--------------+-------------+\n12 rows in set (0.00 sec)<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p><strong>2．NTILE(n)函数</strong></p>\n<p>NTILE(n)函数将分区中的有序数据分为n个桶，记录桶编号。</p>\n<p>举例：将goods表中的商品按照价格分为3组。</p>\n<pre class=\"line-numbers language-mysql\" data-language=\"mysql\"><code class=\"language-mysql\">mysql&gt; SELECT NTILE(3) OVER w AS nt,id, category, NAME, price\n    -&gt; FROM goods WINDOW w AS (PARTITION BY category_id ORDER BY price);\n+----+----+---------------+------------+---------+\n| nt | id | category      | NAME       | price   |\n+----+----+---------------+------------+---------+\n|  1 |  5 | 女装/女士精品 | 百褶裙     |   29.90 |\n|  1 |  1 | 女装/女士精品 | T恤        |   39.90 |\n|  2 |  2 | 女装/女士精品 | 连衣裙     |   79.90 |\n|  2 |  3 | 女装/女士精品 | 卫衣       |   89.90 |\n|  3 |  4 | 女装/女士精品 | 牛仔裤     |   89.90 |\n|  3 |  6 | 女装/女士精品 | 呢绒外套   |  399.90 |\n|  1 |  9 | 户外运动      | 登山杖     |   59.90 |\n|  1 |  7 | 户外运动      | 自行车     |  399.90 |\n|  2 | 10 | 户外运动      | 骑行装备   |  399.90 |\n|  2 | 12 | 户外运动      | 滑板       |  499.90 |\n|  3 | 11 | 户外运动      | 运动外套   |  799.90 |\n|  3 |  8 | 户外运动      | 山地自行车 | 1399.90 |\n+----+----+---------------+------------+---------+\n12 rows in set (0.00 sec)<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h3 id=\"2-5-小-结\"><a href=\"#2-5-小-结\" class=\"headerlink\" title=\"2.5 小 结\"></a>2.5 小 结</h3><p>窗口函数的特点是可以分组，而且可以在分组内排序。另外，窗口函数不会因为分组而减少原表中的行数，这对我们在原表数据的基础上进行统计和排序非常有用。</p>\n<h2 id=\"3-新特性2：公用表表达式\"><a href=\"#3-新特性2：公用表表达式\" class=\"headerlink\" title=\"3. 新特性2：公用表表达式\"></a>3. 新特性2：公用表表达式</h2><p>公用表表达式（或通用表表达式）简称为CTE（Common Table Expressions）。CTE是一个命名的临时结果集，作用范围是当前语句。CTE可以理解成一个可以复用的子查询，当然跟子查询还是有点区别的，CTE可以引用其他CTE，但子查询不能引用其他子查询。所以，可以考虑代替子查询。</p>\n<p>依据语法结构和执行方式的不同，公用表表达式分为<code>普通公用表表达式</code>和<code>递归公用表表达式</code> 2 种。</p>\n<h3 id=\"3-1-普通公用表表达式\"><a href=\"#3-1-普通公用表表达式\" class=\"headerlink\" title=\"3.1 普通公用表表达式\"></a>3.1 普通公用表表达式</h3><p>普通公用表表达式的语法结构是：</p>\n<pre class=\"line-numbers language-mysql\" data-language=\"mysql\"><code class=\"language-mysql\">WITH CTE名称 \nAS （子查询）\nSELECT|DELETE|UPDATE 语句;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n<p>普通公用表表达式类似于子查询，不过，跟子查询不同的是，它可以被多次引用，而且可以被其他的普通公用表表达式所引用。</p>\n<p>举例：查询员工所在的部门的详细信息。</p>\n<pre class=\"line-numbers language-mysql\" data-language=\"mysql\"><code class=\"language-mysql\">mysql&gt; SELECT * FROM departments\n    -&gt; WHERE department_id IN (\n    -&gt;                  SELECT DISTINCT department_id\n    -&gt;                  FROM employees\n    -&gt;                  );\n+---------------+------------------+------------+-------------+\n| department_id | department_name  | manager_id | location_id |\n+---------------+------------------+------------+-------------+\n|            10 | Administration   |        200 |        1700 |\n|            20 | Marketing        |        201 |        1800 |\n|            30 | Purchasing       |        114 |        1700 |\n|            40 | Human Resources  |        203 |        2400 |\n|            50 | Shipping         |        121 |        1500 |\n|            60 | IT               |        103 |        1400 |\n|            70 | Public Relations |        204 |        2700 |\n|            80 | Sales            |        145 |        2500 |\n|            90 | Executive        |        100 |        1700 |\n|           100 | Finance          |        108 |        1700 |\n|           110 | Accounting       |        205 |        1700 |\n+---------------+------------------+------------+-------------+\n11 rows in set (0.00 sec)<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>这个查询也可以用普通公用表表达式的方式完成：</p>\n<pre class=\"line-numbers language-mysql\" data-language=\"mysql\"><code class=\"language-mysql\">mysql&gt; WITH emp_dept_id\n    -&gt; AS (SELECT DISTINCT department_id FROM employees)\n    -&gt; SELECT *\n    -&gt; FROM departments d JOIN emp_dept_id e\n    -&gt; ON d.department_id = e.department_id;\n+---------------+------------------+------------+-------------+---------------+\n| department_id | department_name  | manager_id | location_id | department_id |\n+---------------+------------------+------------+-------------+---------------+\n|            90 | Executive        |        100 |        1700 |            90 |\n|            60 | IT               |        103 |        1400 |            60 |\n|           100 | Finance          |        108 |        1700 |           100 |\n|            30 | Purchasing       |        114 |        1700 |            30 |\n|            50 | Shipping         |        121 |        1500 |            50 |\n|            80 | Sales            |        145 |        2500 |            80 |\n|            10 | Administration   |        200 |        1700 |            10 |\n|            20 | Marketing        |        201 |        1800 |            20 |\n|            40 | Human Resources  |        203 |        2400 |            40 |\n|            70 | Public Relations |        204 |        2700 |            70 |\n|           110 | Accounting       |        205 |        1700 |           110 |\n+---------------+------------------+------------+-------------+---------------+\n11 rows in set (0.00 sec)<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>例子说明，公用表表达式可以起到子查询的作用。以后如果遇到需要使用子查询的场景，你可以在查询之前，先定义公用表表达式，然后在查询中用它来代替子查询。而且，跟子查询相比，公用表表达式有一个优点，就是定义过公用表表达式之后的查询，可以像一个表一样多次引用公用表表达式，而子查询则不能。</p>\n<h3 id=\"3-2-递归公用表表达式\"><a href=\"#3-2-递归公用表表达式\" class=\"headerlink\" title=\"3.2 递归公用表表达式\"></a>3.2 递归公用表表达式</h3><p>递归公用表表达式也是一种公用表表达式，只不过，除了普通公用表表达式的特点以外，它还有自己的特点，就是<strong>可以调用自己</strong>。它的语法结构是：</p>\n<pre class=\"line-numbers language-mysql\" data-language=\"mysql\"><code class=\"language-mysql\">WITH RECURSIVE\nCTE名称 AS （子查询）\nSELECT|DELETE|UPDATE 语句;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n<p>递归公用表表达式由 2 部分组成，分别是种子查询和递归查询，中间通过关键字 UNION  [ALL]进行连接。这里的<strong>种子查询，意思就是获得递归的初始值</strong>。这个查询只会运行一次，以创建初始数据集，之后递归查询会一直执行，直到没有任何新的查询数据产生，递归返回。</p>\n<p><strong>案例：</strong>针对于我们常用的employees表，包含employee_id，last_name和manager_id三个字段。如果a是b的管理者，那么，我们可以把b叫做a的下属，如果同时b又是c的管理者，那么c就是b的下属，是a的下下属。</p>\n<p>下面我们尝试用查询语句列出所有具有下下属身份的人员信息。</p>\n<p>如果用我们之前学过的知识来解决，会比较复杂，至少要进行 4 次查询才能搞定：</p>\n<ul>\n<li><p>第一步，先找出初代管理者，就是不以任何别人为管理者的人，把结果存入临时表；</p>\n</li>\n<li><p>第二步，找出所有以初代管理者为管理者的人，得到一个下属集，把结果存入临时表；</p>\n</li>\n<li><p>第三步，找出所有以下属为管理者的人，得到一个下下属集，把结果存入临时表。</p>\n</li>\n<li><p>第四步，找出所有以下下属为管理者的人，得到一个结果集。</p>\n</li>\n</ul>\n<p>如果第四步的结果集为空，则计算结束，第三步的结果集就是我们需要的下下属集了，否则就必须继续进行第四步，一直到结果集为空为止。比如上面的这个数据表，就需要到第五步，才能得到空结果集。而且，最后还要进行第六步：把第三步和第四步的结果集合并，这样才能最终获得我们需要的结果集。</p>\n<p>如果用递归公用表表达式，就非常简单了。我介绍下具体的思路。</p>\n<ul>\n<li><p>用递归公用表表达式中的种子查询，找出初代管理者。字段 n 表示代次，初始值为 1，表示是第一代管理者。</p>\n</li>\n<li><p>用递归公用表表达式中的递归查询，查出以这个递归公用表表达式中的人为管理者的人，并且代次的值加 1。直到没有人以这个递归公用表表达式中的人为管理者了，递归返回。</p>\n</li>\n<li><p>在最后的查询中，选出所有代次大于等于 3 的人，他们肯定是第三代及以上代次的下属了，也就是下下属了。这样就得到了我们需要的结果集。</p>\n</li>\n</ul>\n<p>这里看似也是 3 步，实际上是一个查询的 3 个部分，只需要执行一次就可以了。而且也不需要用临时表保存中间结果，比刚刚的方法简单多了。</p>\n<p><strong>代码实现：</strong></p>\n<pre class=\"line-numbers language-mysql\" data-language=\"mysql\"><code class=\"language-mysql\">WITH RECURSIVE cte \nAS \n(\nSELECT employee_id,last_name,manager_id,1 AS n FROM employees WHERE employee_id = 100 -- 种子查询，找到第一代领导\nUNION ALL\nSELECT a.employee_id,a.last_name,a.manager_id,n+1 FROM employees AS a JOIN cte\nON (a.manager_id = cte.employee_id) -- 递归查询，找出以递归公用表表达式的人为领导的人\n)\nSELECT employee_id,last_name FROM cte WHERE n &gt;= 3; <span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>总之，递归公用表表达式对于查询一个有共同的根节点的树形结构数据，非常有用。它可以不受层级的限制，轻松查出所有节点的数据。如果用其他的查询方式，就比较复杂了。</p>\n<h3 id=\"3-3-小-结\"><a href=\"#3-3-小-结\" class=\"headerlink\" title=\"3.3 小 结\"></a>3.3 小 结</h3><p>公用表表达式的作用是可以替代子查询，而且可以被多次引用。递归公用表表达式对查询有一个共同根节点的树形结构数据非常高效，可以轻松搞定其他查询方式难以处理的查询。</p>\n","text":"1 MySQL概述1.1 数据库概述数据库的好处持久化数据到本地可以实现结构化查询，方便管理 数据库相关概念DB：数据库，保存一组有组织的数据的容器DBMS：数据库管理系统，又称为数据库软件（产品），用于管理DB中的数据SQL:结构化查询语言，用于和DBMS通信的语言 数据库存储...","link":"","photos":[],"count_time":{"symbolsCount":"134k","symbolsTime":"2:02"},"categories":[{"name":"数据库","slug":"数据库","count":4,"path":"api/categories/数据库.json"}],"tags":[{"name":"MySQL","slug":"MySQL","count":3,"path":"api/tags/MySQL.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#1-MySQL%E6%A6%82%E8%BF%B0\"><span class=\"toc-text\">1 MySQL概述</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#1-1-%E6%95%B0%E6%8D%AE%E5%BA%93%E6%A6%82%E8%BF%B0\"><span class=\"toc-text\">1.1 数据库概述</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E6%95%B0%E6%8D%AE%E5%BA%93%E7%9A%84%E5%A5%BD%E5%A4%84\"><span class=\"toc-text\">数据库的好处</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E6%95%B0%E6%8D%AE%E5%BA%93%E7%9B%B8%E5%85%B3%E6%A6%82%E5%BF%B5\"><span class=\"toc-text\">数据库相关概念</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E6%95%B0%E6%8D%AE%E5%BA%93%E5%AD%98%E5%82%A8%E6%95%B0%E6%8D%AE%E7%9A%84%E7%89%B9%E7%82%B9\"><span class=\"toc-text\">数据库存储数据的特点</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#1-2-MySQL%E7%9A%84%E8%83%8C%E6%99%AF\"><span class=\"toc-text\">1.2 MySQL的背景</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#1-3-MySQL%E4%BA%A7%E5%93%81%E7%9A%84%E4%BB%8B%E7%BB%8D%E5%92%8C%E5%AE%89%E8%A3%85\"><span class=\"toc-text\">1.3 MySQL产品的介绍和安装</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#MySQL%E6%9C%8D%E5%8A%A1%E7%9A%84%E5%90%AF%E5%8A%A8%E5%92%8C%E5%81%9C%E6%AD%A2\"><span class=\"toc-text\">MySQL服务的启动和停止</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#MySQL%E6%9C%8D%E5%8A%A1%E7%9A%84%E7%99%BB%E5%BD%95%E5%92%8C%E9%80%80%E5%87%BA\"><span class=\"toc-text\">MySQL服务的登录和退出</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#1-4SQL%E8%AF%AD%E8%A8%80%E7%9A%84%E8%A7%84%E5%88%99%E4%B8%8E%E8%A7%84%E8%8C%83\"><span class=\"toc-text\">1.4SQL语言的规则与规范</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%9F%BA%E6%9C%AC%E8%A7%84%E5%88%99\"><span class=\"toc-text\">基本规则</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#SQL%E5%A4%A7%E5%B0%8F%E5%86%99%E8%A7%84%E8%8C%83-%EF%BC%88%E5%BB%BA%E8%AE%AE%E9%81%B5%E5%AE%88%EF%BC%89\"><span class=\"toc-text\">SQL大小写规范 （建议遵守）</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E6%B3%A8-%E9%87%8A\"><span class=\"toc-text\">注 释</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%91%BD%E5%90%8D%E8%A7%84%E5%88%99%EF%BC%88%E6%9A%82%E6%97%B6%E4%BA%86%E8%A7%A3%EF%BC%89\"><span class=\"toc-text\">命名规则（暂时了解）</span></a></li></ol></li></ol></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#2-%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C\"><span class=\"toc-text\">2. 基本操作</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%88%9B%E5%BB%BA%E6%95%B0%E6%8D%AE%E5%BA%93\"><span class=\"toc-text\">创建数据库</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E7%A1%AE%E8%AE%A4%E5%AD%97%E6%AE%B5\"><span class=\"toc-text\">确认字段</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%88%9B%E5%BB%BA%E6%95%B0%E6%8D%AE%E8%A1%A8\"><span class=\"toc-text\">创建数据表</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E6%8F%92%E5%85%A5%E6%95%B0%E6%8D%AE\"><span class=\"toc-text\">插入数据</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#SQL%E7%9A%84%E8%AF%AD%E8%A8%80%E5%88%86%E7%B1%BB\"><span class=\"toc-text\">SQL的语言分类</span></a></li></ol></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#3-DQL%E8%AF%AD%E8%A8%80\"><span class=\"toc-text\">3. DQL语言</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#SELECT%E5%AD%90%E5%8F%A5%E9%A1%BA%E5%BA%8F\"><span class=\"toc-text\">SELECT子句顺序</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#SQL-%E7%9A%84%E6%89%A7%E8%A1%8C%E5%8E%9F%E7%90%86\"><span class=\"toc-text\">SQL 的执行原理</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#WHERE%E5%AD%90%E5%8F%A5%E6%93%8D%E4%BD%9C%E7%AC%A6\"><span class=\"toc-text\">WHERE子句操作符</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E9%80%9A%E9%85%8D%E7%AC%A6LIKE%E7%94%A8%E6%B3%95\"><span class=\"toc-text\">通配符LIKE用法</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F\"><span class=\"toc-text\">正则表达式</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%8D%95%E8%A1%8C%E5%87%BD%E6%95%B0\"><span class=\"toc-text\">单行函数</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%9F%BA%E6%9C%AC%E5%87%BD%E6%95%B0\"><span class=\"toc-text\">基本函数</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%AD%97%E7%AC%A6%E4%B8%B2%E5%87%BD%E6%95%B0\"><span class=\"toc-text\">字符串函数</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E6%97%A5%E6%9C%9F%E6%97%B6%E9%97%B4%E5%A4%84%E7%90%86%E5%87%BD%E6%95%B0\"><span class=\"toc-text\">日期时间处理函数</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E8%8E%B7%E5%8F%96%E6%97%A5%E6%9C%9F%E3%80%81%E6%97%B6%E9%97%B4\"><span class=\"toc-text\">获取日期、时间</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E6%97%A5%E6%9C%9F%E4%B8%8E%E6%97%B6%E9%97%B4%E6%88%B3%E7%9A%84%E8%BD%AC%E6%8D%A2\"><span class=\"toc-text\">日期与时间戳的转换</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E8%8E%B7%E5%8F%96%E6%9C%88%E4%BB%BD%E3%80%81%E6%98%9F%E6%9C%9F%E3%80%81%E6%98%9F%E6%9C%9F%E6%95%B0%E3%80%81%E5%A4%A9%E6%95%B0%E7%AD%89%E5%87%BD%E6%95%B0\"><span class=\"toc-text\">获取月份、星期、星期数、天数等函数</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E6%97%A5%E6%9C%9F%E7%9A%84%E6%93%8D%E4%BD%9C%E5%87%BD%E6%95%B0\"><span class=\"toc-text\">日期的操作函数</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E6%97%B6%E9%97%B4%E5%92%8C%E7%A7%92%E9%92%9F%E8%BD%AC%E6%8D%A2%E7%9A%84%E5%87%BD%E6%95%B0\"><span class=\"toc-text\">时间和秒钟转换的函数</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E8%AE%A1%E7%AE%97%E6%97%A5%E6%9C%9F%E5%92%8C%E6%97%B6%E9%97%B4%E7%9A%84%E5%87%BD%E6%95%B0\"><span class=\"toc-text\">计算日期和时间的函数</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E6%97%A5%E6%9C%9F%E7%9A%84%E6%A0%BC%E5%BC%8F%E5%8C%96%E4%B8%8E%E8%A7%A3%E6%9E%90\"><span class=\"toc-text\">日期的格式化与解析</span></a></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E4%B8%89%E8%A7%92%E5%87%BD%E6%95%B0\"><span class=\"toc-text\">三角函数</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E6%8C%87%E6%95%B0%E4%B8%8E%E5%AF%B9%E6%95%B0\"><span class=\"toc-text\">指数与对数</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E8%BF%9B%E5%88%B6%E9%97%B4%E7%9A%84%E8%BD%AC%E6%8D%A2\"><span class=\"toc-text\">进制间的转换</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E6%B5%81%E7%A8%8B%E6%8E%A7%E5%88%B6%E5%87%BD%E6%95%B0\"><span class=\"toc-text\">流程控制函数</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%8A%A0%E5%AF%86%E4%B8%8E%E8%A7%A3%E5%AF%86%E5%87%BD%E6%95%B0\"><span class=\"toc-text\">加密与解密函数</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#MySQL%E4%BF%A1%E6%81%AF%E5%87%BD%E6%95%B0\"><span class=\"toc-text\">MySQL信息函数</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%85%B6%E4%BB%96%E5%87%BD%E6%95%B0\"><span class=\"toc-text\">其他函数</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#SQL%E8%81%9A%E9%9B%86%E5%87%BD%E6%95%B0\"><span class=\"toc-text\">SQL聚集函数</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#GROUP-BY\"><span class=\"toc-text\">GROUP BY</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#HAVING\"><span class=\"toc-text\">HAVING</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#WHERE%E5%92%8CHAVING%E7%9A%84%E5%AF%B9%E6%AF%94\"><span class=\"toc-text\">WHERE和HAVING的对比</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E8%BF%9E%E6%8E%A5%E8%A1%A8jion\"><span class=\"toc-text\">连接表jion</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#sql99%E8%AF%AD%E6%B3%95%EF%BC%9A%E9%80%9A%E8%BF%87join%E5%85%B3%E9%94%AE%E5%AD%97%E5%AE%9E%E7%8E%B0%E8%BF%9E%E6%8E%A5\"><span class=\"toc-text\">sql99语法：通过join关键字实现连接</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%88%AB%E5%90%8D\"><span class=\"toc-text\">别名</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E6%BB%A1%E5%A4%96%E8%BF%9E%E6%8E%A5-FULL-OUTER-JOIN\"><span class=\"toc-text\">满外连接(FULL OUTER JOIN)</span></a></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#UNION%E7%9A%84%E4%BD%BF%E7%94%A8\"><span class=\"toc-text\">UNION的使用</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E4%BB%A3%E7%A0%81%E5%AE%9E%E7%8E%B0\"><span class=\"toc-text\">代码实现</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#SQL99%E8%AF%AD%E6%B3%95%E6%96%B0%E7%89%B9%E6%80%A7\"><span class=\"toc-text\">SQL99语法新特性</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E8%87%AA%E7%84%B6%E8%BF%9E%E6%8E%A5\"><span class=\"toc-text\">自然连接</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#USING%E8%BF%9E%E6%8E%A5\"><span class=\"toc-text\">USING连接</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\"><span class=\"toc-text\"> </span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%88%86%E9%A1%B5%E6%9F%A5%E8%AF%A2Limit\"><span class=\"toc-text\">分页查询Limit</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%AD%90%E6%9F%A5%E8%AF%A2\"><span class=\"toc-text\">子查询</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%8D%95%E8%A1%8C%E5%AD%90%E6%9F%A5%E8%AF%A2\"><span class=\"toc-text\">单行子查询</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%A4%9A%E8%A1%8C%E5%AD%90%E6%9F%A5%E8%AF%A2\"><span class=\"toc-text\">多行子查询</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#-1\"><span class=\"toc-text\"> </span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E7%9B%B8%E5%85%B3%E5%AD%90%E6%9F%A5%E8%AF%A2\"><span class=\"toc-text\">相关子查询</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E7%9B%B8%E5%85%B3%E5%AD%90%E6%9F%A5%E8%AF%A2%E6%89%A7%E8%A1%8C%E6%B5%81%E7%A8%8B\"><span class=\"toc-text\">相关子查询执行流程</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E4%BB%A3%E7%A0%81%E7%A4%BA%E4%BE%8B\"><span class=\"toc-text\">代码示例</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#EXISTS-%E4%B8%8E-NOT-EXISTS%E5%85%B3%E9%94%AE%E5%AD%97\"><span class=\"toc-text\">EXISTS 与 NOT EXISTS关键字</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E7%9B%B8%E5%85%B3%E6%9B%B4%E6%96%B0\"><span class=\"toc-text\">相关更新</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E7%9B%B8%E5%85%B3%E5%88%A0%E9%99%A4\"><span class=\"toc-text\">相关删除</span></a></li></ol></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#-2\"><span class=\"toc-text\"> </span></a></li></ol></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#4-DML%E8%AF%AD%E8%A8%80\"><span class=\"toc-text\">4. DML语言</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#4-1-%E6%8F%92%E5%85%A5\"><span class=\"toc-text\">4.1 插入</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#4-2-%E6%9B%B4%E6%96%B0%E6%95%B0%E6%8D%AE\"><span class=\"toc-text\">4.2 更新数据</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#4-3-%E5%88%A0%E9%99%A4\"><span class=\"toc-text\">4.3 删除</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E6%96%B9%E5%BC%8F1%EF%BC%9Adelete%E8%AF%AD%E5%8F%A5\"><span class=\"toc-text\">方式1：delete语句</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E6%96%B9%E5%BC%8F2%EF%BC%9Atruncate%E8%AF%AD%E5%8F%A5\"><span class=\"toc-text\">方式2：truncate语句</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#MySQL8%E6%96%B0%E7%89%B9%E6%80%A7%EF%BC%9A%E8%AE%A1%E7%AE%97%E5%88%97\"><span class=\"toc-text\">MySQL8新特性：计算列</span></a></li></ol></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#5-DDL%E8%AF%AD%E8%A8%80\"><span class=\"toc-text\">5. DDL语言</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#5-1%E5%88%9B%E5%BB%BA%E6%95%B0%E6%8D%AE%E5%BA%93\"><span class=\"toc-text\">5.1创建数据库</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E4%BD%BF%E7%94%A8%E6%95%B0%E6%8D%AE%E5%BA%93\"><span class=\"toc-text\">使用数据库</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E4%BF%AE%E6%94%B9%E6%95%B0%E6%8D%AE%E5%BA%93\"><span class=\"toc-text\">修改数据库</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%88%A0%E9%99%A4%E6%95%B0%E6%8D%AE%E5%BA%93\"><span class=\"toc-text\">删除数据库</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#5-2-%E5%88%9B%E5%BB%BA%E8%A1%A8-create\"><span class=\"toc-text\">5.2 创建表 create</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E6%A0%87%E8%AF%86%E7%AC%A6%E5%91%BD%E5%90%8D%E8%A7%84%E5%88%99\"><span class=\"toc-text\">标识符命名规则</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#MySQL%E4%B8%AD%E7%9A%84%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B\"><span class=\"toc-text\">MySQL中的数据类型</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E8%87%AA%E5%A2%9E%E9%95%BF%E5%88%97\"><span class=\"toc-text\">自增长列</span></a></li></ol></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#5-3-%E4%BF%AE%E6%94%B9%E8%A1%A8-alter\"><span class=\"toc-text\">5.3 修改表 alter</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#5-4-%E5%88%A0%E9%99%A4%E8%A1%A8\"><span class=\"toc-text\">5.4 删除表</span></a></li></ol></li></ol></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#6-TCL%E8%AF%AD%E8%A8%80\"><span class=\"toc-text\">6. TCL语言</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#6-1-%E6%95%B0%E6%8D%AE%E5%BA%93%E4%BA%8B%E5%8A%A1\"><span class=\"toc-text\">6.1 数据库事务</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E7%9B%B8%E5%85%B3%E6%AD%A5%E9%AA%A4%EF%BC%9A\"><span class=\"toc-text\">相关步骤：</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E4%BA%8B%E5%8A%A1%E7%9A%84%E5%88%86%E7%B1%BB%EF%BC%9A\"><span class=\"toc-text\">事务的分类：</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E4%BD%BF%E7%94%A8%E5%88%B0%E7%9A%84%E5%85%B3%E9%94%AE%E5%AD%97\"><span class=\"toc-text\">使用到的关键字</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E4%BA%8B%E5%8A%A1%E7%9A%84%E9%9A%94%E7%A6%BB%E7%BA%A7%E5%88%AB\"><span class=\"toc-text\">事务的隔离级别:</span></a></li></ol></li></ol></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#7-%E8%A7%86%E5%9B%BE\"><span class=\"toc-text\">7. 视图</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#-3\"><span class=\"toc-text\"> </span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#7-1-%E8%A7%86%E5%9B%BE%E7%9A%84%E5%88%9B%E5%BB%BA%E3%80%81%E5%88%A0%E9%99%A4%E3%80%81%E6%9F%A5%E7%9C%8B\"><span class=\"toc-text\">7.1 视图的创建、删除、查看</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#7-2-%E8%A7%86%E5%9B%BE%E7%9A%84%E5%A2%9E%E5%88%A0%E6%94%B9%E6%9F%A5\"><span class=\"toc-text\">7.2 视图的增删改查</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#7-3-%E6%9F%90%E4%BA%9B%E8%A7%86%E5%9B%BE%E4%B8%8D%E8%83%BD%E6%9B%B4%E6%96%B0\"><span class=\"toc-text\">7.3 某些视图不能更新</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#7-4-%E8%A7%86%E5%9B%BE%E9%80%BB%E8%BE%91%E7%9A%84%E6%9B%B4%E6%96%B0\"><span class=\"toc-text\">7.4 视图逻辑的更新</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E8%A7%86%E5%9B%BE%E4%BC%98%E7%82%B9\"><span class=\"toc-text\">视图优点</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E8%A7%86%E5%9B%BE%E4%B8%8D%E8%B6%B3\"><span class=\"toc-text\">视图不足</span></a></li></ol></li></ol></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#8-%E5%AD%98%E5%82%A8%E8%BF%87%E7%A8%8B\"><span class=\"toc-text\">8 存储过程</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#8-1-%E5%88%9B%E5%BB%BA%E5%AD%98%E5%82%A8%E8%BF%87%E7%A8%8B\"><span class=\"toc-text\">8.1 创建存储过程</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#8-2-%E8%B0%83%E7%94%A8%E5%AD%98%E5%82%A8%E8%BF%87%E7%A8%8B\"><span class=\"toc-text\">8.2 调用存储过程</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#-4\"><span class=\"toc-text\"> </span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#8-3-%E6%9F%A5%E7%9C%8B%E5%AD%98%E5%82%A8%E8%BF%87%E7%A8%8B\"><span class=\"toc-text\">8.3 查看存储过程</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#8-4-%E5%88%A0%E9%99%A4\"><span class=\"toc-text\">8.4 删除</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%85%B3%E4%BA%8E%E5%AD%98%E5%82%A8%E8%BF%87%E7%A8%8B%E4%BD%BF%E7%94%A8%E7%9A%84%E4%BA%89%E8%AE%AE\"><span class=\"toc-text\">关于存储过程使用的争议</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#6-1-%E4%BC%98%E7%82%B9\"><span class=\"toc-text\">6.1 优点</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#6-2-%E7%BC%BA%E7%82%B9\"><span class=\"toc-text\">6.2 缺点</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#-5\"><span class=\"toc-text\"> </span></a></li></ol></li></ol></li></ol></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E7%AC%AC13%E7%AB%A0-%E7%BA%A6%E6%9D%9F\"><span class=\"toc-text\">第13章_约束</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#1-%E7%BA%A6%E6%9D%9F-constraint-%E6%A6%82%E8%BF%B0\"><span class=\"toc-text\">1. 约束(constraint)概述</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#1-1-%E4%B8%BA%E4%BB%80%E4%B9%88%E9%9C%80%E8%A6%81%E7%BA%A6%E6%9D%9F\"><span class=\"toc-text\">1.1 为什么需要约束</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#1-2-%E4%BB%80%E4%B9%88%E6%98%AF%E7%BA%A6%E6%9D%9F\"><span class=\"toc-text\">1.2 什么是约束</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#1-3-%E7%BA%A6%E6%9D%9F%E7%9A%84%E5%88%86%E7%B1%BB\"><span class=\"toc-text\">1.3 约束的分类</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#2-%E9%9D%9E%E7%A9%BA%E7%BA%A6%E6%9D%9F\"><span class=\"toc-text\">2. 非空约束</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#2-1-%E4%BD%9C%E7%94%A8\"><span class=\"toc-text\">2.1 作用</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#2-2-%E5%85%B3%E9%94%AE%E5%AD%97\"><span class=\"toc-text\">2.2 关键字</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#2-3-%E7%89%B9%E7%82%B9\"><span class=\"toc-text\">2.3 特点</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#2-4-%E6%B7%BB%E5%8A%A0%E9%9D%9E%E7%A9%BA%E7%BA%A6%E6%9D%9F\"><span class=\"toc-text\">2.4 添加非空约束</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#2-5-%E5%88%A0%E9%99%A4%E9%9D%9E%E7%A9%BA%E7%BA%A6%E6%9D%9F\"><span class=\"toc-text\">2.5 删除非空约束</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#3-%E5%94%AF%E4%B8%80%E6%80%A7%E7%BA%A6%E6%9D%9F\"><span class=\"toc-text\">3. 唯一性约束</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#3-1-%E4%BD%9C%E7%94%A8\"><span class=\"toc-text\">3.1 作用</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#3-2-%E5%85%B3%E9%94%AE%E5%AD%97\"><span class=\"toc-text\">3.2 关键字</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#3-3-%E7%89%B9%E7%82%B9\"><span class=\"toc-text\">3.3 特点</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#3-4-%E6%B7%BB%E5%8A%A0%E5%94%AF%E4%B8%80%E7%BA%A6%E6%9D%9F\"><span class=\"toc-text\">3.4 添加唯一约束</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#3-5-%E5%85%B3%E4%BA%8E%E5%A4%8D%E5%90%88%E5%94%AF%E4%B8%80%E7%BA%A6%E6%9D%9F\"><span class=\"toc-text\">3.5 关于复合唯一约束</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#3-5-%E5%88%A0%E9%99%A4%E5%94%AF%E4%B8%80%E7%BA%A6%E6%9D%9F\"><span class=\"toc-text\">3.5 删除唯一约束</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#4-PRIMARY-KEY-%E7%BA%A6%E6%9D%9F\"><span class=\"toc-text\">4. PRIMARY KEY 约束</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#4-1-%E4%BD%9C%E7%94%A8\"><span class=\"toc-text\">4.1 作用</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#4-2-%E5%85%B3%E9%94%AE%E5%AD%97\"><span class=\"toc-text\">4.2 关键字</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#4-3-%E7%89%B9%E7%82%B9\"><span class=\"toc-text\">4.3 特点</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#4-4-%E6%B7%BB%E5%8A%A0%E4%B8%BB%E9%94%AE%E7%BA%A6%E6%9D%9F\"><span class=\"toc-text\">4.4 添加主键约束</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#4-5-%E5%85%B3%E4%BA%8E%E5%A4%8D%E5%90%88%E4%B8%BB%E9%94%AE\"><span class=\"toc-text\">4.5 关于复合主键</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#4-6-%E5%88%A0%E9%99%A4%E4%B8%BB%E9%94%AE%E7%BA%A6%E6%9D%9F\"><span class=\"toc-text\">4.6 删除主键约束</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#5-%E8%87%AA%E5%A2%9E%E5%88%97%EF%BC%9AAUTO-INCREMENT\"><span class=\"toc-text\">5. 自增列：AUTO_INCREMENT</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#5-1-%E4%BD%9C%E7%94%A8\"><span class=\"toc-text\">5.1 作用</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#5-2-%E5%85%B3%E9%94%AE%E5%AD%97\"><span class=\"toc-text\">5.2 关键字</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#5-3-%E7%89%B9%E7%82%B9%E5%92%8C%E8%A6%81%E6%B1%82\"><span class=\"toc-text\">5.3 特点和要求</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#5-4-%E5%A6%82%E4%BD%95%E6%8C%87%E5%AE%9A%E8%87%AA%E5%A2%9E%E7%BA%A6%E6%9D%9F\"><span class=\"toc-text\">5.4 如何指定自增约束</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#5-5-%E5%A6%82%E4%BD%95%E5%88%A0%E9%99%A4%E8%87%AA%E5%A2%9E%E7%BA%A6%E6%9D%9F\"><span class=\"toc-text\">5.5 如何删除自增约束</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#5-6-MySQL-8-0%E6%96%B0%E7%89%B9%E6%80%A7%E2%80%94%E8%87%AA%E5%A2%9E%E5%8F%98%E9%87%8F%E7%9A%84%E6%8C%81%E4%B9%85%E5%8C%96\"><span class=\"toc-text\">5.6 MySQL 8.0新特性—自增变量的持久化</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#6-FOREIGN-KEY-%E7%BA%A6%E6%9D%9F\"><span class=\"toc-text\">6. FOREIGN KEY 约束</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#6-1-%E4%BD%9C%E7%94%A8\"><span class=\"toc-text\">6.1 作用</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#6-2-%E5%85%B3%E9%94%AE%E5%AD%97\"><span class=\"toc-text\">6.2 关键字</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#6-3-%E4%B8%BB%E8%A1%A8%E5%92%8C%E4%BB%8E%E8%A1%A8-%E7%88%B6%E8%A1%A8%E5%92%8C%E5%AD%90%E8%A1%A8\"><span class=\"toc-text\">6.3 主表和从表&#x2F;父表和子表</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#6-4-%E7%89%B9%E7%82%B9\"><span class=\"toc-text\">6.4 特点</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#6-5-%E6%B7%BB%E5%8A%A0%E5%A4%96%E9%94%AE%E7%BA%A6%E6%9D%9F\"><span class=\"toc-text\">6.5 添加外键约束</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#6-6-%E6%BC%94%E7%A4%BA%E9%97%AE%E9%A2%98\"><span class=\"toc-text\">6.6 演示问题</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#6-7-%E7%BA%A6%E6%9D%9F%E7%AD%89%E7%BA%A7\"><span class=\"toc-text\">6.7 约束等级</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#6-8-%E5%88%A0%E9%99%A4%E5%A4%96%E9%94%AE%E7%BA%A6%E6%9D%9F\"><span class=\"toc-text\">6.8 删除外键约束</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#6-9-%E5%BC%80%E5%8F%91%E5%9C%BA%E6%99%AF\"><span class=\"toc-text\">6.9 开发场景</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#6-10-%E9%98%BF%E9%87%8C%E5%BC%80%E5%8F%91%E8%A7%84%E8%8C%83\"><span class=\"toc-text\">6.10 阿里开发规范</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#7-CHECK-%E7%BA%A6%E6%9D%9F\"><span class=\"toc-text\">7. CHECK 约束</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#7-1-%E4%BD%9C%E7%94%A8\"><span class=\"toc-text\">7.1 作用</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#2%E3%80%81%E5%85%B3%E9%94%AE%E5%AD%97\"><span class=\"toc-text\">2、关键字</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#3%E3%80%81%E8%AF%B4%E6%98%8E%EF%BC%9AMySQL-5-7-%E4%B8%8D%E6%94%AF%E6%8C%81\"><span class=\"toc-text\">3、说明：MySQL 5.7 不支持</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#8-DEFAULT%E7%BA%A6%E6%9D%9F\"><span class=\"toc-text\">8. DEFAULT约束</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#8-1-%E4%BD%9C%E7%94%A8\"><span class=\"toc-text\">8.1 作用</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#8-2-%E5%85%B3%E9%94%AE%E5%AD%97\"><span class=\"toc-text\">8.2 关键字</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#8-3-%E5%A6%82%E4%BD%95%E7%BB%99%E5%AD%97%E6%AE%B5%E5%8A%A0%E9%BB%98%E8%AE%A4%E5%80%BC\"><span class=\"toc-text\">8.3 如何给字段加默认值</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#8-4-%E5%A6%82%E4%BD%95%E5%88%A0%E9%99%A4%E9%BB%98%E8%AE%A4%E5%80%BC%E7%BA%A6%E6%9D%9F\"><span class=\"toc-text\">8.4 如何删除默认值约束</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#9-%E9%9D%A2%E8%AF%95\"><span class=\"toc-text\">9. 面试</span></a></li></ol></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E7%AC%AC16%E7%AB%A0-%E5%8F%98%E9%87%8F%E3%80%81%E6%B5%81%E7%A8%8B%E6%8E%A7%E5%88%B6%E4%B8%8E%E6%B8%B8%E6%A0%87\"><span class=\"toc-text\">第16章_变量、流程控制与游标</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#1-1-%E7%B3%BB%E7%BB%9F%E5%8F%98%E9%87%8F\"><span class=\"toc-text\">1.1 系统变量</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#1-1-1-%E7%B3%BB%E7%BB%9F%E5%8F%98%E9%87%8F%E5%88%86%E7%B1%BB\"><span class=\"toc-text\">1.1.1 系统变量分类</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#1-1-2-%E6%9F%A5%E7%9C%8B%E7%B3%BB%E7%BB%9F%E5%8F%98%E9%87%8F\"><span class=\"toc-text\">1.1.2 查看系统变量</span></a></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#1-2-%E7%94%A8%E6%88%B7%E5%8F%98%E9%87%8F\"><span class=\"toc-text\">1.2 用户变量</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#1-2-1-%E7%94%A8%E6%88%B7%E5%8F%98%E9%87%8F%E5%88%86%E7%B1%BB\"><span class=\"toc-text\">1.2.1 用户变量分类</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#1-2-2-%E4%BC%9A%E8%AF%9D%E7%94%A8%E6%88%B7%E5%8F%98%E9%87%8F\"><span class=\"toc-text\">1.2.2 会话用户变量</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#1-2-3-%E5%B1%80%E9%83%A8%E5%8F%98%E9%87%8F\"><span class=\"toc-text\">1.2.3 局部变量</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#1-2-4-%E5%AF%B9%E6%AF%94%E4%BC%9A%E8%AF%9D%E7%94%A8%E6%88%B7%E5%8F%98%E9%87%8F%E4%B8%8E%E5%B1%80%E9%83%A8%E5%8F%98%E9%87%8F\"><span class=\"toc-text\">1.2.4 对比会话用户变量与局部变量</span></a></li></ol></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#2-%E5%AE%9A%E4%B9%89%E6%9D%A1%E4%BB%B6%E4%B8%8E%E5%A4%84%E7%90%86%E7%A8%8B%E5%BA%8F\"><span class=\"toc-text\">2. 定义条件与处理程序</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#2-1-%E6%A1%88%E4%BE%8B%E5%88%86%E6%9E%90\"><span class=\"toc-text\">2.1 案例分析</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#2-2-%E5%AE%9A%E4%B9%89%E6%9D%A1%E4%BB%B6\"><span class=\"toc-text\">2.2 定义条件</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#2-3-%E5%AE%9A%E4%B9%89%E5%A4%84%E7%90%86%E7%A8%8B%E5%BA%8F\"><span class=\"toc-text\">2.3 定义处理程序</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#2-4-%E6%A1%88%E4%BE%8B%E8%A7%A3%E5%86%B3\"><span class=\"toc-text\">2.4 案例解决</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#3-%E6%B5%81%E7%A8%8B%E6%8E%A7%E5%88%B6\"><span class=\"toc-text\">3. 流程控制</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#3-1-%E5%88%86%E6%94%AF%E7%BB%93%E6%9E%84%E4%B9%8B-IF\"><span class=\"toc-text\">3.1 分支结构之 IF</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#3-2-%E5%88%86%E6%94%AF%E7%BB%93%E6%9E%84%E4%B9%8B-CASE\"><span class=\"toc-text\">3.2 分支结构之 CASE</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#3-3-%E5%BE%AA%E7%8E%AF%E7%BB%93%E6%9E%84%E4%B9%8BLOOP\"><span class=\"toc-text\">3.3 循环结构之LOOP</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#3-4-%E5%BE%AA%E7%8E%AF%E7%BB%93%E6%9E%84%E4%B9%8BWHILE\"><span class=\"toc-text\">3.4 循环结构之WHILE</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#3-5-%E5%BE%AA%E7%8E%AF%E7%BB%93%E6%9E%84%E4%B9%8BREPEAT\"><span class=\"toc-text\">3.5 循环结构之REPEAT</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#3-6-%E8%B7%B3%E8%BD%AC%E8%AF%AD%E5%8F%A5%E4%B9%8BLEAVE%E8%AF%AD%E5%8F%A5\"><span class=\"toc-text\">3.6 跳转语句之LEAVE语句</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#3-7-%E8%B7%B3%E8%BD%AC%E8%AF%AD%E5%8F%A5%E4%B9%8BITERATE%E8%AF%AD%E5%8F%A5\"><span class=\"toc-text\">3.7 跳转语句之ITERATE语句</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#4-%E6%B8%B8%E6%A0%87\"><span class=\"toc-text\">4. 游标</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#4-1-%E4%BB%80%E4%B9%88%E6%98%AF%E6%B8%B8%E6%A0%87%EF%BC%88%E6%88%96%E5%85%89%E6%A0%87%EF%BC%89\"><span class=\"toc-text\">4.1 什么是游标（或光标）</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#4-2-%E4%BD%BF%E7%94%A8%E6%B8%B8%E6%A0%87%E6%AD%A5%E9%AA%A4\"><span class=\"toc-text\">4.2 使用游标步骤</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#4-3-%E4%B8%BE%E4%BE%8B\"><span class=\"toc-text\">4.3 举例</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#4-5-%E5%B0%8F%E7%BB%93\"><span class=\"toc-text\">4.5 小结</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E8%A1%A5%E5%85%85%EF%BC%9AMySQL-8-0%E7%9A%84%E6%96%B0%E7%89%B9%E6%80%A7%E2%80%94%E5%85%A8%E5%B1%80%E5%8F%98%E9%87%8F%E7%9A%84%E6%8C%81%E4%B9%85%E5%8C%96\"><span class=\"toc-text\">补充：MySQL 8.0的新特性—全局变量的持久化</span></a></li></ol></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E7%AC%AC17%E7%AB%A0-%E8%A7%A6%E5%8F%91%E5%99%A8\"><span class=\"toc-text\">第17章_触发器</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#1-%E8%A7%A6%E5%8F%91%E5%99%A8%E6%A6%82%E8%BF%B0\"><span class=\"toc-text\">1. 触发器概述</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#2-%E8%A7%A6%E5%8F%91%E5%99%A8%E7%9A%84%E5%88%9B%E5%BB%BA\"><span class=\"toc-text\">2. 触发器的创建</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#2-1-%E5%88%9B%E5%BB%BA%E8%A7%A6%E5%8F%91%E5%99%A8%E8%AF%AD%E6%B3%95\"><span class=\"toc-text\">2.1 创建触发器语法</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#2-2-%E4%BB%A3%E7%A0%81%E4%B8%BE%E4%BE%8B\"><span class=\"toc-text\">2.2 代码举例</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#3-%E6%9F%A5%E7%9C%8B%E3%80%81%E5%88%A0%E9%99%A4%E8%A7%A6%E5%8F%91%E5%99%A8\"><span class=\"toc-text\">3. 查看、删除触发器</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#3-1-%E6%9F%A5%E7%9C%8B%E8%A7%A6%E5%8F%91%E5%99%A8\"><span class=\"toc-text\">3.1 查看触发器</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#3-2-%E5%88%A0%E9%99%A4%E8%A7%A6%E5%8F%91%E5%99%A8\"><span class=\"toc-text\">3.2 删除触发器</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#4-%E8%A7%A6%E5%8F%91%E5%99%A8%E7%9A%84%E4%BC%98%E7%BC%BA%E7%82%B9\"><span class=\"toc-text\">4. 触发器的优缺点</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#4-1-%E4%BC%98%E7%82%B9\"><span class=\"toc-text\">4.1 优点</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#4-2-%E7%BC%BA%E7%82%B9\"><span class=\"toc-text\">4.2 缺点</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#4-3-%E6%B3%A8%E6%84%8F%E7%82%B9\"><span class=\"toc-text\">4.3 注意点</span></a></li></ol></li></ol></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#MySQL8%E6%96%B0%E7%89%B9%E6%80%A7\"><span class=\"toc-text\">MySQL8新特性</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#1-%E6%96%B0%E7%89%B9%E6%80%A7%E6%A6%82%E8%BF%B0\"><span class=\"toc-text\">1. 新特性概述</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#1-1-MySQL8-0-%E6%96%B0%E5%A2%9E%E7%89%B9%E6%80%A7\"><span class=\"toc-text\">1.1 MySQL8.0 新增特性</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#1-2-MySQL8-0%E7%A7%BB%E9%99%A4%E7%9A%84%E6%97%A7%E7%89%B9%E6%80%A7\"><span class=\"toc-text\">1.2 MySQL8.0移除的旧特性</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#2-%E6%96%B0%E7%89%B9%E6%80%A71%EF%BC%9A%E7%AA%97%E5%8F%A3%E5%87%BD%E6%95%B0\"><span class=\"toc-text\">2. 新特性1：窗口函数</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#2-1-%E4%BD%BF%E7%94%A8%E7%AA%97%E5%8F%A3%E5%87%BD%E6%95%B0%E5%89%8D%E5%90%8E%E5%AF%B9%E6%AF%94\"><span class=\"toc-text\">2.1 使用窗口函数前后对比</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#2-2-%E7%AA%97%E5%8F%A3%E5%87%BD%E6%95%B0%E5%88%86%E7%B1%BB\"><span class=\"toc-text\">2.2 窗口函数分类</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#2-3-%E8%AF%AD%E6%B3%95%E7%BB%93%E6%9E%84\"><span class=\"toc-text\">2.3 语法结构</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#2-4-%E5%88%86%E7%B1%BB%E8%AE%B2%E8%A7%A3\"><span class=\"toc-text\">2.4 分类讲解</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#1-%E5%BA%8F%E5%8F%B7%E5%87%BD%E6%95%B0\"><span class=\"toc-text\">1. 序号函数</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#2-%E5%88%86%E5%B8%83%E5%87%BD%E6%95%B0\"><span class=\"toc-text\">2. 分布函数</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#3-%E5%89%8D%E5%90%8E%E5%87%BD%E6%95%B0\"><span class=\"toc-text\">3. 前后函数</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#4-%E9%A6%96%E5%B0%BE%E5%87%BD%E6%95%B0\"><span class=\"toc-text\">4. 首尾函数</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#5-%E5%85%B6%E4%BB%96%E5%87%BD%E6%95%B0\"><span class=\"toc-text\">5. 其他函数</span></a></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#2-5-%E5%B0%8F-%E7%BB%93\"><span class=\"toc-text\">2.5 小 结</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#3-%E6%96%B0%E7%89%B9%E6%80%A72%EF%BC%9A%E5%85%AC%E7%94%A8%E8%A1%A8%E8%A1%A8%E8%BE%BE%E5%BC%8F\"><span class=\"toc-text\">3. 新特性2：公用表表达式</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#3-1-%E6%99%AE%E9%80%9A%E5%85%AC%E7%94%A8%E8%A1%A8%E8%A1%A8%E8%BE%BE%E5%BC%8F\"><span class=\"toc-text\">3.1 普通公用表表达式</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#3-2-%E9%80%92%E5%BD%92%E5%85%AC%E7%94%A8%E8%A1%A8%E8%A1%A8%E8%BE%BE%E5%BC%8F\"><span class=\"toc-text\">3.2 递归公用表表达式</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#3-3-%E5%B0%8F-%E7%BB%93\"><span class=\"toc-text\">3.3 小 结</span></a></li></ol></li></ol></li></ol>","author":{"name":"YFR718","slug":"blog-author","avatar":"https://avatars.githubusercontent.com/u/47553658?s=400&u=5e0a85700c66d7a2661c5664ec5f24d94e5ed01a&v=4","link":"/","description":"大数据萌新","socials":{"github":"https://github.com/YFR718","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"d","csdn":"","juejin":"","customs":{}}},"mapped":true,"prev_post":{"title":"环境与包管理","uid":"3c25c67d0781653798d002eeefd584b0","slug":"P3-Anaconda与jupyter notebook","date":"2021-11-11T10:25:42.000Z","updated":"2021-11-11T12:57:37.608Z","comments":true,"path":"api/articles/P3-Anaconda与jupyter notebook.json","keywords":null,"cover":"https://img-blog.csdnimg.cn/23d499d2a47444b3b376f9f321c9ac8b.jpg?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBAWUZSNzE4,size_20,color_FFFFFF,t_70,g_se,x_16#pic_center","text":"1. Pip对 Python 包的查找、下载、安装、卸载的功能。 1.1 pip常用命令pip的更新 python -m pip install --upgrade pip pip安装包 pip install 包名==版本号 pip更新包 pip install --upgra...","link":"","photos":[],"count_time":{"symbolsCount":"3.1k","symbolsTime":"3 mins."},"categories":[{"name":"Python","slug":"Python","count":4,"path":"api/categories/Python.json"}],"tags":[],"author":{"name":"YFR718","slug":"blog-author","avatar":"https://avatars.githubusercontent.com/u/47553658?s=400&u=5e0a85700c66d7a2661c5664ec5f24d94e5ed01a&v=4","link":"/","description":"大数据萌新","socials":{"github":"https://github.com/YFR718","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"d","csdn":"","juejin":"","customs":{}}}},"next_post":{"title":"PyMySQL","uid":"31135c47a98e6bfd7ef6f55be399b5e8","slug":"P2-PyMySQL","date":"2021-11-10T02:06:01.000Z","updated":"2021-11-11T09:59:18.865Z","comments":true,"path":"api/articles/P2-PyMySQL.json","keywords":null,"cover":"https://img-blog.csdnimg.cn/593c816f63e9423bb83bbe395daa3c55.jpg?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBAWUZSNzE4,size_20,color_FFFFFF,t_70,g_se,x_16#pic_center","text":"1. 连接数据库import pymysql # 创建连接对象 conn = pymysql.connect(host='localhost', port=3306, user='root', password='mysql',database='python', charset...","link":"","photos":[],"count_time":{"symbolsCount":"2.5k","symbolsTime":"2 mins."},"categories":[{"name":"Python","slug":"Python","count":4,"path":"api/categories/Python.json"}],"tags":[{"name":"MySQL","slug":"MySQL","count":3,"path":"api/tags/MySQL.json"}],"author":{"name":"YFR718","slug":"blog-author","avatar":"https://avatars.githubusercontent.com/u/47553658?s=400&u=5e0a85700c66d7a2661c5664ec5f24d94e5ed01a&v=4","link":"/","description":"大数据萌新","socials":{"github":"https://github.com/YFR718","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"d","csdn":"","juejin":"","customs":{}}}}}