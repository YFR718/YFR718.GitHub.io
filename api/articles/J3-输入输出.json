{"title":"J3.输入输出","uid":"4457571dadddcdacb8d9147804199b90","slug":"J3-输入输出","date":"2021-11-05T01:34:37.000Z","updated":"2021-11-05T02:08:01.383Z","comments":true,"path":"api/articles/J3-输入输出.json","keywords":null,"cover":"https://img-blog.csdnimg.cn/ce3cebf7632b4003bbd0eca49e0b1a6b.jpg?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBAWUZSNzE4,size_20,color_FFFFFF,t_70,g_se,x_16","content":"<h1 id=\"标准输入输出\"><a href=\"#标准输入输出\" class=\"headerlink\" title=\"标准输入输出\"></a>标准输入输出</h1><h2 id=\"数据读入\"><a href=\"#数据读入\" class=\"headerlink\" title=\"数据读入\"></a>数据读入</h2><pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Scanner</span><span class=\"token punctuation\">;</span>\n<span class=\"token class-name\">Scanner</span> in <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Scanner</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">System</span><span class=\"token punctuation\">,</span>in<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// 读入一行</span>\n<span class=\"token class-name\">String</span> name <span class=\"token operator\">=</span> in<span class=\"token punctuation\">.</span><span class=\"token function\">nextLine</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">//读入一个单词</span>\n<span class=\"token class-name\">String</span> name <span class=\"token operator\">=</span> in<span class=\"token punctuation\">.</span><span class=\"token function\">next</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">//读入一个整数</span>\n <span class=\"token keyword\">int</span> a <span class=\"token operator\">=</span> sc<span class=\"token punctuation\">.</span><span class=\"token function\">nextInt</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<div class=\"table-container\">\n<table>\n<thead>\n<tr>\n<th>方法</th>\n<th>功能</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Scanner (InputStream in)</td>\n<td>用给定的输入流创建一个Scanner对象。</td>\n</tr>\n<tr>\n<td>String nextLine( )</td>\n<td>读取输入的下一行内容。</td>\n</tr>\n<tr>\n<td>String next( )</td>\n<td>读取输入的下一个单词（以空格作为分隔符）。</td>\n</tr>\n<tr>\n<td>int nextInt( )<br> int nextInt( )</td>\n<td>读取并转换下一个表示整数或浮点数的字符序列。</td>\n</tr>\n<tr>\n<td>boolean hasNext( )</td>\n<td>检测输入中是否还有其他单词。</td>\n</tr>\n<tr>\n<td>boolean hasNextInt( )<br>boolean hasNextDouble( )</td>\n<td>检测是否还有表示整数或浮点数的下一个字符序列。</td>\n</tr>\n<tr>\n<td>static Console console( )</td>\n</tr>\n</tbody>\n</table>\n</div>\n<h2 id=\"格式化输出\"><a href=\"#格式化输出\" class=\"headerlink\" title=\"格式化输出\"></a>格式化输出</h2><pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">print</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p><strong>每一个以%字符开始的格式说明符都用相应的参数替换。格式说明符尾部的转换符将指示被格式化的数值类型：</strong></p>\n<div class=\"table-container\">\n<table>\n<thead>\n<tr>\n<th>转换符</th>\n<th>类型</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>d</td>\n<td>十进制</td>\n</tr>\n<tr>\n<td>x</td>\n<td>十六进制</td>\n</tr>\n<tr>\n<td>o</td>\n<td>八进制</td>\n</tr>\n<tr>\n<td>f</td>\n<td>定点浮点数</td>\n</tr>\n<tr>\n<td>e</td>\n<td>指数浮点数</td>\n</tr>\n<tr>\n<td>g</td>\n<td>通用浮点数</td>\n</tr>\n<tr>\n<td>a</td>\n<td>十六进制浮点数</td>\n</tr>\n<tr>\n<td>s</td>\n<td>字符串</td>\n</tr>\n<tr>\n<td>c</td>\n<td>字符</td>\n</tr>\n<tr>\n<td>b</td>\n<td>布尔</td>\n</tr>\n<tr>\n<td>h</td>\n<td>散列码</td>\n</tr>\n<tr>\n<td>tx/TX</td>\n<td>日期时间</td>\n</tr>\n<tr>\n<td>%</td>\n<td>百分号</td>\n</tr>\n<tr>\n<td>n</td>\n<td>行分隔符</td>\n</tr>\n</tbody>\n</table>\n</div>\n<p><strong>可以使用多个标志，例如，“%, ( .2f”使用分组的分隔符并将负数括在括号内。</strong></p>\n<div class=\"table-container\">\n<table>\n<thead>\n<tr>\n<th>标志</th>\n<th>目的</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>+</td>\n<td>打印正负号</td>\n</tr>\n<tr>\n<td>空格</td>\n<td>在正整数前加空格</td>\n</tr>\n<tr>\n<td>0</td>\n<td>数字前补0</td>\n</tr>\n<tr>\n<td>-</td>\n<td>左对齐</td>\n</tr>\n<tr>\n<td>(</td>\n<td>将负数扩在括号里</td>\n</tr>\n<tr>\n<td>,</td>\n<td>添加分组分隔符</td>\n</tr>\n<tr>\n<td>#(对f格式)</td>\n<td>包含小数点</td>\n</tr>\n<tr>\n<td>#(对x或0格式)</td>\n<td>添加前缀0x</td>\n</tr>\n<tr>\n<td>$</td>\n<td>给定被格式化的参数索引。例如，%ISd. %1$x 将以十进制和十六进制格式打印第1个参数</td>\n</tr>\n<tr>\n<td>&lt;</td>\n<td>格式化前面说明的数值。例如，%d%&lt;x以十进制和十六进制打印同一个数值</td>\n</tr>\n<tr>\n<td></td>\n</tr>\n</tbody>\n</table>\n</div>\n<h1 id=\"文件输入与输出\"><a href=\"#文件输入与输出\" class=\"headerlink\" title=\"文件输入与输出\"></a>文件输入与输出</h1><h2 id=\"文件读取\"><a href=\"#文件读取\" class=\"headerlink\" title=\"文件读取\"></a>文件读取</h2><p>要想对文件进行读取，就需要一个用File对象构造一个Scanner对象，如下所示：</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token class-name\">Scanner</span> in <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Scanner</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Paths</span><span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"myfile.txt\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"UTF-8\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p><strong>如果文件名中包含反斜杠符号，就要记住在每个反斜杠之前再加一个额外的反斜杠：“c:<span>\\</span>mydirectory<span>\\</span>myfile.txt”。</strong></p>\n<h2 id=\"文件写入\"><a href=\"#文件写入\" class=\"headerlink\" title=\"文件写入\"></a>文件写入</h2><p>要想写入文件，就需要构造一个PrintWriter对象。在构造器中，只需要提供文件名：</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token class-name\">PrintWriter</span> out <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">PrintWriter</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"myfile.txt\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"UTF-8\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<div class=\"table-container\">\n<table>\n<thead>\n<tr>\n<th></th>\n<th></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Scanner(File f)</td>\n<td>构造一个从给定文件读取数据的Scanner。</td>\n</tr>\n<tr>\n<td>Scanner(String data)</td>\n<td>构造一个从给定字符串读取数据的Scanner。</td>\n</tr>\n<tr>\n<td>PrintWriter(String fileName)</td>\n<td>PrintWriter(String fileName)</td>\n</tr>\n<tr>\n<td>static Path get(String pathname)</td>\n<td>根据给定的路径名构造一个Path。</td>\n</tr>\n<tr>\n<td></td>\n</tr>\n</tbody>\n</table>\n</div>\n","feature":true,"text":"标准输入输出数据读入import java.util.Scanner; Scanner in = new Scanner(System,in); // 读入一行 String name = in.nextLine(); //读入一个单词 String name = in.next...","link":"","photos":[],"count_time":{"symbolsCount":"1.5k","symbolsTime":"1 mins."},"categories":[{"name":"JAVA","slug":"JAVA","count":4,"path":"api/categories/JAVA.json"}],"tags":[{"name":"java","slug":"java","count":4,"path":"api/tags/java.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E6%A0%87%E5%87%86%E8%BE%93%E5%85%A5%E8%BE%93%E5%87%BA\"><span class=\"toc-text\">标准输入输出</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E6%95%B0%E6%8D%AE%E8%AF%BB%E5%85%A5\"><span class=\"toc-text\">数据读入</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E6%A0%BC%E5%BC%8F%E5%8C%96%E8%BE%93%E5%87%BA\"><span class=\"toc-text\">格式化输出</span></a></li></ol></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E6%96%87%E4%BB%B6%E8%BE%93%E5%85%A5%E4%B8%8E%E8%BE%93%E5%87%BA\"><span class=\"toc-text\">文件输入与输出</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E6%96%87%E4%BB%B6%E8%AF%BB%E5%8F%96\"><span class=\"toc-text\">文件读取</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E6%96%87%E4%BB%B6%E5%86%99%E5%85%A5\"><span class=\"toc-text\">文件写入</span></a></li></ol></li></ol>","author":{"name":"YFR718","slug":"blog-author","avatar":"https://avatars.githubusercontent.com/u/47553658?s=400&u=5e0a85700c66d7a2661c5664ec5f24d94e5ed01a&v=4","link":"/","description":"大数据萌新","socials":{"github":"https://github.com/YFR718","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"d","csdn":"","juejin":"","customs":{}}},"mapped":true,"prev_post":{},"next_post":{"title":"2. 两数相加","uid":"4ec631ba9c8264548f541e9cb0021e69","slug":"l0002","date":"2021-11-04T14:51:28.000Z","updated":"2021-11-04T14:57:15.378Z","comments":true,"path":"api/articles/l0002.json","keywords":null,"cover":"https://gimg2.baidu.com/image_search/src=http%3A%2F%2Fpic2.zhimg.com%2Fv2-3cd4587b9b5710397e4f843ba34701d9_1200x500.jpg&refer=http%3A%2F%2Fpic2.zhimg.com&app=2002&size=f9999,10000&q=a80&n=0&g=0n&fmt=jpeg?sec=1638619543&t=d96ab8217b035d9f4f538a3b47b2cf1b","text":"给你两个 非空 的链表，表示两个非负的整数。它们每位数字都是按照 逆序 的方式存储的，并且每个节点只能存储 一位 数字。 请你将两个数相加，并以相同形式返回一个表示和的链表。 你可以假设除了数字 0 之外，这两个数都不会以 0 开头。 输入：l1 = [2,4,3], l2 = ...","link":"","photos":[],"count_time":{"symbolsCount":"1k","symbolsTime":"1 mins."},"categories":[{"name":"LeetCode","slug":"LeetCode","count":2,"path":"api/categories/LeetCode.json"}],"tags":[{"name":"链表","slug":"链表","count":1,"path":"api/tags/链表.json"}],"author":{"name":"YFR718","slug":"blog-author","avatar":"https://avatars.githubusercontent.com/u/47553658?s=400&u=5e0a85700c66d7a2661c5664ec5f24d94e5ed01a&v=4","link":"/","description":"大数据萌新","socials":{"github":"https://github.com/YFR718","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"d","csdn":"","juejin":"","customs":{}}},"feature":true}}