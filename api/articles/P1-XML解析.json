{"title":"XML解析","uid":"446bbf5d6e6c49aba6d56562199f8a0a","slug":"P1-XML解析","date":"2021-11-10T01:23:54.000Z","updated":"2021-11-10T12:28:40.173Z","comments":true,"path":"api/articles/P1-XML解析.json","keywords":null,"cover":"https://img-blog.csdnimg.cn/ddc5881723c045dab033cc64133cf4bd.jpg?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBAWUZSNzE4,size_20,color_FFFFFF,t_70,g_se,x_16#pic_center","content":"<h1 id=\"1-xml-etree-ElementTree\"><a href=\"#1-xml-etree-ElementTree\" class=\"headerlink\" title=\"1 xml.etree.ElementTree\"></a>1 xml.etree.ElementTree</h1><p>对Python的轻量级XML支持。</p>\n<p><strong>XML</strong>是一种固有的分层数据格式，最自然的表示方法是使用树。这个模块有两个类用于此目的:</p>\n<ol>\n<li>ElementTree将整个XML文档表示为树。</li>\n<li>元素表示此树中的单个节点。</li>\n</ol>\n<p>​        与整个文档的交互(对文件的读写)通常在ElementTree级别完成。与单个XML元素及其子元素的交互是在element级别上完成的。</p>\n<p>​        元素是一种灵活的容器对象，用于在内存中存储分层数据结构。它可以被描述为介于列表和字典之间的混合体。每个元素都有许多与之相关的属性:</p>\n<ul>\n<li>‘tag’——包含元素名称的字符串。</li>\n<li>‘attributes’——一个存储元素属性的Python字典。</li>\n<li>‘text’ -一个包含元素文本内容的字符串。</li>\n<li>‘tail’ -一个可选字符串，在元素的结束标签之后包含文本。以及一系列存储在Python序列中的子元素。</li>\n</ul>\n<p>​        要创建元素实例，请使用element构造函数或SubElement工厂函数。还可以使用ElementTree类包装元素结构，并将其与XML进行转换。</p>\n<h2 id=\"1-1-导入数据\"><a href=\"#1-1-导入数据\" class=\"headerlink\" title=\"1.1 导入数据\"></a>1.1 导入数据</h2><p><strong>从xml文件导入</strong></p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token keyword\">import</span> xml<span class=\"token punctuation\">.</span>etree<span class=\"token punctuation\">.</span>ElementTree <span class=\"token keyword\">as</span> ET\ntree <span class=\"token operator\">=</span> ET<span class=\"token punctuation\">.</span>parse<span class=\"token punctuation\">(</span><span class=\"token string\">'country_data.xml'</span><span class=\"token punctuation\">)</span>\nroot <span class=\"token operator\">=</span> tree<span class=\"token punctuation\">.</span>getroot<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n<p><strong>从html导入</strong></p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token keyword\">import</span> xml<span class=\"token punctuation\">.</span>etree<span class=\"token punctuation\">.</span>ElementTree <span class=\"token keyword\">as</span> ET\n<span class=\"token comment\"># 要爬取的地址</span>\nurl <span class=\"token operator\">=</span> <span class=\"token string\">\"https://www.re3data.org/api/v1/repositories\"</span>\nres <span class=\"token operator\">=</span> requests<span class=\"token punctuation\">.</span>get<span class=\"token punctuation\">(</span>url<span class=\"token punctuation\">)</span>\nroot <span class=\"token operator\">=</span> ET<span class=\"token punctuation\">.</span>fromstring<span class=\"token punctuation\">(</span>res<span class=\"token punctuation\">.</span>text<span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h2 id=\"1-2-数据查询\"><a href=\"#1-2-数据查询\" class=\"headerlink\" title=\"1.2 数据查询\"></a>1.2 数据查询</h2><h3 id=\"1-2-1-获取四个属性\"><a href=\"#1-2-1-获取四个属性\" class=\"headerlink\" title=\"1.2.1 获取四个属性\"></a>1.2.1 获取四个属性</h3><pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>root<span class=\"token punctuation\">.</span>tag<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>root<span class=\"token punctuation\">.</span>attrib<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>root<span class=\"token punctuation\">.</span>tail<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>res<span class=\"token punctuation\">.</span>text<span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n<h3 id=\"1-2-2-访问子节点\"><a href=\"#1-2-2-访问子节点\" class=\"headerlink\" title=\"1.2.2 访问子节点\"></a>1.2.2 访问子节点</h3><p>用 <code>len(Element)</code> 检查子节点个数</p>\n<p>用 <code>Element[0]</code> 访问第0个子节点，<code>Element[1]</code> 访问第1个子节点…</p>\n<p>用 <code>for child in Element</code> 遍历所有子节点</p>\n<p>用 <code>Element.remove(child)</code> 删除某个子节点</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> root<span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">.</span>tag<span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n<h3 id=\"1-2-3-查询指定标签\"><a href=\"#1-2-3-查询指定标签\" class=\"headerlink\" title=\"1.2.3 查询指定标签\"></a>1.2.3 查询指定标签</h3><ol>\n<li>Elementt.iter() #递归迭代xml文件中所有节点（包含子节点，以及子节点的子节点），返回一个包含所有节点的迭代器</li>\n<li>Element.find(tag) #查找第一个节点为tag的直接子元素，返回一个节点对象</li>\n<li>Element.findall(tag) #查找节点为tag的所有直接子元素’，返回一个节点列表<h1 id=\"直接子元素的意思：只会查找当前节点的子节点那一级目录\"><a href=\"#直接子元素的意思：只会查找当前节点的子节点那一级目录\" class=\"headerlink\" title=\"直接子元素的意思：只会查找当前节点的子节点那一级目录\"></a>直接子元素的意思：只会查找当前节点的子节点那一级目录</h1></li>\n</ol>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token keyword\">for</span> rep <span class=\"token keyword\">in</span> root<span class=\"token punctuation\">.</span>findall<span class=\"token punctuation\">(</span><span class=\"token string\">'repository'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token comment\"># print(rep.find('id').text)</span>\n    <span class=\"token comment\"># print(rep.find('name').text)</span>\n    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>rep<span class=\"token punctuation\">.</span>find<span class=\"token punctuation\">(</span><span class=\"token string\">'link'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>attrib<span class=\"token punctuation\">[</span><span class=\"token string\">'href'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>rep<span class=\"token punctuation\">.</span>find<span class=\"token punctuation\">(</span><span class=\"token string\">'link'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>attrib<span class=\"token punctuation\">[</span><span class=\"token string\">'rel'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n<p><strong>处理含namespace的文件</strong></p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">namespace = \"{http://www.re3data.org/schema/2-2}\"\nfor element in root.iter(namespace + \"re3data.orgIdentifier\"):  # ID\n    print(\"1#   \", element.text)\n    ID = element.text<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n<h3 id=\"1-2-4-树结构与-XML-字符串的相互转换\"><a href=\"#1-2-4-树结构与-XML-字符串的相互转换\" class=\"headerlink\" title=\"1.2.4 树结构与 XML 字符串的相互转换\"></a>1.2.4 树结构与 XML 字符串的相互转换</h3><p>使用 <code>xml.etree.ElementTree</code> 包中的 <code>tostring()</code> 和 <code>fromstring()</code> 函数：</p>\n<ul>\n<li>如果 <code>tostring()</code> 参数不指定 <code>encoding=\"unicode\"</code>，函数将返回 byte 序列。</li>\n</ul>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token keyword\">from</span> xml<span class=\"token punctuation\">.</span>etree<span class=\"token punctuation\">.</span>ElementTree <span class=\"token keyword\">import</span> Element<span class=\"token punctuation\">,</span> tostring\n\ntree_str <span class=\"token operator\">=</span> tostring<span class=\"token punctuation\">(</span>root<span class=\"token punctuation\">,</span> encoding<span class=\"token operator\">=</span><span class=\"token string\">\"unicode\"</span><span class=\"token punctuation\">)</span>\n\nnew_root <span class=\"token operator\">=</span> fromstring<span class=\"token punctuation\">(</span>tree_str<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>new_root<span class=\"token punctuation\">.</span>tag<span class=\"token punctuation\">,</span> new_root<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>tag<span class=\"token punctuation\">,</span> new_root<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>tag<span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h2 id=\"1-3-数据创建\"><a href=\"#1-3-数据创建\" class=\"headerlink\" title=\"1.3 数据创建\"></a>1.3 数据创建</h2><h3 id=\"1-3-1-创建树节点\"><a href=\"#1-3-1-创建树节点\" class=\"headerlink\" title=\"1.3.1 创建树节点\"></a>1.3.1 创建树节点</h3><p>创建树节点时，一定要指定节点名：</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">tree_node <span class=\"token operator\">=</span> Element<span class=\"token punctuation\">(</span><span class=\"token string\">\"node1\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>tree_node<span class=\"token punctuation\">.</span>tag<span class=\"token punctuation\">)</span>    <span class=\"token comment\"># 输出 node1</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>tree_node<span class=\"token punctuation\">.</span>text<span class=\"token punctuation\">)</span>   <span class=\"token comment\"># 输出 None</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>tree_node<span class=\"token punctuation\">.</span>tail<span class=\"token punctuation\">)</span>   <span class=\"token comment\"># 输出 None</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>tree_node<span class=\"token punctuation\">.</span>attrib<span class=\"token punctuation\">)</span> <span class=\"token comment\"># 输出 {}</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>也可在创建时指定属性（Element.attrib）：</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">tree_node <span class=\"token operator\">=</span> Element<span class=\"token punctuation\">(</span><span class=\"token string\">\"node2\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span><span class=\"token string\">\"attr1\"</span><span class=\"token punctuation\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"attr2\"</span><span class=\"token punctuation\">:</span> <span class=\"token number\">2</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>tree_node<span class=\"token punctuation\">.</span>tag<span class=\"token punctuation\">)</span>    <span class=\"token comment\"># 输出 node2</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>tree_node<span class=\"token punctuation\">.</span>text<span class=\"token punctuation\">)</span>   <span class=\"token comment\"># 输出 None</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>tree_node<span class=\"token punctuation\">.</span>tail<span class=\"token punctuation\">)</span>   <span class=\"token comment\"># 输出 None</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>tree_node<span class=\"token punctuation\">.</span>attrib<span class=\"token punctuation\">)</span> <span class=\"token comment\"># 输出 {'attr1': 1, 'attr2': 2}</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h3 id=\"1-3-2-设置文本（Element-text）或附加文本（Element-tail）\"><a href=\"#1-3-2-设置文本（Element-text）或附加文本（Element-tail）\" class=\"headerlink\" title=\"1.3.2 设置文本（Element.text）或附加文本（Element.tail）\"></a>1.3.2 设置文本（Element.text）或附加文本（Element.tail）</h3><p>创建节点后，可以设置 <code>text</code>, <code>tail</code> 等类成员。这些成员的初始值为 <code>None</code>。</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">tree_node <span class=\"token operator\">=</span> Element<span class=\"token punctuation\">(</span><span class=\"token string\">\"node1\"</span><span class=\"token punctuation\">)</span>\ntree_node<span class=\"token punctuation\">.</span>text <span class=\"token operator\">=</span> <span class=\"token string\">\"Hello world\"</span>\ntree_node<span class=\"token punctuation\">.</span>tail <span class=\"token operator\">=</span> <span class=\"token string\">\"Bye\"</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n<h3 id=\"1-3-3-添加子节点\"><a href=\"#1-3-3-添加子节点\" class=\"headerlink\" title=\"1.3.3 添加子节点\"></a>1.3.3 添加子节点</h3><p>可以用 <code>Element.append()</code> 成员函数添加子节点：</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">root <span class=\"token operator\">=</span> Element<span class=\"token punctuation\">(</span><span class=\"token string\">\"root\"</span><span class=\"token punctuation\">)</span>\nchild1 <span class=\"token operator\">=</span> Element<span class=\"token punctuation\">(</span><span class=\"token string\">\"child1\"</span><span class=\"token punctuation\">)</span>\nchild2 <span class=\"token operator\">=</span> Element<span class=\"token punctuation\">(</span><span class=\"token string\">\"child2\"</span><span class=\"token punctuation\">)</span>\n\nroot<span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span>child1<span class=\"token punctuation\">)</span>\nroot<span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span>child2<span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n","text":"1 xml.etree.ElementTree对Python的轻量级XML支持。 XML是一种固有的分层数据格式，最自然的表示方法是使用树。这个模块有两个类用于此目的: ElementTree将整个XML文档表示为树。 元素表示此树中的单个节点。 ​ 与整个文档的交互(对文件的读...","link":"","photos":[],"count_time":{"symbolsCount":"2.7k","symbolsTime":"2 mins."},"categories":[{"name":"Python","slug":"Python","count":4,"path":"api/categories/Python.json"}],"tags":[{"name":"XML","slug":"XML","count":1,"path":"api/tags/XML.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#1-xml-etree-ElementTree\"><span class=\"toc-text\">1 xml.etree.ElementTree</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#1-1-%E5%AF%BC%E5%85%A5%E6%95%B0%E6%8D%AE\"><span class=\"toc-text\">1.1 导入数据</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#1-2-%E6%95%B0%E6%8D%AE%E6%9F%A5%E8%AF%A2\"><span class=\"toc-text\">1.2 数据查询</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#1-2-1-%E8%8E%B7%E5%8F%96%E5%9B%9B%E4%B8%AA%E5%B1%9E%E6%80%A7\"><span class=\"toc-text\">1.2.1 获取四个属性</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#1-2-2-%E8%AE%BF%E9%97%AE%E5%AD%90%E8%8A%82%E7%82%B9\"><span class=\"toc-text\">1.2.2 访问子节点</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#1-2-3-%E6%9F%A5%E8%AF%A2%E6%8C%87%E5%AE%9A%E6%A0%87%E7%AD%BE\"><span class=\"toc-text\">1.2.3 查询指定标签</span></a></li></ol></li></ol></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E7%9B%B4%E6%8E%A5%E5%AD%90%E5%85%83%E7%B4%A0%E7%9A%84%E6%84%8F%E6%80%9D%EF%BC%9A%E5%8F%AA%E4%BC%9A%E6%9F%A5%E6%89%BE%E5%BD%93%E5%89%8D%E8%8A%82%E7%82%B9%E7%9A%84%E5%AD%90%E8%8A%82%E7%82%B9%E9%82%A3%E4%B8%80%E7%BA%A7%E7%9B%AE%E5%BD%95\"><span class=\"toc-text\">直接子元素的意思：只会查找当前节点的子节点那一级目录</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#1-2-4-%E6%A0%91%E7%BB%93%E6%9E%84%E4%B8%8E-XML-%E5%AD%97%E7%AC%A6%E4%B8%B2%E7%9A%84%E7%9B%B8%E4%BA%92%E8%BD%AC%E6%8D%A2\"><span class=\"toc-text\">1.2.4 树结构与 XML 字符串的相互转换</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#1-3-%E6%95%B0%E6%8D%AE%E5%88%9B%E5%BB%BA\"><span class=\"toc-text\">1.3 数据创建</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#1-3-1-%E5%88%9B%E5%BB%BA%E6%A0%91%E8%8A%82%E7%82%B9\"><span class=\"toc-text\">1.3.1 创建树节点</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#1-3-2-%E8%AE%BE%E7%BD%AE%E6%96%87%E6%9C%AC%EF%BC%88Element-text%EF%BC%89%E6%88%96%E9%99%84%E5%8A%A0%E6%96%87%E6%9C%AC%EF%BC%88Element-tail%EF%BC%89\"><span class=\"toc-text\">1.3.2 设置文本（Element.text）或附加文本（Element.tail）</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#1-3-3-%E6%B7%BB%E5%8A%A0%E5%AD%90%E8%8A%82%E7%82%B9\"><span class=\"toc-text\">1.3.3 添加子节点</span></a></li></ol></li></ol></li></ol>","author":{"name":"YFR718","slug":"blog-author","avatar":"https://avatars.githubusercontent.com/u/47553658?s=400&u=5e0a85700c66d7a2661c5664ec5f24d94e5ed01a&v=4","link":"/","description":"大数据萌新","socials":{"github":"https://github.com/YFR718","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"d","csdn":"","juejin":"","customs":{}}},"mapped":true,"prev_post":{"title":"PyMySQL","uid":"31135c47a98e6bfd7ef6f55be399b5e8","slug":"P2-PyMySQL","date":"2021-11-10T02:06:01.000Z","updated":"2021-11-11T09:59:18.865Z","comments":true,"path":"api/articles/P2-PyMySQL.json","keywords":null,"cover":"https://img-blog.csdnimg.cn/593c816f63e9423bb83bbe395daa3c55.jpg?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBAWUZSNzE4,size_20,color_FFFFFF,t_70,g_se,x_16#pic_center","text":"1. 连接数据库import pymysql # 创建连接对象 conn = pymysql.connect(host='localhost', port=3306, user='root', password='mysql',database='python', charset...","link":"","photos":[],"count_time":{"symbolsCount":"2.5k","symbolsTime":"2 mins."},"categories":[{"name":"Python","slug":"Python","count":4,"path":"api/categories/Python.json"}],"tags":[{"name":"MySQL","slug":"MySQL","count":2,"path":"api/tags/MySQL.json"}],"author":{"name":"YFR718","slug":"blog-author","avatar":"https://avatars.githubusercontent.com/u/47553658?s=400&u=5e0a85700c66d7a2661c5664ec5f24d94e5ed01a&v=4","link":"/","description":"大数据萌新","socials":{"github":"https://github.com/YFR718","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"d","csdn":"","juejin":"","customs":{}}}},"next_post":{"title":"ASCII码","uid":"0e809b380a45c732473fb3fa1636bd4c","slug":"0-计算机基础","date":"2021-11-06T11:52:59.000Z","updated":"2021-11-06T12:03:03.129Z","comments":true,"path":"api/articles/0-计算机基础.json","keywords":null,"cover":"https://img-blog.csdnimg.cn/0d2897569a5e4b65b5df9dc578566164.jpg?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBAWUZSNzE4,size_20,color_FFFFFF,t_70,g_se,x_16#pic_center","text":"ASCII码表格： ASCII值 控制字符 ASCII值 字符 ASCII值 字符 ASCII值 字符 0 NUT 32 (space) 64 @ 96 、 1 SOH 33 ! 65 A 97 a 2 STX 34 “ 66 B 98 b 3 ETX 35 # 67 C 99 ...","link":"","photos":[],"count_time":{"symbolsCount":983,"symbolsTime":"1 mins."},"categories":[{"name":"计算机基础","slug":"计算机基础","count":1,"path":"api/categories/计算机基础.json"}],"tags":[],"author":{"name":"YFR718","slug":"blog-author","avatar":"https://avatars.githubusercontent.com/u/47553658?s=400&u=5e0a85700c66d7a2661c5664ec5f24d94e5ed01a&v=4","link":"/","description":"大数据萌新","socials":{"github":"https://github.com/YFR718","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"d","csdn":"","juejin":"","customs":{}}}}}