{"title":"IO、网络编程","uid":"8bbd211a4ba9676d95abee1aaae0937f","slug":"J5-IO、网络编程","date":"2021-11-12T02:31:03.000Z","updated":"2021-11-24T09:33:10.589Z","comments":true,"path":"api/articles/J5-IO、网络编程.json","keywords":null,"cover":"https://img-blog.csdnimg.cn/b0800299144a42068df6728fac896d25.jpg?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBAWUZSNzE4,size_20,color_FFFFFF,t_70,g_se,x_16#pic_center","content":"<h1 id=\"1-IO流\"><a href=\"#1-IO流\" class=\"headerlink\" title=\"1. IO流\"></a>1. IO流</h1><h2 id=\"1-1-File类的使用\"><a href=\"#1-1-File类的使用\" class=\"headerlink\" title=\"1.1 File类的使用\"></a>1.1 File类的使用</h2><ul>\n<li>java.io.File类：文件和文件目录路径的抽象表示形式，与平台无关</li>\n<li>File 能新建、删除、重命名文件和目录，但 File 不能访问文件内容本身。<br>如果需要访问文件内容本身，则需要使用输入/输出流。  想要在Java程序中表示一个真实存在的文件或录，那么必须有一个File对 象，但是Java程序中的一个File对象，可能没有一个真实存在的文件或目录。 </li>\n<li>File对象可以作为参数传递给流的构造器</li>\n</ul>\n<h3 id=\"常用构造器\"><a href=\"#常用构造器\" class=\"headerlink\" title=\"常用构造器\"></a>常用构造器</h3><ol>\n<li><p>public File(String pathname) </p>\n<p>以pathname为路径创建File对象，可以是绝对路径或者相对路径，如果pathname是相对路径，则默认的当前路径在系统属性user.dir中存储。<br> 绝对路径：是一个固定的路径,从盘符开始<br> 相对路径：是相对于某个位置开始</p>\n</li>\n<li><p>public File(String parent,String child)<br>以parent为父路径，child为子路径创建File对象。 </p>\n</li>\n<li><p>public File(File parent,String child)<br>根据一个父File对象和子文件路径创建File对象</p>\n</li>\n</ol>\n<h3 id=\"路径分隔符\"><a href=\"#路径分隔符\" class=\"headerlink\" title=\"路径分隔符\"></a>路径分隔符</h3><ul>\n<li><p>路径中的每级目录之间用一个路径分隔符隔开。</p>\n</li>\n<li><p>路径分隔符和系统有关：<br> windows和DOS系统默认使用“\\”来表示<br> UNIX和URL使用“/”来表示</p>\n</li>\n<li><p>Java程序支持跨平台运行，因此路径分隔符要慎用。</p>\n</li>\n<li><p>为了解决这个隐患，File类提供了一个常量：<br>public static final String separator。根据操作系统，动态的提供分隔符。</p>\n</li>\n<li><p>举例：</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token class-name\">File</span> file1 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">File</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"d:\\\\atguigu\\\\info.txt\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token class-name\">File</span> file2 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">File</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"d:\"</span> <span class=\"token operator\">+</span> <span class=\"token class-name\">File</span><span class=\"token punctuation\">.</span>separator <span class=\"token operator\">+</span> <span class=\"token string\">\"atguigu\"</span> <span class=\"token operator\">+</span> <span class=\"token class-name\">File</span><span class=\"token punctuation\">.</span>separator <span class=\"token operator\">+</span> <span class=\"token string\">\"info.txt\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token class-name\">File</span> file3 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">File</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"d:/atguigu\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n</li>\n</ul>\n<h3 id=\"常用方法\"><a href=\"#常用方法\" class=\"headerlink\" title=\"常用方法\"></a>常用方法</h3><div class=\"table-container\">\n<table>\n<thead>\n<tr>\n<th>获取方法</th>\n<th>功能</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>public String getAbsolutePath()</td>\n<td>获取绝对路径</td>\n</tr>\n<tr>\n<td>public String getPath()</td>\n<td>获取路径</td>\n</tr>\n<tr>\n<td>public String getName()</td>\n<td>获取名称</td>\n</tr>\n<tr>\n<td>public String getParent()</td>\n<td>获取上层文件目录路径。若无，返回null</td>\n</tr>\n<tr>\n<td>public long length()</td>\n<td>获取文件长度（即：字节数）。不能获取目录的长度。</td>\n</tr>\n<tr>\n<td>public long lastModified()</td>\n<td>获取最后一次的修改时间，毫秒值</td>\n</tr>\n<tr>\n<td>public String[] list()</td>\n<td>获取指定目录下的所有文件或者文件目录的名称数组</td>\n</tr>\n<tr>\n<td>public File[] listFiles()</td>\n<td>获取指定目录下的所有文件或者文件目录的File数组</td>\n</tr>\n<tr>\n<td>public boolean renameTo(File dest)</td>\n<td>把文件重命名为指定的文件路径</td>\n</tr>\n</tbody>\n</table>\n</div>\n<div class=\"table-container\">\n<table>\n<thead>\n<tr>\n<th>判断方法</th>\n<th>功能</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>public boolean isDirectory()</td>\n<td>判断是否是文件目录</td>\n</tr>\n<tr>\n<td>public boolean isFile()</td>\n<td>判断是否是文件</td>\n</tr>\n<tr>\n<td>public boolean exists()</td>\n<td>判断是否存在</td>\n</tr>\n<tr>\n<td>public boolean canRead()</td>\n<td>判断是否可读</td>\n</tr>\n<tr>\n<td>public boolean canWrite()</td>\n<td>判断是否可写</td>\n</tr>\n<tr>\n<td>public boolean isHidden()</td>\n<td>判断是否隐藏</td>\n</tr>\n</tbody>\n</table>\n</div>\n<div class=\"table-container\">\n<table>\n<thead>\n<tr>\n<th>创建和删除方法</th>\n<th>功能</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>public boolean createNewFile()</td>\n<td>创建文件。若文件存在，则不创建，返回false</td>\n</tr>\n<tr>\n<td>public boolean mkdir()</td>\n<td>创建文件目录。如果此文件目录存在，就不创建了。<br>如果此文件目录的上层目录不存在，也不创建。</td>\n</tr>\n<tr>\n<td>public boolean mkdirs()</td>\n<td>创建文件目录。如果上层文件目录不存在，一并创建</td>\n</tr>\n<tr>\n<td>public boolean delete()</td>\n<td>删除文件或者文件夹</td>\n</tr>\n</tbody>\n</table>\n</div>\n<p><strong>注意事项：</strong></p>\n<ol>\n<li><p>如果你创建文件或者文件目录没有写盘符路径，那么，默认在项目路径下。</p>\n</li>\n<li><p>Java中的删除不走<strong>回收站</strong>。 要删除一个文件目录，请注意该文件目录内不能包含文件或者文件目录</p>\n</li>\n</ol>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token class-name\">File</span> dir1 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">File</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"D:/IOTest/dir1\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>dir1<span class=\"token punctuation\">.</span><span class=\"token function\">exists</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token comment\">// 如果D:/IOTest/dir1不存在，就创建为目录</span>\n\tdir1<span class=\"token punctuation\">.</span><span class=\"token function\">mkdir</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token comment\">// 创建以dir1为父目录,名为\"dir2\"的File对象</span>\n<span class=\"token class-name\">File</span> dir2 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">File</span><span class=\"token punctuation\">(</span>dir1<span class=\"token punctuation\">,</span> <span class=\"token string\">\"dir2\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>dir2<span class=\"token punctuation\">.</span><span class=\"token function\">exists</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token comment\">// 如果还不存在，就创建为目录</span>\n\tdir2<span class=\"token punctuation\">.</span><span class=\"token function\">mkdirs</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token class-name\">File</span> dir4 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">File</span><span class=\"token punctuation\">(</span>dir1<span class=\"token punctuation\">,</span> <span class=\"token string\">\"dir3/dir4\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>dir4<span class=\"token punctuation\">.</span><span class=\"token function\">exists</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\tdir4<span class=\"token punctuation\">.</span><span class=\"token function\">mkdirs</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token comment\">// 创建以dir2为父目录,名为\"test.txt\"的File对象</span>\n<span class=\"token class-name\">File</span> file <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">File</span><span class=\"token punctuation\">(</span>dir2<span class=\"token punctuation\">,</span> <span class=\"token string\">\"test.txt\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>file<span class=\"token punctuation\">.</span><span class=\"token function\">exists</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token comment\">// 如果还不存在，就创建为文件</span>\n\tfile<span class=\"token punctuation\">.</span><span class=\"token function\">createNewFile</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h2 id=\"1-2-IO流原理及流的分类\"><a href=\"#1-2-IO流原理及流的分类\" class=\"headerlink\" title=\"1.2 IO流原理及流的分类\"></a>1.2 IO流原理及流的分类</h2><ul>\n<li>I/O是Input/Output的缩写， I/O技术是非常实用的技术，用于处理设备之间的数据传输。如读/写文件，网络通讯等。</li>\n<li>Java程序中，对于数据的输入/输出操作以“流(stream)” 的方式进行。</li>\n<li>java.io包下提供了各种“流”类和接口，用以获取不同种类的数据，并通过标准的方法输入或输出数据。</li>\n</ul>\n<h3 id=\"流的分类\"><a href=\"#流的分类\" class=\"headerlink\" title=\"流的分类\"></a>流的分类</h3><ul>\n<li>按操作数据单位不同分为：字节流(8 bit)，字符流(16 bit)</li>\n<li>按数据流的流向不同分为：输入流，输出流</li>\n<li>按流的角色的不同分为：节点流，处理流</li>\n</ul>\n<div class=\"table-container\">\n<table>\n<thead>\n<tr>\n<th>抽象基类</th>\n<th>字节流</th>\n<th>字符流</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>输入流</td>\n<td>InputStream</td>\n<td>Reader</td>\n</tr>\n<tr>\n<td>输出流</td>\n<td>OutputStream</td>\n<td>Writer</td>\n</tr>\n</tbody>\n</table>\n</div>\n<h3 id=\"IO-流体系\"><a href=\"#IO-流体系\" class=\"headerlink\" title=\"IO 流体系\"></a>IO 流体系</h3><p><img src=\"https://img-blog.csdnimg.cn/13fb2c0189914dd6888c59f5a9e51dee.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBAWUZSNzE4,size_20,color_FFFFFF,t_70,g_se,x_16\" alt=\"\"></p>\n<h3 id=\"节点流和处理流\"><a href=\"#节点流和处理流\" class=\"headerlink\" title=\"节点流和处理流\"></a>节点流和处理流</h3><p><strong>节点流</strong>：直接从数据源或目的地读写数据。</p>\n<p><strong>处理流</strong>：不直接连接到数据源或目的地，而是“连接”在已存在的流（节点流或处理流）之上，通过对数据的处理为程序提供更为强大的读写功能。</p>\n<h3 id=\"InputStream-amp-Reader\"><a href=\"#InputStream-amp-Reader\" class=\"headerlink\" title=\"InputStream & Reader\"></a>InputStream &amp; Reader</h3><ul>\n<li><p>InputStream 和 Reader 是所有输入流的基类。</p>\n</li>\n<li><p>InputStream（典型实现：FileInputStream） int read()<br>int read(byte[] b)<br>int read(byte[] b, int off, int len) </p>\n</li>\n<li><p>Reader（典型实现：FileReader） </p>\n<p>int read()<br>int read(char [] c)</p>\n<p>int read(char [] c, int off, int len) </p>\n</li>\n<li><p>程序中打开的文件 IO 资源不属于内存里的资源，垃圾回收机制无法回收该资源，所以应该显式关闭文件 IO 资源。 </p>\n</li>\n<li>FileInputStream 从文件系统中的某个文件中获得输入字节。FileInputStream 用于读取非文本数据之类的原始字节流。要读取字符流，需要使用 FileReader</li>\n</ul>\n<h3 id=\"InputStream\"><a href=\"#InputStream\" class=\"headerlink\" title=\"InputStream\"></a>InputStream</h3><ol>\n<li>int read()<br>从输入流中读取数据的下一个字节。返回 0 到 255 范围内的 int 字节值。如果因为已经到达流末尾而没有可用的字节，则返回值 -1。 </li>\n<li>int read(byte[] b)<br>从此输入流中将最多 b.length 个字节的数据读入一个 byte 数组中。如果因为已经到达流末尾而没有可用的字节，则返回值 -1。否则以整数形式返回实际读取的字节数。 </li>\n<li>int read(byte[] b, int off,int len)<br>将输入流中最多 len 个数据字节读入 byte 数组。尝试读取 len 个字节，但读取的字节也可能小于该值。以整数形式返回实际读取的字节数。如果因为流位于文件末尾而没有可用的字节，则返回值 -1。 </li>\n<li>public void close() throws IOException<br>关闭此输入流并释放与该流关联的所有系统资源。</li>\n</ol>\n<h3 id=\"Reader\"><a href=\"#Reader\" class=\"headerlink\" title=\"Reader\"></a>Reader</h3><ol>\n<li>int read()<br>读取单个字符。作为整数读取的字符，范围在 0 到 65535 之间 (0x00-0xffff)（2个字节的Unicode码），如果已到达流的末尾，则返回 -1  int read(char[] cbuf)将字符读入数组。如果已到达流的末尾，则返回 -1。否则返回本次读取的字符数。 </li>\n<li>int read(char[] cbuf,int off,int len)<br>将字符读入数组的某一部分。存到数组cbuf中，从off处开始存储，最多读len个字符。如果已到达流的末尾，则返回 -1。否则返回本次读取的字符数。 </li>\n<li>public void close() throws IOException<br>关闭此输入流并释放与该流关联的所有系统资源。</li>\n</ol>\n<h3 id=\"OutputStream-amp-Writer\"><a href=\"#OutputStream-amp-Writer\" class=\"headerlink\" title=\"OutputStream & Writer\"></a>OutputStream &amp; Writer</h3><ol>\n<li>OutputStream 和 Writer 也非常相似：<br>void write(int b/int c);<br>void write(byte[] b/char[] cbuf);<br>void write(byte[] b/char[] buff, int off, int len);<br>void flush();<br>void close(); 需要先刷新，再关闭此流</li>\n<li>因为字符流直接以字符作为操作单位，所以 Writer 可以用字符串来替换字符数组，即以 String 对象作为参数<br> void write(String str);<br> void write(String str, int off, int len);</li>\n<li>FileOutputStream 从文件系统中的某个文件中获得输出字节。FileOutputStream 用于写出非文本数据之类的原始字节流。要写出字符流，需要使用 FileWriter</li>\n</ol>\n<h3 id=\"OutputStream\"><a href=\"#OutputStream\" class=\"headerlink\" title=\"OutputStream\"></a>OutputStream</h3><ol>\n<li>void write(int b)<br>将指定的字节写入此输出流。write 的常规协定是：向输出流写入一个字节。要写入的字节是参数 b 的八个低位。b 的 24 个高位将被忽略。 即写入0~255范围的。 </li>\n<li>void write(byte[] b)<br>将 b.length 个字节从指定的 byte 数组写入此输出流。write(b) 的常规协定是：应该与调用 write(b, 0, b.length) 的效果完全相同。 </li>\n<li>void write(byte[] b,int off,int len)<br>将指定 byte 数组中从偏移量 off 开始的 len 个字节写入此输出流。 </li>\n<li>public void flush()throws IOException<br>刷新此输出流并强制写出所有缓冲的输出字节，调用此方法指示应将这些字节立<br>即写入它们预期的目标。 </li>\n<li>public void close() throws IOException<br>关闭此输出流并释放与该流关联的所有系统资源。</li>\n</ol>\n<h3 id=\"Writer\"><a href=\"#Writer\" class=\"headerlink\" title=\"Writer\"></a>Writer</h3><ol>\n<li>void write(int c)<br>写入单个字符。要写入的字符包含在给定整数值的 16 个低位中，16 高位被忽略。 即写入0 到 65535 之间的Unicode码。  void write(char[] cbuf)写入字符数组。 </li>\n<li>void write(char[] cbuf,int off,int len)写入字符数组的某一部分。从off开始，写入len个字符</li>\n<li>void write(String str)写入字符串。 </li>\n<li>void write(String str,int off,int len)写入字符串的某一部分。 </li>\n<li>void flush()刷新该流的缓冲，则立即将它们写入预期目标。 </li>\n<li>public void close() throws IOException<br>关闭此输出流并释放与该流关联的所有系统资源。</li>\n</ol>\n<h2 id=\"1-3-节点流-或文件流\"><a href=\"#1-3-节点流-或文件流\" class=\"headerlink\" title=\"1.3 节点流(或文件流)\"></a>1.3 节点流(或文件流)</h2><h3 id=\"读取文件\"><a href=\"#读取文件\" class=\"headerlink\" title=\"读取文件\"></a>读取文件</h3><ol>\n<li>建立一个流对象，将已存在的一个文件加载进流。<br>FileReader fr = new FileReader(new File(“Test.txt”));</li>\n<li>创建一个临时存放数据的数组。<br>char[] ch = new char[1024];</li>\n<li><p>调用流对象的读取方法将流中的数据读入到数组中。<br>fr.read(ch);</p>\n</li>\n<li><p>关闭资源。<br>fr.close();</p>\n</li>\n</ol>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token class-name\">FileReader</span> fr <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span>\n    fr <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">FileReader</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">File</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"c:\\\\test.txt\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">char</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> buf <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token keyword\">char</span><span class=\"token punctuation\">[</span><span class=\"token number\">1024</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">int</span> len<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>len <span class=\"token operator\">=</span> fr<span class=\"token punctuation\">.</span><span class=\"token function\">read</span><span class=\"token punctuation\">(</span>buf<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">!=</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    \t<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">(</span>buf<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> len<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">IOException</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"read-Exception :\"</span> <span class=\"token operator\">+</span> e<span class=\"token punctuation\">.</span><span class=\"token function\">getMessage</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span> <span class=\"token keyword\">finally</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>fr <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span>\n            fr<span class=\"token punctuation\">.</span><span class=\"token function\">close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">IOException</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"close-Exception :\"</span> <span class=\"token operator\">+</span> e<span class=\"token punctuation\">.</span><span class=\"token function\">getMessage</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span> \n    <span class=\"token punctuation\">}</span> \n<span class=\"token punctuation\">}</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h3 id=\"写入文件\"><a href=\"#写入文件\" class=\"headerlink\" title=\"写入文件\"></a>写入文件</h3><ol>\n<li>创建流对象，建立数据存放文件<br>FileWriter fw = new FileWriter(new File(“Test.txt”));</li>\n<li>调用流对象的写入方法，将数据写入流<br>fw.write(“atguigu-songhongkang”);</li>\n<li>关闭流资源，并将流中的数据清空到文件中。<br>fw.close();</li>\n</ol>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token class-name\">FileWriter</span> fw <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span>\n\tfw <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">FileWriter</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">File</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Test.txt\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\tfw<span class=\"token punctuation\">.</span><span class=\"token function\">write</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"atguigu-songhongkang\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">IOException</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\te<span class=\"token punctuation\">.</span><span class=\"token function\">printStackTrace</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span> <span class=\"token keyword\">finally</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>fw <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span>\n    \t<span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span>\n    \tfw<span class=\"token punctuation\">.</span><span class=\"token function\">close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    \t<span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">IOException</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    \te<span class=\"token punctuation\">.</span><span class=\"token function\">printStackTrace</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    \t<span class=\"token punctuation\">}</span> \n<span class=\"token punctuation\">}</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p><strong>注意点</strong></p>\n<ul>\n<li>定义文件路径时，注意：可以用“/”或者“<span>\\</span>”。 </li>\n<li>在写入一个文件时，如果使用构造器FileOutputStream(file)，则目录下有同名文件将被覆盖。</li>\n<li>如果使用构造器FileOutputStream(file,true)，则目录下的同名文件不会被覆盖，在文件内容末尾追加内容。</li>\n<li>在读取文件时，必须保证该文件已存在，否则报异常。  字节流操作字节，比如：.mp3，.avi，.rmvb，mp4，.jpg，.doc，.ppt</li>\n<li>字符流操作字符，只能操作普通文本文件。最常见的文本文件：.txt，.java，.c，.cpp 等语言的源代码。尤其注意.doc,excel,ppt这些不是文本文件。</li>\n</ul>\n<h2 id=\"1-4-缓冲流\"><a href=\"#1-4-缓冲流\" class=\"headerlink\" title=\"1.4 缓冲流\"></a>1.4 缓冲流</h2><ul>\n<li><p>为了提高数据读写的速度，Java API提供了带缓冲功能的流类，在使用这些流类时，会创建一个内部缓冲区数组，缺省使用8192个字节(8Kb)的缓冲区。 </p>\n</li>\n<li><p>缓冲流要“套接”在相应的节点流之上，根据数据操作单位可以把缓冲流分为：</p>\n<p>BufferedInputStream 和 BufferedOutputStream</p>\n<p>BufferedReader 和 BufferedWriter </p>\n</li>\n</ul>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token class-name\">BufferedReader</span> br <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n<span class=\"token class-name\">BufferedWriter</span> bw <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// 创建缓冲流对象：它是处理流，是对节点流的包装</span>\n    br <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">BufferedReader</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">FileReader</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"d:\\\\IOTest\\\\source.txt\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    bw <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">BufferedWriter</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">FileWriter</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"d:\\\\IOTest\\\\dest.txt\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token class-name\">String</span> str<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>str <span class=\"token operator\">=</span> br<span class=\"token punctuation\">.</span><span class=\"token function\">readLine</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token comment\">// 一次读取字符文本文件的一行字符</span>\n    \tbw<span class=\"token punctuation\">.</span><span class=\"token function\">write</span><span class=\"token punctuation\">(</span>str<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 一次写入一行字符串</span>\n    \tbw<span class=\"token punctuation\">.</span><span class=\"token function\">newLine</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 写入行分隔符</span>\n    <span class=\"token punctuation\">}</span>\n    bw<span class=\"token punctuation\">.</span><span class=\"token function\">flush</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 刷新缓冲区</span>\n<span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">IOException</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\te<span class=\"token punctuation\">.</span><span class=\"token function\">printStackTrace</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span> <span class=\"token keyword\">finally</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// 关闭IO流对象</span>\n    <span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>bw <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        \tbw<span class=\"token punctuation\">.</span><span class=\"token function\">close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 关闭过滤流时,会自动关闭它所包装的底层节点流</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">IOException</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        e<span class=\"token punctuation\">.</span><span class=\"token function\">printStackTrace</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>br <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        \tbr<span class=\"token punctuation\">.</span><span class=\"token function\">close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">IOException</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    \te<span class=\"token punctuation\">.</span><span class=\"token function\">printStackTrace</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span> \n<span class=\"token punctuation\">}</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h2 id=\"1-5-转换流\"><a href=\"#1-5-转换流\" class=\"headerlink\" title=\"1.5 转换流\"></a>1.5 转换流</h2><ul>\n<li>转换流提供了在字节流和字符流之间的转换</li>\n<li>Java API提供了两个转换流：<br>InputStreamReader：将InputStream转换为Reader<br>OutputStreamWriter：将Writer转换为OutputStream</li>\n<li>字节流中的数据都是字符时，转成字符流操作更高效。 </li>\n<li>很多时候我们使用转换流来处理文件乱码问题。实现编码和解码的功能。</li>\n</ul>\n<h3 id=\"InputStreamReader\"><a href=\"#InputStreamReader\" class=\"headerlink\" title=\"InputStreamReader\"></a>InputStreamReader</h3><ul>\n<li>实现将字节的输入流按指定字符集转换为字符的输入流。</li>\n<li>需要和InputStream“套接”。</li>\n<li>构造器<br>public InputStreamReader(InputStream in)<br>public InputSreamReader(InputStream in,String charsetName)<br>如： Reader isr = new InputStreamReader(System.in,”gbk”);</li>\n</ul>\n<p><strong>OutputStreamWriter</strong></p>\n<ul>\n<li><p>实现将字符的输出流按指定字符集转换为字节的输出流。</p>\n</li>\n<li><p>需要和OutputStream“套接”。</p>\n</li>\n<li><p>构造器 </p>\n</li>\n</ul>\n<p>​         <strong>public OutputStreamWriter(OutputStream out)</strong></p>\n<p>​         <strong>public OutputSreamWriter(OutputStream out,String charsetName)</strong></p>\n<p><img src=\"https://img-blog.csdnimg.cn/5a6c74008b9249de89cb3711e652e624.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBAWUZSNzE4,size_20,color_FFFFFF,t_70,g_se,x_16\" alt=\"\"></p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">testMyInput</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">Exception</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token class-name\">FileInputStream</span> fis <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">FileInputStream</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"dbcp.txt\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token class-name\">FileOutputStream</span> fos <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">FileOutputStream</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"dbcp5.txt\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token class-name\">InputStreamReader</span> isr <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">InputStreamReader</span><span class=\"token punctuation\">(</span>fis<span class=\"token punctuation\">,</span> <span class=\"token string\">\"GBK\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token class-name\">OutputStreamWriter</span> osw <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">OutputStreamWriter</span><span class=\"token punctuation\">(</span>fos<span class=\"token punctuation\">,</span> <span class=\"token string\">\"GBK\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token class-name\">BufferedReader</span> br <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">BufferedReader</span><span class=\"token punctuation\">(</span>isr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token class-name\">BufferedWriter</span> bw <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">BufferedWriter</span><span class=\"token punctuation\">(</span>osw<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token class-name\">String</span> str <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>str <span class=\"token operator\">=</span> br<span class=\"token punctuation\">.</span><span class=\"token function\">readLine</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        bw<span class=\"token punctuation\">.</span><span class=\"token function\">write</span><span class=\"token punctuation\">(</span>str<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        bw<span class=\"token punctuation\">.</span><span class=\"token function\">newLine</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        bw<span class=\"token punctuation\">.</span><span class=\"token function\">flush</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    bw<span class=\"token punctuation\">.</span><span class=\"token function\">close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    br<span class=\"token punctuation\">.</span><span class=\"token function\">close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p><strong>补充：字符编码</strong></p>\n<ul>\n<li>编码表的由来<br>计算机只能识别二进制数据，早期由来是电信号。为了方便应用计算机，让它可以识别各个国家的文字。就将各个国家的文字用数字来表示，并一一对应，形成一张表。这就是编码表。</li>\n<li><p>常见的编码表</p>\n<ol>\n<li>ASCII：美国标准信息交换码。用一个字节的7位可以表示。</li>\n<li>ISO8859-1：拉丁码表。欧洲码表用一个字节的8位表示。</li>\n<li>GB2312：中国的中文编码表。最多两个字节编码所有字符</li>\n<li>GBK：中国的中文编码表升级，融合了更多的中文文字符号。最多两个字节编码</li>\n<li>Unicode：国际标准码，融合了目前人类使用的所有字符。为每个字符分配唯一的字符码。所有的文字都用两个字节来表示。</li>\n<li>UTF-8：变长的编码方式，可用1-4个字节来表示一个字符。</li>\n</ol>\n</li>\n<li><p>Unicode不完美，这里就有三个问题，一个是，我们已经知道，英文字母只用一个字节表示就够了，第二个问题是如何才能区别Unicode和ASCII？计算机怎么知道两个字节表示一个符号，而不是分别表示两个符号呢？第三个，如果和GBK等双字节编码方式一样，用最高位是1或0表示两个字节和一个字节，就少了很多值无法用于表示字符，不够表示所有字符。Unicode在很长一段时间内无法推广，直到互联网的出现。 </p>\n</li>\n<li>面向传输的众多 UTF（UCS Transfer Format）标准出现了，顾名思义，UTF- 8就是每次8个位传输数据，而UTF-16就是每次16个位。这是为传输而设计的编码，并使编码无国界，这样就可以显示全世界上所有文化的字符了。 </li>\n<li>Unicode只是定义了一个庞大的、全球通用的字符集，并为每个字符规定了唯一确定的编号，具体存储成什么样的字节流，取决于字符编码方案。推荐的Unicode编码是UTF-8和UTF-16。</li>\n</ul>\n<p><strong>编码</strong>：字符串字节数组<br><strong>解码</strong>：字节数组字符串<br>转换流的编码应用</p>\n<ul>\n<li>可以将字符按指定编码格式存储</li>\n<li>可以对文本数据按指定编码格式来解读</li>\n<li>指定编码表的动作由构造器完成</li>\n</ul>\n<h2 id=\"1-6-标准输入、输出流\"><a href=\"#1-6-标准输入、输出流\" class=\"headerlink\" title=\"1.6 标准输入、输出流\"></a>1.6 标准输入、输出流</h2><ul>\n<li>System.in和System.out分别代表了系统标准的输入和输出设备</li>\n<li>默认输入设备是：键盘，输出设备是：显示器</li>\n<li>System.in的类型是InputStream</li>\n<li>System.out的类型是PrintStream，其是OutputStream的子类FilterOutputStream 的子类</li>\n<li>重定向：通过System类的setIn，setOut方法对默认设备进行改变。<br>public static void setIn(InputStream in)<br>public static void setOut(PrintStream out)</li>\n</ul>\n<p><strong>例 题</strong></p>\n<p>​        从键盘输入字符串，要求将读取到的整行字符串转成大写输出。然后继续进行输入操作，直至当输入“e”或者“exit”时，退出程序。</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"请输入信息(退出输入e或exit):\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// 把\"标准\"输入流(键盘输入)这个字节流包装成字符流,再包装成缓冲流</span>\n<span class=\"token class-name\">BufferedReader</span> br <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">BufferedReader</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">InputStreamReader</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>in<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token class-name\">String</span> s <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>s <span class=\"token operator\">=</span> br<span class=\"token punctuation\">.</span><span class=\"token function\">readLine</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token comment\">// 读取用户输入的一行数据 --&gt; 阻塞程序</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token string\">\"e\"</span><span class=\"token punctuation\">.</span><span class=\"token function\">equalsIgnoreCase</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">)</span> <span class=\"token operator\">||</span> <span class=\"token string\">\"exit\"</span><span class=\"token punctuation\">.</span><span class=\"token function\">equalsIgnoreCase</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"安全退出!!\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span> \n        <span class=\"token punctuation\">}</span>\n        <span class=\"token comment\">// 将读取到的整行字符串转成大写输出</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"--&gt;:\"</span> <span class=\"token operator\">+</span> s<span class=\"token punctuation\">.</span><span class=\"token function\">toUpperCase</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"继续输入信息\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">IOException</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\te<span class=\"token punctuation\">.</span><span class=\"token function\">printStackTrace</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span> <span class=\"token keyword\">finally</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>br <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            br<span class=\"token punctuation\">.</span><span class=\"token function\">close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 关闭过滤流时,会自动关闭它包装的底层节点流</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">IOException</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    \te<span class=\"token punctuation\">.</span><span class=\"token function\">printStackTrace</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span> \n<span class=\"token punctuation\">}</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h2 id=\"1-7-打印流\"><a href=\"#1-7-打印流\" class=\"headerlink\" title=\"1.7 打印流\"></a>1.7 打印流</h2><ul>\n<li><p>实现将基本数据类型的数据格式转化为字符串输出</p>\n</li>\n<li><p>打印流：PrintStream和PrintWriter<br>提供了一系列重载的print()和println()方法，用于多种数据类型的输出<br>PrintStream和PrintWriter的输出不会抛出IOException异常<br>PrintStream和PrintWriter有自动flush功能<br>PrintStream 打印的所有字符都使用平台的默认字符编码转换为字节。在需要写入字符而不是写入字节的情况下，应该使用 PrintWriter 类。 </p>\n<p>System.out返回的是PrintStream的实例</p>\n</li>\n</ul>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token class-name\">PrintStream</span> ps <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token class-name\">FileOutputStream</span> fos <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">FileOutputStream</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">File</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"D:\\\\IO\\\\text.txt\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">// 创建打印输出流,设置为自动刷新模式(写入换行符或字节 '\\n' 时都会刷新输出缓冲区)</span>\n    ps <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">PrintStream</span><span class=\"token punctuation\">(</span>fos<span class=\"token punctuation\">,</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>ps <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token comment\">// 把标准输出流(控制台输出)改成文件</span>\n    \t<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span><span class=\"token function\">setOut</span><span class=\"token punctuation\">(</span>ps<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;=</span> <span class=\"token number\">255</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token comment\">// 输出ASCII字符</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span><span class=\"token punctuation\">)</span> i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>i <span class=\"token operator\">%</span> <span class=\"token number\">50</span> <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token comment\">// 每50个数据一行</span>\n        \t<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 换行</span>\n        <span class=\"token punctuation\">}</span> \n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">FileNotFoundException</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\te<span class=\"token punctuation\">.</span><span class=\"token function\">printStackTrace</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span> <span class=\"token keyword\">finally</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>ps <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    \tps<span class=\"token punctuation\">.</span><span class=\"token function\">close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span> \n<span class=\"token punctuation\">}</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h2 id=\"1-8-数据流\"><a href=\"#1-8-数据流\" class=\"headerlink\" title=\"1.8 数据流\"></a>1.8 数据流</h2><ul>\n<li>为了方便地操作Java语言的基本数据类型和String的数据，可以使用数据流。</li>\n<li>数据流有两个类：(用于读取和写出基本数据类型、String类的数据）<br>DataInputStream 和 DataOutputStream<br>分别“套接”在 InputStream 和 OutputStream 子类的流上 </li>\n<li>DataInputStream中的方法</li>\n</ul>\n<ol>\n<li>boolean readBoolean()</li>\n<li>byte readByte()</li>\n<li>char readChar() </li>\n<li>float readFloat()</li>\n<li>double readDouble() </li>\n<li>short readShort()</li>\n<li>long readLong() </li>\n<li>int readInt()</li>\n<li>String readUTF() </li>\n<li>void readFully(byte[] b)</li>\n</ol>\n<ul>\n<li>DataOutputStream中的方法</li>\n<li>将上述的方法的read改为相应的write即可。</li>\n</ul>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token class-name\">DataOutputStream</span> dos <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span> <span class=\"token comment\">// 创建连接到指定文件的数据输出流对象</span>\n    dos <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">DataOutputStream</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">FileOutputStream</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"destData.dat\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    dos<span class=\"token punctuation\">.</span><span class=\"token function\">writeUTF</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"我爱北京天安门\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 写UTF字符串</span>\n    dos<span class=\"token punctuation\">.</span><span class=\"token function\">writeBoolean</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 写入布尔值</span>\n    dos<span class=\"token punctuation\">.</span><span class=\"token function\">writeLong</span><span class=\"token punctuation\">(</span><span class=\"token number\">1234567890L</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 写入长整数</span>\n    <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"写文件成功!\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">IOException</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\te<span class=\"token punctuation\">.</span><span class=\"token function\">printStackTrace</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span> <span class=\"token keyword\">finally</span> <span class=\"token punctuation\">{</span> <span class=\"token comment\">// 关闭流对象</span>\n    <span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>dos <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token comment\">// 关闭过滤流时,会自动关闭它包装的底层节点流</span>\n            dos<span class=\"token punctuation\">.</span><span class=\"token function\">close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">IOException</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    \te<span class=\"token punctuation\">.</span><span class=\"token function\">printStackTrace</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span> \n<span class=\"token punctuation\">}</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token class-name\">DataInputStream</span> dis <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span>\n    dis <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">DataInputStream</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">FileInputStream</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"destData.dat\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token class-name\">String</span> info <span class=\"token operator\">=</span> dis<span class=\"token punctuation\">.</span><span class=\"token function\">readUTF</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">boolean</span> flag <span class=\"token operator\">=</span> dis<span class=\"token punctuation\">.</span><span class=\"token function\">readBoolean</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">long</span> time <span class=\"token operator\">=</span> dis<span class=\"token punctuation\">.</span><span class=\"token function\">readLong</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>info<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>flag<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>time<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Exception</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\te<span class=\"token punctuation\">.</span><span class=\"token function\">printStackTrace</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span> <span class=\"token keyword\">finally</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>dis <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span>\n        \tdis<span class=\"token punctuation\">.</span><span class=\"token function\">close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">IOException</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        \te<span class=\"token punctuation\">.</span><span class=\"token function\">printStackTrace</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span> \n    <span class=\"token punctuation\">}</span> \n<span class=\"token punctuation\">}</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h2 id=\"1-9-对象流\"><a href=\"#1-9-对象流\" class=\"headerlink\" title=\"1.9 对象流\"></a>1.9 对象流</h2><h3 id=\"ObjectInputStream和OjbectOutputSteam\"><a href=\"#ObjectInputStream和OjbectOutputSteam\" class=\"headerlink\" title=\"ObjectInputStream和OjbectOutputSteam\"></a>ObjectInputStream和OjbectOutputSteam</h3><ul>\n<li>用于存储和读取基本数据类型数据或对象的处理流。它的强大之处就是可以把Java中的对象写入到数据源中，也能把对象从数据源中还原回来。</li>\n<li>序列化：用ObjectOutputStream类保存基本类型数据或对象的机制</li>\n<li>反序列化：用ObjectInputStream类读取基本类型数据或对象的机制</li>\n<li>ObjectOutputStream和ObjectInputStream不能序列化static和transient修饰的成员变量</li>\n</ul>\n<h3 id=\"对象的序列化\"><a href=\"#对象的序列化\" class=\"headerlink\" title=\"对象的序列化\"></a>对象的序列化</h3><ul>\n<li>对象序列化机制允许把内存中的Java对象转换成平台无关的二进制流，从而允许把这种二进制流持久地保存在磁盘上，或通过网络将这种二进制流传输到另一个网络节点。//当其它程序获取了这种二进制流，就可以恢复成原来的Java对象</li>\n<li>序列化的好处在于可将任何实现了Serializable接口的对象转化为字节数据，使其在保存和传输时可被还原</li>\n<li>序列化是 RMI（Remote Method Invoke – 远程方法调用）过程的参数和返回值都必须实现的机制，而 RMI 是 JavaEE 的基础。因此序列化机制是JavaEE 平台的基础</li>\n<li>如果需要让某个对象支持序列化机制，则必须让对象所属的类及其属性是可序列化的，为了让某个类是可序列化的，该类必须实现如下两个接口之一。否则，会抛出NotSerializableException异常<br>Serializable<br>Externalizable</li>\n<li>凡是实现Serializable接口的类都有一个表示序列化版本标识符的静态变量：<br>private static final long serialVersionUID;<br>serialVersionUID用来表明类的不同版本间的兼容性。简言之，其目的是以序列化对象</li>\n<li>进行版本控制，有关各版本反序列化时是否兼容。<br>如果类没有显示定义这个静态常量，它的值是Java运行时环境根据类的内部细节自动生成的。若类的实例变量做了修改，serialVersionUID 可能发生变化。故建议，显式声明。</li>\n<li>简单来说，Java的序列化机制是通过在运行时判断类的serialVersionUID来验证版本一致性的。在进行反序列化时，JVM会把传来的字节流中的serialVersionUID与本地相应实体类的serialVersionUID进行比较，如果相同就认为是一致的，可以进行反序列化，否则就会出现序列化版本不一致的异常。(InvalidCastException)</li>\n</ul>\n<h3 id=\"使用对象流序列化对象\"><a href=\"#使用对象流序列化对象\" class=\"headerlink\" title=\"使用对象流序列化对象\"></a>使用对象流序列化对象</h3><ul>\n<li>若某个类实现了 Serializable 接口，该类的对象就是可序列化的：<br>创建一个 ObjectOutputStream<br>调用 ObjectOutputStream 对象的 writeObject(对象) 方法输出可序列化对象<br>注意写出一次，操作flush()一次</li>\n<li>反序列化<br>创建一个 ObjectInputStream<br>调用 readObject() 方法读取流中的对象</li>\n<li>强调：如果某个类的属性不是基本数据类型或 String 类型，而是另一个引用类型，那么这个引用类型必须是可序列化的，否则拥有该类型的Field 的类也不能序列化</li>\n</ul>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token comment\">//序列化：将对象写入到磁盘或者进行网络传输。</span>\n<span class=\"token comment\">//要求对象必须实现序列化</span>\n<span class=\"token class-name\">ObjectOutputStream</span> oos <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ObjectOutputStream</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">FileOutputStream</span><span class=\"token punctuation\">(</span>“data<span class=\"token punctuation\">.</span>txt\"<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token class-name\">Person</span> p <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Person</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"韩梅梅\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">18</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"中华大街\"</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Pet</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\noos<span class=\"token punctuation\">.</span><span class=\"token function\">writeObject</span><span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\noos<span class=\"token punctuation\">.</span><span class=\"token function\">flush</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\noos<span class=\"token punctuation\">.</span><span class=\"token function\">close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">//反序列化：将磁盘中的对象数据源读出。</span>\n<span class=\"token class-name\">ObjectInputStream</span> ois <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ObjectInputStream</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">FileInputStream</span><span class=\"token punctuation\">(</span>“data<span class=\"token punctuation\">.</span>txt\"<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token class-name\">Person</span> p1 <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Person</span><span class=\"token punctuation\">)</span>ois<span class=\"token punctuation\">.</span><span class=\"token function\">readObject</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>p1<span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nois<span class=\"token punctuation\">.</span><span class=\"token function\">close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p><strong>谈谈你对java.io.Serializable接口的理解，我们知道它用于序列化，是空方法接口，还有其它认识吗？</strong></p>\n<ul>\n<li>实现了Serializable接口的对象，可将它们转换成一系列字节，并可在以后完全恢复回原来的样子。这一过程亦可通过网络进行。这意味着序列化机制能自动补偿操作系统间的差异。换句话说，可以先在Windows机器上创建一个对象，对其序列化，然后通过网络发给一台Unix机器，然后在那里准确无误地重新“装配”。不必关心数据在不同机器上如何表示，也不必关心字节的顺序或者其他任何细节。</li>\n<li>由于大部分作为参数的类如String、Integer等都实现了java.io.Serializable的接口，也可以利用多态的性质，作为参数使接口更灵活。</li>\n</ul>\n<h2 id=\"1-10-随机存取文件流\"><a href=\"#1-10-随机存取文件流\" class=\"headerlink\" title=\"1.10 随机存取文件流\"></a>1.10 随机存取文件流</h2><h3 id=\"RandomAccessFile-类\"><a href=\"#RandomAccessFile-类\" class=\"headerlink\" title=\"RandomAccessFile 类\"></a>RandomAccessFile 类</h3><ul>\n<li>RandomAccessFile 声明在java.io包下，但直接继承于java.lang.Object类。并且它实现了DataInput、DataOutput这两个接口，也就意味着这个类既可以读也可以写。</li>\n<li>RandomAccessFile 类支持 “随机访问” 的方式，程序可以直接跳到文件的任意地方来读、写文件<ul>\n<li>支持只访问文件的部分内容</li>\n<li>可以向已存在的文件后追加内容</li>\n</ul>\n</li>\n<li>RandomAccessFile 对象包含一个记录指针，用以标示当前读写处的位置。<br>RandomAccessFile 类对象可以自由移动记录指针：<ul>\n<li>long getFilePointer()：获取文件记录指针的当前位置</li>\n<li>void seek(long pos)：将文件记录指针定位到 pos 位置</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"RandomAccessFile-类-1\"><a href=\"#RandomAccessFile-类-1\" class=\"headerlink\" title=\"RandomAccessFile 类\"></a>RandomAccessFile 类</h3><ul>\n<li>构造器<ul>\n<li>public RandomAccessFile(File file, String mode) </li>\n<li>public RandomAccessFile(String name, String mode) </li>\n</ul>\n</li>\n<li>创建 RandomAccessFile 类实例需要指定一个mode 参数，该参数指定 RandomAccessFile 的访问模式：<ul>\n<li>r: 以只读方式打开</li>\n<li>rw：打开以便读取和写入</li>\n<li>rwd:打开以便读取和写入；同步文件内容的更新</li>\n<li>rws:打开以便读取和写入；同步文件内容和元数据的更新</li>\n</ul>\n</li>\n<li>如果模式为只读r。则不会创建文件，而是会去读取一个已经存在的文件，如果读取的文件不存在则会出现异常。 如果模式为rw读写。如果文件不存在则会去创建文件，如果存在则不会创建。</li>\n</ul>\n<p>​        我们可以用RandomAccessFile这个类，来实现一个多线程断点下载的功能，用过下载工具的朋友们都知道，下载前都会建立两个临时文件，一个是与被下载文件大小相同的空文件，另一个是记录文件指针的位置文件，每次暂停的时候，都会保存上一次的指针，然后断点下载的时候，会继续从上一次的地方下载，从而实现断点下载或上传的功能，有兴趣的朋友们可以自己实现下。</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token comment\">//读取文件内容</span>\n<span class=\"token class-name\">RandomAccessFile</span> raf <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">RandomAccessFile</span><span class=\"token punctuation\">(</span>“test<span class=\"token punctuation\">.</span>txt”<span class=\"token punctuation\">,</span> “rw”）<span class=\"token punctuation\">;</span>\nraf<span class=\"token punctuation\">.</span><span class=\"token function\">seek</span><span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">byte</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> b <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token keyword\">byte</span><span class=\"token punctuation\">[</span><span class=\"token number\">1024</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">int</span> off <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">int</span> len <span class=\"token operator\">=</span> <span class=\"token number\">5</span><span class=\"token punctuation\">;</span>\nraf<span class=\"token punctuation\">.</span><span class=\"token function\">read</span><span class=\"token punctuation\">(</span>b<span class=\"token punctuation\">,</span> off<span class=\"token punctuation\">,</span> len<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token class-name\">String</span> str <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">(</span>b<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> len<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>str<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nraf<span class=\"token punctuation\">.</span><span class=\"token function\">close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">//写入文件内容</span>\n<span class=\"token class-name\">RandomAccessFile</span> raf <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">RandomAccessFile</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"test.txt\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"rw\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nraf<span class=\"token punctuation\">.</span><span class=\"token function\">seek</span><span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">//先读出来</span>\n<span class=\"token class-name\">String</span> temp <span class=\"token operator\">=</span> raf<span class=\"token punctuation\">.</span><span class=\"token function\">readLine</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nraf<span class=\"token punctuation\">.</span><span class=\"token function\">seek</span><span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nraf<span class=\"token punctuation\">.</span><span class=\"token function\">write</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"xyz\"</span><span class=\"token punctuation\">.</span><span class=\"token function\">getBytes</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nraf<span class=\"token punctuation\">.</span><span class=\"token function\">write</span><span class=\"token punctuation\">(</span>temp<span class=\"token punctuation\">.</span><span class=\"token function\">getBytes</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nraf<span class=\"token punctuation\">.</span><span class=\"token function\">close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  \n\n<span class=\"token class-name\">RandomAccessFile</span> raf1 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">RandomAccessFile</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"hello.txt\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"rw\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nraf1<span class=\"token punctuation\">.</span><span class=\"token function\">seek</span><span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">//方式一：</span>\n<span class=\"token comment\">//StringBuilder info = new StringBuilder((int) file.length());</span>\n<span class=\"token comment\">//byte[] buffer = new byte[10];</span>\n<span class=\"token comment\">//int len;</span>\n<span class=\"token comment\">//while((len = raf1.read(buffer)) != -1){</span>\n<span class=\"token comment\">////info += new String(buffer,0,len);</span>\n<span class=\"token comment\">//info.append(new String(buffer,0,len));</span>\n<span class=\"token comment\">//}</span>\n<span class=\"token comment\">//方式二：</span>\n<span class=\"token class-name\">ByteArrayOutputStream</span> baos <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ByteArrayOutputStream</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">byte</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> buffer <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token keyword\">byte</span><span class=\"token punctuation\">[</span><span class=\"token number\">10</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">int</span> len<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>len <span class=\"token operator\">=</span> raf1<span class=\"token punctuation\">.</span><span class=\"token function\">read</span><span class=\"token punctuation\">(</span>buffer<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">!=</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\nbaos<span class=\"token punctuation\">.</span><span class=\"token function\">write</span><span class=\"token punctuation\">(</span>buffer<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> len<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\nraf1<span class=\"token punctuation\">.</span><span class=\"token function\">seek</span><span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nraf1<span class=\"token punctuation\">.</span><span class=\"token function\">write</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"xyz\"</span><span class=\"token punctuation\">.</span><span class=\"token function\">getBytes</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nraf1<span class=\"token punctuation\">.</span><span class=\"token function\">write</span><span class=\"token punctuation\">(</span>baos<span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getBytes</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nbaos<span class=\"token punctuation\">.</span><span class=\"token function\">close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nraf1<span class=\"token punctuation\">.</span><span class=\"token function\">close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p><strong>流的基本应用小节</strong></p>\n<ul>\n<li>流是用来处理数据的。</li>\n<li>处理数据时，一定要先明确数据源，与数据目的地<ul>\n<li>数据源可以是文件，可以是键盘。</li>\n<li>数据目的地可以是文件、显示器或者其他设备。</li>\n</ul>\n</li>\n<li>而流只是在帮助数据进行传输,并对传输的数据进行处理，比如过滤处理、转换处理等。</li>\n</ul>\n<h2 id=\"1-11-NIO-2中Path、Paths、-Files类的使用\"><a href=\"#1-11-NIO-2中Path、Paths、-Files类的使用\" class=\"headerlink\" title=\"1.11 NIO.2中Path、Paths、 Files类的使用\"></a>1.11 NIO.2中Path、Paths、 Files类的使用</h2><p>​        Java NIO (New IO，Non-Blocking IO)是从Java 1.4版本开始引入的一套新 的IO API，可以替代标准的Java IO API。NIO与原来的IO有同样的作用和目的，但是使用的方式完全不同，NIO支持面向缓冲区的(IO是面向流的)、基于通道的IO操作。NIO将以更加高效的方式进行文件的读写操作。<br>​        Java API中提供了两套NIO，一套是针对标准输入输出NIO，另一套就是网络编程NIO。 </p>\n<p>|——-java.nio.channels.Channel<br>    |——-FileChannel:处理本地文件<br>    |——-SocketChannel：TCP网络编程的客户端的Channel<br>    |——-ServerSocketChannel:TCP网络编程的服务器端的Channel<br>    |——-DatagramChannel：UDP网络编程中发送端和接收端的Channel</p>\n<p>​        随着 JDK 7 的发布，Java对NIO进行了极大的扩展，增强了对文件处理和文件系统特性的支持，以至于我们称他们为 NIO.2。因为 NIO 提供的一些功能，NIO已经成为文件处理中越来越重要的部分</p>\n<h3 id=\"Path、Paths和Files核心API\"><a href=\"#Path、Paths和Files核心API\" class=\"headerlink\" title=\"Path、Paths和Files核心API\"></a>Path、Paths和Files核心API</h3><ul>\n<li>早期的Java只提供了一个File类来访问文件系统，但File类的功能比较有限，所提供的方法性能也不高。而且，大多数方法在出错时仅返回失败，并不会提供异常信息。</li>\n<li>NIO. 2为了弥补这种不足，引入了Path接口，代表一个平台无关的平台路径，描述了目录结构中文件的位置。Path可以看成是File类的升级版本，实际引用的资源也可以不存在。</li>\n<li>在以前IO操作都是这样写的:<br>import java.io.File;<br>File file = new File(“index.html”);</li>\n<li>但在Java7 中，我们可以这样写：<br>import java.nio.file.Path;<br>import java.nio.file.Paths;<br>Path path = Paths.get(“index.html”);</li>\n<li>同时，NIO.2在java.nio.file包下还提供了Files、Paths工具类，Files包含了大量静态的工具方法来操作文件；Paths则包含了两个返回Path的静态工厂方法。</li>\n<li>Paths 类提供的静态 get() 方法用来获取 Path 对象：<br>static Path get(String first, String … more) : 用于将多个字符串串连成路径<br>static Path get(URI uri): 返回指定uri对应的Path路径</li>\n</ul>\n<div class=\"table-container\">\n<table>\n<thead>\n<tr>\n<th>Path 常用方法</th>\n<th>功能</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>String toString()</td>\n<td>返回调用 Path 对象的字符串表示形式</td>\n</tr>\n<tr>\n<td>boolean startsWith(String path)</td>\n<td>判断是否以 path 路径开始</td>\n</tr>\n<tr>\n<td>boolean endsWith(String path)</td>\n<td>判断是否以 path 路径结束</td>\n</tr>\n<tr>\n<td>boolean isAbsolute()</td>\n<td>判断是否是绝对路径</td>\n</tr>\n<tr>\n<td>Path getParent()</td>\n<td>返回Path对象包含整个路径，不包含 Path 对象指定的文件路径</td>\n</tr>\n<tr>\n<td>Path getRoot()</td>\n<td>返回调用 Path 对象的根路径</td>\n</tr>\n<tr>\n<td>Path getFileName()</td>\n<td>返回与调用 Path 对象关联的文件名</td>\n</tr>\n<tr>\n<td>int getNameCount()</td>\n<td>返回Path 根目录后面元素的数量</td>\n</tr>\n<tr>\n<td>Path getName(int idx)</td>\n<td>返回指定索引位置 idx 的路径名称</td>\n</tr>\n<tr>\n<td>Path toAbsolutePath()</td>\n<td>作为绝对路径返回调用 Path 对象</td>\n</tr>\n<tr>\n<td>Path resolve(Path p)</td>\n<td>合并两个路径，返回合并后的路径对应的Path对象</td>\n</tr>\n<tr>\n<td>File toFile()</td>\n<td>将Path转化为File类的对象</td>\n</tr>\n</tbody>\n</table>\n</div>\n<p><strong> java.nio.file.Files 用于操作文件或目录的工具类。</strong></p>\n<div class=\"table-container\">\n<table>\n<thead>\n<tr>\n<th>Files常用方法</th>\n<th></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Path copy(Path src, Path dest, CopyOption … how)</td>\n<td>文件的复制</td>\n</tr>\n<tr>\n<td>Path createDirectory(Path path, FileAttribute&lt;?&gt; … attr)</td>\n<td>创建一个目录</td>\n</tr>\n<tr>\n<td>Path createFile(Path path, FileAttribute&lt;?&gt; … arr)</td>\n<td>创建一个文件</td>\n</tr>\n<tr>\n<td>void delete(Path path)</td>\n<td>删除一个文件/目录，如果不存在，执行报错</td>\n</tr>\n<tr>\n<td>void deleteIfExists(Path path)</td>\n<td>Path对应的文件/目录如果存在，执行删除</td>\n</tr>\n<tr>\n<td>Path move(Path src, Path dest, CopyOption…how)</td>\n<td>将 src 移动到 dest 位置</td>\n</tr>\n<tr>\n<td>long size(Path path)</td>\n<td>返回 path 指定文件的大小</td>\n</tr>\n</tbody>\n</table>\n</div>\n<div class=\"table-container\">\n<table>\n<thead>\n<tr>\n<th>Files常用方法：用于判断</th>\n<th></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>boolean exists(Path path, LinkOption … opts)</td>\n<td>判断文件是否存在</td>\n</tr>\n<tr>\n<td>boolean isDirectory(Path path, LinkOption … opts)</td>\n<td>判断是否是目录</td>\n</tr>\n<tr>\n<td>boolean isRegularFile(Path path, LinkOption … opts)</td>\n<td>判断是否是文件</td>\n</tr>\n<tr>\n<td>boolean isHidden(Path path)</td>\n<td>判断是否是隐藏文件</td>\n</tr>\n<tr>\n<td>boolean isReadable(Path path)</td>\n<td>判断文件是否可读</td>\n</tr>\n<tr>\n<td>boolean isWritable(Path path)</td>\n<td>判断文件是否可写</td>\n</tr>\n<tr>\n<td>boolean notExists(Path path, LinkOption … opts)</td>\n<td>判断文件是否不存在</td>\n</tr>\n</tbody>\n</table>\n</div>\n<div class=\"table-container\">\n<table>\n<thead>\n<tr>\n<th>Files常用方法：用于操作内容</th>\n<th></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>SeekableByteChannel newByteChannel(Path path, OpenOption…how)</td>\n<td>获取与指定文件的连接，how 指定打开方式。</td>\n</tr>\n<tr>\n<td>DirectoryStream<path> newDirectoryStream(Path path)</path></td>\n<td>打开 path 指定的目录</td>\n</tr>\n<tr>\n<td>InputStream newInputStream(Path path, OpenOption…how</td>\n<td>获取 InputStream 对象</td>\n</tr>\n<tr>\n<td>OutputStream newOutputStream(Path path, OpenOption…how)</td>\n<td>获取 OutputStream 对象</td>\n</tr>\n</tbody>\n</table>\n</div>\n<h1 id=\"2-网络编程\"><a href=\"#2-网络编程\" class=\"headerlink\" title=\"2. 网络编程\"></a>2. 网络编程</h1><h2 id=\"2-1-网络编程概述\"><a href=\"#2-1-网络编程概述\" class=\"headerlink\" title=\"2.1 网络编程概述\"></a>2.1 网络编程概述</h2><ul>\n<li>计算机网络：<br>把分布在不同地理区域的计算机与专门的外部设备用通信线路互连成一个规模大、功能强的网络系统，从而使众多的计算机可以方便地互相传递信息、共享硬件、软件、数据信息等资源。</li>\n<li>网络编程的目的：<br>直接或间接地通过网络协议与其它计算机实现数据交换，进行通讯。</li>\n<li>网络编程中有两个主要的问题：<br>如何准确地定位网络上一台或多台主机；定位主机上的特定的应用<br>找到主机后如何可靠高效地进行数据传输</li>\n</ul>\n<h2 id=\"2-2-网络通信要素概述\"><a href=\"#2-2-网络通信要素概述\" class=\"headerlink\" title=\"2.2 网络通信要素概述\"></a>2.2 网络通信要素概述</h2><p><strong>如何实现网络中的主机互相通信?</strong></p>\n<ul>\n<li>通信双方地址<ul>\n<li>IP</li>\n<li>端口号</li>\n</ul>\n</li>\n<li>一定的规则（即：网络通信协议。有两套参考模型）<br>OSI参考模型：模型过于理想化，未能在因特网上进行广泛推广<br>TCP/IP参考模型(或TCP/IP协议)：事实上的国际标准。</li>\n</ul>\n<p><img src=\"https://img-blog.csdnimg.cn/3a04c25b69054a90af45ca146da20707.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBAWUZSNzE4,size_20,color_FFFFFF,t_70,g_se,x_16\" alt=\"\"></p>\n<h2 id=\"2-3-通信要素1：IP和端口号\"><a href=\"#2-3-通信要素1：IP和端口号\" class=\"headerlink\" title=\"2.3 通信要素1：IP和端口号\"></a>2.3 通信要素1：IP和端口号</h2><p><strong>IP 地址：InetAddress</strong></p>\n<ul>\n<li>唯一的标识 Internet 上的计算机（通信实体）</li>\n<li>本地回环地址(hostAddress)：127.0.0.1 主机名(hostName)：localhost</li>\n<li>IP地址分类方式1：IPV4 和 IPV6<br>IPV4：4个字节组成，4个0-255。大概42亿，30亿都在北美，亚洲4亿。2011年初已经用尽。以点分十进制表示，如192.168.0.1<br>IPV6：128位（16个字节），写成8个无符号整数，每个整数用四个十六进制位表示，数之间用冒号（：）分开，如：3ffe:3201:1401:1280:c8ff:fe4d:db39:1984</li>\n<li>IP地址分类方式2：公网地址(万维网使用)和私有地址(局域网使用)。192.168.开头的就是私有址址，范围即为192.168.0.0—192.168.255.255，专门为组织机构内部使用</li>\n<li>特点：不易记忆</li>\n</ul>\n<p><strong>端口号标识正在计算机上运行的进程（程序）</strong></p>\n<ul>\n<li>不同的进程有不同的端口号</li>\n<li>被规定为一个 16 位的整数 0~65535。  端口分类：<ul>\n<li>公认端口：0~1023。被预先定义的服务通信占用（如：HTTP占用端口80，FTP占用端口21，Telnet占用端口23） </li>\n<li>注册端口：1024~49151。分配给用户进程或应用程序。（如：Tomcat占用端口8080，MySQL占用端口3306，Oracle占用端口1521等）。 </li>\n<li>动态/私有端口：49152~65535。 </li>\n</ul>\n</li>\n<li>端口号与IP地址的组合得出一个网络套接字：Socket。</li>\n</ul>\n<h3 id=\"InetAddress类\"><a href=\"#InetAddress类\" class=\"headerlink\" title=\"InetAddress类\"></a>InetAddress类</h3><ul>\n<li>Internet上的主机有两种方式表示地址：<ul>\n<li>域名(hostName)：www.atguigu.com</li>\n<li>IP 地址(hostAddress)：202.108.35.210</li>\n</ul>\n</li>\n<li>InetAddress类主要表示IP地址，两个子类：Inet4Address、Inet6Address。 </li>\n<li>InetAddress 类 对 象 含 有 一 个 Internet 主 机 地 址 的 域 名 和 IP 地 址 ：www.atguigu.com 和 202.108.35.210。 </li>\n<li><p>域名容易记忆，当在连接网络时输入一个主机的域名后，域名服务器(DNS)负责将域名转化成IP地址，这样才能和主机建立连接。 ———-域名解析</p>\n</li>\n<li><p>InetAddress类没有提供公共的构造器，而是提供了如下几个静态方法来获取InetAddress实例</p>\n<ul>\n<li>public static InetAddress getLocalHost()</li>\n<li>public static InetAddress getByName(String host)</li>\n</ul>\n</li>\n<li>InetAddress提供了如下几个常用的方法<ul>\n<li>public String getHostAddress()：返回 IP 地址字符串（以文本表现形式）。 </li>\n<li>public String getHostName()：获取此 IP 地址的主机名</li>\n<li>public boolean isReachable(int timeout)：测试是否可以达到该地址</li>\n</ul>\n</li>\n</ul>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token class-name\">InetAddress</span> address_ <span class=\"token number\">1</span> <span class=\"token operator\">=</span> <span class=\"token class-name\">InetAddress</span><span class=\"token punctuation\">.</span><span class=\"token function\">getByName</span><span class=\"token punctuation\">(</span> <span class=\"token string\">\"WwW . atguigu. com\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>address_1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">//获取InetAddress 对象所含的域名</span>\n<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">print1n</span><span class=\"token punctuation\">(</span> address_1<span class=\"token punctuation\">.</span><span class=\"token function\">getHostName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">//获取InetAddress 对象所含的IP地址</span>\n<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span> address_1<span class=\"token punctuation\">.</span><span class=\"token function\">getHostAddress</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">//获取本机的域名和IP地址。</span>\n<span class=\"token class-name\">InetAddress</span> address_2 <span class=\"token operator\">=</span> <span class=\"token class-name\">InetAddress</span><span class=\"token punctuation\">.</span><span class=\"token function\">getLocalHost</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>address_2<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">;</span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h2 id=\"2-4-通信要素2：网络协议\"><a href=\"#2-4-通信要素2：网络协议\" class=\"headerlink\" title=\"2.4 通信要素2：网络协议\"></a>2.4 通信要素2：网络协议</h2><p><strong>网络通信协议</strong>:<br>计算机网络中实现通信必须有一些约定，即通信协议，对速率、传输代码、代码结构、传输控制步骤、出错控制等制定标准。 </p>\n<p> <strong>问题</strong>：网络协议太复杂计算机网络通信涉及内容很多，比如指定源地址和目标地址，加密解密，压缩解压缩，差错控制，流量控制，路由控制，如何实现如此复杂的网络协议呢？ </p>\n<p>​        通信协议分层的思想在制定协议时，把复杂成份分解成一些简单的成份，再将它们复合起来。最常用的复合方式是层次方式，即同层间可以通信、上一层可以调用下一层，而与再下一层不发生关系。各层互不影响，利于系统的开发和扩展。</p>\n<h3 id=\"TCP-IP协议簇\"><a href=\"#TCP-IP协议簇\" class=\"headerlink\" title=\"TCP/IP协议簇\"></a>TCP/IP协议簇</h3><ul>\n<li>传输层协议中有两个非常重要的协议：<ul>\n<li>传输控制协议TCP(Transmission Control Protocol)</li>\n<li>用户数据报协议UDP(User Datagram Protocol)。 TCP/IP 以其两个主要协议：传输控制协议(TCP)和网络互联协议(IP)而得<br>名，实际上是一组协议，包括多个具有不同功能且互为关联的协议。</li>\n</ul>\n</li>\n<li>IP(Internet Protocol)协议是网络层的主要协议，支持网间互连的数据通信。</li>\n<li>TCP/IP协议模型从更实用的角度出发，形成了高效的四层体系结构，即物理链路层、IP层、传输层和应用层。</li>\n</ul>\n<h3 id=\"TCP-和-UDP\"><a href=\"#TCP-和-UDP\" class=\"headerlink\" title=\"TCP 和 UDP\"></a>TCP 和 UDP</h3><ul>\n<li>TCP协议：<ul>\n<li>使用TCP协议前，须先建立TCP连接，形成传输数据通道</li>\n<li>传输前，采用“三次握手”方式，点对点通信，是可靠的</li>\n<li>TCP协议进行通信的两个应用进程：客户端、服务端。</li>\n<li>在连接中可进行大数据量的传输</li>\n<li>传输完毕，需释放已建立的连接，效率低</li>\n</ul>\n</li>\n<li>UDP协议：<ul>\n<li>将数据、源、目的封装成数据包，不需要建立连接</li>\n<li>每个数据报的大小限制在64K内 </li>\n<li>发送不管对方是否准备好，接收方收到也不确认，故是不可靠的 </li>\n<li>可以广播发送</li>\n<li>发送数据结束时无需释放资源，开销小，速度快</li>\n</ul>\n</li>\n</ul>\n<p><img src=\"https://img-blog.csdnimg.cn/aeadb474a02b4a1681e00f89373db873.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBAWUZSNzE4,size_20,color_FFFFFF,t_70,g_se,x_16\" alt=\"\"></p>\n<p><img src=\"https://img-blog.csdnimg.cn/19edaba5f23e4dbdab6b492f305cb65e.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBAWUZSNzE4,size_20,color_FFFFFF,t_70,g_se,x_16\" alt=\"\"></p>\n<h3 id=\"Socket\"><a href=\"#Socket\" class=\"headerlink\" title=\"Socket\"></a>Socket</h3><ul>\n<li>利用套接字(Socket)开发网络应用程序早已被广泛的采用，以至于成为事实上的标准。</li>\n<li>网络上具有唯一标识的IP地址和端口号组合在一起才能构成唯一能识别的标<br>识符套接字。 </li>\n<li>通信的两端都要有Socket，是两台机器间通信的端点。  网络通信其实就是Socket间的通信。</li>\n<li>Socket允许程序把网络连接当成一个流，数据在两个Socket间通过IO传输。</li>\n<li>一般主动发起通信的应用程序属客户端，等待通信请求的为服务端。</li>\n<li>Socket分类：<ul>\n<li>流套接字（stream socket）：使用TCP提供可依赖的字节流服务</li>\n<li>数据报套接字（datagram socket）：使用UDP提供“尽力而为”的数据报服务</li>\n</ul>\n</li>\n</ul>\n<p><strong>Socket类的常用构造器：</strong> </p>\n<ul>\n<li>public Socket(InetAddress address,int port)创建一个流套接字并将其连接到指定 IP 地址的指定端口号。 </li>\n<li>public Socket(String host,int port)创建一个流套接字并将其连接到指定主机上的指定端口号。 </li>\n</ul>\n<p><strong>Socket类的常用方法：</strong></p>\n<ul>\n<li>public InputStream getInputStream()返回此套接字的输入流。可以用于接收网络消息</li>\n<li>public OutputStream getOutputStream()返回此套接字的输出流。可以用于发送网络消息</li>\n<li>public InetAddress getInetAddress()此套接字连接到的远程 IP 地址；如果套接字是未连接的，则返回 null。 </li>\n<li>public InetAddress getLocalAddress()获取套接字绑定的本地地址。 即本端的IP地址</li>\n<li>public int getPort()此套接字连接到的远程端口号；如果尚未连接套接字，则返回 0。 </li>\n<li>public int getLocalPort()返回此套接字绑定到的本地端口。 如果尚未绑定套接字，则返回 -1。即本端的<br>端口号。</li>\n<li>public void close()关闭此套接字。套接字被关闭后，便不可在以后的网络连接中使用（即无法重新连接或重新绑定）。需要创建新的套接字对象。 关闭此套接字也将会关闭该套接字的 InputStream 和OutputStream。 </li>\n<li>public void shutdownInput()如果在套接字上调用 shutdownInput() 后从套接字输入流读取内容，则流将返回 EOF（文件结束符）。 即不能在从此套接字的输入流中接收任何数据。 </li>\n<li>public void shutdownOutput()禁用此套接字的输出流。对于 TCP 套接字，任何以前写入的数据都将被发送，并且后跟 TCP 的正常连接终止序列。 如果在套接字上调用 shutdownOutput() 后写入套接字输出流，则该流将抛出 IOException。 即不能通过此套接字的输出流发送任何数据。</li>\n</ul>\n<h2 id=\"2-5-TCP网络编程\"><a href=\"#2-5-TCP网络编程\" class=\"headerlink\" title=\"2.5 TCP网络编程\"></a>2.5 TCP网络编程</h2><p><strong>基于Socket的TCP编程</strong></p>\n<p>Java语言的基于套接字编程分为服务端编程和客户端编程，其通信模型如图所示：</p>\n<p> <img src=\"https://img-blog.csdnimg.cn/21540679e27848808f6a732c4ff17d94.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBAWUZSNzE4,size_20,color_FFFFFF,t_70,g_se,x_16\" alt=\"\"></p>\n<p><strong>客户端Socket的工作过程包含以下四个基本的步骤：</strong></p>\n<ol>\n<li>创建 Socket：根据指定服务端的 IP 地址或端口号构造 Socket 类对象。若服务器端响应，则建立客户端到服务器的通信线路。若连接失败，会出现异常。</li>\n<li>打开连接到 Socket 的输入/出流： 使用 getInputStream()方法获得输入流，使用getOutputStream()方法获得输出流，进行数据传输</li>\n<li>按照一定的协议对 Socket 进行读/写操作：通过输入流读取服务器放入线路的信息（但不能读取自己放入线路的信息），通过输出流将信息写入线程。</li>\n<li>关闭 Socket：断开客户端到服务器的连接，释放线路</li>\n</ol>\n<p><strong>客户端创建Socket对象</strong></p>\n<ul>\n<li>客户端程序可以使用Socket类创建对象，创建的同时会自动向服务器方发起连接。Socket的构造器是： <ul>\n<li>Socket(String host,int port)throws UnknownHostException,IOException：向服务器(域名是<br>host。端口号为port)发起TCP连接，若成功，则创建Socket对象，否则抛出异常。</li>\n<li>Socket(InetAddress address,int port)throws IOException：根据InetAddress对象所表示的<br>IP地址以及端口号port发起连接。</li>\n</ul>\n</li>\n<li>客户端建立socketAtClient对象的过程就是向服务器发出套接字连接请求</li>\n</ul>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token class-name\">Socket</span> s <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> \n<span class=\"token class-name\">Socket</span><span class=\"token punctuation\">(</span>“<span class=\"token number\">192.168</span><span class=\"token number\">.40</span><span class=\"token number\">.165</span>”<span class=\"token punctuation\">,</span><span class=\"token number\">9999</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token class-name\">OutputStream</span> out <span class=\"token operator\">=</span> s<span class=\"token punctuation\">.</span><span class=\"token function\">getOutputStream</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nout<span class=\"token punctuation\">.</span><span class=\"token function\">write</span><span class=\"token punctuation\">(</span><span class=\"token string\">\" hello\"</span><span class=\"token punctuation\">.</span><span class=\"token function\">getBytes</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\ns<span class=\"token punctuation\">.</span><span class=\"token function\">close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p><strong>服务器程序的工作过程包含以下四个基本的步骤：</strong></p>\n<ol>\n<li>调用 ServerSocket(int port) ：创建一个服务器端套接字，并绑定到指定端口上。用于监听客户端的请求。</li>\n<li>调用 accept()：监听连接请求，如果客户端请求连接，则接受连接，返回通信套接字对象。 </li>\n<li>调用 该Socket类对象的 getOutputStream() 和 getInputStream ()：获取输出流和输入流，开始网络数据的发送和接收。</li>\n<li>关闭ServerSocket和Socket对象：客户端访问结束，关闭通信套接字。</li>\n</ol>\n<p><strong>服务器建立</strong> <strong>ServerSocket</strong> <strong>对象</strong></p>\n<ul>\n<li>ServerSocket 对象负责等待客户端请求建立套接字连接，类似邮局某个窗口中的业务员。也就是说，服务器必须事先建立一个等待客户请求建立套接字连接的ServerSocket对象。</li>\n<li>所谓“接收”客户的套接字请求，就是accept()方法会返回一个 Socket 对象</li>\n</ul>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token class-name\">ServerSocket</span> ss <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ServerSocket</span><span class=\"token punctuation\">(</span><span class=\"token number\">9999</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token class-name\">Socket</span> s <span class=\"token operator\">=</span> ss<span class=\"token punctuation\">.</span>accept <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token class-name\">InputStream</span> in <span class=\"token operator\">=</span> s<span class=\"token punctuation\">.</span><span class=\"token function\">getInputStream</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">byte</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> buf <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token keyword\">byte</span><span class=\"token punctuation\">[</span><span class=\"token number\">1024</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">int</span> num <span class=\"token operator\">=</span> in<span class=\"token punctuation\">.</span><span class=\"token function\">read</span><span class=\"token punctuation\">(</span>buf<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token class-name\">String</span> str <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">(</span>buf<span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span>num<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">.</span><span class=\"token function\">getInetAddress</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">+</span>”<span class=\"token operator\">:</span>”<span class=\"token operator\">+</span>str<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\ns<span class=\"token punctuation\">.</span><span class=\"token function\">close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nss<span class=\"token punctuation\">.</span><span class=\"token function\">close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h2 id=\"2-6-UDP网络编程\"><a href=\"#2-6-UDP网络编程\" class=\"headerlink\" title=\"2.6 UDP网络编程\"></a>2.6 UDP网络编程</h2><ul>\n<li>类 DatagramSocket 和 DatagramPacket 实现了基于 UDP 协议网络程序。</li>\n<li>UDP数据报通过数据报套接字 DatagramSocket 发送和接收，系统不保证UDP数据报一定能够安全送到目的地，也不能确定什么时候可以抵达。</li>\n<li>DatagramPacket 对象封装了UDP数据报，在数据报中包含了发送端的IP地址和端口号以及接收端的IP地址和端口号。</li>\n<li>UDP协议中每个数据报都给出了完整的地址信息，因此无须建立发送方和接收方的连接。如同发快递包裹一样。</li>\n</ul>\n<p><strong>DatagramSocket</strong> <strong>类的常用方法</strong></p>\n<ul>\n<li>public DatagramSocket(int port)创建数据报套接字并将其绑定到本地主机上的指定端口。套接字将被绑定到通配符地址，IP 地址由内核来选择。 </li>\n<li>public DatagramSocket(int port,InetAddress laddr)创建数据报套接字，将其绑定到指定的本地地址。<br>本地端口必须在 0 到 65535 之间（包括两者）。如果 IP 地址为 0.0.0.0，套接字将被绑定到通配符地址，IP 地址由内核选择。 </li>\n<li>public void close()关闭此数据报套接字。 </li>\n<li>public void send(DatagramPacket p)从此套接字发送数据报包。DatagramPacket 包含的信息指示：将要发送的数据、其长度、远程主机的 IP 地址和远程主机的端口号。 </li>\n<li>public void receive(DatagramPacket p)从此套接字接收数据报包。当此方法返回时，DatagramPacket的缓冲区填充了接收的数据。数据报包也包含发送方的 IP 地址和发送方机器上的端口号。 此方法在接收到数据报前一直阻塞。数据报包对象的 length 字段包含所接收信息的长度。如果信息比包的长度长，该信息将被截短。 </li>\n<li>public InetAddress getLocalAddress()获取套接字绑定的本地地址。 </li>\n<li>public int getLocalPort()返回此套接字绑定的本地主机上的端口号。 </li>\n<li>public InetAddress getInetAddress()返回此套接字连接的地址。如果套接字未连接，则返回 null。 </li>\n<li>public int getPort()返回此套接字的端口。如果套接字未连接，则返回 -1。</li>\n</ul>\n<p><strong>DatagramPacket类的常用方法</strong></p>\n<ul>\n<li>public DatagramPacket(byte[] buf,int length)构造 DatagramPacket，用来接收长度为 length 的数据包。 length 参数必须小于等于 buf.length。 </li>\n<li>public DatagramPacket(byte[] buf,int length,InetAddress address,int port)构造数据报包，用来将长度为 length 的包发送到指定主机上的指定端口号。length参数必须小于等于 buf.length。 </li>\n<li>public InetAddress getAddress()返回某台机器的 IP 地址，此数据报将要发往该机器或者是从该机器接收到的。 </li>\n<li>public int getPort()返回某台远程主机的端口号，此数据报将要发往该主机或者是从该主机接收到的。 </li>\n<li>public byte[] getData()返回数据缓冲区。接收到的或将要发送的数据从缓冲区中的偏移量 offset 处开始，持续 length 长度。  public int getLength()返回将要发送或接收到的数据的长度。</li>\n</ul>\n<p><strong>UDP网络通信流 程：</strong></p>\n<ol>\n<li>DatagramSocket与DatagramPacket</li>\n<li>建立发送端，接收端</li>\n<li>建立数据包</li>\n<li>调用Socket的发送、接收方法</li>\n<li>关闭Socket，发送端与接收端是两个独立的运行程序</li>\n</ol>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token comment\">//发送端</span>\n<span class=\"token class-name\">DatagramSocket</span> ds <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span>\n    ds <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">DatagramSocket</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">byte</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> by <span class=\"token operator\">=</span> <span class=\"token string\">\"hello,atguigu.com\"</span><span class=\"token punctuation\">.</span><span class=\"token function\">getBytes</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token class-name\">DatagramPacket</span> dp <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">DatagramPacket</span><span class=\"token punctuation\">(</span>by<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> by<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">,</span> \n    <span class=\"token class-name\">InetAddress</span><span class=\"token punctuation\">.</span><span class=\"token function\">getByName</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"127.0.0.1\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">10000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    ds<span class=\"token punctuation\">.</span><span class=\"token function\">send</span><span class=\"token punctuation\">(</span>dp<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Exception</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\te<span class=\"token punctuation\">.</span><span class=\"token function\">printStackTrace</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span> <span class=\"token keyword\">finally</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>ds <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span>\n    \tds<span class=\"token punctuation\">.</span><span class=\"token function\">close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">//接收端 在接收端，要指定监听的端口。</span>\n<span class=\"token class-name\">DatagramSocket</span> ds <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span>\n    ds <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">DatagramSocket</span><span class=\"token punctuation\">(</span><span class=\"token number\">10000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">byte</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> by <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token keyword\">byte</span><span class=\"token punctuation\">[</span><span class=\"token number\">1024</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token class-name\">DatagramPacket</span> dp <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">DatagramPacket</span><span class=\"token punctuation\">(</span>by<span class=\"token punctuation\">,</span> by<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    ds<span class=\"token punctuation\">.</span><span class=\"token function\">receive</span><span class=\"token punctuation\">(</span>dp<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token class-name\">String</span> str <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">(</span>dp<span class=\"token punctuation\">.</span><span class=\"token function\">getData</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> dp<span class=\"token punctuation\">.</span><span class=\"token function\">getLength</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>str <span class=\"token operator\">+</span> <span class=\"token string\">\"--\"</span> <span class=\"token operator\">+</span> dp<span class=\"token punctuation\">.</span><span class=\"token function\">getAddress</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Exception</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\te<span class=\"token punctuation\">.</span><span class=\"token function\">printStackTrace</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span> <span class=\"token keyword\">finally</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>ds <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span>\n    \tds<span class=\"token punctuation\">.</span><span class=\"token function\">close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h2 id=\"2-7-URL编程\"><a href=\"#2-7-URL编程\" class=\"headerlink\" title=\"2.7 URL编程\"></a>2.7 URL编程</h2><h3 id=\"URL类\"><a href=\"#URL类\" class=\"headerlink\" title=\"URL类\"></a>URL类</h3><ul>\n<li>URL(Uniform Resource Locator)：统一资源定位符，它表示 Internet 上某一资源的地址。 </li>\n<li>它是一种具体的URI，即URL可以用来标识一个资源，而且还指明了如何locate这个资源。</li>\n<li>通过 URL 我们可以访问 Internet 上的各种网络资源，比如最常见的 www，ftp 站点。浏览器通过解析给定的 URL 可以在网络上查找相应的文件或其他资源。</li>\n<li>URL的基本结构由5部分组成： &lt;传输协议&gt;://&lt;主机名&gt;:&lt;端口号&gt;/&lt;文件名&gt;#片段名?参数列表<br>例如: <a href=\"http://192.168.1.100:8080/helloworld/index.jsp#a?username=shkstart&amp;password=123\">http://192.168.1.100:8080/helloworld/index.jsp#a?username=shkstart&amp;password=123</a><h1 id=\"片段名：即锚点，例如看小说，直接定位到章节\"><a href=\"#片段名：即锚点，例如看小说，直接定位到章节\" class=\"headerlink\" title=\"片段名：即锚点，例如看小说，直接定位到章节\"></a>片段名：即锚点，例如看小说，直接定位到章节</h1>参数列表格式：参数名=参数值&amp;参数名=参数值….</li>\n</ul>\n<p><strong>URL类构造器</strong></p>\n<ul>\n<li>为了表示URL，java.net 中实现了类 URL。我们可以通过下面的构造器来初始化一个 URL 对象：</li>\n<li>public URL (String spec)：通过一个表示URL地址的字符串可以构造一个URL对象。例<br>如：URL url = new URL (“<a href=\"http://www\">http://www</a>. atguigu.com/“); </li>\n<li>public URL(URL context, String spec)：通过基 URL 和相对 URL 构造一个 URL 对象。<br>例如：URL downloadUrl = new URL(url, “download.html”)</li>\n<li>public URL(String protocol, String host, String file); 例如：new URL(“http”,<br>“www.atguigu.com”, “download. html”);</li>\n<li>public URL(String protocol, String host, int port, String file); 例如: URL gamelan = new<br>URL(“http”, “www.atguigu.com”, 80, “download.html”);</li>\n<li>URL类的构造器都声明抛出非运行时异常，必须要对这一异常进行处理，通<br>常是用 try-catch 语句进行捕获。</li>\n</ul>\n<p><strong>一个URL对象生成后，其属性是不能被改变的，但可以通过它给定的方法来获取这些属性：</strong></p>\n<ul>\n<li>public String getProtocol( ) 获取该URL的协议名</li>\n<li>public String getHost( ) 获取该URL的主机名</li>\n<li>public String getPort( ) 获取该URL的端口号</li>\n<li>public String getPath( ) 获取该URL的文件路径</li>\n<li>public String getFile( ) 获取该URL的文件名</li>\n<li>public String getQuery( ) 获取该URL的查询名</li>\n</ul>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token class-name\">URL</span> url <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token function\">URL</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"http://localhost:8080/examples/myTest.txt\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"getProtocol() :\"</span><span class=\"token operator\">+</span>url<span class=\"token punctuation\">.</span><span class=\"token function\">getProtocol</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"getHost() :\"</span><span class=\"token operator\">+</span>url<span class=\"token punctuation\">.</span><span class=\"token function\">getHost</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"getPort() :\"</span><span class=\"token operator\">+</span>url<span class=\"token punctuation\">.</span><span class=\"token function\">getPort</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"getPath() :\"</span><span class=\"token operator\">+</span>url<span class=\"token punctuation\">.</span><span class=\"token function\">getPath</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"getFile() :\"</span><span class=\"token operator\">+</span>url<span class=\"token punctuation\">.</span><span class=\"token function\">getFile</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"getQuery() :\"</span><span class=\"token operator\">+</span>url<span class=\"token punctuation\">.</span><span class=\"token function\">getQuery</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h3 id=\"URLConnection类\"><a href=\"#URLConnection类\" class=\"headerlink\" title=\"URLConnection类\"></a>URLConnection类</h3><ul>\n<li>URL的方法 openStream()：能从网络上读取数据</li>\n<li>若希望输出数据，例如向服务器端的 CGI （公共网关接口-Common Gateway Interface-的简称，是用户浏览器和服务器端的应用程序进行连接的接口）程序发送一些数据，则必须先与URL建立连接，然后才能对其进行读写，此时需要使用URLConnection 。 </li>\n<li>URLConnection：表示到URL所引用的远程对象的连接。当与一个URL建立连接时，首先要在一个 URL 对象上通过方法 openConnection() 生成对应的 URLConnection对象。如果连接过程失败，将产生IOException. </li>\n<li>URL netchinaren = new URL (“<a href=\"http://www.atguigu.com/index.shtml\">http://www.atguigu.com/index.shtml</a>“); </li>\n<li>URLConnectonn u = netchinaren.openConnection( ); </li>\n</ul>\n<p><strong>通过URLConnection对象获取的输入流和输出流，即可以与现有的CGI程序进行交互。</strong></p>\n<ul>\n<li>public Object getContent( ) throws IOException</li>\n<li>public int getContentLength( )</li>\n<li>public String getContentType( )</li>\n<li>public long getDate( )</li>\n<li>public long getLastModified( )</li>\n<li>public InputStream getInputStream( )throws IOException</li>\n<li>public OutputSteram getOutputStream( )throws IOException</li>\n</ul>\n<p><strong>URI、URL和URN的区别</strong><br>        URI，是uniform resource identifier，统一资源标识符，用来唯一的标识一个资源。而URL是uniform resource locator，统一资源定位符，它是一种具体的URI，即URL可以用来标识一个资源，而且还指明了如何locate这个资源。</p>\n<p>​        而URN，uniform resource name，统一资源命名，是通过名字来标识资源，比如mailto:java-net@java.sun.com。也就是说，URI是以一种抽象的，高层次概念定义统一资源标识，而URL和URN则是具体的资源标识的方式。</p>\n<p>​        URL和URN都是一种URI。 在Java的URI中，一个URI实例可以代表绝对的，也可以是相对的，只要它符合URI的语法规则。而URL类则不仅符合语义，还包含了定位该资源的信息，因此它不能是相对的。</p>\n<h2 id=\"小-结\"><a href=\"#小-结\" class=\"headerlink\" title=\"小 结\"></a>小 结</h2><ol>\n<li>位于网络中的计算机具有唯一的IP地址，这样不同的主机可以互相区分。</li>\n<li>客户端－服务器是一种最常见的网络应用程序模型。服务器是一个为其客户端提供某种特定服务的硬件或软件。客户机是一个用户应用程序，用于访问某台服务器提供的服务。端口号是对一个服务的访问场所，它用于区分同一物理计算机上的多个服务。套接字用于连接客户端和服务器，客户端和服务器之间的每个通信会话使用一个不同的套接字。TCP协议用于实现面向连接的会话。</li>\n<li>Java 中有关网络方面的功能都定义在 java.net 程序包中。Java 用 InetAddress 对象表示 IP 地址，该对象里有两个字段：主机名(String) 和 IP 地址(int)。 类 Socket 和 ServerSocket 实现了基于TCP协议的客户端－服务器程序。Socket是客户端和服务器之间的一个连接，连接创建的细节被隐藏了。这个连接提供了一个安全的数据传输通道，这是因为 TCP 协议可以解决数据在传送过程中的丢失、损坏、重复、乱序以及网络拥挤等问题，它保证数据可靠的传送。</li>\n<li>类 URL 和 URLConnection 提供了最高级网络应用。URL 的网络资源的位置来同一表示Internet 上各种网络资源。通过URL对象可以创建当前应用程序和 URL 表示的网络资源之间的连接，这样当前程序就可以读取网络资源数据，或者把自己的数据传送到网络上去。</li>\n</ol>\n","text":"1. IO流1.1 File类的使用 java.io.File类：文件和文件目录路径的抽象表示形式，与平台无关 File 能新建、删除、重命名文件和目录，但 File 不能访问文件内容本身。如果需要访问文件内容本身，则需要使用输入/输出流。  想要在Java程序中表示一个真实存...","link":"","photos":[],"count_time":{"symbolsCount":"31k","symbolsTime":"28 mins."},"categories":[{"name":"JAVA","slug":"JAVA","count":9,"path":"api/categories/JAVA.json"}],"tags":[{"name":"java","slug":"java","count":8,"path":"api/tags/java.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#1-IO%E6%B5%81\"><span class=\"toc-text\">1. IO流</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#1-1-File%E7%B1%BB%E7%9A%84%E4%BD%BF%E7%94%A8\"><span class=\"toc-text\">1.1 File类的使用</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%B8%B8%E7%94%A8%E6%9E%84%E9%80%A0%E5%99%A8\"><span class=\"toc-text\">常用构造器</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E8%B7%AF%E5%BE%84%E5%88%86%E9%9A%94%E7%AC%A6\"><span class=\"toc-text\">路径分隔符</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%B8%B8%E7%94%A8%E6%96%B9%E6%B3%95\"><span class=\"toc-text\">常用方法</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#1-2-IO%E6%B5%81%E5%8E%9F%E7%90%86%E5%8F%8A%E6%B5%81%E7%9A%84%E5%88%86%E7%B1%BB\"><span class=\"toc-text\">1.2 IO流原理及流的分类</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E6%B5%81%E7%9A%84%E5%88%86%E7%B1%BB\"><span class=\"toc-text\">流的分类</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#IO-%E6%B5%81%E4%BD%93%E7%B3%BB\"><span class=\"toc-text\">IO 流体系</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E8%8A%82%E7%82%B9%E6%B5%81%E5%92%8C%E5%A4%84%E7%90%86%E6%B5%81\"><span class=\"toc-text\">节点流和处理流</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#InputStream-amp-Reader\"><span class=\"toc-text\">InputStream &amp; Reader</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#InputStream\"><span class=\"toc-text\">InputStream</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#Reader\"><span class=\"toc-text\">Reader</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#OutputStream-amp-Writer\"><span class=\"toc-text\">OutputStream &amp; Writer</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#OutputStream\"><span class=\"toc-text\">OutputStream</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#Writer\"><span class=\"toc-text\">Writer</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#1-3-%E8%8A%82%E7%82%B9%E6%B5%81-%E6%88%96%E6%96%87%E4%BB%B6%E6%B5%81\"><span class=\"toc-text\">1.3 节点流(或文件流)</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E8%AF%BB%E5%8F%96%E6%96%87%E4%BB%B6\"><span class=\"toc-text\">读取文件</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%86%99%E5%85%A5%E6%96%87%E4%BB%B6\"><span class=\"toc-text\">写入文件</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#1-4-%E7%BC%93%E5%86%B2%E6%B5%81\"><span class=\"toc-text\">1.4 缓冲流</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#1-5-%E8%BD%AC%E6%8D%A2%E6%B5%81\"><span class=\"toc-text\">1.5 转换流</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#InputStreamReader\"><span class=\"toc-text\">InputStreamReader</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#1-6-%E6%A0%87%E5%87%86%E8%BE%93%E5%85%A5%E3%80%81%E8%BE%93%E5%87%BA%E6%B5%81\"><span class=\"toc-text\">1.6 标准输入、输出流</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#1-7-%E6%89%93%E5%8D%B0%E6%B5%81\"><span class=\"toc-text\">1.7 打印流</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#1-8-%E6%95%B0%E6%8D%AE%E6%B5%81\"><span class=\"toc-text\">1.8 数据流</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#1-9-%E5%AF%B9%E8%B1%A1%E6%B5%81\"><span class=\"toc-text\">1.9 对象流</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#ObjectInputStream%E5%92%8COjbectOutputSteam\"><span class=\"toc-text\">ObjectInputStream和OjbectOutputSteam</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%AF%B9%E8%B1%A1%E7%9A%84%E5%BA%8F%E5%88%97%E5%8C%96\"><span class=\"toc-text\">对象的序列化</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E4%BD%BF%E7%94%A8%E5%AF%B9%E8%B1%A1%E6%B5%81%E5%BA%8F%E5%88%97%E5%8C%96%E5%AF%B9%E8%B1%A1\"><span class=\"toc-text\">使用对象流序列化对象</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#1-10-%E9%9A%8F%E6%9C%BA%E5%AD%98%E5%8F%96%E6%96%87%E4%BB%B6%E6%B5%81\"><span class=\"toc-text\">1.10 随机存取文件流</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#RandomAccessFile-%E7%B1%BB\"><span class=\"toc-text\">RandomAccessFile 类</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#RandomAccessFile-%E7%B1%BB-1\"><span class=\"toc-text\">RandomAccessFile 类</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#1-11-NIO-2%E4%B8%ADPath%E3%80%81Paths%E3%80%81-Files%E7%B1%BB%E7%9A%84%E4%BD%BF%E7%94%A8\"><span class=\"toc-text\">1.11 NIO.2中Path、Paths、 Files类的使用</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#Path%E3%80%81Paths%E5%92%8CFiles%E6%A0%B8%E5%BF%83API\"><span class=\"toc-text\">Path、Paths和Files核心API</span></a></li></ol></li></ol></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#2-%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B\"><span class=\"toc-text\">2. 网络编程</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#2-1-%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B%E6%A6%82%E8%BF%B0\"><span class=\"toc-text\">2.1 网络编程概述</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#2-2-%E7%BD%91%E7%BB%9C%E9%80%9A%E4%BF%A1%E8%A6%81%E7%B4%A0%E6%A6%82%E8%BF%B0\"><span class=\"toc-text\">2.2 网络通信要素概述</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#2-3-%E9%80%9A%E4%BF%A1%E8%A6%81%E7%B4%A01%EF%BC%9AIP%E5%92%8C%E7%AB%AF%E5%8F%A3%E5%8F%B7\"><span class=\"toc-text\">2.3 通信要素1：IP和端口号</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#InetAddress%E7%B1%BB\"><span class=\"toc-text\">InetAddress类</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#2-4-%E9%80%9A%E4%BF%A1%E8%A6%81%E7%B4%A02%EF%BC%9A%E7%BD%91%E7%BB%9C%E5%8D%8F%E8%AE%AE\"><span class=\"toc-text\">2.4 通信要素2：网络协议</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#TCP-IP%E5%8D%8F%E8%AE%AE%E7%B0%87\"><span class=\"toc-text\">TCP&#x2F;IP协议簇</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#TCP-%E5%92%8C-UDP\"><span class=\"toc-text\">TCP 和 UDP</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#Socket\"><span class=\"toc-text\">Socket</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#2-5-TCP%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B\"><span class=\"toc-text\">2.5 TCP网络编程</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#2-6-UDP%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B\"><span class=\"toc-text\">2.6 UDP网络编程</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#2-7-URL%E7%BC%96%E7%A8%8B\"><span class=\"toc-text\">2.7 URL编程</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#URL%E7%B1%BB\"><span class=\"toc-text\">URL类</span></a></li></ol></li></ol></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E7%89%87%E6%AE%B5%E5%90%8D%EF%BC%9A%E5%8D%B3%E9%94%9A%E7%82%B9%EF%BC%8C%E4%BE%8B%E5%A6%82%E7%9C%8B%E5%B0%8F%E8%AF%B4%EF%BC%8C%E7%9B%B4%E6%8E%A5%E5%AE%9A%E4%BD%8D%E5%88%B0%E7%AB%A0%E8%8A%82\"><span class=\"toc-text\">片段名：即锚点，例如看小说，直接定位到章节</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#URLConnection%E7%B1%BB\"><span class=\"toc-text\">URLConnection类</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%B0%8F-%E7%BB%93\"><span class=\"toc-text\">小 结</span></a></li></ol></li></ol>","author":{"name":"YFR718","slug":"blog-author","avatar":"https://avatars.githubusercontent.com/u/47553658?s=400&u=5e0a85700c66d7a2661c5664ec5f24d94e5ed01a&v=4","link":"/","description":"大数据萌新","socials":{"github":"https://github.com/YFR718","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"d","csdn":"","juejin":"","customs":{}}},"mapped":true,"prev_post":{"title":"反射、新特性","uid":"9a9e7d03fd63b8b9dd7648918fd31ad5","slug":"J6-反射、新特性","date":"2021-11-12T02:31:21.000Z","updated":"2021-11-25T06:40:58.918Z","comments":true,"path":"api/articles/J6-反射、新特性.json","keywords":null,"cover":"https://img-blog.csdnimg.cn/64f64be78a9b4ed28b7623027f591b4b.jpg?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBAWUZSNzE4,size_20,color_FFFFFF,t_70,g_se,x_16#pic_center","text":"1. Java反射机制1.1 Java反射机制概述 Reflection（反射）是被视为动态语言的关键，反射机制允许程序在执行期借助于Reflection API取得任何类的内部信息，并能直接操作任意对象的内部属性及方法。 加载完类之后，在堆内存的方法区中就产生了一个Class类...","link":"","photos":[],"count_time":{"symbolsCount":"45k","symbolsTime":"41 mins."},"categories":[{"name":"JAVA","slug":"JAVA","count":9,"path":"api/categories/JAVA.json"}],"tags":[{"name":"java","slug":"java","count":8,"path":"api/tags/java.json"}],"author":{"name":"YFR718","slug":"blog-author","avatar":"https://avatars.githubusercontent.com/u/47553658?s=400&u=5e0a85700c66d7a2661c5664ec5f24d94e5ed01a&v=4","link":"/","description":"大数据萌新","socials":{"github":"https://github.com/YFR718","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"d","csdn":"","juejin":"","customs":{}}}},"next_post":{"title":"集合、泛型","uid":"a3bf914b929f60f3127d07c8144366a0","slug":"J4-集合、泛型","date":"2021-11-12T02:30:35.000Z","updated":"2021-11-24T07:31:23.778Z","comments":true,"path":"api/articles/J4-集合、泛型.json","keywords":null,"cover":"https://img-blog.csdnimg.cn/2cd6d6a421f1455fb6a93e78ffeefd47.jpg?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBAWUZSNzE4,size_20,color_FFFFFF,t_70,g_se,x_16#pic_center","text":"1. Java集合1.1 Java集合框架概述Java 集合可分为 Collection 和 Map 两种体系 Collection接口：单列数据，定义了存取一组对象的方法的集合List：元素有序、可重复的集合Set：元素无序、不可重复的集合 Map接口：双列数据，保存具有映射关...","link":"","photos":[],"count_time":{"symbolsCount":"23k","symbolsTime":"21 mins."},"categories":[{"name":"JAVA","slug":"JAVA","count":9,"path":"api/categories/JAVA.json"}],"tags":[{"name":"java","slug":"java","count":8,"path":"api/tags/java.json"}],"author":{"name":"YFR718","slug":"blog-author","avatar":"https://avatars.githubusercontent.com/u/47553658?s=400&u=5e0a85700c66d7a2661c5664ec5f24d94e5ed01a&v=4","link":"/","description":"大数据萌新","socials":{"github":"https://github.com/YFR718","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"d","csdn":"","juejin":"","customs":{}}}}}