{"title":"J5.对象与类","uid":"f8534e8f12d0bc66698739d3b7153c65","slug":"J6-对象与类","date":"2021-11-05T06:23:36.000Z","updated":"2021-11-05T09:30:44.211Z","comments":true,"path":"api/articles/J6-对象与类.json","keywords":null,"cover":"https://img-blog.csdnimg.cn/ce3cebf7632b4003bbd0eca49e0b1a6b.jpg?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBAWUZSNzE4,size_20,color_FFFFFF,t_70,g_se,x_16","content":"<h1 id=\"面向对象编程OOP\"><a href=\"#面向对象编程OOP\" class=\"headerlink\" title=\"面向对象编程OOP\"></a>面向对象编程OOP</h1><p>类(Class)和对象(Object)是面向对象的核心概念。</p>\n<ul>\n<li>类是对一类事物的描述，是抽象的、概念上的定义</li>\n<li>对象是实际存在的该类事物的每个个体，因而也称为实例(instance)。</li>\n<li>属 性：对应类中的成员变量</li>\n<li>行 为：对应类中的成员方法</li>\n<li>由类构造（construct）对象的过程称为创建类的实例（instance）。</li>\n</ul>\n<p><strong>创建Java自定义类</strong></p>\n<ol>\n<li>定义类（考虑修饰符、类名）</li>\n<li>编写类的属性（考虑修饰符、属性类型、属性名、初始化值）</li>\n<li>编写类的方法（考虑修饰符、返回值类型、方法名、形参等）</li>\n</ol>\n<p><strong>对象的创建和使用</strong></p>\n<p>创建对象语法： 类名 对象名 = new 类名();<br>使用“对象名.对象成员”的方式访问对象成员（包括属性和方法）</p>\n<h2 id=\"属性\"><a href=\"#属性\" class=\"headerlink\" title=\"属性\"></a><strong>属性</strong></h2><p>修饰符 数据类型 属性名 = 初始化值 ; </p>\n<ol>\n<li>修饰符：常用的权限修饰符有：private、缺省、protected、public，其他修饰符：static、final (暂不考虑)</li>\n<li>数据类型：任何基本数据类型(如int、Boolean) 或 任何引用数据类型。</li>\n<li>属性名：属于标识符，符合命名规则和规范即可。</li>\n</ol>\n<p><strong>变量的分类：成员变量与局部变量</strong></p>\n<p><img src=\"https://img-blog.csdnimg.cn/79283e0561fa499c90823c4447a3579b.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBAWUZSNzE4,size_20,color_FFFFFF,t_70,g_se,x_16\" alt=\"\"></p>\n<div class=\"table-container\">\n<table>\n<thead>\n<tr>\n<th></th>\n<th>成员变量</th>\n<th>局部变量</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>声明的位置</td>\n<td>直接声明在类中</td>\n<td>方法形参或内部、代码块内、构造器内等</td>\n</tr>\n<tr>\n<td>修饰符</td>\n<td>private、public、static、final等</td>\n<td>不能用权限修饰符修饰，可以用final修饰</td>\n</tr>\n<tr>\n<td>初始化值</td>\n<td>有默认初始化值</td>\n<td>没有默认初始化值，必须显式赋值，方可使用</td>\n</tr>\n<tr>\n<td>内存加载位置</td>\n<td>堆空间 或 静态域内</td>\n<td>栈空间</td>\n</tr>\n</tbody>\n</table>\n</div>\n<h2 id=\"方法\"><a href=\"#方法\" class=\"headerlink\" title=\"方法\"></a>方法</h2><ul>\n<li>方法是类或对象行为特征的抽象，用来完成某个功能操作。在某些语言中也称为函数或过程。</li>\n<li>将功能封装为方法的目的是，可以实现代码重用，简化代码</li>\n<li>Java里的方法不能独立存在，所有的方法必须定义在类里。</li>\n</ul>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token comment\">// 方法的声明格式：</span>\n修饰符  返回值类型  方法名（参数类型形参<span class=\"token number\">1</span><span class=\"token punctuation\">,</span> 参数类型形参<span class=\"token number\">2</span><span class=\"token punctuation\">,</span> …<span class=\"token punctuation\">.</span>）｛\n    方法体程序代码\n    <span class=\"token keyword\">return</span> 返回值<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>修饰符：public,缺省,private, protected等返回值类型：</p>\n<p>返回值类型：没有返回值：void，有返回值，声明出返回值的类型。与方法体中“return 返回值”搭配使用</p>\n<p>方法名：属于标识符，命名时遵循标识符命名规则和规范，“见名知意” </p>\n<p>形参列表：可以包含零个，一个或多个参数。多个参数时，中间用“,”隔开返回值：方法在执行完毕后返还给调用它的程序的数据。</p>\n<h3 id=\"main方法\"><a href=\"#main方法\" class=\"headerlink\" title=\"main方法\"></a>main方法</h3><div class=\"table-container\">\n<table>\n<thead>\n<tr>\n<th>main方法</th>\n<th></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>public</td>\n<td>由于Java虚拟机需要调用类的main()方法，所以该方法的访问权限必须是public</td>\n</tr>\n<tr>\n<td>static</td>\n<td>因为Java虚拟机在执行main()方法时不必创建对象，所以该方法必须是static的</td>\n</tr>\n<tr>\n<td>String[] args</td>\n<td>该方法接收一个String类型的数组参数，该数组中保存执行Java命令时传递给所运行的类的参数</td>\n</tr>\n</tbody>\n</table>\n</div>\n<h3 id=\"代码块\"><a href=\"#代码块\" class=\"headerlink\" title=\"代码块\"></a>代码块</h3><p>代码块(或初始化块)的作用： 对Java类或对象进行初始化<br>代码块(或初始化块)的分类：一个类中代码块若有修饰符，则只能被static修饰，称为静态代码块(static block)，没有使用static修饰的，为非静态代码块。</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token comment\">// static代码块通常用于初始化static的属性</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Person</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">int</span> total<span class=\"token punctuation\">;</span> \n    <span class=\"token keyword\">static</span> <span class=\"token punctuation\">{</span>\n        total <span class=\"token operator\">=</span> <span class=\"token number\">100</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//为total赋初值</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<ul>\n<li>静态代码块：用static 修饰的代码块</li>\n</ul>\n<ol>\n<li>可以有输出语句。</li>\n<li>可以对类的属性、类的声明进行初始化操作。</li>\n<li>不可以对非静态的属性初始化。即：不可以调用非静态的属性和方法。</li>\n<li>若有多个静态的代码块，那么按照从上到下的顺序依次执行。</li>\n<li>静态代码块的执行要先于非静态代码块。</li>\n<li>静态代码块随着类的加载而加载，且只执行一次。</li>\n</ol>\n<ul>\n<li>非静态代码块：没有static修饰的代码块</li>\n</ul>\n<ol>\n<li>可以有输出语句。</li>\n<li>可以对类的属性、类的声明进行初始化操作。</li>\n<li>除了调用非静态的结构外，还可以调用静态的变量或方法。</li>\n<li>若有多个非静态的代码块，那么按照从上到下的顺序依次执行。</li>\n<li>每次创建对象的时候，都会执行一次。且先于构造器执行。</li>\n</ol>\n<p><strong>⭐程序中成员变量赋值的执行顺序</strong></p>\n<ol>\n<li>声明成员变量的默认初始化</li>\n<li>显式初始化、多个初始化块依次被执行（同级别下按先后顺序执行）</li>\n<li>构造器再对成员进行初始化操作</li>\n<li>通过”对象.属性”或”对象.方法”的方式，可多次给属性赋值</li>\n</ol>\n<h3 id=\"重载-overload\"><a href=\"#重载-overload\" class=\"headerlink\" title=\"重载 overload\"></a>重载 overload</h3><p>在同一个类中，允许存在一个以上的==同名方法==，只要它们的==参数个数或者参数类型==不同即可。</p>\n<p>==与返回值类型无关==，只看参数列表，且参数列表必须不同。(参数个数或参数类型)。调用时，根据方法参数列表的不同来区别。</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token comment\">//返回两个整数的和</span>\n<span class=\"token keyword\">int</span> <span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> x<span class=\"token punctuation\">,</span><span class=\"token keyword\">int</span> y<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span><span class=\"token keyword\">return</span> x<span class=\"token operator\">+</span>y<span class=\"token punctuation\">;</span><span class=\"token punctuation\">}</span>\n<span class=\"token comment\">//返回三个整数的和</span>\n<span class=\"token keyword\">int</span> <span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> x<span class=\"token punctuation\">,</span><span class=\"token keyword\">int</span> y<span class=\"token punctuation\">,</span><span class=\"token keyword\">int</span> z<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span><span class=\"token keyword\">return</span> x<span class=\"token operator\">+</span>y<span class=\"token operator\">+</span>z<span class=\"token punctuation\">;</span><span class=\"token punctuation\">}</span> \n<span class=\"token comment\">//返回两个小数的和</span>\n<span class=\"token keyword\">double</span> <span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">double</span> x<span class=\"token punctuation\">,</span><span class=\"token keyword\">double</span> y<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span><span class=\"token keyword\">return</span> x<span class=\"token operator\">+</span>y<span class=\"token punctuation\">;</span><span class=\"token punctuation\">}</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h3 id=\"可变个数的形参\"><a href=\"#可变个数的形参\" class=\"headerlink\" title=\"可变个数的形参\"></a>可变个数的形参</h3><pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">test</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> a <span class=\"token punctuation\">,</span><span class=\"token class-name\">String</span>…books<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<ol>\n<li>可变参数：方法参数部分指定类型的参数个数是可变多个：0个，1个或多个</li>\n<li>可变个数形参的方法与同名的方法之间，彼此构成重载</li>\n<li>可变参数方法的使用与方法参数部分使用数组是一致的</li>\n<li>方法的参数部分有可变形参，需要放在形参声明的最后</li>\n<li>在一个方法的形参位置，最多只能声明一个可变个数形参</li>\n</ol>\n<h3 id=\"方法参数的值传递机制\"><a href=\"#方法参数的值传递机制\" class=\"headerlink\" title=\"方法参数的值传递机制\"></a>方法参数的值传递机制</h3><p>    形参：方法声明时的参数<br>    实参：方法调用时实际传给形参的参数值</p>\n<p>Java里方法的参数传递方式只有一种：值传递。 即将实际参数值的副本（复制品）传入方法内，而参数本身不受影响。</p>\n<p>    形参是基本数据类型：将实参基本数据类型变量的“数据值”传递给形参<br>    形参是引用数据类型：将实参引用数据类型变量的“地址值”传递给形参</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> arr <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token number\">10</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//地址值</span>\n<span class=\"token keyword\">char</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> arr1 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token keyword\">char</span><span class=\"token punctuation\">[</span><span class=\"token number\">10</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>arr1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//内容</span>\n<span class=\"token comment\">//源码解析</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Object</span> x<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token class-name\">String</span> s <span class=\"token operator\">=</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">.</span><span class=\"token function\">valueOf</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">synchronized</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token function\">print</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token function\">newLine</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span> x<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">synchronized</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token function\">print</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token function\">newLine</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h3 id=\"构造器-或构造方法\"><a href=\"#构造器-或构造方法\" class=\"headerlink\" title=\"构造器 (或构造方法)\"></a>构造器 (或构造方法)</h3><p>构造器的特征</p>\n<ol>\n<li>它具有与类相同的名称</li>\n<li>它不声明返回值类型。（与声明为void不同）</li>\n<li>不能被static、final、synchronized、abstract、native修饰，不能有return语句返回值</li>\n</ol>\n<p>构造器的作用：创建对象；给对象进行初始化</p>\n<ul>\n<li>如：Order o = new Order();    Person p = new Person(“Peter”,15);</li>\n<li>如同我们规定每个“人”一出生就必须先洗澡，我们就可以在“人”的构造器中加入完成“洗澡”的程序代码，于是每个“人”一出生就会自动完成“洗澡”，程序就不必再在每个人刚出生时一个一个地告诉他们要“洗澡”了。</li>\n</ul>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token comment\">// 语法格式：</span>\n修饰符 类名 <span class=\"token punctuation\">(</span>参数列表<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    初始化语句<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n<p>根据参数不同，构造器可以分为如下两类：<br>    隐式无参构造器（系统默认提供）<br>    显式定义一个或多个构造器（无参、有参）<br>注 意：<br>    Java语言中，每个类都至少有一个构造器<br>    默认构造器的修饰符与所属类的修饰符一致<br>    一旦显式定义了构造器，则系统不再提供默认构造器<br>    一个类可以创建多个重载的构造器<br>    父类的构造器不可被子类继承</p>\n<p><strong>构造器重载</strong></p>\n<p>构造器重载使得对象的创建更加灵活，方便创建各种不同的对象。</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token comment\">// 构造器重载举例：</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Person</span><span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">Person</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> name<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> age<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Date</span> d<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">,</span>age<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>…<span class=\"token punctuation\">}</span> \n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">Person</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> name<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> age<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>…<span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">Person</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> name<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Date</span> d<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>…<span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">Person</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>…<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h3 id=\"关键字—this\"><a href=\"#关键字—this\" class=\"headerlink\" title=\"关键字—this\"></a>关键字—this</h3><p>    它在方法内部使用，即这个方法所属对象的引用；<br>    它在构造器内部使用，表示该构造器正在初始化的对象。</p>\n<p>this 可以调用类的属性、方法和构造器</p>\n<p>什么时候使用this关键字呢？<br>    当在方法内需要用到调用该方法的对象时，就用this。<br>具体的：我们可以用this来区分属性和局部变量。比如：this.name = name;</p>\n<p>⭐this可以作为一个类中构造器相互调用的特殊格式</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Person</span><span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">//定义Person类</span>\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> name <span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">int</span> age <span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">Person</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">//无参构造器</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"新对象实例化\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">Person</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> name <span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//调用本类中的无参构造器</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> name <span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">Person</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> name<span class=\"token punctuation\">,</span><span class=\"token keyword\">int</span> age<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 调用有一个参数的构造器</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>age <span class=\"token operator\">=</span> age<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> <span class=\"token function\">getInfo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token string\">\"姓名: \"</span><span class=\"token operator\">+</span>name<span class=\"token operator\">+</span><span class=\"token string\">\"，年龄:\"</span><span class=\"token operator\">+</span>age<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>    可以在类的构造器中使用”this(形参列表)”的方式，调用本类中重载的其他的构造器！<br>    明确：构造器中不能通过”this(形参列表)”的方式调用自身构造器<br>    如果一个类中声明了n个构造器，则最多有 n - 1个构造器中使用了”this(形参列表)”<br>    “this(形参列表)”必须声明在类的构造器的首行！<br>    在类的一个构造器中，最多只能声明一个”this(形参列表)”</p>\n","feature":true,"text":"面向对象编程OOP类(Class)和对象(Object)是面向对象的核心概念。 类是对一类事物的描述，是抽象的、概念上的定义 对象是实际存在的该类事物的每个个体，因而也称为实例(instance)。 属 性：对应类中的成员变量 行 为：对应类中的成员方法 由类构造（constru...","link":"","photos":[],"count_time":{"symbolsCount":"4.5k","symbolsTime":"4 mins."},"categories":[{"name":"JAVA","slug":"JAVA","count":7,"path":"api/categories/JAVA.json"}],"tags":[{"name":"java","slug":"java","count":7,"path":"api/tags/java.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%BC%96%E7%A8%8BOOP\"><span class=\"toc-text\">面向对象编程OOP</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%B1%9E%E6%80%A7\"><span class=\"toc-text\">属性</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E6%96%B9%E6%B3%95\"><span class=\"toc-text\">方法</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#main%E6%96%B9%E6%B3%95\"><span class=\"toc-text\">main方法</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E4%BB%A3%E7%A0%81%E5%9D%97\"><span class=\"toc-text\">代码块</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E9%87%8D%E8%BD%BD-overload\"><span class=\"toc-text\">重载 overload</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%8F%AF%E5%8F%98%E4%B8%AA%E6%95%B0%E7%9A%84%E5%BD%A2%E5%8F%82\"><span class=\"toc-text\">可变个数的形参</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E6%96%B9%E6%B3%95%E5%8F%82%E6%95%B0%E7%9A%84%E5%80%BC%E4%BC%A0%E9%80%92%E6%9C%BA%E5%88%B6\"><span class=\"toc-text\">方法参数的值传递机制</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E6%9E%84%E9%80%A0%E5%99%A8-%E6%88%96%E6%9E%84%E9%80%A0%E6%96%B9%E6%B3%95\"><span class=\"toc-text\">构造器 (或构造方法)</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%85%B3%E9%94%AE%E5%AD%97%E2%80%94this\"><span class=\"toc-text\">关键字—this</span></a></li></ol></li></ol></li></ol>","author":{"name":"YFR718","slug":"blog-author","avatar":"https://avatars.githubusercontent.com/u/47553658?s=400&u=5e0a85700c66d7a2661c5664ec5f24d94e5ed01a&v=4","link":"/","description":"大数据萌新","socials":{"github":"https://github.com/YFR718","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"d","csdn":"","juejin":"","customs":{}}},"mapped":true,"prev_post":{},"next_post":{"title":"数组","uid":"e16187d7a3c490f96b788338bdd79d24","slug":"J5-数组","date":"2021-11-05T03:24:52.000Z","updated":"2021-11-05T05:49:43.975Z","comments":true,"path":"api/articles/J5-数组.json","keywords":null,"cover":"https://img-blog.csdnimg.cn/ce3cebf7632b4003bbd0eca49e0b1a6b.jpg?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBAWUZSNzE4,size_20,color_FFFFFF,t_70,g_se,x_16","text":"Java数组数组(Array)，是多个相同类型数据按一定顺序排列的集合，并使用一个名字命名，并通过编号的方式对这些数据进行统一管理。 数组的常见概念 数组名 下标(或索引) 元素 数组的长度 一维数组的创建与使用// 一维数组的声明方式： type var[] 或 type[] ...","link":"","photos":[],"count_time":{"symbolsCount":"2.3k","symbolsTime":"2 mins."},"categories":[{"name":"JAVA","slug":"JAVA","count":7,"path":"api/categories/JAVA.json"}],"tags":[{"name":"java","slug":"java","count":7,"path":"api/tags/java.json"}],"author":{"name":"YFR718","slug":"blog-author","avatar":"https://avatars.githubusercontent.com/u/47553658?s=400&u=5e0a85700c66d7a2661c5664ec5f24d94e5ed01a&v=4","link":"/","description":"大数据萌新","socials":{"github":"https://github.com/YFR718","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"d","csdn":"","juejin":"","customs":{}}},"feature":true}}